Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-41 -5 -41 -41] -41] [[-46 -46 -46 -2] -46] [[1 1 1 -70] -70] [[100 -61 100 100] -61] [[50 50 3 50] 3] [[32 9 9 9] 9] [[10 48 48 48] 10] [[-81 -77 -77 -77] -81] [[30 30 66 30] 30] [[18 -92 -92 -92] -92] [(10 10 10 10) 10] [(27 27 27 27) 27] [(-67 -67 -67 -67) -67] [(85 85 85 85) 85] [(-87 -87 -87 -87) -87] [(36 10 81 33) 10] [(97 83 53 9) 9] [(73 58 92 96) 58] [(76 68 41 44) 41] [(58 4 28 49) 4] [(36 95 14 93) 14] [(48 58 24 92) 24] [(24 38 77 42) 24] [(11 89 87 65) 11] [(96 38 43 13) 13] [(62 89 13 30) 13] [(31 86 69 52) 31] [(35 54 96 24) 24] [(76 54 2 90) 2] [(47 64 3 57) 3] [(66 41 47 81) 41] [(6 35 95 26) 6] [(40 86 68 80) 40] [(32 75 62 56) 32] [(29 86 31 79) 29] [(70 100 43 47) 43] [(26 -45 -5 -48) -48] [(64 -47 1 33) -47] [(-33 52 -18 42) -33] [(19 -47 -60 31) -60] [(32 89 95 -73) -73] [(-19 57 65 -51) -51] [(-87 14 92 -73) -87] [(48 -79 -66 4) -79] [(50 39 66 -35) -35] [(-19 -7 -90 71) -90] [(60 -48 -26 4) -48] [(-17 -63 37 78) -63] [(-39 78 70 20) -39] [(64 54 -47 3) -47] [(16 76 42 -54) -54] [(-17 5 93 -32) -32] [(-39 48 15 16) -39] [(7 35 -13 -23) -23] [(20 16 -77 40) -77] [(-47 -47 78 -54) -54] [(76 51 20 21) 20] [(-84 -72 -37 -14) -84] [(75 34 -41 73) -41] [(-63 3 55 -34) -63] [(15 81 -6 -55) -55] [(-76 39 -14 -92) -92] [(66 -99 41 99) -99] [(16 74 61 -84) -84] [(51 51 96 -1) -1] [(47 16 74 -41) -41] [(80 -74 -66 -11) -74] [(35 82 42 -94) -94] [(93 -35 -34 59) -35] [(-98 -92 -7 93) -98] [(43 -76 98 -46) -76] [(23 -31 100 94) -31] [(-19 -84 -36 0) -84] [(97 4 4 -33) -33] [(56 -73 31 70) -73] [(-8 7 26 57) -8] [(41 -70 33 -78) -78] [(76 57 -27 29) -27] [(20 -93 -58 70) -93] [(68 68 -70 -19) -70] [(31 28 -56 3) -56] [(-60 28 -61 47) -61] [(-37 -73 -72 -31) -73] [(51 5 -4 -59) -59] [(75 -24 24 -84) -84] [(-93 95 68 -74) -93] [(85 -28 -61 42) -61] [(-57 -99 -52 76) -99] [(-21 39 49 46) -21] [(-34 -67 -30 79) -67] [(-1 -45 -48 3) -48] [(15 -12 -44 -37) -44] [(-63 28 8 -48) -63] [(-45 -41 41 -38) -45] [(-28 -25 -61 -3) -61])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-41 -5 -41 -41] -41]
Train Case:   6 | Input/Output: [[-46 -46 -46 -2] -46]
Train Case:   7 | Input/Output: [[1 1 1 -70] -70]
Train Case:   8 | Input/Output: [[100 -61 100 100] -61]
Train Case:   9 | Input/Output: [[50 50 3 50] 3]
Train Case:  10 | Input/Output: [[32 9 9 9] 9]
Train Case:  11 | Input/Output: [[10 48 48 48] 10]
Train Case:  12 | Input/Output: [[-81 -77 -77 -77] -81]
Train Case:  13 | Input/Output: [[30 30 66 30] 30]
Train Case:  14 | Input/Output: [[18 -92 -92 -92] -92]
Train Case:  15 | Input/Output: [(10 10 10 10) 10]
Train Case:  16 | Input/Output: [(27 27 27 27) 27]
Train Case:  17 | Input/Output: [(-67 -67 -67 -67) -67]
Train Case:  18 | Input/Output: [(85 85 85 85) 85]
Train Case:  19 | Input/Output: [(-87 -87 -87 -87) -87]
Train Case:  20 | Input/Output: [(36 10 81 33) 10]
Train Case:  21 | Input/Output: [(97 83 53 9) 9]
Train Case:  22 | Input/Output: [(73 58 92 96) 58]
Train Case:  23 | Input/Output: [(76 68 41 44) 41]
Train Case:  24 | Input/Output: [(58 4 28 49) 4]
Train Case:  25 | Input/Output: [(36 95 14 93) 14]
Train Case:  26 | Input/Output: [(48 58 24 92) 24]
Train Case:  27 | Input/Output: [(24 38 77 42) 24]
Train Case:  28 | Input/Output: [(11 89 87 65) 11]
Train Case:  29 | Input/Output: [(96 38 43 13) 13]
Train Case:  30 | Input/Output: [(62 89 13 30) 13]
Train Case:  31 | Input/Output: [(31 86 69 52) 31]
Train Case:  32 | Input/Output: [(35 54 96 24) 24]
Train Case:  33 | Input/Output: [(76 54 2 90) 2]
Train Case:  34 | Input/Output: [(47 64 3 57) 3]
Train Case:  35 | Input/Output: [(66 41 47 81) 41]
Train Case:  36 | Input/Output: [(6 35 95 26) 6]
Train Case:  37 | Input/Output: [(40 86 68 80) 40]
Train Case:  38 | Input/Output: [(32 75 62 56) 32]
Train Case:  39 | Input/Output: [(29 86 31 79) 29]
Train Case:  40 | Input/Output: [(70 100 43 47) 43]
Train Case:  41 | Input/Output: [(26 -45 -5 -48) -48]
Train Case:  42 | Input/Output: [(64 -47 1 33) -47]
Train Case:  43 | Input/Output: [(-33 52 -18 42) -33]
Train Case:  44 | Input/Output: [(19 -47 -60 31) -60]
Train Case:  45 | Input/Output: [(32 89 95 -73) -73]
Train Case:  46 | Input/Output: [(-19 57 65 -51) -51]
Train Case:  47 | Input/Output: [(-87 14 92 -73) -87]
Train Case:  48 | Input/Output: [(48 -79 -66 4) -79]
Train Case:  49 | Input/Output: [(50 39 66 -35) -35]
Train Case:  50 | Input/Output: [(-19 -7 -90 71) -90]
Train Case:  51 | Input/Output: [(60 -48 -26 4) -48]
Train Case:  52 | Input/Output: [(-17 -63 37 78) -63]
Train Case:  53 | Input/Output: [(-39 78 70 20) -39]
Train Case:  54 | Input/Output: [(64 54 -47 3) -47]
Train Case:  55 | Input/Output: [(16 76 42 -54) -54]
Train Case:  56 | Input/Output: [(-17 5 93 -32) -32]
Train Case:  57 | Input/Output: [(-39 48 15 16) -39]
Train Case:  58 | Input/Output: [(7 35 -13 -23) -23]
Train Case:  59 | Input/Output: [(20 16 -77 40) -77]
Train Case:  60 | Input/Output: [(-47 -47 78 -54) -54]
Train Case:  61 | Input/Output: [(76 51 20 21) 20]
Train Case:  62 | Input/Output: [(-84 -72 -37 -14) -84]
Train Case:  63 | Input/Output: [(75 34 -41 73) -41]
Train Case:  64 | Input/Output: [(-63 3 55 -34) -63]
Train Case:  65 | Input/Output: [(15 81 -6 -55) -55]
Train Case:  66 | Input/Output: [(-76 39 -14 -92) -92]
Train Case:  67 | Input/Output: [(66 -99 41 99) -99]
Train Case:  68 | Input/Output: [(16 74 61 -84) -84]
Train Case:  69 | Input/Output: [(51 51 96 -1) -1]
Train Case:  70 | Input/Output: [(47 16 74 -41) -41]
Train Case:  71 | Input/Output: [(80 -74 -66 -11) -74]
Train Case:  72 | Input/Output: [(35 82 42 -94) -94]
Train Case:  73 | Input/Output: [(93 -35 -34 59) -35]
Train Case:  74 | Input/Output: [(-98 -92 -7 93) -98]
Train Case:  75 | Input/Output: [(43 -76 98 -46) -76]
Train Case:  76 | Input/Output: [(23 -31 100 94) -31]
Train Case:  77 | Input/Output: [(-19 -84 -36 0) -84]
Train Case:  78 | Input/Output: [(97 4 4 -33) -33]
Train Case:  79 | Input/Output: [(56 -73 31 70) -73]
Train Case:  80 | Input/Output: [(-8 7 26 57) -8]
Train Case:  81 | Input/Output: [(41 -70 33 -78) -78]
Train Case:  82 | Input/Output: [(76 57 -27 29) -27]
Train Case:  83 | Input/Output: [(20 -93 -58 70) -93]
Train Case:  84 | Input/Output: [(68 68 -70 -19) -70]
Train Case:  85 | Input/Output: [(31 28 -56 3) -56]
Train Case:  86 | Input/Output: [(-60 28 -61 47) -61]
Train Case:  87 | Input/Output: [(-37 -73 -72 -31) -73]
Train Case:  88 | Input/Output: [(51 5 -4 -59) -59]
Train Case:  89 | Input/Output: [(75 -24 24 -84) -84]
Train Case:  90 | Input/Output: [(-93 95 68 -74) -93]
Train Case:  91 | Input/Output: [(85 -28 -61 42) -61]
Train Case:  92 | Input/Output: [(-57 -99 -52 76) -99]
Train Case:  93 | Input/Output: [(-21 39 49 46) -21]
Train Case:  94 | Input/Output: [(-34 -67 -30 79) -67]
Train Case:  95 | Input/Output: [(-1 -45 -48 3) -48]
Train Case:  96 | Input/Output: [(15 -12 -44 -37) -44]
Train Case:  97 | Input/Output: [(-63 28 8 -48) -63]
Train Case:  98 | Input/Output: [(-45 -41 41 -38) -45]
Train Case:  99 | Input/Output: [(-28 -25 -61 -3) -61]
Test Case:   0 | Input/Output: [[-88 78 78 78] -88]
Test Case:   1 | Input/Output: [[45 -28 45 45] -28]
Test Case:   2 | Input/Output: [[86 86 -56 86] -56]
Test Case:   3 | Input/Output: [[72 -80 -80 -80] -80]
Test Case:   4 | Input/Output: [[-5 92 92 92] -5]
Test Case:   5 | Input/Output: [[-6 -6 -6 31] -6]
Test Case:   6 | Input/Output: [[-19 0 0 0] -19]
Test Case:   7 | Input/Output: [[55 55 55 1] 1]
Test Case:   8 | Input/Output: [[90 90 -37 90] -37]
Test Case:   9 | Input/Output: [[-71 40 40 40] -71]
Test Case:  10 | Input/Output: [[31 -7 -7 -7] -7]
Test Case:  11 | Input/Output: [[33 33 56 33] 33]
Test Case:  12 | Input/Output: [[30 30 30 -56] -56]
Test Case:  13 | Input/Output: [[-97 -97 88 -97] -97]
Test Case:  14 | Input/Output: [[62 62 -72 62] -72]
Test Case:  15 | Input/Output: [[-47 -8 -8 -8] -47]
Test Case:  16 | Input/Output: [[-89 -89 -98 -89] -98]
Test Case:  17 | Input/Output: [[-3 -3 -3 -13] -13]
Test Case:  18 | Input/Output: [[71 71 -8 71] -8]
Test Case:  19 | Input/Output: [[-5 -5 -5 81] -5]
Test Case:  20 | Input/Output: [[94 94 -2 94] -2]
Test Case:  21 | Input/Output: [[-20 -4 -20 -20] -20]
Test Case:  22 | Input/Output: [[-65 -65 -65 58] -65]
Test Case:  23 | Input/Output: [[19 -48 19 19] -48]
Test Case:  24 | Input/Output: [[29 29 29 -37] -37]
Test Case:  25 | Input/Output: [[11 76 11 11] 11]
Test Case:  26 | Input/Output: [[47 81 47 47] 47]
Test Case:  27 | Input/Output: [[38 38 38 26] 26]
Test Case:  28 | Input/Output: [[-95 -14 -14 -14] -95]
Test Case:  29 | Input/Output: [[-39 -6 -6 -6] -39]
Test Case:  30 | Input/Output: [[34 34 34 55] 34]
Test Case:  31 | Input/Output: [[85 75 85 85] 75]
Test Case:  32 | Input/Output: [[-22 74 -22 -22] -22]
Test Case:  33 | Input/Output: [[-50 66 66 66] -50]
Test Case:  34 | Input/Output: [[-89 -42 -42 -42] -89]
Test Case:  35 | Input/Output: [[10 10 10 -48] -48]
Test Case:  36 | Input/Output: [[-52 66 66 66] -52]
Test Case:  37 | Input/Output: [[-91 -91 -91 -63] -91]
Test Case:  38 | Input/Output: [[90 90 97 90] 90]
Test Case:  39 | Input/Output: [[-76 -81 -76 -76] -81]
Test Case:  40 | Input/Output: [[100 100 -27 100] -27]
Test Case:  41 | Input/Output: [[-46 -46 -46 96] -46]
Test Case:  42 | Input/Output: [[-10 -10 -10 94] -10]
Test Case:  43 | Input/Output: [[-13 83 83 83] -13]
Test Case:  44 | Input/Output: [[37 37 22 37] 22]
Test Case:  45 | Input/Output: [[42 36 36 36] 36]
Test Case:  46 | Input/Output: [[12 52 52 52] 12]
Test Case:  47 | Input/Output: [[1 -90 -90 -90] -90]
Test Case:  48 | Input/Output: [[69 69 69 44] 44]
Test Case:  49 | Input/Output: [[49 49 -36 49] -36]
Test Case:  50 | Input/Output: [[1 1 -44 1] -44]
Test Case:  51 | Input/Output: [[-70 96 96 96] -70]
Test Case:  52 | Input/Output: [[7 -84 -84 -84] -84]
Test Case:  53 | Input/Output: [[91 60 91 91] 60]
Test Case:  54 | Input/Output: [[96 -65 -65 -65] -65]
Test Case:  55 | Input/Output: [[-20 -20 -10 -20] -20]
Test Case:  56 | Input/Output: [[-100 -77 -100 -100] -100]
Test Case:  57 | Input/Output: [[72 72 -100 72] -100]
Test Case:  58 | Input/Output: [[95 95 -1 95] -1]
Test Case:  59 | Input/Output: [[80 43 80 80] 43]
Test Case:  60 | Input/Output: [[28 -30 28 28] -30]
Test Case:  61 | Input/Output: [[9 84 9 9] 9]
Test Case:  62 | Input/Output: [[-16 -16 48 -16] -16]
Test Case:  63 | Input/Output: [[-86 -86 -9 -86] -86]
Test Case:  64 | Input/Output: [[-14 -14 -14 32] -14]
Test Case:  65 | Input/Output: [[71 -4 71 71] -4]
Test Case:  66 | Input/Output: [[24 24 -20 24] -20]
Test Case:  67 | Input/Output: [[-58 -58 -58 -99] -99]
Test Case:  68 | Input/Output: [[52 -54 -54 -54] -54]
Test Case:  69 | Input/Output: [[-53 -53 44 -53] -53]
Test Case:  70 | Input/Output: [[-3 78 -3 -3] -3]
Test Case:  71 | Input/Output: [[31 -86 31 31] -86]
Test Case:  72 | Input/Output: [[70 75 70 70] 70]
Test Case:  73 | Input/Output: [[-69 8 -69 -69] -69]
Test Case:  74 | Input/Output: [[-92 -92 31 -92] -92]
Test Case:  75 | Input/Output: [[-87 -87 -87 1] -87]
Test Case:  76 | Input/Output: [[4 -71 -71 -71] -71]
Test Case:  77 | Input/Output: [[-99 -67 -99 -99] -99]
Test Case:  78 | Input/Output: [[-20 72 72 72] -20]
Test Case:  79 | Input/Output: [[-5 -5 -5 20] -5]
Test Case:  80 | Input/Output: [[-14 11 -14 -14] -14]
Test Case:  81 | Input/Output: [[-23 -34 -23 -23] -34]
Test Case:  82 | Input/Output: [[-11 84 84 84] -11]
Test Case:  83 | Input/Output: [[-51 82 -51 -51] -51]
Test Case:  84 | Input/Output: [[-35 -35 -67 -35] -67]
Test Case:  85 | Input/Output: [[-55 42 -55 -55] -55]
Test Case:  86 | Input/Output: [[39 -44 -44 -44] -44]
Test Case:  87 | Input/Output: [[63 6 63 63] 6]
Test Case:  88 | Input/Output: [[-26 -26 -26 13] -26]
Test Case:  89 | Input/Output: [[36 36 36 90] 36]
Test Case:  90 | Input/Output: [[-28 74 74 74] -28]
Test Case:  91 | Input/Output: [[68 68 68 68] 68]
Test Case:  92 | Input/Output: [[-49 -6 -6 -6] -49]
Test Case:  93 | Input/Output: [[-67 -67 2 -67] -67]
Test Case:  94 | Input/Output: [[-71 88 -71 -71] -71]
Test Case:  95 | Input/Output: [[25 25 25 -76] -76]
Test Case:  96 | Input/Output: [[-51 2 2 2] -51]
Test Case:  97 | Input/Output: [[-52 -96 -96 -96] -96]
Test Case:  98 | Input/Output: [[29 82 82 82] 29]
Test Case:  99 | Input/Output: [[49 49 85 49] 49]
Test Case: 100 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 101 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 102 | Input/Output: [(80 80 80 80) 80]
Test Case: 103 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 104 | Input/Output: [(48 48 48 48) 48]
Test Case: 105 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 106 | Input/Output: [(53 53 53 53) 53]
Test Case: 107 | Input/Output: [(7 7 7 7) 7]
Test Case: 108 | Input/Output: [(48 48 48 48) 48]
Test Case: 109 | Input/Output: [(36 36 36 36) 36]
Test Case: 110 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 111 | Input/Output: [(78 78 78 78) 78]
Test Case: 112 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 113 | Input/Output: [(46 46 46 46) 46]
Test Case: 114 | Input/Output: [(49 49 49 49) 49]
Test Case: 115 | Input/Output: [(71 71 71 71) 71]
Test Case: 116 | Input/Output: [(34 34 34 34) 34]
Test Case: 117 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 118 | Input/Output: [(29 29 29 29) 29]
Test Case: 119 | Input/Output: [(23 23 23 23) 23]
Test Case: 120 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 121 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 122 | Input/Output: [(32 32 32 32) 32]
Test Case: 123 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 124 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 125 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 126 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 127 | Input/Output: [(36 36 36 36) 36]
Test Case: 128 | Input/Output: [(73 73 73 73) 73]
Test Case: 129 | Input/Output: [(87 87 87 87) 87]
Test Case: 130 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 131 | Input/Output: [(30 30 30 30) 30]
Test Case: 132 | Input/Output: [(1 1 1 1) 1]
Test Case: 133 | Input/Output: [(71 71 71 71) 71]
Test Case: 134 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 135 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 136 | Input/Output: [(45 45 45 45) 45]
Test Case: 137 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 138 | Input/Output: [(0 0 0 0) 0]
Test Case: 139 | Input/Output: [(86 86 86 86) 86]
Test Case: 140 | Input/Output: [(55 55 55 55) 55]
Test Case: 141 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 142 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 143 | Input/Output: [(32 32 32 32) 32]
Test Case: 144 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 145 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 146 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 147 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 148 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 149 | Input/Output: [(60 60 60 60) 60]
Test Case: 150 | Input/Output: [(16 16 16 16) 16]
Test Case: 151 | Input/Output: [(67 67 67 67) 67]
Test Case: 152 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 153 | Input/Output: [(9 9 9 9) 9]
Test Case: 154 | Input/Output: [(10 10 10 10) 10]
Test Case: 155 | Input/Output: [(80 80 80 80) 80]
Test Case: 156 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 157 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 158 | Input/Output: [(94 94 94 94) 94]
Test Case: 159 | Input/Output: [(52 52 52 52) 52]
Test Case: 160 | Input/Output: [(37 37 37 37) 37]
Test Case: 161 | Input/Output: [(31 31 31 31) 31]
Test Case: 162 | Input/Output: [(46 46 46 46) 46]
Test Case: 163 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 164 | Input/Output: [(70 70 70 70) 70]
Test Case: 165 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 166 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 167 | Input/Output: [(77 77 77 77) 77]
Test Case: 168 | Input/Output: [(68 68 68 68) 68]
Test Case: 169 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 170 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 171 | Input/Output: [(2 2 2 2) 2]
Test Case: 172 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 173 | Input/Output: [(40 40 40 40) 40]
Test Case: 174 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 175 | Input/Output: [(69 69 69 69) 69]
Test Case: 176 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 177 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 178 | Input/Output: [(97 97 97 97) 97]
Test Case: 179 | Input/Output: [(55 55 55 55) 55]
Test Case: 180 | Input/Output: [(87 87 87 87) 87]
Test Case: 181 | Input/Output: [(89 89 89 89) 89]
Test Case: 182 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 183 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 184 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 185 | Input/Output: [(74 74 74 74) 74]
Test Case: 186 | Input/Output: [(24 24 24 24) 24]
Test Case: 187 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 188 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 189 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 190 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 191 | Input/Output: [(82 82 82 82) 82]
Test Case: 192 | Input/Output: [(6 6 6 6) 6]
Test Case: 193 | Input/Output: [(35 35 35 35) 35]
Test Case: 194 | Input/Output: [(92 92 92 92) 92]
Test Case: 195 | Input/Output: [(5 5 5 5) 5]
Test Case: 196 | Input/Output: [(69 69 69 69) 69]
Test Case: 197 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 198 | Input/Output: [(30 30 30 30) 30]
Test Case: 199 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 200 | Input/Output: [(51 37 78 24) 24]
Test Case: 201 | Input/Output: [(8 61 20 69) 8]
Test Case: 202 | Input/Output: [(91 14 88 43) 14]
Test Case: 203 | Input/Output: [(89 6 34 59) 6]
Test Case: 204 | Input/Output: [(99 91 9 42) 9]
Test Case: 205 | Input/Output: [(85 34 85 74) 34]
Test Case: 206 | Input/Output: [(31 3 97 57) 3]
Test Case: 207 | Input/Output: [(16 15 82 77) 15]
Test Case: 208 | Input/Output: [(72 21 11 0) 0]
Test Case: 209 | Input/Output: [(4 20 93 100) 4]
Test Case: 210 | Input/Output: [(23 33 13 21) 13]
Test Case: 211 | Input/Output: [(100 51 39 7) 7]
Test Case: 212 | Input/Output: [(96 6 37 84) 6]
Test Case: 213 | Input/Output: [(33 56 27 37) 27]
Test Case: 214 | Input/Output: [(29 2 60 76) 2]
Test Case: 215 | Input/Output: [(51 28 85 18) 18]
Test Case: 216 | Input/Output: [(1 98 13 28) 1]
Test Case: 217 | Input/Output: [(96 90 86 97) 86]
Test Case: 218 | Input/Output: [(78 42 3 89) 3]
Test Case: 219 | Input/Output: [(2 4 91 10) 2]
Test Case: 220 | Input/Output: [(100 37 96 46) 37]
Test Case: 221 | Input/Output: [(19 44 42 52) 19]
Test Case: 222 | Input/Output: [(27 81 93 43) 27]
Test Case: 223 | Input/Output: [(79 68 93 3) 3]
Test Case: 224 | Input/Output: [(33 93 57 4) 4]
Test Case: 225 | Input/Output: [(33 96 91 86) 33]
Test Case: 226 | Input/Output: [(12 16 29 56) 12]
Test Case: 227 | Input/Output: [(24 13 88 57) 13]
Test Case: 228 | Input/Output: [(39 79 82 37) 37]
Test Case: 229 | Input/Output: [(36 88 68 61) 36]
Test Case: 230 | Input/Output: [(37 5 40 8) 5]
Test Case: 231 | Input/Output: [(44 63 50 23) 23]
Test Case: 232 | Input/Output: [(46 55 62 10) 10]
Test Case: 233 | Input/Output: [(3 86 82 93) 3]
Test Case: 234 | Input/Output: [(57 13 17 53) 13]
Test Case: 235 | Input/Output: [(34 20 68 8) 8]
Test Case: 236 | Input/Output: [(87 19 8 30) 8]
Test Case: 237 | Input/Output: [(72 64 14 55) 14]
Test Case: 238 | Input/Output: [(63 51 67 10) 10]
Test Case: 239 | Input/Output: [(43 55 7 13) 7]
Test Case: 240 | Input/Output: [(61 12 62 57) 12]
Test Case: 241 | Input/Output: [(27 30 40 59) 27]
Test Case: 242 | Input/Output: [(92 30 25 66) 25]
Test Case: 243 | Input/Output: [(98 76 38 83) 38]
Test Case: 244 | Input/Output: [(90 14 17 15) 14]
Test Case: 245 | Input/Output: [(79 34 75 76) 34]
Test Case: 246 | Input/Output: [(76 30 3 52) 3]
Test Case: 247 | Input/Output: [(55 95 61 45) 45]
Test Case: 248 | Input/Output: [(9 79 49 38) 9]
Test Case: 249 | Input/Output: [(91 84 74 76) 74]
Test Case: 250 | Input/Output: [(89 98 5 30) 5]
Test Case: 251 | Input/Output: [(40 89 9 44) 9]
Test Case: 252 | Input/Output: [(33 57 0 36) 0]
Test Case: 253 | Input/Output: [(14 78 90 26) 14]
Test Case: 254 | Input/Output: [(57 96 88 15) 15]
Test Case: 255 | Input/Output: [(32 96 73 95) 32]
Test Case: 256 | Input/Output: [(38 8 82 25) 8]
Test Case: 257 | Input/Output: [(70 44 6 31) 6]
Test Case: 258 | Input/Output: [(57 20 23 32) 20]
Test Case: 259 | Input/Output: [(23 19 39 86) 19]
Test Case: 260 | Input/Output: [(77 44 100 16) 16]
Test Case: 261 | Input/Output: [(2 54 65 71) 2]
Test Case: 262 | Input/Output: [(21 100 16 16) 16]
Test Case: 263 | Input/Output: [(36 88 59 14) 14]
Test Case: 264 | Input/Output: [(93 52 48 48) 48]
Test Case: 265 | Input/Output: [(56 53 30 39) 30]
Test Case: 266 | Input/Output: [(29 61 77 17) 17]
Test Case: 267 | Input/Output: [(68 6 84 41) 6]
Test Case: 268 | Input/Output: [(69 6 39 58) 6]
Test Case: 269 | Input/Output: [(8 73 67 83) 8]
Test Case: 270 | Input/Output: [(53 34 86 21) 21]
Test Case: 271 | Input/Output: [(9 86 85 21) 9]
Test Case: 272 | Input/Output: [(44 79 70 94) 44]
Test Case: 273 | Input/Output: [(91 24 15 93) 15]
Test Case: 274 | Input/Output: [(93 45 20 36) 20]
Test Case: 275 | Input/Output: [(39 42 82 30) 30]
Test Case: 276 | Input/Output: [(94 88 75 86) 75]
Test Case: 277 | Input/Output: [(81 29 98 53) 29]
Test Case: 278 | Input/Output: [(96 11 26 62) 11]
Test Case: 279 | Input/Output: [(28 3 92 10) 3]
Test Case: 280 | Input/Output: [(36 6 84 0) 0]
Test Case: 281 | Input/Output: [(84 51 86 60) 51]
Test Case: 282 | Input/Output: [(5 72 70 20) 5]
Test Case: 283 | Input/Output: [(73 10 81 4) 4]
Test Case: 284 | Input/Output: [(37 87 77 77) 37]
Test Case: 285 | Input/Output: [(88 86 35 7) 7]
Test Case: 286 | Input/Output: [(63 97 83 68) 63]
Test Case: 287 | Input/Output: [(9 46 52 64) 9]
Test Case: 288 | Input/Output: [(29 44 16 47) 16]
Test Case: 289 | Input/Output: [(77 24 96 82) 24]
Test Case: 290 | Input/Output: [(49 15 75 27) 15]
Test Case: 291 | Input/Output: [(29 80 86 69) 29]
Test Case: 292 | Input/Output: [(62 31 14 32) 14]
Test Case: 293 | Input/Output: [(39 84 17 18) 17]
Test Case: 294 | Input/Output: [(87 90 71 77) 71]
Test Case: 295 | Input/Output: [(96 91 48 63) 48]
Test Case: 296 | Input/Output: [(80 53 96 52) 52]
Test Case: 297 | Input/Output: [(98 90 58 46) 46]
Test Case: 298 | Input/Output: [(76 76 25 64) 25]
Test Case: 299 | Input/Output: [(4 56 36 61) 4]
Test Case: 300 | Input/Output: [(90 28 77 92) 28]
Test Case: 301 | Input/Output: [(77 32 69 80) 32]
Test Case: 302 | Input/Output: [(88 99 97 49) 49]
Test Case: 303 | Input/Output: [(19 78 30 91) 19]
Test Case: 304 | Input/Output: [(31 89 86 68) 31]
Test Case: 305 | Input/Output: [(21 51 74 53) 21]
Test Case: 306 | Input/Output: [(64 28 19 62) 19]
Test Case: 307 | Input/Output: [(9 94 55 98) 9]
Test Case: 308 | Input/Output: [(100 66 27 57) 27]
Test Case: 309 | Input/Output: [(76 14 16 0) 0]
Test Case: 310 | Input/Output: [(74 39 17 17) 17]
Test Case: 311 | Input/Output: [(88 87 25 7) 7]
Test Case: 312 | Input/Output: [(60 73 46 12) 12]
Test Case: 313 | Input/Output: [(69 83 94 82) 69]
Test Case: 314 | Input/Output: [(33 51 34 63) 33]
Test Case: 315 | Input/Output: [(21 41 56 16) 16]
Test Case: 316 | Input/Output: [(79 59 12 73) 12]
Test Case: 317 | Input/Output: [(2 16 77 60) 2]
Test Case: 318 | Input/Output: [(25 40 91 44) 25]
Test Case: 319 | Input/Output: [(46 19 97 34) 19]
Test Case: 320 | Input/Output: [(28 63 28 47) 28]
Test Case: 321 | Input/Output: [(17 15 50 20) 15]
Test Case: 322 | Input/Output: [(1 29 75 8) 1]
Test Case: 323 | Input/Output: [(42 25 66 2) 2]
Test Case: 324 | Input/Output: [(18 12 80 44) 12]
Test Case: 325 | Input/Output: [(10 44 85 14) 10]
Test Case: 326 | Input/Output: [(80 33 76 86) 33]
Test Case: 327 | Input/Output: [(84 9 41 96) 9]
Test Case: 328 | Input/Output: [(27 89 19 77) 19]
Test Case: 329 | Input/Output: [(73 71 37 28) 28]
Test Case: 330 | Input/Output: [(100 55 100 98) 55]
Test Case: 331 | Input/Output: [(45 9 52 46) 9]
Test Case: 332 | Input/Output: [(23 3 45 91) 3]
Test Case: 333 | Input/Output: [(9 89 100 42) 9]
Test Case: 334 | Input/Output: [(50 54 60 85) 50]
Test Case: 335 | Input/Output: [(10 22 76 65) 10]
Test Case: 336 | Input/Output: [(38 23 21 32) 21]
Test Case: 337 | Input/Output: [(63 35 24 0) 0]
Test Case: 338 | Input/Output: [(32 49 57 29) 29]
Test Case: 339 | Input/Output: [(92 20 79 15) 15]
Test Case: 340 | Input/Output: [(14 25 58 31) 14]
Test Case: 341 | Input/Output: [(75 9 5 1) 1]
Test Case: 342 | Input/Output: [(91 85 87 99) 85]
Test Case: 343 | Input/Output: [(57 18 87 21) 18]
Test Case: 344 | Input/Output: [(100 52 68 43) 43]
Test Case: 345 | Input/Output: [(88 7 75 48) 7]
Test Case: 346 | Input/Output: [(35 63 28 90) 28]
Test Case: 347 | Input/Output: [(80 80 46 28) 28]
Test Case: 348 | Input/Output: [(89 62 64 57) 57]
Test Case: 349 | Input/Output: [(73 2 36 5) 2]
Test Case: 350 | Input/Output: [(82 48 14 21) 14]
Test Case: 351 | Input/Output: [(18 84 9 93) 9]
Test Case: 352 | Input/Output: [(0 2 34 55) 0]
Test Case: 353 | Input/Output: [(59 45 71 49) 45]
Test Case: 354 | Input/Output: [(73 96 58 22) 22]
Test Case: 355 | Input/Output: [(69 96 61 70) 61]
Test Case: 356 | Input/Output: [(53 97 48 90) 48]
Test Case: 357 | Input/Output: [(68 88 42 85) 42]
Test Case: 358 | Input/Output: [(7 100 61 0) 0]
Test Case: 359 | Input/Output: [(22 79 27 91) 22]
Test Case: 360 | Input/Output: [(38 16 78 29) 16]
Test Case: 361 | Input/Output: [(1 53 94 16) 1]
Test Case: 362 | Input/Output: [(33 55 4 29) 4]
Test Case: 363 | Input/Output: [(11 3 2 79) 2]
Test Case: 364 | Input/Output: [(94 20 62 95) 20]
Test Case: 365 | Input/Output: [(12 99 25 97) 12]
Test Case: 366 | Input/Output: [(36 29 4 5) 4]
Test Case: 367 | Input/Output: [(87 21 38 9) 9]
Test Case: 368 | Input/Output: [(2 22 93 58) 2]
Test Case: 369 | Input/Output: [(24 93 48 78) 24]
Test Case: 370 | Input/Output: [(19 56 100 87) 19]
Test Case: 371 | Input/Output: [(22 83 51 3) 3]
Test Case: 372 | Input/Output: [(66 82 67 48) 48]
Test Case: 373 | Input/Output: [(8 62 57 73) 8]
Test Case: 374 | Input/Output: [(63 66 98 64) 63]
Test Case: 375 | Input/Output: [(18 24 10 51) 10]
Test Case: 376 | Input/Output: [(90 19 67 99) 19]
Test Case: 377 | Input/Output: [(75 3 97 70) 3]
Test Case: 378 | Input/Output: [(47 90 70 85) 47]
Test Case: 379 | Input/Output: [(79 88 38 79) 38]
Test Case: 380 | Input/Output: [(91 60 95 59) 59]
Test Case: 381 | Input/Output: [(77 82 15 90) 15]
Test Case: 382 | Input/Output: [(92 40 39 6) 6]
Test Case: 383 | Input/Output: [(6 92 14 99) 6]
Test Case: 384 | Input/Output: [(60 46 50 43) 43]
Test Case: 385 | Input/Output: [(84 54 90 98) 54]
Test Case: 386 | Input/Output: [(65 64 11 93) 11]
Test Case: 387 | Input/Output: [(81 39 25 31) 25]
Test Case: 388 | Input/Output: [(2 27 6 58) 2]
Test Case: 389 | Input/Output: [(20 13 44 12) 12]
Test Case: 390 | Input/Output: [(57 95 61 62) 57]
Test Case: 391 | Input/Output: [(28 81 87 41) 28]
Test Case: 392 | Input/Output: [(81 69 73 29) 29]
Test Case: 393 | Input/Output: [(56 81 4 84) 4]
Test Case: 394 | Input/Output: [(99 63 81 78) 63]
Test Case: 395 | Input/Output: [(34 53 14 96) 14]
Test Case: 396 | Input/Output: [(9 1 63 71) 1]
Test Case: 397 | Input/Output: [(19 76 47 74) 19]
Test Case: 398 | Input/Output: [(21 83 54 54) 21]
Test Case: 399 | Input/Output: [(21 68 20 100) 20]
Test Case: 400 | Input/Output: [(26 59 -5 -12) -12]
Test Case: 401 | Input/Output: [(-100 -67 97 -53) -100]
Test Case: 402 | Input/Output: [(-30 -21 -28 71) -30]
Test Case: 403 | Input/Output: [(83 -85 98 29) -85]
Test Case: 404 | Input/Output: [(75 -91 82 16) -91]
Test Case: 405 | Input/Output: [(-98 -32 -48 99) -98]
Test Case: 406 | Input/Output: [(57 4 34 95) 4]
Test Case: 407 | Input/Output: [(83 44 -94 90) -94]
Test Case: 408 | Input/Output: [(-75 37 -29 90) -75]
Test Case: 409 | Input/Output: [(5 99 -1 -68) -68]
Test Case: 410 | Input/Output: [(77 97 -90 27) -90]
Test Case: 411 | Input/Output: [(-82 20 -70 -30) -82]
Test Case: 412 | Input/Output: [(-20 1 84 82) -20]
Test Case: 413 | Input/Output: [(-90 89 -7 -71) -90]
Test Case: 414 | Input/Output: [(-10 -49 -5 96) -49]
Test Case: 415 | Input/Output: [(75 -4 -26 11) -26]
Test Case: 416 | Input/Output: [(92 21 93 -2) -2]
Test Case: 417 | Input/Output: [(-76 97 9 -67) -76]
Test Case: 418 | Input/Output: [(53 83 67 -5) -5]
Test Case: 419 | Input/Output: [(-94 19 -80 41) -94]
Test Case: 420 | Input/Output: [(-16 64 35 51) -16]
Test Case: 421 | Input/Output: [(-70 -83 5 79) -83]
Test Case: 422 | Input/Output: [(24 35 22 -9) -9]
Test Case: 423 | Input/Output: [(45 -98 86 14) -98]
Test Case: 424 | Input/Output: [(61 67 88 31) 31]
Test Case: 425 | Input/Output: [(89 -66 26 -16) -66]
Test Case: 426 | Input/Output: [(38 -94 71 87) -94]
Test Case: 427 | Input/Output: [(-36 44 73 -17) -36]
Test Case: 428 | Input/Output: [(89 10 -23 -72) -72]
Test Case: 429 | Input/Output: [(-24 -96 41 -38) -96]
Test Case: 430 | Input/Output: [(-23 37 25 37) -23]
Test Case: 431 | Input/Output: [(62 88 10 -1) -1]
Test Case: 432 | Input/Output: [(68 83 -55 1) -55]
Test Case: 433 | Input/Output: [(-51 -15 22 47) -51]
Test Case: 434 | Input/Output: [(-66 -41 7 43) -66]
Test Case: 435 | Input/Output: [(-20 31 -68 64) -68]
Test Case: 436 | Input/Output: [(-17 -96 33 -100) -100]
Test Case: 437 | Input/Output: [(-87 3 -9 -67) -87]
Test Case: 438 | Input/Output: [(-23 -67 -31 -14) -67]
Test Case: 439 | Input/Output: [(-91 57 -8 -32) -91]
Test Case: 440 | Input/Output: [(90 84 -14 71) -14]
Test Case: 441 | Input/Output: [(16 -58 -30 -30) -58]
Test Case: 442 | Input/Output: [(-81 50 26 54) -81]
Test Case: 443 | Input/Output: [(-97 45 -83 44) -97]
Test Case: 444 | Input/Output: [(72 -47 26 71) -47]
Test Case: 445 | Input/Output: [(92 43 -72 -14) -72]
Test Case: 446 | Input/Output: [(-55 -46 -73 8) -73]
Test Case: 447 | Input/Output: [(-43 19 53 -34) -43]
Test Case: 448 | Input/Output: [(96 66 57 16) 16]
Test Case: 449 | Input/Output: [(-87 -40 -42 -41) -87]
Test Case: 450 | Input/Output: [(-2 18 70 -60) -60]
Test Case: 451 | Input/Output: [(26 93 99 -94) -94]
Test Case: 452 | Input/Output: [(-39 47 -72 -66) -72]
Test Case: 453 | Input/Output: [(-56 26 36 -19) -56]
Test Case: 454 | Input/Output: [(80 89 56 22) 22]
Test Case: 455 | Input/Output: [(44 92 -85 53) -85]
Test Case: 456 | Input/Output: [(11 88 37 -48) -48]
Test Case: 457 | Input/Output: [(-9 -4 -32 -94) -94]
Test Case: 458 | Input/Output: [(9 -34 -18 15) -34]
Test Case: 459 | Input/Output: [(-71 65 18 -72) -72]
Test Case: 460 | Input/Output: [(16 95 -6 32) -6]
Test Case: 461 | Input/Output: [(-31 30 -13 72) -31]
Test Case: 462 | Input/Output: [(-47 97 -19 72) -47]
Test Case: 463 | Input/Output: [(-33 -4 33 24) -33]
Test Case: 464 | Input/Output: [(-34 -69 -55 85) -69]
Test Case: 465 | Input/Output: [(-11 44 58 51) -11]
Test Case: 466 | Input/Output: [(0 -86 -81 20) -86]
Test Case: 467 | Input/Output: [(55 56 -97 87) -97]
Test Case: 468 | Input/Output: [(21 36 -11 -61) -61]
Test Case: 469 | Input/Output: [(72 -11 -35 93) -35]
Test Case: 470 | Input/Output: [(48 -69 77 -5) -69]
Test Case: 471 | Input/Output: [(-54 -92 8 31) -92]
Test Case: 472 | Input/Output: [(-10 -58 55 -18) -58]
Test Case: 473 | Input/Output: [(18 14 77 4) 4]
Test Case: 474 | Input/Output: [(-50 65 85 18) -50]
Test Case: 475 | Input/Output: [(47 75 64 -92) -92]
Test Case: 476 | Input/Output: [(-84 -71 14 10) -84]
Test Case: 477 | Input/Output: [(-27 -32 67 3) -32]
Test Case: 478 | Input/Output: [(35 -94 67 22) -94]
Test Case: 479 | Input/Output: [(-59 34 -69 52) -69]
Test Case: 480 | Input/Output: [(57 75 -71 13) -71]
Test Case: 481 | Input/Output: [(60 -54 -13 32) -54]
Test Case: 482 | Input/Output: [(-71 -12 53 34) -71]
Test Case: 483 | Input/Output: [(-95 65 77 16) -95]
Test Case: 484 | Input/Output: [(-60 -83 65 -99) -99]
Test Case: 485 | Input/Output: [(73 82 6 -4) -4]
Test Case: 486 | Input/Output: [(-3 51 -98 -20) -98]
Test Case: 487 | Input/Output: [(-81 100 -91 70) -91]
Test Case: 488 | Input/Output: [(-9 -40 -83 63) -83]
Test Case: 489 | Input/Output: [(-94 -97 17 -49) -97]
Test Case: 490 | Input/Output: [(-76 75 85 59) -76]
Test Case: 491 | Input/Output: [(-47 41 29 -92) -92]
Test Case: 492 | Input/Output: [(-96 -61 -67 43) -96]
Test Case: 493 | Input/Output: [(26 -43 -1 43) -43]
Test Case: 494 | Input/Output: [(94 -8 71 -98) -98]
Test Case: 495 | Input/Output: [(90 20 -94 -31) -94]
Test Case: 496 | Input/Output: [(70 62 74 97) 62]
Test Case: 497 | Input/Output: [(40 93 11 -8) -8]
Test Case: 498 | Input/Output: [(-87 -34 7 -68) -87]
Test Case: 499 | Input/Output: [(74 -78 -21 -56) -78]
Test Case: 500 | Input/Output: [(38 -72 -46 -66) -72]
Test Case: 501 | Input/Output: [(-9 -55 -52 -11) -55]
Test Case: 502 | Input/Output: [(51 -26 -93 58) -93]
Test Case: 503 | Input/Output: [(74 20 90 67) 20]
Test Case: 504 | Input/Output: [(-10 -50 -53 48) -53]
Test Case: 505 | Input/Output: [(80 91 84 75) 75]
Test Case: 506 | Input/Output: [(78 31 -95 -75) -95]
Test Case: 507 | Input/Output: [(41 -66 -9 5) -66]
Test Case: 508 | Input/Output: [(-11 62 41 -74) -74]
Test Case: 509 | Input/Output: [(-37 58 -86 -74) -86]
Test Case: 510 | Input/Output: [(81 -43 -61 64) -61]
Test Case: 511 | Input/Output: [(-27 80 73 28) -27]
Test Case: 512 | Input/Output: [(67 58 -19 -40) -40]
Test Case: 513 | Input/Output: [(-33 51 -89 -62) -89]
Test Case: 514 | Input/Output: [(-55 -81 92 60) -81]
Test Case: 515 | Input/Output: [(42 -25 -74 -12) -74]
Test Case: 516 | Input/Output: [(26 83 42 73) 26]
Test Case: 517 | Input/Output: [(81 29 -48 -89) -89]
Test Case: 518 | Input/Output: [(-11 -57 -73 89) -73]
Test Case: 519 | Input/Output: [(61 78 52 41) 41]
Test Case: 520 | Input/Output: [(-31 32 7 -55) -55]
Test Case: 521 | Input/Output: [(58 49 66 51) 49]
Test Case: 522 | Input/Output: [(42 92 -70 -10) -70]
Test Case: 523 | Input/Output: [(-65 -49 99 42) -65]
Test Case: 524 | Input/Output: [(13 29 -26 13) -26]
Test Case: 525 | Input/Output: [(84 1 -59 -38) -59]
Test Case: 526 | Input/Output: [(-37 -6 47 -89) -89]
Test Case: 527 | Input/Output: [(26 60 83 58) 26]
Test Case: 528 | Input/Output: [(70 61 25 -1) -1]
Test Case: 529 | Input/Output: [(13 -66 -18 68) -66]
Test Case: 530 | Input/Output: [(67 -4 19 51) -4]
Test Case: 531 | Input/Output: [(77 92 12 -59) -59]
Test Case: 532 | Input/Output: [(87 27 -1 -71) -71]
Test Case: 533 | Input/Output: [(92 33 -48 72) -48]
Test Case: 534 | Input/Output: [(-37 92 12 -3) -37]
Test Case: 535 | Input/Output: [(48 52 27 -88) -88]
Test Case: 536 | Input/Output: [(-23 -14 -13 9) -23]
Test Case: 537 | Input/Output: [(43 -32 19 55) -32]
Test Case: 538 | Input/Output: [(38 79 -27 43) -27]
Test Case: 539 | Input/Output: [(98 31 -56 0) -56]
Test Case: 540 | Input/Output: [(-32 93 100 -93) -93]
Test Case: 541 | Input/Output: [(-37 53 93 -11) -37]
Test Case: 542 | Input/Output: [(-35 -43 -15 -36) -43]
Test Case: 543 | Input/Output: [(-58 18 95 67) -58]
Test Case: 544 | Input/Output: [(-5 -76 -61 -56) -76]
Test Case: 545 | Input/Output: [(52 90 61 42) 42]
Test Case: 546 | Input/Output: [(82 -46 0 82) -46]
Test Case: 547 | Input/Output: [(56 8 36 95) 8]
Test Case: 548 | Input/Output: [(-29 -8 15 -100) -100]
Test Case: 549 | Input/Output: [(76 74 -35 -84) -84]
Test Case: 550 | Input/Output: [(32 28 -53 -77) -77]
Test Case: 551 | Input/Output: [(44 32 -87 -88) -88]
Test Case: 552 | Input/Output: [(-66 -19 12 21) -66]
Test Case: 553 | Input/Output: [(-94 -27 -11 -27) -94]
Test Case: 554 | Input/Output: [(53 -19 6 -53) -53]
Test Case: 555 | Input/Output: [(43 2 56 29) 2]
Test Case: 556 | Input/Output: [(-79 -43 -26 16) -79]
Test Case: 557 | Input/Output: [(-64 56 31 -43) -64]
Test Case: 558 | Input/Output: [(-55 -7 75 61) -55]
Test Case: 559 | Input/Output: [(30 43 -47 84) -47]
Test Case: 560 | Input/Output: [(96 50 -8 92) -8]
Test Case: 561 | Input/Output: [(-56 65 -24 26) -56]
Test Case: 562 | Input/Output: [(-89 80 19 71) -89]
Test Case: 563 | Input/Output: [(73 62 -14 14) -14]
Test Case: 564 | Input/Output: [(-80 21 98 68) -80]
Test Case: 565 | Input/Output: [(39 -4 40 36) -4]
Test Case: 566 | Input/Output: [(92 -9 -100 -63) -100]
Test Case: 567 | Input/Output: [(-72 -47 -34 90) -72]
Test Case: 568 | Input/Output: [(14 71 53 1) 1]
Test Case: 569 | Input/Output: [(74 51 95 36) 36]
Test Case: 570 | Input/Output: [(11 14 -74 -80) -80]
Test Case: 571 | Input/Output: [(-49 -16 51 -60) -60]
Test Case: 572 | Input/Output: [(-80 -83 -98 88) -98]
Test Case: 573 | Input/Output: [(-32 -23 -85 32) -85]
Test Case: 574 | Input/Output: [(58 7 -50 -94) -94]
Test Case: 575 | Input/Output: [(-10 -100 39 -49) -100]
Test Case: 576 | Input/Output: [(-2 88 -73 64) -73]
Test Case: 577 | Input/Output: [(10 61 51 -33) -33]
Test Case: 578 | Input/Output: [(-61 -16 81 -24) -61]
Test Case: 579 | Input/Output: [(59 90 46 -28) -28]
Test Case: 580 | Input/Output: [(59 -67 43 -12) -67]
Test Case: 581 | Input/Output: [(-39 -72 77 33) -72]
Test Case: 582 | Input/Output: [(-77 -23 49 -3) -77]
Test Case: 583 | Input/Output: [(48 17 3 32) 3]
Test Case: 584 | Input/Output: [(4 74 -93 -99) -99]
Test Case: 585 | Input/Output: [(-48 96 -43 70) -48]
Test Case: 586 | Input/Output: [(39 82 -47 19) -47]
Test Case: 587 | Input/Output: [(57 92 -61 -74) -74]
Test Case: 588 | Input/Output: [(-45 2 38 45) -45]
Test Case: 589 | Input/Output: [(53 -23 82 57) -23]
Test Case: 590 | Input/Output: [(87 -21 25 -8) -21]
Test Case: 591 | Input/Output: [(-92 51 60 -41) -92]
Test Case: 592 | Input/Output: [(6 46 -45 20) -45]
Test Case: 593 | Input/Output: [(-83 83 -18 -99) -99]
Test Case: 594 | Input/Output: [(-34 -7 -96 58) -96]
Test Case: 595 | Input/Output: [(-64 6 -32 -24) -64]
Test Case: 596 | Input/Output: [(-28 -81 0 -69) -81]
Test Case: 597 | Input/Output: [(-19 10 12 5) -19]
Test Case: 598 | Input/Output: [(24 67 -16 -29) -29]
Test Case: 599 | Input/Output: [(58 38 50 37) 37]
Test Case: 600 | Input/Output: [(-42 -87 74 -36) -87]
Test Case: 601 | Input/Output: [(75 3 -71 -1) -71]
Test Case: 602 | Input/Output: [(-80 -52 -90 -28) -90]
Test Case: 603 | Input/Output: [(26 -16 3 -26) -26]
Test Case: 604 | Input/Output: [(-66 -14 -17 2) -66]
Test Case: 605 | Input/Output: [(-86 38 54 77) -86]
Test Case: 606 | Input/Output: [(38 92 -20 -55) -55]
Test Case: 607 | Input/Output: [(52 -53 -22 -74) -74]
Test Case: 608 | Input/Output: [(-87 38 -90 -97) -97]
Test Case: 609 | Input/Output: [(-86 39 69 -5) -86]
Test Case: 610 | Input/Output: [(23 -53 -28 -97) -97]
Test Case: 611 | Input/Output: [(-54 42 69 -8) -54]
Test Case: 612 | Input/Output: [(6 20 16 60) 6]
Test Case: 613 | Input/Output: [(60 -90 54 -37) -90]
Test Case: 614 | Input/Output: [(-65 90 -9 46) -65]
Test Case: 615 | Input/Output: [(-23 99 -60 71) -60]
Test Case: 616 | Input/Output: [(-9 11 26 -50) -50]
Test Case: 617 | Input/Output: [(47 -4 18 -51) -51]
Test Case: 618 | Input/Output: [(40 68 -4 -11) -11]
Test Case: 619 | Input/Output: [(-53 66 26 -16) -53]
Test Case: 620 | Input/Output: [(87 56 -94 55) -94]
Test Case: 621 | Input/Output: [(-9 60 -11 62) -11]
Test Case: 622 | Input/Output: [(-27 -75 -61 22) -75]
Test Case: 623 | Input/Output: [(-68 -56 -79 -1) -79]
Test Case: 624 | Input/Output: [(29 71 3 -41) -41]
Test Case: 625 | Input/Output: [(90 17 -95 6) -95]
Test Case: 626 | Input/Output: [(49 49 43 -54) -54]
Test Case: 627 | Input/Output: [(-33 92 -24 32) -33]
Test Case: 628 | Input/Output: [(80 -36 -24 94) -36]
Test Case: 629 | Input/Output: [(4 -85 -37 23) -85]
Test Case: 630 | Input/Output: [(-75 -6 14 -42) -75]
Test Case: 631 | Input/Output: [(-52 -4 74 -69) -69]
Test Case: 632 | Input/Output: [(-23 -81 66 66) -81]
Test Case: 633 | Input/Output: [(3 -90 -7 44) -90]
Test Case: 634 | Input/Output: [(-82 22 1 -2) -82]
Test Case: 635 | Input/Output: [(-80 -27 92 67) -80]
Test Case: 636 | Input/Output: [(-51 -85 12 81) -85]
Test Case: 637 | Input/Output: [(-15 -47 37 68) -47]
Test Case: 638 | Input/Output: [(33 -88 51 -36) -88]
Test Case: 639 | Input/Output: [(-57 -1 82 52) -57]
Test Case: 640 | Input/Output: [(83 43 -92 -82) -92]
Test Case: 641 | Input/Output: [(6 -69 91 69) -69]
Test Case: 642 | Input/Output: [(55 -49 5 61) -49]
Test Case: 643 | Input/Output: [(72 -62 44 8) -62]
Test Case: 644 | Input/Output: [(-17 15 18 -85) -85]
Test Case: 645 | Input/Output: [(57 -94 -33 -75) -94]
Test Case: 646 | Input/Output: [(100 34 -37 -85) -85]
Test Case: 647 | Input/Output: [(-54 61 -2 -40) -54]
Test Case: 648 | Input/Output: [(-15 88 -84 -32) -84]
Test Case: 649 | Input/Output: [(-10 67 67 -38) -38]
Test Case: 650 | Input/Output: [(73 -33 -88 -4) -88]
Test Case: 651 | Input/Output: [(14 82 79 93) 14]
Test Case: 652 | Input/Output: [(29 15 -80 -63) -80]
Test Case: 653 | Input/Output: [(30 -47 59 0) -47]
Test Case: 654 | Input/Output: [(-79 50 -67 -57) -79]
Test Case: 655 | Input/Output: [(21 9 19 96) 9]
Test Case: 656 | Input/Output: [(-69 24 -24 -84) -84]
Test Case: 657 | Input/Output: [(-75 -10 -92 37) -92]
Test Case: 658 | Input/Output: [(-27 -30 -88 55) -88]
Test Case: 659 | Input/Output: [(98 -100 -15 -49) -100]
Test Case: 660 | Input/Output: [(-89 14 51 49) -89]
Test Case: 661 | Input/Output: [(-4 5 63 69) -4]
Test Case: 662 | Input/Output: [(77 -55 40 87) -55]
Test Case: 663 | Input/Output: [(-33 87 -59 41) -59]
Test Case: 664 | Input/Output: [(48 58 -51 -11) -51]
Test Case: 665 | Input/Output: [(97 8 -92 -84) -92]
Test Case: 666 | Input/Output: [(34 67 2 22) 2]
Test Case: 667 | Input/Output: [(88 -14 -28 6) -28]
Test Case: 668 | Input/Output: [(-67 -69 65 -56) -69]
Test Case: 669 | Input/Output: [(5 -46 3 -31) -46]
Test Case: 670 | Input/Output: [(-91 59 -71 11) -91]
Test Case: 671 | Input/Output: [(-34 -11 7 -55) -55]
Test Case: 672 | Input/Output: [(19 16 -100 9) -100]
Test Case: 673 | Input/Output: [(71 -44 40 23) -44]
Test Case: 674 | Input/Output: [(41 -78 27 55) -78]
Test Case: 675 | Input/Output: [(40 17 -74 19) -74]
Test Case: 676 | Input/Output: [(50 -85 68 -39) -85]
Test Case: 677 | Input/Output: [(48 -49 93 90) -49]
Test Case: 678 | Input/Output: [(-95 -21 92 51) -95]
Test Case: 679 | Input/Output: [(34 41 1 39) 1]
Test Case: 680 | Input/Output: [(-61 64 3 7) -61]
Test Case: 681 | Input/Output: [(40 24 -94 28) -94]
Test Case: 682 | Input/Output: [(-52 86 95 69) -52]
Test Case: 683 | Input/Output: [(63 99 24 -49) -49]
Test Case: 684 | Input/Output: [(-44 43 -43 -53) -53]
Test Case: 685 | Input/Output: [(-60 -94 72 -64) -94]
Test Case: 686 | Input/Output: [(-65 -95 -77 -67) -95]
Test Case: 687 | Input/Output: [(-94 95 23 25) -94]
Test Case: 688 | Input/Output: [(59 75 15 -74) -74]
Test Case: 689 | Input/Output: [(-21 63 -65 -56) -65]
Test Case: 690 | Input/Output: [(-40 -40 -45 8) -45]
Test Case: 691 | Input/Output: [(92 -12 39 22) -12]
Test Case: 692 | Input/Output: [(30 63 -39 47) -39]
Test Case: 693 | Input/Output: [(-4 -69 41 -25) -69]
Test Case: 694 | Input/Output: [(47 59 -20 -53) -53]
Test Case: 695 | Input/Output: [(-46 83 -78 -79) -79]
Test Case: 696 | Input/Output: [(76 -38 85 -26) -38]
Test Case: 697 | Input/Output: [(38 -71 82 -93) -93]
Test Case: 698 | Input/Output: [(59 -30 -40 6) -40]
Test Case: 699 | Input/Output: [(-38 37 81 30) -38]
Test Case: 700 | Input/Output: [(27 21 99 77) 21]
Test Case: 701 | Input/Output: [(-57 47 -31 14) -57]
Test Case: 702 | Input/Output: [(-11 95 90 -96) -96]
Test Case: 703 | Input/Output: [(78 52 90 6) 6]
Test Case: 704 | Input/Output: [(29 -57 -68 44) -68]
Test Case: 705 | Input/Output: [(66 95 -25 -52) -52]
Test Case: 706 | Input/Output: [(4 -12 -89 -3) -89]
Test Case: 707 | Input/Output: [(-17 59 44 -13) -17]
Test Case: 708 | Input/Output: [(43 40 10 89) 10]
Test Case: 709 | Input/Output: [(-71 -76 59 62) -76]
Test Case: 710 | Input/Output: [(-62 86 -50 18) -62]
Test Case: 711 | Input/Output: [(91 34 45 68) 34]
Test Case: 712 | Input/Output: [(-56 17 78 95) -56]
Test Case: 713 | Input/Output: [(-69 -72 84 -20) -72]
Test Case: 714 | Input/Output: [(53 -58 -42 -58) -58]
Test Case: 715 | Input/Output: [(6 73 -40 0) -40]
Test Case: 716 | Input/Output: [(-96 -14 -25 -46) -96]
Test Case: 717 | Input/Output: [(-40 67 19 -61) -61]
Test Case: 718 | Input/Output: [(-27 -75 -79 69) -79]
Test Case: 719 | Input/Output: [(-96 -50 69 -40) -96]
Test Case: 720 | Input/Output: [(-90 -66 -58 75) -90]
Test Case: 721 | Input/Output: [(-69 3 -65 72) -69]
Test Case: 722 | Input/Output: [(45 -97 60 -50) -97]
Test Case: 723 | Input/Output: [(9 71 -13 -44) -44]
Test Case: 724 | Input/Output: [(68 41 3 37) 3]
Test Case: 725 | Input/Output: [(-17 100 -72 -95) -95]
Test Case: 726 | Input/Output: [(12 -27 4 -85) -85]
Test Case: 727 | Input/Output: [(-28 -73 -9 -80) -80]
Test Case: 728 | Input/Output: [(-28 60 -80 5) -80]
Test Case: 729 | Input/Output: [(-5 -95 -67 24) -95]
Test Case: 730 | Input/Output: [(-62 88 -72 -79) -79]
Test Case: 731 | Input/Output: [(-64 -84 91 10) -84]
Test Case: 732 | Input/Output: [(-81 52 -80 -48) -81]
Test Case: 733 | Input/Output: [(-87 -5 9 -23) -87]
Test Case: 734 | Input/Output: [(12 41 -91 -78) -91]
Test Case: 735 | Input/Output: [(13 66 -28 -82) -82]
Test Case: 736 | Input/Output: [(96 40 -16 50) -16]
Test Case: 737 | Input/Output: [(-9 21 -67 85) -67]
Test Case: 738 | Input/Output: [(-100 37 87 -28) -100]
Test Case: 739 | Input/Output: [(-68 35 84 74) -68]
Test Case: 740 | Input/Output: [(29 -19 -10 90) -19]
Test Case: 741 | Input/Output: [(-23 92 -76 25) -76]
Test Case: 742 | Input/Output: [(5 -81 8 -29) -81]
Test Case: 743 | Input/Output: [(17 -67 37 -24) -67]
Test Case: 744 | Input/Output: [(100 -63 -42 -73) -73]
Test Case: 745 | Input/Output: [(17 -29 -23 -86) -86]
Test Case: 746 | Input/Output: [(92 -20 -91 -64) -91]
Test Case: 747 | Input/Output: [(-28 13 97 -78) -78]
Test Case: 748 | Input/Output: [(31 65 61 48) 31]
Test Case: 749 | Input/Output: [(64 48 100 28) 28]
Test Case: 750 | Input/Output: [(68 67 -48 97) -48]
Test Case: 751 | Input/Output: [(94 -69 34 -38) -69]
Test Case: 752 | Input/Output: [(42 -80 49 20) -80]
Test Case: 753 | Input/Output: [(-56 -15 -94 -2) -94]
Test Case: 754 | Input/Output: [(86 -68 89 62) -68]
Test Case: 755 | Input/Output: [(65 89 34 14) 14]
Test Case: 756 | Input/Output: [(14 79 -79 -49) -79]
Test Case: 757 | Input/Output: [(-65 -73 90 90) -73]
Test Case: 758 | Input/Output: [(2 -45 -83 -100) -100]
Test Case: 759 | Input/Output: [(95 -96 -60 -34) -96]
Test Case: 760 | Input/Output: [(-9 -81 -20 -53) -81]
Test Case: 761 | Input/Output: [(35 63 11 -48) -48]
Test Case: 762 | Input/Output: [(34 -100 47 -70) -100]
Test Case: 763 | Input/Output: [(-71 -47 -66 -14) -71]
Test Case: 764 | Input/Output: [(-15 50 -38 65) -38]
Test Case: 765 | Input/Output: [(90 3 -15 -40) -40]
Test Case: 766 | Input/Output: [(-48 -77 -3 -47) -77]
Test Case: 767 | Input/Output: [(-74 2 1 -86) -86]
Test Case: 768 | Input/Output: [(41 -22 -3 -4) -22]
Test Case: 769 | Input/Output: [(-41 13 41 -13) -41]
Test Case: 770 | Input/Output: [(57 -66 -69 -94) -94]
Test Case: 771 | Input/Output: [(-42 92 37 46) -42]
Test Case: 772 | Input/Output: [(-3 -37 76 32) -37]
Test Case: 773 | Input/Output: [(36 -94 -67 5) -94]
Test Case: 774 | Input/Output: [(-31 32 -20 -56) -56]
Test Case: 775 | Input/Output: [(15 24 61 -72) -72]
Test Case: 776 | Input/Output: [(15 -70 -53 -14) -70]
Test Case: 777 | Input/Output: [(-52 65 6 55) -52]
Test Case: 778 | Input/Output: [(60 -6 3 -10) -10]
Test Case: 779 | Input/Output: [(79 48 47 -56) -56]
Test Case: 780 | Input/Output: [(62 28 -63 -12) -63]
Test Case: 781 | Input/Output: [(-43 50 27 -35) -43]
Test Case: 782 | Input/Output: [(-44 64 -17 -30) -44]
Test Case: 783 | Input/Output: [(41 80 -5 39) -5]
Test Case: 784 | Input/Output: [(-22 69 -4 86) -22]
Test Case: 785 | Input/Output: [(-81 -31 -35 69) -81]
Test Case: 786 | Input/Output: [(-18 -18 28 3) -18]
Test Case: 787 | Input/Output: [(77 -2 -91 -80) -91]
Test Case: 788 | Input/Output: [(-48 -50 2 56) -50]
Test Case: 789 | Input/Output: [(-57 31 -67 20) -67]
Test Case: 790 | Input/Output: [(-1 65 79 -41) -41]
Test Case: 791 | Input/Output: [(55 29 -28 -37) -37]
Test Case: 792 | Input/Output: [(-53 70 67 -29) -53]
Test Case: 793 | Input/Output: [(-7 -3 87 72) -7]
Test Case: 794 | Input/Output: [(62 25 -7 -80) -80]
Test Case: 795 | Input/Output: [(76 -79 -1 -50) -79]
Test Case: 796 | Input/Output: [(52 -25 -66 73) -66]
Test Case: 797 | Input/Output: [(-67 -37 -87 -15) -87]
Test Case: 798 | Input/Output: [(-46 -61 -55 17) -61]
Test Case: 799 | Input/Output: [(95 89 66 34) 34]
Test Case: 800 | Input/Output: [(-51 -55 19 -60) -60]
Test Case: 801 | Input/Output: [(79 62 79 -29) -29]
Test Case: 802 | Input/Output: [(45 71 52 -85) -85]
Test Case: 803 | Input/Output: [(69 -41 -14 -79) -79]
Test Case: 804 | Input/Output: [(-78 -53 59 47) -78]
Test Case: 805 | Input/Output: [(-18 82 -41 -18) -41]
Test Case: 806 | Input/Output: [(81 -73 -10 -76) -76]
Test Case: 807 | Input/Output: [(19 20 -73 53) -73]
Test Case: 808 | Input/Output: [(49 -11 -76 71) -76]
Test Case: 809 | Input/Output: [(35 94 81 95) 35]
Test Case: 810 | Input/Output: [(-32 -75 42 -71) -75]
Test Case: 811 | Input/Output: [(81 64 61 80) 61]
Test Case: 812 | Input/Output: [(-26 -40 11 -90) -90]
Test Case: 813 | Input/Output: [(62 74 61 -21) -21]
Test Case: 814 | Input/Output: [(-76 -69 -29 94) -76]
Test Case: 815 | Input/Output: [(-51 -92 55 -12) -92]
Test Case: 816 | Input/Output: [(-12 -6 -68 -41) -68]
Test Case: 817 | Input/Output: [(64 -11 -88 -16) -88]
Test Case: 818 | Input/Output: [(79 85 8 40) 8]
Test Case: 819 | Input/Output: [(-49 -91 100 -31) -91]
Test Case: 820 | Input/Output: [(37 46 82 -70) -70]
Test Case: 821 | Input/Output: [(15 -47 -11 -47) -47]
Test Case: 822 | Input/Output: [(-33 56 19 -87) -87]
Test Case: 823 | Input/Output: [(-18 -40 -94 11) -94]
Test Case: 824 | Input/Output: [(99 9 -36 91) -36]
Test Case: 825 | Input/Output: [(46 77 -8 42) -8]
Test Case: 826 | Input/Output: [(25 100 93 94) 25]
Test Case: 827 | Input/Output: [(38 -29 3 -94) -94]
Test Case: 828 | Input/Output: [(68 -32 35 76) -32]
Test Case: 829 | Input/Output: [(86 -1 -29 -20) -29]
Test Case: 830 | Input/Output: [(39 -77 -5 -15) -77]
Test Case: 831 | Input/Output: [(-7 65 66 -65) -65]
Test Case: 832 | Input/Output: [(28 -1 -15 -66) -66]
Test Case: 833 | Input/Output: [(-47 62 -41 63) -47]
Test Case: 834 | Input/Output: [(-56 -68 -92 75) -92]
Test Case: 835 | Input/Output: [(3 -75 -28 10) -75]
Test Case: 836 | Input/Output: [(31 -6 -42 9) -42]
Test Case: 837 | Input/Output: [(39 67 60 -39) -39]
Test Case: 838 | Input/Output: [(-58 66 80 69) -58]
Test Case: 839 | Input/Output: [(51 -9 9 72) -9]
Test Case: 840 | Input/Output: [(-92 60 -98 56) -98]
Test Case: 841 | Input/Output: [(28 51 5 35) 5]
Test Case: 842 | Input/Output: [(72 -58 -33 -1) -58]
Test Case: 843 | Input/Output: [(-63 -83 3 2) -83]
Test Case: 844 | Input/Output: [(30 77 -54 16) -54]
Test Case: 845 | Input/Output: [(55 -82 28 53) -82]
Test Case: 846 | Input/Output: [(31 62 63 -21) -21]
Test Case: 847 | Input/Output: [(27 -31 -31 -70) -70]
Test Case: 848 | Input/Output: [(49 -87 81 31) -87]
Test Case: 849 | Input/Output: [(72 -41 -42 28) -42]
Test Case: 850 | Input/Output: [(-75 -34 -23 -4) -75]
Test Case: 851 | Input/Output: [(-65 -64 -12 -3) -65]
Test Case: 852 | Input/Output: [(53 92 24 98) 24]
Test Case: 853 | Input/Output: [(82 50 59 82) 50]
Test Case: 854 | Input/Output: [(-13 43 -10 50) -13]
Test Case: 855 | Input/Output: [(-49 25 -88 32) -88]
Test Case: 856 | Input/Output: [(-54 42 23 -83) -83]
Test Case: 857 | Input/Output: [(-83 -78 0 -2) -83]
Test Case: 858 | Input/Output: [(-84 -75 60 47) -84]
Test Case: 859 | Input/Output: [(-77 -80 100 80) -80]
Test Case: 860 | Input/Output: [(-54 83 29 -6) -54]
Test Case: 861 | Input/Output: [(-22 89 97 7) -22]
Test Case: 862 | Input/Output: [(-74 -13 -41 -61) -74]
Test Case: 863 | Input/Output: [(59 -9 76 15) -9]
Test Case: 864 | Input/Output: [(-89 -2 11 -62) -89]
Test Case: 865 | Input/Output: [(-38 -81 -63 8) -81]
Test Case: 866 | Input/Output: [(-58 -84 48 66) -84]
Test Case: 867 | Input/Output: [(73 84 79 81) 73]
Test Case: 868 | Input/Output: [(-67 57 63 -77) -77]
Test Case: 869 | Input/Output: [(39 -3 -57 -1) -57]
Test Case: 870 | Input/Output: [(-15 -69 45 -100) -100]
Test Case: 871 | Input/Output: [(90 -60 80 -56) -60]
Test Case: 872 | Input/Output: [(94 31 40 55) 31]
Test Case: 873 | Input/Output: [(82 -94 35 -21) -94]
Test Case: 874 | Input/Output: [(-100 -31 -23 -99) -100]
Test Case: 875 | Input/Output: [(-23 16 15 91) -23]
Test Case: 876 | Input/Output: [(-97 -45 19 -93) -97]
Test Case: 877 | Input/Output: [(45 24 -73 -100) -100]
Test Case: 878 | Input/Output: [(-35 19 54 -86) -86]
Test Case: 879 | Input/Output: [(55 72 4 -97) -97]
Test Case: 880 | Input/Output: [(66 -35 -48 -19) -48]
Test Case: 881 | Input/Output: [(-20 -33 -3 67) -33]
Test Case: 882 | Input/Output: [(-18 -19 28 -29) -29]
Test Case: 883 | Input/Output: [(64 87 -32 -71) -71]
Test Case: 884 | Input/Output: [(67 35 -29 56) -29]
Test Case: 885 | Input/Output: [(-32 -76 68 -6) -76]
Test Case: 886 | Input/Output: [(67 -43 4 -29) -43]
Test Case: 887 | Input/Output: [(55 100 -58 68) -58]
Test Case: 888 | Input/Output: [(-69 11 -44 49) -69]
Test Case: 889 | Input/Output: [(43 -30 19 9) -30]
Test Case: 890 | Input/Output: [(-44 26 -78 -5) -78]
Test Case: 891 | Input/Output: [(-79 -68 -30 -35) -79]
Test Case: 892 | Input/Output: [(13 62 56 65) 13]
Test Case: 893 | Input/Output: [(-59 14 22 80) -59]
Test Case: 894 | Input/Output: [(62 54 11 -59) -59]
Test Case: 895 | Input/Output: [(-90 -34 94 64) -90]
Test Case: 896 | Input/Output: [(23 78 50 10) 10]
Test Case: 897 | Input/Output: [(50 -35 19 -18) -35]
Test Case: 898 | Input/Output: [(95 -88 -16 75) -88]
Test Case: 899 | Input/Output: [(-72 -97 -17 -63) -97]
Test Case: 900 | Input/Output: [(81 40 -11 28) -11]
Test Case: 901 | Input/Output: [(-45 -89 -50 -86) -89]
Test Case: 902 | Input/Output: [(44 86 -98 -53) -98]
Test Case: 903 | Input/Output: [(15 14 -75 -38) -75]
Test Case: 904 | Input/Output: [(-20 -37 70 -57) -57]
Test Case: 905 | Input/Output: [(-95 -2 -43 1) -95]
Test Case: 906 | Input/Output: [(45 -92 -7 -25) -92]
Test Case: 907 | Input/Output: [(-74 -36 -19 -61) -74]
Test Case: 908 | Input/Output: [(-28 -36 39 64) -36]
Test Case: 909 | Input/Output: [(-75 -90 83 39) -90]
Test Case: 910 | Input/Output: [(16 52 29 -75) -75]
Test Case: 911 | Input/Output: [(75 -10 100 67) -10]
Test Case: 912 | Input/Output: [(10 74 99 -32) -32]
Test Case: 913 | Input/Output: [(48 -37 -76 74) -76]
Test Case: 914 | Input/Output: [(5 -96 -5 -54) -96]
Test Case: 915 | Input/Output: [(14 35 -96 -95) -96]
Test Case: 916 | Input/Output: [(81 -1 6 -100) -100]
Test Case: 917 | Input/Output: [(33 -30 -66 -90) -90]
Test Case: 918 | Input/Output: [(-84 -36 29 39) -84]
Test Case: 919 | Input/Output: [(59 -27 49 5) -27]
Test Case: 920 | Input/Output: [(-16 50 -57 -48) -57]
Test Case: 921 | Input/Output: [(40 -89 -91 -17) -91]
Test Case: 922 | Input/Output: [(-58 89 -50 -76) -76]
Test Case: 923 | Input/Output: [(-67 -79 59 -92) -92]
Test Case: 924 | Input/Output: [(-8 13 -94 64) -94]
Test Case: 925 | Input/Output: [(49 -72 -92 -90) -92]
Test Case: 926 | Input/Output: [(88 -55 -61 0) -61]
Test Case: 927 | Input/Output: [(-69 60 61 32) -69]
Test Case: 928 | Input/Output: [(-14 50 73 -96) -96]
Test Case: 929 | Input/Output: [(32 62 -42 48) -42]
Test Case: 930 | Input/Output: [(-81 -2 8 -25) -81]
Test Case: 931 | Input/Output: [(77 -78 -100 15) -100]
Test Case: 932 | Input/Output: [(-39 -11 -8 90) -39]
Test Case: 933 | Input/Output: [(75 65 -81 -26) -81]
Test Case: 934 | Input/Output: [(15 -48 83 22) -48]
Test Case: 935 | Input/Output: [(57 -22 80 -46) -46]
Test Case: 936 | Input/Output: [(53 29 -35 -84) -84]
Test Case: 937 | Input/Output: [(69 78 -56 -60) -60]
Test Case: 938 | Input/Output: [(-66 -97 97 59) -97]
Test Case: 939 | Input/Output: [(21 -17 66 60) -17]
Test Case: 940 | Input/Output: [(65 43 -5 -4) -5]
Test Case: 941 | Input/Output: [(-78 -40 4 -71) -78]
Test Case: 942 | Input/Output: [(-19 -81 16 69) -81]
Test Case: 943 | Input/Output: [(-27 99 46 -19) -27]
Test Case: 944 | Input/Output: [(-25 -82 18 25) -82]
Test Case: 945 | Input/Output: [(-43 73 14 -67) -67]
Test Case: 946 | Input/Output: [(53 36 81 87) 36]
Test Case: 947 | Input/Output: [(-55 9 -47 -18) -55]
Test Case: 948 | Input/Output: [(-10 35 46 47) -10]
Test Case: 949 | Input/Output: [(88 53 92 -73) -73]
Test Case: 950 | Input/Output: [(-56 73 48 78) -56]
Test Case: 951 | Input/Output: [(-16 -2 40 -18) -18]
Test Case: 952 | Input/Output: [(-32 24 53 52) -32]
Test Case: 953 | Input/Output: [(-27 79 -75 -65) -75]
Test Case: 954 | Input/Output: [(-38 88 30 -92) -92]
Test Case: 955 | Input/Output: [(-97 23 -92 68) -97]
Test Case: 956 | Input/Output: [(-21 -49 -45 -86) -86]
Test Case: 957 | Input/Output: [(25 -27 -67 3) -67]
Test Case: 958 | Input/Output: [(-42 -66 -75 -22) -75]
Test Case: 959 | Input/Output: [(-99 -52 66 99) -99]
Test Case: 960 | Input/Output: [(0 -1 98 53) -1]
Test Case: 961 | Input/Output: [(-30 -18 -60 6) -60]
Test Case: 962 | Input/Output: [(24 -87 -4 99) -87]
Test Case: 963 | Input/Output: [(-62 45 79 45) -62]
Test Case: 964 | Input/Output: [(42 45 77 56) 42]
Test Case: 965 | Input/Output: [(57 49 -81 -29) -81]
Test Case: 966 | Input/Output: [(68 -52 82 22) -52]
Test Case: 967 | Input/Output: [(23 62 0 -20) -20]
Test Case: 968 | Input/Output: [(80 65 74 0) 0]
Test Case: 969 | Input/Output: [(-81 -53 59 72) -81]
Test Case: 970 | Input/Output: [(-98 13 23 -60) -98]
Test Case: 971 | Input/Output: [(-51 46 84 -96) -96]
Test Case: 972 | Input/Output: [(53 42 -23 8) -23]
Test Case: 973 | Input/Output: [(89 97 -41 -30) -41]
Test Case: 974 | Input/Output: [(72 93 -39 54) -39]
Test Case: 975 | Input/Output: [(45 -91 -31 -32) -91]
Test Case: 976 | Input/Output: [(86 0 -77 -47) -77]
Test Case: 977 | Input/Output: [(37 75 43 -14) -14]
Test Case: 978 | Input/Output: [(-41 -66 -37 -49) -66]
Test Case: 979 | Input/Output: [(15 19 69 44) 15]
Test Case: 980 | Input/Output: [(10 -46 86 -56) -56]
Test Case: 981 | Input/Output: [(-61 77 -52 -8) -61]
Test Case: 982 | Input/Output: [(77 26 3 -53) -53]
Test Case: 983 | Input/Output: [(26 -40 -50 -38) -50]
Test Case: 984 | Input/Output: [(-47 85 39 -32) -47]
Test Case: 985 | Input/Output: [(-51 89 -3 -85) -85]
Test Case: 986 | Input/Output: [(60 59 4 -85) -85]
Test Case: 987 | Input/Output: [(-15 82 35 -74) -74]
Test Case: 988 | Input/Output: [(18 7 34 -22) -22]
Test Case: 989 | Input/Output: [(27 33 7 54) 7]
Test Case: 990 | Input/Output: [(10 55 -44 -64) -64]
Test Case: 991 | Input/Output: [(30 -3 37 -84) -84]
Test Case: 992 | Input/Output: [(60 64 96 89) 60]
Test Case: 993 | Input/Output: [(89 38 65 -60) -60]
Test Case: 994 | Input/Output: [(47 74 96 54) 47]
Test Case: 995 | Input/Output: [(42 -99 -7 -33) -99]
Test Case: 996 | Input/Output: [(15 4 -91 5) -91]
Test Case: 997 | Input/Output: [(-94 55 70 -55) -94]
Test Case: 998 | Input/Output: [(-74 26 -77 74) -77]
Test Case: 999 | Input/Output: [(72 -45 -69 53) -69]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -30 14 35 46 26 90 81 -100 59 -128 93 75 25 89 -21 -58
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-41 -5 -41 -41] -41] [[-46 -46 -46 -2] -46] [[1 1 1 -70] -70] [[100 -61 100 100] -61] [[50 50 3 50] 3] [[32 9 9 9] 9] [[10 48 48 48] 10] [[-81 -77 -77 -77] -81] [[30 30 66 30] 30] [[18 -92 -92 -92] -92] [(10 10 10 10) 10] [(27 27 27 27) 27] [(-67 -67 -67 -67) -67] [(85 85 85 85) 85] [(-87 -87 -87 -87) -87] [(36 10 81 33) 10] [(97 83 53 9) 9] [(73 58 92 96) 58] [(76 68 41 44) 41] [(58 4 28 49) 4] [(36 95 14 93) 14] [(48 58 24 92) 24] [(24 38 77 42) 24] [(11 89 87 65) 11] [(96 38 43 13) 13] [(62 89 13 30) 13] [(31 86 69 52) 31] [(35 54 96 24) 24] [(76 54 2 90) 2] [(47 64 3 57) 3] [(66 41 47 81) 41] [(6 35 95 26) 6] [(40 86 68 80) 40] [(32 75 62 56) 32] [(29 86 31 79) 29] [(70 100 43 47) 43] [(26 -45 -5 -48) -48] [(64 -47 1 33) -47] [(-33 52 -18 42) -33] [(19 -47 -60 31) -60] [(32 89 95 -73) -73] [(-19 57 65 -51) -51] [(-87 14 92 -73) -87] [(48 -79 -66 4) -79] [(50 39 66 -35) -35] [(-19 -7 -90 71) -90] [(60 -48 -26 4) -48] [(-17 -63 37 78) -63] [(-39 78 70 20) -39] [(64 54 -47 3) -47] [(16 76 42 -54) -54] [(-17 5 93 -32) -32] [(-39 48 15 16) -39] [(7 35 -13 -23) -23] [(20 16 -77 40) -77] [(-47 -47 78 -54) -54] [(76 51 20 21) 20] [(-84 -72 -37 -14) -84] [(75 34 -41 73) -41] [(-63 3 55 -34) -63] [(15 81 -6 -55) -55] [(-76 39 -14 -92) -92] [(66 -99 41 99) -99] [(16 74 61 -84) -84] [(51 51 96 -1) -1] [(47 16 74 -41) -41] [(80 -74 -66 -11) -74] [(35 82 42 -94) -94] [(93 -35 -34 59) -35] [(-98 -92 -7 93) -98] [(43 -76 98 -46) -76] [(23 -31 100 94) -31] [(-19 -84 -36 0) -84] [(97 4 4 -33) -33] [(56 -73 31 70) -73] [(-8 7 26 57) -8] [(41 -70 33 -78) -78] [(76 57 -27 29) -27] [(20 -93 -58 70) -93] [(68 68 -70 -19) -70] [(31 28 -56 3) -56] [(-60 28 -61 47) -61] [(-37 -73 -72 -31) -73] [(51 5 -4 -59) -59] [(75 -24 24 -84) -84] [(-93 95 68 -74) -93] [(85 -28 -61 42) -61] [(-57 -99 -52 76) -99] [(-21 39 49 46) -21] [(-34 -67 -30 79) -67] [(-1 -45 -48 3) -48] [(15 -12 -44 -37) -44] [(-63 28 8 -48) -63] [(-45 -41 41 -38) -45] [(-28 -25 -61 -3) -61])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -45                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: 89                 
Correct output: -51                 | Program output: 57                 
Correct output: -87                 | Program output: 14                 
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: 39                 
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: 76                 
Correct output: -32                 | Program output: 5                  
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: 35                 
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: 3                  
Correct output: -55                 | Program output: 81                 
Correct output: -92                 | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: 74                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 82                 
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -70                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: 5                  
Correct output: -84                 | Program output: -24                
Correct output: -93                 | Program output: 95                 
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -12                
Correct output: -63                 | Program output: 28                 
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_292} {:close 3, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction tag_integer_699} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times})
Lexicase best program: (exec_when (boolean_yankdup boolean_invert_first_then_and in2 print_integer tagged_292 exec_pop ()) exec_while (print_newline tag_integer_699 exec_stackdepth in2 integer_empty) boolean_yankdup boolean_stackdepth boolean_eq exec_dup_times ())
Lexicase best errors: [0 0 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 22
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_292} {:close 3, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction tag_integer_699} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times})
Zero cases best program: (exec_when (boolean_yankdup boolean_invert_first_then_and in2 print_integer tagged_292 exec_pop ()) exec_while (print_newline tag_integer_699 exec_stackdepth in2 integer_empty) boolean_yankdup boolean_stackdepth boolean_eq exec_dup_times ())
Zero cases best errors: [0 0 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 22
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 8 9 7 1 2 12 2 1 3)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (6 8 9 7 1 2 12 2 1 3)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dec} {:close 1, :instruction tagged_608} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 2, :instruction tag_boolean_950} {:close 0, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_64} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_eq})
Best program: (integer_rot exec_eq exec_yankdup exec_shove (boolean_and boolean_invert_first_then_and integer_dec) tagged_608 in1 boolean_invert_second_then_and exec_shove (exec_rot (boolean_frominteger exec_pop (boolean_dup_items boolean_not integer_dup_items in3 boolean_empty boolean_not) exec_yank exec_when (boolean_yank boolean_dup_items) exec_when (in2) exec_y (print_integer integer_dup exec_dup ()) exec_dup_items print_exec (exec_dup (exec_if (integer_dup integer_sub boolean_empty integer_flush integer_rot in3 in4) (exec_dup (boolean_invert_first_then_and exec_s_when_autoconstructing (boolean_or print_newline tag_boolean_950) () (integer_min integer_flush) print_integer) exec_eq integer_mult tagged_64 exec_stackdepth exec_eq)))) () ()))
Errors: [0 0 0 0 1 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 55
Size: 74
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 9.949
Median total errors in population: 10
Error averages by case: (0.994 0.992 0.991 0.993 0.999 0.998 0.988 0.998 0.999 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.83
Average program size in population (points): 67.181
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 485250
--- Timings ---
Current time: 1559583310514 milliseconds
Total Time:           2.3 seconds
Initialization:       0.1 seconds,  5.1%
Reproduction:         0.8 seconds, 35.4%
Fitness Testing:      1.3 seconds, 59.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 36                 
Correct output: 9                   | Program output: 97                 
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 76                 
Correct output: 4                   | Program output: 58                 
Correct output: 14                  | Program output: 36                 
Correct output: 24                  | Program output: 48                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 96                 
Correct output: 13                  | Program output: 62                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 76                 
Correct output: 3                   | Program output: 47                 
Correct output: 41                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 70                 
Correct output: -48                 | Program output: 26                 
Correct output: -47                 | Program output: 64                 
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: 19                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -19                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 48                 
Correct output: -35                 | Program output: 50                 
Correct output: -90                 | Program output: -19                
Correct output: -48                 | Program output: 60                 
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: 64                 
Correct output: -54                 | Program output: 16                 
Correct output: -32                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: 7                  
Correct output: -77                 | Program output: 20                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 76                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: 75                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -76                
Correct output: -99                 | Program output: 66                 
Correct output: -84                 | Program output: 16                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 47                 
Correct output: -74                 | Program output: 80                 
Correct output: -94                 | Program output: 35                 
Correct output: -35                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 43                 
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -19                
Correct output: -33                 | Program output: 97                 
Correct output: -73                 | Program output: 56                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: 41                 
Correct output: -27                 | Program output: 76                 
Correct output: -93                 | Program output: 20                 
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 31                 
Correct output: -61                 | Program output: -60                
Correct output: -73                 | Program output: -37                
Correct output: -59                 | Program output: 51                 
Correct output: -84                 | Program output: 75                 
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: 85                 
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -1                 
Correct output: -44                 | Program output: 15                 
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_dup_items exec_do*range () integer_dup_times boolean_empty integer_eq exec_dup_times (boolean_xor exec_while (integer_eq integer_mod boolean_dup_items) integer_yankdup integer_max) in4 integer_yank print_integer exec_when (exec_if (boolean_and) (exec_shove (integer_lt) exec_noop) integer_pop exec_do*times () exec_when (boolean_shove integer_flush) integer_lt exec_dup (boolean_and)) integer_flush integer_dup boolean_eq integer_rot integer_pop exec_yank integer_sub boolean_eq exec_s_when_autoconstructing () (integer_max integer_rot boolean_yank boolean_dup_items exec_do*while (integer_mod integer_dup boolean_swap) boolean_pop) (integer_gte boolean_swap integer_min exec_yank boolean_shove))
Lexicase best errors: [1 1 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 68
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_dup_items exec_do*range () integer_dup_times boolean_empty integer_eq exec_dup_times (boolean_xor exec_while (integer_eq integer_mod boolean_dup_items) integer_yankdup integer_max) in4 integer_yank print_integer exec_when (exec_if (boolean_and) (exec_shove (integer_lt) exec_noop) integer_pop exec_do*times () exec_when (boolean_shove integer_flush) integer_lt exec_dup (boolean_and)) integer_flush integer_dup boolean_eq integer_rot integer_pop exec_yank integer_sub boolean_eq exec_s_when_autoconstructing () (integer_max integer_rot boolean_yank boolean_dup_items exec_do*while (integer_mod integer_dup boolean_swap) boolean_pop) (integer_gte boolean_swap integer_min exec_yank boolean_shove))
Zero cases best errors: [1 1 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 68
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (290 295 220 107 295 220 107 295 107 220)
Population mean number of elite cases: 2.16
Count of perfect (error zero) individuals by case: (290 295 220 107 295 220 107 295 107 220)
Population mean number of perfect (error zero) cases: 2.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction -78} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Best program: (integer_swap integer_lte integer_min in1 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_eq integer_mod) (integer_rot boolean_empty exec_s () (integer_swap boolean_shove integer_div exec_empty -78 exec_shove (in1 integer_dup_items) integer_dup_items integer_shove exec_stackdepth exec_if (boolean_rot integer_gte) (boolean_yank exec_noop)) ()))
Errors: [1 0 1 1 0 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 35
Size: 45
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.844
Median total errors in population: 7
Error averages by case: (0.71 0.705 0.78 0.893 0.705 0.78 0.893 0.705 0.893 0.78)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.674
Average program size in population (points): 51.62
Average percent parens in population: 0.248
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.514
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 178
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 886361
--- Timings ---
Current time: 1559583312873 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         2.4 seconds, 45.7%
Fitness Testing:      1.8 seconds, 34.9%
Report:               0.9 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_546} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_flush})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 exec_k (print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_dup_items in1)) (integer_add integer_lte integer_sub exec_s_when_autoconstructing (tagged_546) (integer_lt integer_yankdup) () exec_do*times () exec_flush))
Lexicase best errors: [1 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_546} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_flush})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 exec_k (print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_dup_items in1)) (integer_add integer_lte integer_sub exec_s_when_autoconstructing (tagged_546) (integer_lt integer_yankdup) () exec_do*times () exec_flush))
Zero cases best errors: [1 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (278 273 831 920 273 278 642 90 279 273)
Population mean number of elite cases: 4.14
Count of perfect (error zero) individuals by case: (278 273 831 920 273 278 642 90 279 273)
Population mean number of perfect (error zero) cases: 4.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction tagged_944} {:close 0, :instruction exec_when} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_pop})
Best program: (boolean_dup in3 integer_mult integer_shove exec_while () integer_fromboolean print_integer boolean_rot exec_do*count () exec_when (boolean_pop exec_do*while (integer_fromboolean exec_if (integer_lt boolean_and) (boolean_swap) exec_when (exec_dup_items exec_while (exec_k (boolean_shove exec_y_when_autoconstructing (exec_empty exec_dup_times () exec_shove () exec_pop (boolean_pop exec_noop exec_yank boolean_invert_first_then_and exec_dup (integer_flush) print_newline boolean_shove) print_exec (exec_yank integer_mult) boolean_stackdepth) tagged_944) (exec_when (integer_add) integer_eq exec_if (exec_y_when_autoconstructing (in1 integer_inc integer_lt exec_while (exec_k (integer_div exec_dup_items boolean_yankdup integer_min integer_dup_items) (exec_y () in2 integer_lt exec_noop boolean_dup exec_do*while () integer_dup exec_do*count (in2 in2) boolean_rot print_exec (boolean_pop))))) ()))))))
Errors: [1 0 0 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 68
Size: 96
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 5.863
Median total errors in population: 5
Error averages by case: (0.722 0.727 0.169 0.08 0.727 0.722 0.358 0.91 0.721 0.727)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.632
Average program size in population (points): 50.571
Average percent parens in population: 0.257
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9555
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1220193
--- Timings ---
Current time: 1559583315807 milliseconds
Total Time:           8.2 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.7 seconds, 57.5%
Fitness Testing:      2.1 seconds, 26.0%
Report:               1.2 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 36                 
Correct output: 9                   | Program output: 97                 
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 76                 
Correct output: 4                   | Program output: 58                 
Correct output: 14                  | Program output: 36                 
Correct output: 24                  | Program output: 48                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 96                 
Correct output: 13                  | Program output: 62                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 76                 
Correct output: 3                   | Program output: 47                 
Correct output: 41                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 70                 
Correct output: -48                 | Program output: 26                 
Correct output: -47                 | Program output: 64                 
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: 19                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -19                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 48                 
Correct output: -35                 | Program output: 50                 
Correct output: -90                 | Program output: -19                
Correct output: -48                 | Program output: 60                 
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: 64                 
Correct output: -54                 | Program output: 16                 
Correct output: -32                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: 7                  
Correct output: -77                 | Program output: 20                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 76                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: 75                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -76                
Correct output: -99                 | Program output: 66                 
Correct output: -84                 | Program output: 16                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 47                 
Correct output: -74                 | Program output: 80                 
Correct output: -94                 | Program output: 35                 
Correct output: -35                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 43                 
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -19                
Correct output: -33                 | Program output: 97                 
Correct output: -73                 | Program output: 56                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: 41                 
Correct output: -27                 | Program output: 76                 
Correct output: -93                 | Program output: 20                 
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 31                 
Correct output: -61                 | Program output: -60                
Correct output: -73                 | Program output: -37                
Correct output: -59                 | Program output: 51                 
Correct output: -84                 | Program output: 75                 
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: 85                 
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -1                 
Correct output: -44                 | Program output: 15                 
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction -78} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Lexicase best program: (boolean_yank integer_swap integer_lte integer_min in1 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_eq integer_mod) (integer_rot boolean_empty exec_s () (integer_swap boolean_shove integer_div exec_empty -78 exec_shove (in1 integer_dup_items) integer_dup_items integer_shove exec_stackdepth exec_if (boolean_rot integer_gte) (boolean_yank exec_noop)) ()))
Lexicase best errors: [0 1 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction -78} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Zero cases best program: (boolean_yank integer_swap integer_lte integer_min in1 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_eq integer_mod) (integer_rot boolean_empty exec_s () (integer_swap boolean_shove integer_div exec_empty -78 exec_shove (in1 integer_dup_items) integer_dup_items integer_shove exec_stackdepth exec_if (boolean_rot integer_gte) (boolean_yank exec_noop)) ()))
Zero cases best errors: [0 1 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (366 120 436 1000 1000 436 366 366 366 366)
Population mean number of elite cases: 4.82
Count of perfect (error zero) individuals by case: (366 120 436 0 0 436 366 366 366 366)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction -78} {:close 0, :instruction tagged_703} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Best program: (integer_swap integer_lte integer_min in1 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_eq integer_mod) (integer_rot boolean_empty exec_s () (integer_swap boolean_shove integer_div exec_empty -78 tagged_703 in1 integer_dup_items) (integer_dup_items integer_shove exec_stackdepth exec_if (boolean_rot integer_gte) (boolean_yank exec_noop))))
Errors: [0 1 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 7.178
Median total errors in population: 8
Error averages by case: (0.634 0.88 0.564 1.0 1.0 0.564 0.634 0.634 0.634 0.634)
Error minima by case: (0 0 0 1 1 0 0 0 0 0)
Average genome size in population (length): 37.858
Average program size in population (points): 50.958
Average percent parens in population: 0.251
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.46025
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1553794
--- Timings ---
Current time: 1559583318714 milliseconds
Total Time:          11.0 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.9 seconds, 62.8%
Fitness Testing:      2.5 seconds, 22.7%
Report:               1.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_546} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_flush})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 exec_k (print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_dup_items in1)) (integer_add integer_lte integer_sub exec_s_when_autoconstructing (tagged_546) (integer_lt integer_yankdup) () exec_do*times () exec_flush))
Lexicase best errors: [0 1 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_546} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_flush})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 exec_k (print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_dup_items in1)) (integer_add integer_lte integer_sub exec_s_when_autoconstructing (tagged_546) (integer_lt integer_yankdup) () exec_do*times () exec_flush))
Zero cases best errors: [0 1 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 1000 1000 1000 1000 568 564 240 240 240)
Population mean number of elite cases: 6.09
Count of perfect (error zero) individuals by case: (239 0 0 0 0 568 564 240 240 240)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_546} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_flush})
Best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 exec_k (print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq boolean_yankdup exec_dup_items in1)) (integer_add integer_lte integer_sub exec_s_when_autoconstructing (tagged_546) (integer_lt integer_yankdup) () exec_do*times () exec_flush))
Errors: [0 1 1 1 1 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 26
Size: 35
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 7.909
Median total errors in population: 8
Error averages by case: (0.761 1.0 1.0 1.0 1.0 0.432 0.436 0.76 0.76 0.76)
Error minima by case: (0 1 1 1 1 0 0 0 0 0)
Average genome size in population (length): 36.533
Average program size in population (points): 48.513
Average percent parens in population: 0.243
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.96425
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1928905
--- Timings ---
Current time: 1559583321549 milliseconds
Total Time:          14.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         9.1 seconds, 65.4%
Fitness Testing:      2.9 seconds, 20.7%
Report:               1.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 36                 
Correct output: 9                   | Program output: 97                 
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 76                 
Correct output: 4                   | Program output: 58                 
Correct output: 14                  | Program output: 36                 
Correct output: 24                  | Program output: 48                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 96                 
Correct output: 13                  | Program output: 62                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 76                 
Correct output: 3                   | Program output: 47                 
Correct output: 41                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 70                 
Correct output: -48                 | Program output: 26                 
Correct output: -47                 | Program output: 64                 
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: 19                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -19                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 48                 
Correct output: -35                 | Program output: 50                 
Correct output: -90                 | Program output: -19                
Correct output: -48                 | Program output: 60                 
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: 64                 
Correct output: -54                 | Program output: 16                 
Correct output: -32                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: 7                  
Correct output: -77                 | Program output: 20                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 76                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: 75                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -76                
Correct output: -99                 | Program output: 66                 
Correct output: -84                 | Program output: 16                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 47                 
Correct output: -74                 | Program output: 80                 
Correct output: -94                 | Program output: 35                 
Correct output: -35                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 43                 
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -19                
Correct output: -33                 | Program output: 97                 
Correct output: -73                 | Program output: 56                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: 41                 
Correct output: -27                 | Program output: 76                 
Correct output: -93                 | Program output: 20                 
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 31                 
Correct output: -61                 | Program output: -60                
Correct output: -73                 | Program output: -37                
Correct output: -59                 | Program output: 51                 
Correct output: -84                 | Program output: 75                 
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: 85                 
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -1                 
Correct output: -44                 | Program output: 15                 
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_485} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_flush})
Lexicase best program: (integer_swap integer_lte integer_min in1 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_eq integer_mod) (integer_sub exec_s_when_autoconstructing (tagged_485) (integer_lt integer_yankdup) () exec_do*times () exec_flush))
Lexicase best errors: [1 0 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_485} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_flush})
Zero cases best program: (integer_swap integer_lte integer_min in1 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_eq integer_mod) (integer_sub exec_s_when_autoconstructing (tagged_485) (integer_lt integer_yankdup) () exec_do*times () exec_flush))
Zero cases best errors: [1 0 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 307 1 1000 307 307 612 920 612 1000)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (1 307 1 0 307 307 612 920 612 0)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 1, :instruction -78} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Best program: (integer_swap integer_lte integer_min in1 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_eq integer_mod) (integer_rot boolean_empty exec_s () (integer_swap boolean_shove integer_div exec_empty -78) (exec_shove (in1 integer_dup_items integer_dup_items integer_shove exec_stackdepth exec_if (boolean_rot integer_gte) (boolean_yank exec_noop)))))
Errors: [1 0 1 1 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 35
Size: 45
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.933
Median total errors in population: 7
Error averages by case: (0.999 0.693 0.999 1.0 0.693 0.693 0.388 0.08 0.388 1.0)
Error minima by case: (0 0 0 1 0 0 0 0 0 1)
Average genome size in population (length): 35.863
Average program size in population (points): 48.78
Average percent parens in population: 0.260
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.46625
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2232586
--- Timings ---
Current time: 1559583324001 milliseconds
Total Time:          16.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.9 seconds, 67.1%
Fitness Testing:      3.2 seconds, 19.7%
Report:               2.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 36                 
Correct output: 9                   | Program output: 97                 
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 76                 
Correct output: 4                   | Program output: 58                 
Correct output: 14                  | Program output: 36                 
Correct output: 24                  | Program output: 48                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 96                 
Correct output: 13                  | Program output: 62                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 76                 
Correct output: 3                   | Program output: 47                 
Correct output: 41                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 70                 
Correct output: -48                 | Program output: 26                 
Correct output: -47                 | Program output: 64                 
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: 19                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -19                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 48                 
Correct output: -35                 | Program output: 50                 
Correct output: -90                 | Program output: -19                
Correct output: -48                 | Program output: 60                 
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: 64                 
Correct output: -54                 | Program output: 16                 
Correct output: -32                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: 7                  
Correct output: -77                 | Program output: 20                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 76                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: 75                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -76                
Correct output: -99                 | Program output: 66                 
Correct output: -84                 | Program output: 16                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 47                 
Correct output: -74                 | Program output: 80                 
Correct output: -94                 | Program output: 35                 
Correct output: -35                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 43                 
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -19                
Correct output: -33                 | Program output: 97                 
Correct output: -73                 | Program output: 56                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: 41                 
Correct output: -27                 | Program output: 76                 
Correct output: -93                 | Program output: 20                 
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 31                 
Correct output: -61                 | Program output: -60                
Correct output: -73                 | Program output: -37                
Correct output: -59                 | Program output: 51                 
Correct output: -84                 | Program output: 75                 
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: 85                 
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -1                 
Correct output: -44                 | Program output: 15                 
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s})
Lexicase best program: (integer_swap integer_lte integer_min in1 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_eq integer_mod) (integer_rot boolean_empty exec_s () () ()))
Lexicase best errors: [1 1 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s})
Zero cases best program: (integer_swap integer_lte integer_min in1 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_eq integer_mod) (integer_rot boolean_empty exec_s () () ()))
Zero cases best errors: [1 1 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 269 397 269 397 666 269 397 397 283)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (283 269 397 269 397 666 269 397 397 283)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction -78} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Best program: (integer_swap integer_lte integer_min in1 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_eq integer_mod) (integer_rot boolean_empty exec_s () (integer_swap integer_rot boolean_empty exec_s () (integer_swap boolean_shove integer_div integer_swap -78 exec_shove (in1 integer_dup_items) integer_dup_items integer_shove exec_stackdepth exec_if (boolean_rot integer_gte) (boolean_yank exec_noop)) ()) ()))
Errors: [1 1 0 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 39
Size: 52
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.373
Median total errors in population: 6
Error averages by case: (0.717 0.731 0.603 0.731 0.603 0.334 0.731 0.603 0.603 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.916
Average program size in population (points): 47.843
Average percent parens in population: 0.247
Minimum age in population: 6.0
Maximum age in population: 11.03125
Average age in population: 8.8601875
Median age in population: 8.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2555451
--- Timings ---
Current time: 1559583326517 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.7 seconds, 67.9%
Fitness Testing:      3.5 seconds, 18.8%
Report:               2.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 36                 
Correct output: 9                   | Program output: 97                 
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 76                 
Correct output: 4                   | Program output: 58                 
Correct output: 14                  | Program output: 36                 
Correct output: 24                  | Program output: 48                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 96                 
Correct output: 13                  | Program output: 62                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 76                 
Correct output: 3                   | Program output: 47                 
Correct output: 41                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 70                 
Correct output: -48                 | Program output: 26                 
Correct output: -47                 | Program output: 64                 
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: 19                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -19                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 48                 
Correct output: -35                 | Program output: 50                 
Correct output: -90                 | Program output: -19                
Correct output: -48                 | Program output: 60                 
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: 64                 
Correct output: -54                 | Program output: 16                 
Correct output: -32                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: 7                  
Correct output: -77                 | Program output: 20                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 76                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: 75                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -76                
Correct output: -99                 | Program output: 66                 
Correct output: -84                 | Program output: 16                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 47                 
Correct output: -74                 | Program output: 80                 
Correct output: -94                 | Program output: 35                 
Correct output: -35                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 43                 
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -19                
Correct output: -33                 | Program output: 97                 
Correct output: -73                 | Program output: 56                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: 41                 
Correct output: -27                 | Program output: 76                 
Correct output: -93                 | Program output: 20                 
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 31                 
Correct output: -61                 | Program output: -60                
Correct output: -73                 | Program output: -37                
Correct output: -59                 | Program output: 51                 
Correct output: -84                 | Program output: 75                 
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: 85                 
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -1                 
Correct output: -44                 | Program output: 15                 
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction tagged_944} {:close 0, :instruction exec_when} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div})
Lexicase best program: (boolean_dup in3 integer_mult integer_shove exec_while () integer_fromboolean print_integer boolean_rot exec_do*count () exec_when (boolean_pop exec_do*while (integer_fromboolean exec_if (integer_lt boolean_and) (boolean_swap) exec_when (exec_dup_items exec_while (exec_k (boolean_shove exec_y_when_autoconstructing (exec_empty exec_dup_times () exec_shove () exec_pop (boolean_pop exec_noop exec_yank boolean_invert_first_then_and boolean_rot integer_flush) print_newline boolean_shove) print_exec (boolean_stackdepth integer_mult) boolean_stackdepth) (tagged_944) exec_when (integer_add) integer_eq exec_if (exec_y_when_autoconstructing (in1 integer_inc integer_lt exec_while (exec_k (integer_div) ()))) ())))))
Lexicase best errors: [1 1 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 74
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction tagged_944} {:close 0, :instruction exec_when} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div})
Zero cases best program: (boolean_dup in3 integer_mult integer_shove exec_while () integer_fromboolean print_integer boolean_rot exec_do*count () exec_when (boolean_pop exec_do*while (integer_fromboolean exec_if (integer_lt boolean_and) (boolean_swap) exec_when (exec_dup_items exec_while (exec_k (boolean_shove exec_y_when_autoconstructing (exec_empty exec_dup_times () exec_shove () exec_pop (boolean_pop exec_noop exec_yank boolean_invert_first_then_and boolean_rot integer_flush) print_newline boolean_shove) print_exec (boolean_stackdepth integer_mult) boolean_stackdepth) (tagged_944) exec_when (integer_add) integer_eq exec_if (exec_y_when_autoconstructing (in1 integer_inc integer_lt exec_while (exec_k (integer_div) ()))) ())))))
Zero cases best errors: [1 1 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 74
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 410 950 1000 950 611 201 339 339 1000)
Population mean number of elite cases: 6.80
Count of perfect (error zero) individuals by case: (0 410 950 0 950 611 201 339 339 0)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction -78} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction -78} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Best program: (integer_swap integer_lte integer_dec in1 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_eq integer_mod) (integer_rot boolean_empty exec_s () (integer_swap boolean_shove exec_do*count (boolean_empty -78 exec_shove (in1 integer_dup_items) -78 exec_shove (in1 integer_dup_items) integer_dup_items integer_shove exec_stackdepth exec_if (boolean_rot integer_gte) (boolean_yank exec_noop))) ()))
Errors: [1 0 0 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 39
Size: 51
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.2
Median total errors in population: 6
Error averages by case: (1.0 0.59 0.05 1.0 0.05 0.389 0.799 0.661 0.661 1.0)
Error minima by case: (1 0 0 1 0 0 0 0 0 1)
Average genome size in population (length): 35.168
Average program size in population (points): 46.917
Average percent parens in population: 0.248
Minimum age in population: 7.0
Maximum age in population: 12.296875
Average age in population: 10.37353125
Median age in population: 10.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.002
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2876445
--- Timings ---
Current time: 1559583329163 milliseconds
Total Time:          21.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.7 seconds, 68.7%
Fitness Testing:      3.8 seconds, 17.9%
Report:               2.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_546} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_flush})
Lexicase best program: (boolean_stackdepth integer_min exec_dup_items boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 exec_k (print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_dup_items in1) integer_add integer_lte integer_sub exec_s_when_autoconstructing (tagged_546) (integer_lt integer_yankdup) () exec_do*times () exec_flush)
Lexicase best errors: [1 1 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_546} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_flush})
Zero cases best program: (boolean_stackdepth integer_min exec_dup_items boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 exec_k (print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_dup_items in1) integer_add integer_lte integer_sub exec_s_when_autoconstructing (tagged_546) (integer_lt integer_yankdup) () exec_do*times () exec_flush)
Zero cases best errors: [1 1 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (276 1000 372 1000 1000 1000 373 276 660 288)
Population mean number of elite cases: 6.24
Count of perfect (error zero) individuals by case: (276 0 372 0 0 0 373 276 660 288)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_546} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_k})
Best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times) (integer_shove in3 exec_k (print_integer) (integer_yankdup) integer_flush exec_dup_items exec_eq integer_mod exec_dup_items in1) integer_add integer_lte integer_sub exec_s_when_autoconstructing (tagged_546) (integer_lt integer_yankdup) () exec_k () ())
Errors: [1 1 0 1 1 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 25
Size: 35
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.755
Median total errors in population: 8
Error averages by case: (0.724 1.0 0.628 1.0 1.0 1.0 0.627 0.724 0.34 0.712)
Error minima by case: (0 1 0 1 1 1 0 0 0 0)
Average genome size in population (length): 34.998
Average program size in population (points): 46.877
Average percent parens in population: 0.251
Minimum age in population: 9.0
Maximum age in population: 14.0
Average age in population: 11.8454296875
Median age in population: 11.90625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.779
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3201210
--- Timings ---
Current time: 1559583331852 milliseconds
Total Time:          24.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        16.9 seconds, 69.6%
Fitness Testing:      4.2 seconds, 17.2%
Report:               3.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction -78} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 exec_k (print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_dup_items in1)) (integer_add integer_lte in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_eq integer_mod integer_rot boolean_empty exec_s () (integer_swap boolean_shove integer_div exec_empty -78 exec_shove (in1 integer_dup_items) integer_dup_items boolean_dup) (exec_stackdepth exec_if (boolean_rot integer_gte) (boolean_yank exec_noop))))
Lexicase best errors: [1 0 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.193
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction -78} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 exec_k (print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_dup_items in1)) (integer_add integer_lte in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_eq integer_mod integer_rot boolean_empty exec_s () (integer_swap boolean_shove integer_div exec_empty -78 exec_shove (in1 integer_dup_items) integer_dup_items boolean_dup) (exec_stackdepth exec_if (boolean_rot integer_gte) (boolean_yank exec_noop))))
Zero cases best errors: [1 0 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.193
--- Lexicase Population Statistics ---
Count of elite individuals by case: (286 442 286 1000 442 442 442 218 660 286)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (286 442 286 0 442 442 442 218 660 286)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction -78} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Best program: (boolean_stackdepth integer_min exec_if (exec_do*count (boolean_yankdup boolean_dup_times integer_shove in3 exec_k (print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_dup_items in1)) integer_add integer_eq integer_mod) (integer_rot boolean_empty exec_s () (integer_swap boolean_shove integer_div exec_empty -78 exec_shove (in1 exec_do*times () integer_dup_items integer_shove exec_stackdepth exec_if (boolean_rot integer_gte) (boolean_yank exec_noop))) ()))
Errors: [1 0 1 1 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 39
Size: 52
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.496
Median total errors in population: 7
Error averages by case: (0.714 0.558 0.714 1.0 0.558 0.558 0.558 0.782 0.34 0.714)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 34.212
Average program size in population (points): 45.882
Average percent parens in population: 0.252
Minimum age in population: 10.0
Maximum age in population: 15.2734375
Average age in population: 13.33976171875
Median age in population: 13.42578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3512368
--- Timings ---
Current time: 1559583334744 milliseconds
Total Time:          26.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.0 seconds, 70.6%
Fitness Testing:      4.5 seconds, 16.6%
Report:               3.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -45                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: 89                 
Correct output: -51                 | Program output: 57                 
Correct output: -87                 | Program output: 14                 
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: 39                 
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: 76                 
Correct output: -32                 | Program output: 5                  
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: 35                 
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: 3                  
Correct output: -55                 | Program output: 81                 
Correct output: -92                 | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: 74                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 82                 
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -70                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: 5                  
Correct output: -84                 | Program output: -24                
Correct output: -93                 | Program output: 95                 
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -12                
Correct output: -63                 | Program output: 28                 
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in2 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod boolean_rot exec_rot () () (integer_mod exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_add) integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ())
Lexicase best errors: [1 0 1 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 50
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in2 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod boolean_rot exec_rot () () (integer_mod exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_add) integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ())
Zero cases best errors: [1 0 1 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 50
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (141 291 1000 1000 1000 141 291 141 291 1000)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (141 291 0 0 0 141 291 141 291 0)
Population mean number of perfect (error zero) cases: 1.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yankdup})
Best program: (boolean_empty integer_lte integer_min in1 integer_stackdepth exec_s_when_autoconstructing () (integer_empty boolean_xor exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in2 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_dup_items exec_rot () () (integer_mod exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_add) integer_pop exec_empty exec_y_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing () integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) ())
Errors: [1 0 1 1 1 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 44
Size: 57
Percent parens: 0.228
--- Population Statistics ---
Average total errors in population: 8.704
Median total errors in population: 10
Error averages by case: (0.859 0.709 1.0 1.0 1.0 0.859 0.709 0.859 0.709 1.0)
Error minima by case: (0 0 1 1 1 0 0 0 0 1)
Average genome size in population (length): 33.744
Average program size in population (points): 45.456
Average percent parens in population: 0.256
Minimum age in population: 11.625
Maximum age in population: 16.75390625
Average age in population: 14.82883984375
Median age in population: 14.9267578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.002
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3822022
--- Timings ---
Current time: 1559583337314 milliseconds
Total Time:          29.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.0 seconds, 70.7%
Fitness Testing:      4.8 seconds, 16.1%
Report:               3.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -45                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: 89                 
Correct output: -51                 | Program output: 57                 
Correct output: -87                 | Program output: 14                 
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: 39                 
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: 76                 
Correct output: -32                 | Program output: 5                  
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: 35                 
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: 3                  
Correct output: -55                 | Program output: 81                 
Correct output: -92                 | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: 74                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 82                 
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -70                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: 5                  
Correct output: -84                 | Program output: -24                
Correct output: -93                 | Program output: 95                 
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -12                
Correct output: -63                 | Program output: 28                 
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction -78} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in2 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_dup_items exec_rot () () (integer_mod exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec integer_swap boolean_shove exec_y (exec_empty -78 exec_shove (exec_pop (integer_dup_items) integer_dup_items integer_shove exec_stackdepth exec_if (boolean_rot integer_gte) (boolean_yank exec_noop))))))
Lexicase best errors: [1 0 1 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 51
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction -78} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in2 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_dup_items exec_rot () () (integer_mod exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec integer_swap boolean_shove exec_y (exec_empty -78 exec_shove (exec_pop (integer_dup_items) integer_dup_items integer_shove exec_stackdepth exec_if (boolean_rot integer_gte) (boolean_yank exec_noop))))))
Zero cases best errors: [1 0 1 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 51
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (473 471 473 471 3 471 1000 1000 473 1000)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (473 471 473 471 3 471 0 0 473 0)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop})
Best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove) (in3 in2 print_integer integer_yankdup) integer_flush exec_dup_items integer_dec integer_mod exec_dup_items exec_rot () () (integer_mod exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec exec_pop ()))
Errors: [1 0 1 0 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 24
Size: 32
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.165
Median total errors in population: 7
Error averages by case: (0.527 0.529 0.527 0.529 0.997 0.529 1.0 1.0 0.527 1.0)
Error minima by case: (0 0 0 0 0 0 1 1 0 1)
Average genome size in population (length): 34.406
Average program size in population (points): 45.445
Average percent parens in population: 0.243
Minimum age in population: 12.625
Maximum age in population: 18.3525390625
Average age in population: 16.27291015625
Median age in population: 16.34326171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4170947
--- Timings ---
Current time: 1559583339611 milliseconds
Total Time:          32.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        22.7 seconds, 71.0%
Fitness Testing:      5.1 seconds, 15.9%
Report:               4.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 36                 
Correct output: 9                   | Program output: 97                 
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 76                 
Correct output: 4                   | Program output: 58                 
Correct output: 14                  | Program output: 36                 
Correct output: 24                  | Program output: 48                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 96                 
Correct output: 13                  | Program output: 62                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 76                 
Correct output: 3                   | Program output: 47                 
Correct output: 41                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 70                 
Correct output: -48                 | Program output: 26                 
Correct output: -47                 | Program output: 64                 
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: 19                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -19                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 48                 
Correct output: -35                 | Program output: 50                 
Correct output: -90                 | Program output: -19                
Correct output: -48                 | Program output: 60                 
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: 64                 
Correct output: -54                 | Program output: 16                 
Correct output: -32                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: 7                  
Correct output: -77                 | Program output: 20                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 76                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: 75                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -76                
Correct output: -99                 | Program output: 66                 
Correct output: -84                 | Program output: 16                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 47                 
Correct output: -74                 | Program output: 80                 
Correct output: -94                 | Program output: 35                 
Correct output: -35                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 43                 
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -19                
Correct output: -33                 | Program output: 97                 
Correct output: -73                 | Program output: 56                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: 41                 
Correct output: -27                 | Program output: 76                 
Correct output: -93                 | Program output: 20                 
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 31                 
Correct output: -61                 | Program output: -60                
Correct output: -73                 | Program output: -37                
Correct output: -59                 | Program output: 51                 
Correct output: -84                 | Program output: 75                 
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: 85                 
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -1                 
Correct output: -44                 | Program output: 15                 
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_swap integer_swap integer_lte integer_min in1 print_integer integer_flush integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty) () ()) ())
Lexicase best errors: [0 1 1 1 1 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 37
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_swap integer_swap integer_lte integer_min in1 print_integer integer_flush integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty) () ()) ())
Zero cases best errors: [0 1 1 1 1 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 37
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (410 1000 1000 1000 140 410 395 395 1000 140)
Population mean number of elite cases: 5.89
Count of perfect (error zero) individuals by case: (410 0 0 0 140 410 395 395 0 140)
Population mean number of perfect (error zero) cases: 1.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction -78} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Best program: (integer_swap integer_lte integer_min in1 print_integer exec_s_when_autoconstructing () (integer_yankdup boolean_xor in2 integer_rot exec_while (integer_stackdepth boolean_dup_items boolean_flush)) (integer_eq integer_mod integer_rot boolean_empty exec_s (integer_swap boolean_yank integer_div exec_empty -78 exec_shove (in1 integer_dup_items) integer_dup_items integer_shove exec_stackdepth exec_if (boolean_rot integer_gte) (boolean_yank exec_noop)) () ()))
Errors: [0 1 1 1 1 0 1 1 1 1]
Total: 8
Mean: 0.8
Genome size: 35
Size: 46
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 8.11
Median total errors in population: 8
Error averages by case: (0.59 1.0 1.0 1.0 0.86 0.59 0.605 0.605 1.0 0.86)
Error minima by case: (0 1 1 1 0 0 0 0 1 0)
Average genome size in population (length): 34.24
Average program size in population (points): 45.393
Average percent parens in population: 0.245
Minimum age in population: 14.8203125
Maximum age in population: 19.77685546875
Average age in population: 17.80343701171875
Median age in population: 17.8544921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.002
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4571947
--- Timings ---
Current time: 1559583342009 milliseconds
Total Time:          34.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.5 seconds, 71.2%
Fitness Testing:      5.5 seconds, 15.9%
Report:               4.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -45                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: 89                 
Correct output: -51                 | Program output: 57                 
Correct output: -87                 | Program output: 14                 
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: 39                 
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: 76                 
Correct output: -32                 | Program output: 5                  
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: 35                 
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: 3                  
Correct output: -55                 | Program output: 81                 
Correct output: -92                 | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: 74                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 82                 
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -70                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: 5                  
Correct output: -84                 | Program output: -24                
Correct output: -93                 | Program output: 95                 
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -12                
Correct output: -63                 | Program output: 28                 
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 print_integer exec_s_when_autoconstructing () (integer_empty) (boolean_xor in2 integer_rot boolean_not exec_do*range (boolean_flush) integer_empty) exec_rot () () (integer_mod exec_empty) integer_stackdepth exec_if (integer_inc integer_dec boolean_dup integer_add) (integer_pop exec_empty)) ())
Lexicase best errors: [0 1 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 41
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 print_integer exec_s_when_autoconstructing () (integer_empty) (boolean_xor in2 integer_rot boolean_not exec_do*range (boolean_flush) integer_empty) exec_rot () () (integer_mod exec_empty) integer_stackdepth exec_if (integer_inc integer_dec boolean_dup integer_add) (integer_pop exec_empty)) ())
Zero cases best errors: [0 1 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 41
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (337 1000 337 1000 944 944 1000 308 299 308)
Population mean number of elite cases: 6.48
Count of perfect (error zero) individuals by case: (337 0 337 0 944 944 0 308 299 308)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 1, :instruction exec_swap} {:close 0, :instruction print_exec})
Best program: (boolean_stackdepth integer_min exec_if (boolean_flush) (boolean_yankdup boolean_dup_times integer_shove in3 in2 print_integer integer_yankdup) integer_flush exec_dup_items exec_eq integer_mod exec_dup_items exec_rot () (integer_mod exec_dup_times () exec_shove () exec_pop (boolean_pop exec_noop exec_yank boolean_invert_first_then_and exec_dup (integer_flush print_newline exec_swap () (print_exec ())))) ())
Errors: [1 1 1 1 0 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 30
Size: 43
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 6.523
Median total errors in population: 6
Error averages by case: (0.663 1.0 0.663 1.0 0.056 0.056 1.0 0.692 0.701 0.692)
Error minima by case: (0 1 0 1 0 0 1 0 0 0)
Average genome size in population (length): 33.505
Average program size in population (points): 44.696
Average percent parens in population: 0.250
Minimum age in population: 16.0
Maximum age in population: 21.5068359375
Average age in population: 19.35248852539062
Median age in population: 19.426025390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5038228
--- Timings ---
Current time: 1559583344668 milliseconds
Total Time:          37.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.5 seconds, 71.5%
Fitness Testing:      5.9 seconds, 15.9%
Report:               4.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 36                 
Correct output: 9                   | Program output: 97                 
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 76                 
Correct output: 4                   | Program output: 58                 
Correct output: 14                  | Program output: 36                 
Correct output: 24                  | Program output: 48                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 96                 
Correct output: 13                  | Program output: 62                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 76                 
Correct output: 3                   | Program output: 47                 
Correct output: 41                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 70                 
Correct output: -48                 | Program output: 26                 
Correct output: -47                 | Program output: 64                 
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: 19                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -19                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 48                 
Correct output: -35                 | Program output: 50                 
Correct output: -90                 | Program output: -19                
Correct output: -48                 | Program output: 60                 
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: 64                 
Correct output: -54                 | Program output: 16                 
Correct output: -32                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: 7                  
Correct output: -77                 | Program output: 20                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 76                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: 75                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -76                
Correct output: -99                 | Program output: 66                 
Correct output: -84                 | Program output: 16                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 47                 
Correct output: -74                 | Program output: 80                 
Correct output: -94                 | Program output: 35                 
Correct output: -35                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 43                 
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -19                
Correct output: -33                 | Program output: 97                 
Correct output: -73                 | Program output: 56                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: 41                 
Correct output: -27                 | Program output: 76                 
Correct output: -93                 | Program output: 20                 
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 31                 
Correct output: -61                 | Program output: -60                
Correct output: -73                 | Program output: -37                
Correct output: -59                 | Program output: 51                 
Correct output: -84                 | Program output: 75                 
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: 85                 
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -1                 
Correct output: -44                 | Program output: 15                 
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_swap integer_lte integer_min in1 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_yank) (exec_k_when_autoconstructing () (boolean_dup_times)))
Lexicase best errors: [0 0 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 23
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_swap integer_lte integer_min in1 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not integer_stackdepth boolean_dup_items boolean_flush integer_yank) (exec_k_when_autoconstructing () (boolean_dup_times)))
Zero cases best errors: [0 0 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 23
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 216 370 370 216 348 348 935 934 1)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (216 216 370 370 216 348 348 935 934 1)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth})
Best program: (integer_swap integer_lte exec_rot (in1 print_integer exec_s_when_autoconstructing () (integer_empty boolean_and in2 integer_rot boolean_not integer_inc integer_dec boolean_dup) (integer_add) integer_pop exec_do*count (exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth)) () ())) () ())
Errors: [0 0 1 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 35
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 6.046
Median total errors in population: 6
Error averages by case: (0.784 0.784 0.63 0.63 0.784 0.652 0.652 0.065 0.066 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.453
Average program size in population (points): 44.555
Average percent parens in population: 0.249
Minimum age in population: 17.455078125
Maximum age in population: 22.914794921875
Average age in population: 20.82638525390625
Median age in population: 20.9190673828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5522430
--- Timings ---
Current time: 1559583347373 milliseconds
Total Time:          39.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.5 seconds, 71.8%
Fitness Testing:      6.3 seconds, 15.9%
Report:               4.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -2                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 96                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 49                 
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 92                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 90                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 81                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 33                 
Correct output: -33                 | Program output: 42                 
Correct output: -60                 | Program output: 31                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: 4                  
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: 71                 
Correct output: -48                 | Program output: 4                  
Correct output: -63                 | Program output: 78                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: 73                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: 59                 
Correct output: -98                 | Program output: 93                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 70                 
Correct output: -8                  | Program output: 57                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: 47                 
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: 42                 
Correct output: -99                 | Program output: 76                 
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: 79                 
Correct output: -48                 | Program output: 3                  
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ()))
Lexicase best errors: [0 1 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ()))
Zero cases best errors: [0 1 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (89 360 89 89 361 925 360 89 247 229)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (89 360 89 89 361 925 360 89 247 229)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_stackdepth integer_min boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ()))
Errors: [0 1 0 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 40
Size: 53
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 7.162
Median total errors in population: 8
Error averages by case: (0.911 0.64 0.911 0.911 0.639 0.075 0.64 0.911 0.753 0.771)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.688
Average program size in population (points): 45.156
Average percent parens in population: 0.253
Minimum age in population: 19.556640625
Maximum age in population: 24.19146728515625
Average age in population: 22.39270526123047
Median age in population: 22.47006225585938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5950237
--- Timings ---
Current time: 1559583350035 milliseconds
Total Time:          42.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        30.6 seconds, 72.1%
Fitness Testing:      6.7 seconds, 15.8%
Report:               5.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -45                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: 89                 
Correct output: -51                 | Program output: 57                 
Correct output: -87                 | Program output: 14                 
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: 39                 
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: 76                 
Correct output: -32                 | Program output: 5                  
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: 35                 
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: 3                  
Correct output: -55                 | Program output: 81                 
Correct output: -92                 | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: 74                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 82                 
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -70                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: 5                  
Correct output: -84                 | Program output: -24                
Correct output: -93                 | Program output: 95                 
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -12                
Correct output: -63                 | Program output: 28                 
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (boolean_stackdepth integer_min boolean_stackdepth integer_min in4 boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_times integer_shove in3 in2 print_integer boolean_xor in2 integer_rot integer_eq integer_mod integer_rot boolean_empty exec_s () (integer_swap boolean_shove integer_div exec_empty integer_add) (integer_pop exec_do*count (exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth)) () ())))
Lexicase best errors: [1 0 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (boolean_stackdepth integer_min boolean_stackdepth integer_min in4 boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_times integer_shove in3 in2 print_integer boolean_xor in2 integer_rot integer_eq integer_mod integer_rot boolean_empty exec_s () (integer_swap boolean_shove integer_div exec_empty integer_add) (integer_pop exec_do*count (exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth)) () ())))
Zero cases best errors: [1 0 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 105 105 105 105 328 328 415 101 105)
Population mean number of elite cases: 1.80
Count of perfect (error zero) individuals by case: (101 105 105 105 105 328 328 415 101 105)
Population mean number of perfect (error zero) cases: 1.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -65} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup -65 integer_shove in3 in2 print_integer integer_yankdup) (exec_dup_items exec_rot () () (integer_mod exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_add) integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_eq exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ()))
Errors: [1 0 0 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 46
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 8.202
Median total errors in population: 8
Error averages by case: (0.899 0.895 0.895 0.895 0.895 0.672 0.672 0.585 0.899 0.895)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.651
Average program size in population (points): 46.418
Average percent parens in population: 0.253
Minimum age in population: 20.556640625
Maximum age in population: 25.931884765625
Average age in population: 24.13408505249023
Median age in population: 24.18937683105469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 139
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6314943
--- Timings ---
Current time: 1559583353015 milliseconds
Total Time:          45.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        32.9 seconds, 72.6%
Fitness Testing:      7.0 seconds, 15.5%
Report:               5.3 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 exec_empty print_integer integer_yankdup) (boolean_xor exec_dup_items exec_eq integer_mod exec_dup_items exec_rot () () (integer_mod exec_dup_items) integer_stackdepth boolean_xor integer_inc integer_dec boolean_dup) integer_add integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_shove () exec_dup (integer_yank exec_empty boolean_yankdup)) () ())
Lexicase best errors: [1 1 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 exec_empty print_integer integer_yankdup) (boolean_xor exec_dup_items exec_eq integer_mod exec_dup_items exec_rot () () (integer_mod exec_dup_items) integer_stackdepth boolean_xor integer_inc integer_dec boolean_dup) integer_add integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_shove () exec_dup (integer_yank exec_empty boolean_yankdup)) () ())
Zero cases best errors: [1 1 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (173 173 216 775 948 216 82 173 216 173)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (173 173 216 775 948 216 82 173 216 173)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty})
Best program: (boolean_stackdepth integer_min boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 print_integer exec_s_when_autoconstructing () (integer_empty) (boolean_xor in2 integer_rot boolean_not exec_do*range (boolean_flush integer_empty) exec_rot () () (integer_mod exec_empty) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_add) integer_pop exec_empty)) ())
Errors: [1 1 0 0 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 42
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 6.855
Median total errors in population: 8
Error averages by case: (0.827 0.827 0.784 0.225 0.052 0.784 0.918 0.827 0.784 0.827)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.891
Average program size in population (points): 43.774
Average percent parens in population: 0.248
Minimum age in population: 21.556640625
Maximum age in population: 27.45002746582031
Average age in population: 25.56588459777832
Median age in population: 25.64897918701172
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6732428
--- Timings ---
Current time: 1559583356114 milliseconds
Total Time:          48.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.0 seconds, 72.7%
Fitness Testing:      7.4 seconds, 15.4%
Report:               5.6 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 print_integer exec_s_when_autoconstructing () () (integer_empty) boolean_xor in2 integer_rot boolean_not exec_do*range (boolean_flush integer_empty) exec_rot () () (integer_mod) exec_empty) (integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_add) integer_pop exec_empty))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 40
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 print_integer exec_s_when_autoconstructing () () (integer_empty) boolean_xor in2 integer_rot boolean_not exec_do*range (boolean_flush integer_empty) exec_rot () () (integer_mod) exec_empty) (integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_add) integer_pop exec_empty))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 40
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 397 397 947 397 947 133 397 947 397)
Population mean number of elite cases: 5.96
Count of perfect (error zero) individuals by case: (0 397 397 947 397 947 133 397 947 397)
Population mean number of perfect (error zero) cases: 4.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub})
Best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 print_integer exec_s_when_autoconstructing () () (integer_empty) boolean_xor in2 integer_rot boolean_not exec_rot () () (integer_mod exec_dup_items) integer_stackdepth exec_dup_times (integer_inc) integer_dec boolean_dup) (boolean_yank) integer_pop boolean_invert_first_then_and boolean_not exec_yankdup in4 integer_sub)
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 30
Size: 40
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.041
Median total errors in population: 6
Error averages by case: (1.0 0.603 0.603 0.053 0.603 0.053 0.867 0.603 0.053 0.603)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.311
Average program size in population (points): 43.589
Average percent parens in population: 0.259
Minimum age in population: 24.13296508789062
Maximum age in population: 29.02495574951172
Average age in population: 27.06435611724854
Median age in population: 27.12747192382812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7202276
--- Timings ---
Current time: 1559583359066 milliseconds
Total Time:          51.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.3 seconds, 72.5%
Fitness Testing:      7.8 seconds, 15.2%
Report:               6.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 print_integer exec_s_when_autoconstructing () (integer_empty) (boolean_xor in2 integer_rot boolean_not boolean_rot boolean_flush integer_empty) exec_rot () () (integer_mod exec_empty) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup)) ())
Lexicase best errors: [0 1 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 print_integer exec_s_when_autoconstructing () (integer_empty) (boolean_xor in2 integer_rot boolean_not boolean_rot boolean_flush integer_empty) exec_rot () () (integer_mod exec_empty) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup)) ())
Zero cases best errors: [0 1 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (769 157 1000 1000 1000 1000 924 769 769 1000)
Population mean number of elite cases: 8.39
Count of perfect (error zero) individuals by case: (769 157 0 0 0 0 924 769 769 0)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_170} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 exec_empty print_integer integer_yankdup boolean_xor exec_dup_items exec_eq integer_mod exec_dup_items exec_rot () (integer_mod exec_dup_items) (integer_stackdepth boolean_xor tag_boolean_170 integer_dec boolean_dup) integer_add) (integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ()))
Errors: [0 1 1 1 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 38
Size: 49
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 6.612
Median total errors in population: 6
Error averages by case: (0.231 0.843 1.0 1.0 1.0 1.0 0.076 0.231 0.231 1.0)
Error minima by case: (0 0 1 1 1 1 0 0 0 1)
Average genome size in population (length): 32.998
Average program size in population (points): 44.695
Average percent parens in population: 0.261
Minimum age in population: 25.6328125
Maximum age in population: 30.33356094360352
Average age in population: 28.51780784988403
Median age in population: 28.62087631225586
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7771525
--- Timings ---
Current time: 1559583361730 milliseconds
Total Time:          54.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.1 seconds, 72.4%
Fitness Testing:      8.3 seconds, 15.4%
Report:               6.5 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -2                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 96                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 49                 
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 92                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 90                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 81                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 33                 
Correct output: -33                 | Program output: 42                 
Correct output: -60                 | Program output: 31                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: 4                  
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: 71                 
Correct output: -48                 | Program output: 4                  
Correct output: -63                 | Program output: 78                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: 73                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: 59                 
Correct output: -98                 | Program output: 93                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 70                 
Correct output: -8                  | Program output: 57                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: 47                 
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: 42                 
Correct output: -99                 | Program output: 76                 
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: 79                 
Correct output: -48                 | Program output: 3                  
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_546} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_flush})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor boolean_dup_items boolean_flush integer_eq integer_mod) integer_rot integer_gte exec_s () (integer_swap boolean_shove integer_div) (exec_empty integer_sub exec_s_when_autoconstructing (tagged_546) (integer_lt integer_yankdup) () exec_do*times () exec_flush))))
Lexicase best errors: [1 0 1 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 50
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_546} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_flush})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor boolean_dup_items boolean_flush integer_eq integer_mod) integer_rot integer_gte exec_s () (integer_swap boolean_shove integer_div) (exec_empty integer_sub exec_s_when_autoconstructing (tagged_546) (integer_lt integer_yankdup) () exec_do*times () exec_flush))))
Zero cases best errors: [1 0 1 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 50
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 224 1000 224 1000 1000 1000 731 1000 224)
Population mean number of elite cases: 7.40
Count of perfect (error zero) individuals by case: (0 224 0 224 0 0 0 731 0 224)
Population mean number of perfect (error zero) cases: 1.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) integer_pop) exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank) (boolean_or boolean_yankdup) ()))
Errors: [1 0 1 0 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 38
Size: 51
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 8.597
Median total errors in population: 9
Error averages by case: (1.0 0.776 1.0 0.776 1.0 1.0 1.0 0.269 1.0 0.776)
Error minima by case: (1 0 1 0 1 1 1 0 1 0)
Average genome size in population (length): 32.854
Average program size in population (points): 44.535
Average percent parens in population: 0.262
Minimum age in population: 27.25521850585938
Maximum age in population: 31.95320892333984
Average age in population: 29.97740965461731
Median age in population: 30.03277015686035
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8277005
--- Timings ---
Current time: 1559583364013 milliseconds
Total Time:          56.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.7 seconds, 72.2%
Fitness Testing:      8.8 seconds, 15.5%
Report:               6.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup integer_lt integer_shove in3 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not exec_do*range (boolean_flush integer_empty)) (exec_rot () () (integer_mod exec_empty) integer_stackdepth integer_dup_items integer_shove exec_stackdepth)) ())
Lexicase best errors: [0 0 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup integer_lt integer_shove in3 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not exec_do*range (boolean_flush integer_empty)) (exec_rot () () (integer_mod exec_empty) integer_stackdepth integer_dup_items integer_shove exec_stackdepth)) ())
Zero cases best errors: [0 0 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 205 205 1000 749 749 954 1000 954 1000)
Population mean number of elite cases: 7.02
Count of perfect (error zero) individuals by case: (205 205 205 0 749 749 954 0 954 0)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth})
Best program: (boolean_stackdepth integer_min exec_if (boolean_flush integer_swap boolean_dup_times integer_shove in3 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_dup_items exec_rot () () (integer_mod exec_dup_items) exec_do*times (boolean_yank integer_inc integer_dec boolean_dup) integer_add) integer_pop exec_do*count (exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth)) () ()))
Errors: [0 0 0 1 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 44
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 5.979
Median total errors in population: 6
Error averages by case: (0.795 0.795 0.795 1.0 0.251 0.251 0.046 1.0 0.046 1.0)
Error minima by case: (0 0 0 1 0 0 0 1 0 1)
Average genome size in population (length): 34.307
Average program size in population (points): 46.247
Average percent parens in population: 0.257
Minimum age in population: 28.76019287109375
Maximum age in population: 33.39774799346924
Average age in population: 31.44051890468597
Median age in population: 31.52048587799072
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8604976
--- Timings ---
Current time: 1559583366154 milliseconds
Total Time:          58.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.3 seconds, 72.2%
Fitness Testing:      9.1 seconds, 15.5%
Report:               7.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -2                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 96                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 49                 
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 92                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 90                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 81                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 33                 
Correct output: -33                 | Program output: 42                 
Correct output: -60                 | Program output: 31                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: 4                  
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: 71                 
Correct output: -48                 | Program output: 4                  
Correct output: -63                 | Program output: 78                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: 73                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: 59                 
Correct output: -98                 | Program output: 93                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 70                 
Correct output: -8                  | Program output: 57                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: 47                 
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: 42                 
Correct output: -99                 | Program output: 76                 
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: 79                 
Correct output: -48                 | Program output: 3                  
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup integer_yankdup integer_shove in3 in4 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_sub boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_if (integer_stackdepth) (exec_shove () boolean_not integer_yank exec_empty boolean_yankdup)) () ())) ())
Lexicase best errors: [1 1 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 58
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup integer_yankdup integer_shove in3 in4 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_sub boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_if (integer_stackdepth) (exec_shove () boolean_not integer_yank exec_empty boolean_yankdup)) () ())) ())
Zero cases best errors: [1 1 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 58
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 372 1000 371 575 372 575 1000 1000)
Population mean number of elite cases: 7.26
Count of perfect (error zero) individuals by case: (0 0 372 0 371 575 372 575 0 0)
Population mean number of perfect (error zero) cases: 2.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s})
Best program: (boolean_stackdepth integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 print_integer exec_do*times () integer_flush exec_when (exec_eq integer_mod exec_dup_items exec_rot () (integer_mod integer_flush integer_dup exec_rot () () (exec_do*range (exec_dup_items) integer_eq integer_mod) exec_do*range (boolean_empty exec_s () () ())) ())) ())
Errors: [1 1 0 1 0 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 28
Size: 44
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 7.735
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.628 1.0 0.629 0.425 0.628 0.425 1.0 1.0)
Error minima by case: (1 1 0 1 0 0 0 0 1 1)
Average genome size in population (length): 32.648
Average program size in population (points): 44.242
Average percent parens in population: 0.261
Minimum age in population: 29.9080810546875
Maximum age in population: 34.93497085571289
Average age in population: 32.99927002286911
Median age in population: 33.09821510314941
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9053756
--- Timings ---
Current time: 1559583368547 milliseconds
Total Time:          60.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.8 seconds, 72.1%
Fitness Testing:      9.5 seconds, 15.6%
Report:               7.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -2                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 96                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 49                 
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 92                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 90                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 81                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 33                 
Correct output: -33                 | Program output: 42                 
Correct output: -60                 | Program output: 31                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: 4                  
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: 71                 
Correct output: -48                 | Program output: 4                  
Correct output: -63                 | Program output: 78                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: 73                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: 59                 
Correct output: -98                 | Program output: 93                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 70                 
Correct output: -8                  | Program output: 57                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: 47                 
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: 42                 
Correct output: -99                 | Program output: 76                 
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: 79                 
Correct output: -48                 | Program output: 3                  
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_lte integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup)))
Lexicase best errors: [1 0 1 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 43
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_lte integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup)))
Zero cases best errors: [1 0 1 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 43
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (388 550 1000 1000 1000 1000 552 1000 1000 1000)
Population mean number of elite cases: 8.49
Count of perfect (error zero) individuals by case: (388 550 0 0 0 0 552 0 0 0)
Population mean number of perfect (error zero) cases: 1.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4) (print_integer integer_yankdup) integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove (boolean_not integer_yank exec_empty boolean_yankdup)) () ())
Errors: [1 0 1 1 1 1 0 1 1 1]
Total: 8
Mean: 0.8
Genome size: 38
Size: 51
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 8.51
Median total errors in population: 8
Error averages by case: (0.612 0.45 1.0 1.0 1.0 1.0 0.448 1.0 1.0 1.0)
Error minima by case: (0 0 1 1 1 1 0 1 1 1)
Average genome size in population (length): 33.429
Average program size in population (points): 45.22
Average percent parens in population: 0.260
Minimum age in population: 31.00967407226562
Maximum age in population: 36.48255157470703
Average age in population: 34.47176414966583
Median age in population: 34.52895402908325
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.779
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 9452817
--- Timings ---
Current time: 1559583370924 milliseconds
Total Time:          63.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.6 seconds, 72.0%
Fitness Testing:      9.8 seconds, 15.5%
Report:               7.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_stackdepth boolean_stackdepth exec_y_when_autoconstructing (exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_shove (integer_rot boolean_not integer_stackdepth integer_add) integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ())))
Lexicase best errors: [1 1 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_stackdepth boolean_stackdepth exec_y_when_autoconstructing (exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq integer_mod exec_shove (integer_rot boolean_not integer_stackdepth integer_add) integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ())))
Zero cases best errors: [1 1 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 938 303 303 305 633 1000 303 632)
Population mean number of elite cases: 6.42
Count of perfect (error zero) individuals by case: (0 0 938 303 303 305 633 0 303 632)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup integer_lt integer_shove in3 print_integer exec_s_when_autoconstructing () (integer_empty boolean_xor in2 integer_rot boolean_not exec_do*range (boolean_flush integer_empty)) (exec_rot () () (integer_mod exec_empty) integer_stackdepth integer_dup_items integer_shove exec_stackdepth)) ())
Errors: [1 1 0 0 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 25
Size: 35
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.583
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.062 0.697 0.697 0.695 0.367 1.0 0.697 0.368)
Error minima by case: (1 1 0 0 0 0 0 1 0 0)
Average genome size in population (length): 33.592
Average program size in population (points): 45.417
Average percent parens in population: 0.259
Minimum age in population: 32.90557098388672
Maximum age in population: 37.78675770759583
Average age in population: 35.93724285566807
Median age in population: 36.02528804540634
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9828456
--- Timings ---
Current time: 1559583373521 milliseconds
Total Time:          65.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.2 seconds, 72.1%
Fitness Testing:     10.2 seconds, 15.5%
Report:               8.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -2                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 96                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 49                 
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 92                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 90                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 81                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 33                 
Correct output: -33                 | Program output: 42                 
Correct output: -60                 | Program output: 31                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: 4                  
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: 71                 
Correct output: -48                 | Program output: 4                  
Correct output: -63                 | Program output: 78                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: 73                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: 59                 
Correct output: -98                 | Program output: 93                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 70                 
Correct output: -8                  | Program output: 57                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: 47                 
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: 42                 
Correct output: -99                 | Program output: 76                 
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: 79                 
Correct output: -48                 | Program output: 3                  
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times boolean_flush boolean_yankdup boolean_dup_times in3 in4 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items) integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank boolean_not integer_yank)))
Lexicase best errors: [1 0 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 38
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times boolean_flush boolean_yankdup boolean_dup_times in3 in4 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items) integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank boolean_not integer_yank)))
Zero cases best errors: [1 0 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 38
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 308 934 631 1000 1000 308 1000 1000 308)
Population mean number of elite cases: 7.49
Count of perfect (error zero) individuals by case: (0 308 934 631 0 0 308 0 0 308)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty})
Best program: (boolean_stackdepth integer_eq exec_if (boolean_flush boolean_yankdup boolean_invert_first_then_and integer_shove in4 print_integer integer_yankdup) (integer_flush exec_dup_items exec_eq exec_noop exec_dup_items exec_rot () () (boolean_xor exec_dup_items) integer_stackdepth exec_dup_times (integer_shove in3 exec_dup_items exec_eq integer_mod boolean_dup exec_rot () () (integer_mod exec_s (integer_stackdepth exec_dup_times (exec_stackdepth integer_pop exec_empty)) () ()))))
Errors: [1 0 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 34
Size: 48
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 7.511
Median total errors in population: 8
Error averages by case: (1.0 0.692 0.066 0.369 1.0 1.0 0.692 1.0 1.0 0.692)
Error minima by case: (1 0 0 0 1 1 0 1 1 0)
Average genome size in population (length): 32.793
Average program size in population (points): 44.653
Average percent parens in population: 0.264
Minimum age in population: 34.46325302124023
Maximum age in population: 39.61952573060989
Average age in population: 37.46412238180637
Median age in population: 37.51656419038773
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 10278884
--- Timings ---
Current time: 1559583375777 milliseconds
Total Time:          68.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.9 seconds, 71.7%
Fitness Testing:     10.6 seconds, 15.5%
Report:               8.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -2                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 96                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 49                 
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 92                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 90                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 81                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 33                 
Correct output: -33                 | Program output: 42                 
Correct output: -60                 | Program output: 31                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: 4                  
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: 71                 
Correct output: -48                 | Program output: 4                  
Correct output: -63                 | Program output: 78                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: 73                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: 59                 
Correct output: -98                 | Program output: 93                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 70                 
Correct output: -8                  | Program output: 57                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: 47                 
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: 42                 
Correct output: -99                 | Program output: 76                 
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: 79                 
Correct output: -48                 | Program output: 3                  
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty})
Lexicase best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup boolean_yank) integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_dup_times (integer_inc) integer_dec boolean_dup integer_add) (integer_pop exec_empty) ())) ())
Lexicase best errors: [0 1 0 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty})
Zero cases best program: (boolean_stackdepth integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup boolean_yank) integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_dup_times (integer_inc) integer_dec boolean_dup integer_add) (integer_pop exec_empty) ())) ())
Zero cases best errors: [0 1 0 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (692 1000 692 692 1000 1000 1000 1000 692 1000)
Population mean number of elite cases: 8.77
Count of perfect (error zero) individuals by case: (692 0 692 692 0 0 0 0 692 0)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_empty integer_min exec_if (boolean_flush boolean_yankdup boolean_dup_times exec_s (in3 in4 print_integer integer_yankdup) (integer_flush exec_dup_items) (boolean_frominteger exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) integer_sub boolean_xor integer_inc) integer_dec boolean_dup) (exec_do*range () integer_pop exec_empty exec_s_when_autoconstructing (exec_yankdup integer_pop integer_sub exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ()))
Errors: [0 1 0 0 1 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 44
Size: 61
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 7.232
Median total errors in population: 6
Error averages by case: (0.308 1.0 0.308 0.308 1.0 1.0 1.0 1.0 0.308 1.0)
Error minima by case: (0 1 0 0 1 1 1 1 0 1)
Average genome size in population (length): 32.812
Average program size in population (points): 44.508
Average percent parens in population: 0.262
Minimum age in population: 35.78665924072266
Maximum age in population: 40.65725168585777
Average age in population: 38.92424145692587
Median age in population: 38.97118650376797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 10603101
--- Timings ---
Current time: 1559583378031 milliseconds
Total Time:          70.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.5 seconds, 71.8%
Fitness Testing:     10.9 seconds, 15.5%
Report:               8.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Lexicase best program: (boolean_stackdepth integer_min in3 exec_do*while (print_integer) integer_yankdup integer_flush boolean_not exec_eq exec_shove (exec_s_when_autoconstructing () (integer_empty) (exec_rot () () (integer_mod exec_empty) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_add) exec_empty exec_s_when_autoconstructing (exec_swap (in4) ()) () ())))
Lexicase best errors: [0 0 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Zero cases best program: (boolean_stackdepth integer_min in3 exec_do*while (print_integer) integer_yankdup integer_flush boolean_not exec_eq exec_shove (exec_s_when_autoconstructing () (integer_empty) (exec_rot () () (integer_mod exec_empty) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_add) exec_empty exec_s_when_autoconstructing (exec_swap (in4) ()) () ())))
Zero cases best errors: [0 0 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 947 947 1000 1000 1000 1000 948 3 1000)
Population mean number of elite cases: 7.85
Count of perfect (error zero) individuals by case: (3 947 947 0 0 0 0 948 3 0)
Population mean number of perfect (error zero) cases: 2.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 exec_yankdup print_integer integer_yankdup) (integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_dup_times) integer_pop) exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_yank integer_stackdepth) () (exec_shove () boolean_not integer_yank) boolean_or boolean_yankdup)
Errors: [0 0 0 1 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 35
Size: 43
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 7.152
Median total errors in population: 7
Error averages by case: (0.997 0.053 0.053 1.0 1.0 1.0 1.0 0.052 0.997 1.0)
Error minima by case: (0 0 0 1 1 1 1 0 0 1)
Average genome size in population (length): 32.782
Average program size in population (points): 44.291
Average percent parens in population: 0.258
Minimum age in population: 36.90796852111816
Maximum age in population: 42.17828531563282
Average age in population: 40.4242966093123
Median age in population: 40.51249217987061
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 10879149
--- Timings ---
Current time: 1559583380164 milliseconds
Total Time:          72.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.1 seconds, 71.8%
Fitness Testing:     11.1 seconds, 15.4%
Report:               9.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -2                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 96                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 49                 
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 92                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 90                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 81                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 33                 
Correct output: -33                 | Program output: 42                 
Correct output: -60                 | Program output: 31                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: 4                  
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: 71                 
Correct output: -48                 | Program output: 4                  
Correct output: -63                 | Program output: 78                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: 73                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: 59                 
Correct output: -98                 | Program output: 93                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 70                 
Correct output: -8                  | Program output: 57                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: 47                 
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: 42                 
Correct output: -99                 | Program output: 76                 
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: 79                 
Correct output: -48                 | Program output: 3                  
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 integer_rot print_integer integer_yankdup) (integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_dup_times) integer_pop) exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [1 1 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 37
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 integer_rot print_integer integer_yankdup) (integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_dup_times) integer_pop) exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [1 1 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 37
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 4 1000 910 1000 914 1000 1000 1)
Population mean number of elite cases: 7.83
Count of perfect (error zero) individuals by case: (0 0 4 0 910 0 914 0 0 1)
Population mean number of perfect (error zero) cases: 1.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 integer_rot print_integer integer_yankdup) (integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_dup_times) integer_pop) exec_empty exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_yank integer_stackdepth) () ())
Errors: [1 1 0 1 1 1 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 30
Size: 37
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 8.171
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.996 1.0 0.09 1.0 0.086 1.0 1.0 0.999)
Error minima by case: (1 1 0 1 0 1 0 1 1 0)
Average genome size in population (length): 31.995
Average program size in population (points): 43.217
Average percent parens in population: 0.262
Minimum age in population: 41.34960316121578
Maximum age in population: 43.04937088489532
Average age in population: 42.09564032239467
Median age in population: 42.04937088489532
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 214
Genome diversity (% unique genomes):	 0.39
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.379
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 11114625
--- Timings ---
Current time: 1559583382058 milliseconds
Total Time:          74.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        53.5 seconds, 71.9%
Fitness Testing:     11.4 seconds, 15.3%
Report:               9.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in3 exec_empty print_integer integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 exec_yankdup print_integer integer_yankdup) (integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec exec_while (integer_dup_times) integer_pop) exec_empty) exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_yank integer_stackdepth) () (exec_shove () boolean_not integer_yank) boolean_or boolean_yankdup)
Lexicase best errors: [1 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in3 exec_empty print_integer integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 in4 exec_yankdup print_integer integer_yankdup) (integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec exec_while (integer_dup_times) integer_pop) exec_empty) exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_yank integer_stackdepth) () (exec_shove () boolean_not integer_yank) boolean_or boolean_yankdup)
Zero cases best errors: [1 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 303 305 1000 1000 1000 1000 1000 305 305)
Population mean number of elite cases: 7.22
Count of perfect (error zero) individuals by case: (0 303 305 0 0 0 0 0 305 305)
Population mean number of perfect (error zero) cases: 1.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in3 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_not exec_dup_items integer_stackdepth) exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_dup_times in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ())
Errors: [1 0 0 1 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 36
Size: 47
Percent parens: 0.234
--- Population Statistics ---
Average total errors in population: 8.782
Median total errors in population: 10
Error averages by case: (1.0 0.697 0.695 1.0 1.0 1.0 1.0 1.0 0.695 0.695)
Error minima by case: (1 0 0 1 1 1 1 1 0 0)
Average genome size in population (length): 30.639
Average program size in population (points): 39.1
Average percent parens in population: 0.215
Minimum age in population: 42.34960316121578
Maximum age in population: 44.90394778549671
Average age in population: 44.00527709873766
Median age in population: 43.7585246860981
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 407
Genome diversity (% unique genomes):	 0.43
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 416
Syntactic diversity (% unique Push programs):	 0.411
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 11380468
--- Timings ---
Current time: 1559583383979 milliseconds
Total Time:          76.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.9 seconds, 71.9%
Fitness Testing:     11.6 seconds, 15.2%
Report:               9.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Lexicase best program: (boolean_stackdepth integer_min in3 exec_do*while (print_integer) integer_yankdup integer_flush integer_dup_times exec_eq exec_shove (exec_s_when_autoconstructing () (integer_empty) (exec_rot () () (integer_mod exec_empty) integer_stackdepth boolean_dup_items integer_inc integer_dec boolean_dup integer_add) exec_empty exec_s_when_autoconstructing (exec_swap (in4) ()) () ()))
Lexicase best errors: [1 0 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.359
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Zero cases best program: (boolean_stackdepth integer_min in3 exec_do*while (print_integer) integer_yankdup integer_flush integer_dup_times exec_eq exec_shove (exec_s_when_autoconstructing () (integer_empty) (exec_rot () () (integer_mod exec_empty) integer_stackdepth boolean_dup_items integer_inc integer_dec boolean_dup integer_add) exec_empty exec_s_when_autoconstructing (exec_swap (in4) ()) () ()))
Zero cases best errors: [1 0 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.359
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 933 927 1 931 936 1 2 927 1)
Population mean number of elite cases: 4.66
Count of perfect (error zero) individuals by case: (2 933 927 1 931 936 1 2 927 1)
Population mean number of perfect (error zero) cases: 4.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_stackdepth integer_min in3 exec_do*while (print_integer) integer_yankdup integer_flush boolean_not exec_eq integer_swap exec_s_when_autoconstructing () (integer_empty) (exec_rot () () (integer_mod exec_empty) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_add) exec_empty exec_s_when_autoconstructing (integer_dup_times) (integer_pop exec_empty exec_s_when_autoconstructing (integer_dup_times in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ()) ()))
Errors: [1 0 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 37
Size: 54
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 5.339
Median total errors in population: 5
Error averages by case: (0.998 0.067 0.073 0.999 0.069 0.064 0.999 0.998 0.073 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.817
Average program size in population (points): 43.128
Average percent parens in population: 0.264
Minimum age in population: 43.34960316121578
Maximum age in population: 46.90394778549671
Average age in population: 45.191575977806
Median age in population: 45.22900585457683
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.523
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 11610015
--- Timings ---
Current time: 1559583386078 milliseconds
Total Time:          78.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.5 seconds, 72.1%
Fitness Testing:     11.9 seconds, 15.1%
Report:               9.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in2 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_dup_times in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ())
Lexicase best errors: [0 1 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in2 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_dup_times in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ())
Zero cases best errors: [0 1 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (127 291 966 307 672 291 295 127 291 127)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (127 291 966 307 672 291 295 127 291 127)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in3 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_pop (exec_shove (integer_flush exec_dup_items boolean_not exec_dup_items boolean_and exec_dup_times (integer_inc integer_dec boolean_dup integer_dup_times) integer_pop) exec_empty) exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_yank integer_stackdepth) () ())
Errors: [1 0 0 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 38
Percent parens: 0.184
--- Population Statistics ---
Average total errors in population: 6.506
Median total errors in population: 7
Error averages by case: (0.873 0.709 0.034 0.693 0.328 0.709 0.705 0.873 0.709 0.873)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.232
Average program size in population (points): 42.708
Average percent parens in population: 0.222
Minimum age in population: 44.34960316121578
Maximum age in population: 48.53867401275784
Average age in population: 47.24294758334942
Median age in population: 47.40394778549671
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 11885033
--- Timings ---
Current time: 1559583388243 milliseconds
Total Time:          80.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.2 seconds, 72.1%
Fitness Testing:     12.1 seconds, 15.0%
Report:              10.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Lexicase best program: (boolean_stackdepth integer_min in3 exec_do*while (print_integer) integer_yankdup integer_flush boolean_not exec_eq exec_shove (exec_s_when_autoconstructing () (integer_empty) (exec_rot () () (exec_rot () () (integer_mod exec_empty) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_add) exec_empty exec_s_when_autoconstructing (exec_swap (in4) ()) () ()))))
Lexicase best errors: [1 0 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.409
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_rot} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Zero cases best program: (boolean_stackdepth integer_min in3 exec_do*while (print_integer) integer_yankdup integer_flush boolean_not exec_eq exec_shove (exec_s_when_autoconstructing () (integer_empty) (exec_rot () () (exec_rot () () (integer_mod exec_empty) integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_add) exec_empty exec_s_when_autoconstructing (exec_swap (in4) ()) () ()))))
Zero cases best errors: [1 0 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.409
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 943 380 439 366 1000 380 380 1000 948)
Population mean number of elite cases: 6.02
Count of perfect (error zero) individuals by case: (182 943 380 439 366 0 380 380 0 948)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in3 exec_empty print_integer integer_yankdup integer_flush exec_if (exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_dup_times in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ()) ())
Errors: [1 0 1 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 49
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 5.982
Median total errors in population: 6
Error averages by case: (0.818 0.057 0.62 0.561 0.634 1.0 0.62 0.62 1.0 0.052)
Error minima by case: (0 0 0 0 0 1 0 0 1 0)
Average genome size in population (length): 32.417
Average program size in population (points): 42.928
Average percent parens in population: 0.246
Minimum age in population: 45.34960316121578
Maximum age in population: 50.25146022578701
Average age in population: 48.65850195548125
Median age in population: 48.70002978760749
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 12126621
--- Timings ---
Current time: 1559583390871 milliseconds
Total Time:          83.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.4 seconds, 72.5%
Fitness Testing:     12.4 seconds, 14.8%
Report:              10.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -45                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: 89                 
Correct output: -51                 | Program output: 57                 
Correct output: -87                 | Program output: 14                 
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: 39                 
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: 76                 
Correct output: -32                 | Program output: 5                  
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: 35                 
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: 3                  
Correct output: -55                 | Program output: 81                 
Correct output: -92                 | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: 74                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 82                 
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -70                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: 5                  
Correct output: -84                 | Program output: -24                
Correct output: -93                 | Program output: 95                 
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -12                
Correct output: -63                 | Program output: 28                 
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in2 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_dup_times in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_s_when_autoconstructing () (boolean_not integer_yank exec_empty boolean_yankdup) ()) () ())
Lexicase best errors: [1 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in2 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_dup_times in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_s_when_autoconstructing () (boolean_not integer_yank exec_empty boolean_yankdup) ()) () ())
Zero cases best errors: [1 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (429 1000 334 1000 1000 943 1000 173 336 336)
Population mean number of elite cases: 6.55
Count of perfect (error zero) individuals by case: (429 0 334 0 0 943 0 173 336 336)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_stackdepth in1 boolean_yankdup boolean_dup_times boolean_flush in2 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) exec_dup_times (integer_inc integer_dec boolean_dup) exec_s_when_autoconstructing (exec_yankdup in4 integer_sub exec_yank boolean_not integer_yank exec_empty boolean_yankdup) () ()))
Errors: [1 1 0 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 7.449
Median total errors in population: 8
Error averages by case: (0.571 1.0 0.666 1.0 1.0 0.057 1.0 0.827 0.664 0.664)
Error minima by case: (0 1 0 1 1 0 1 0 0 0)
Average genome size in population (length): 30.464
Average program size in population (points): 41.035
Average percent parens in population: 0.260
Minimum age in population: 46.34960316121578
Maximum age in population: 51.90527866897173
Average age in population: 50.11168545590853
Median age in population: 50.16240135510452
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 12361325
--- Timings ---
Current time: 1559583393448 milliseconds
Total Time:          85.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.6 seconds, 72.8%
Fitness Testing:     12.6 seconds, 14.7%
Report:              10.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -45                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: 89                 
Correct output: -51                 | Program output: 57                 
Correct output: -87                 | Program output: 14                 
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: 39                 
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: 76                 
Correct output: -32                 | Program output: 5                  
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: 35                 
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: 3                  
Correct output: -55                 | Program output: 81                 
Correct output: -92                 | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: 74                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 82                 
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -70                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: 5                  
Correct output: -84                 | Program output: -24                
Correct output: -93                 | Program output: 95                 
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -12                
Correct output: -63                 | Program output: 28                 
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_pop boolean_flush in2 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) exec_dup_times (integer_inc)))
Lexicase best errors: [0 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 23
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_pop boolean_flush in2 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) exec_dup_times (integer_inc)))
Zero cases best errors: [0 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 23
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (951 180 200 199 2 569 569 568 956 569)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (951 180 200 199 2 569 569 568 956 569)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in2 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) exec_dup_times (integer_inc integer_dec boolean_dup) integer_pop) exec_empty exec_s_when_autoconstructing (exec_yankdup) (in4 integer_sub exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) ())
Errors: [0 1 1 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 33
Size: 43
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 5.237
Median total errors in population: 4
Error averages by case: (0.049 0.82 0.8 0.801 0.998 0.431 0.431 0.432 0.044 0.431)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.544
Average program size in population (points): 40.548
Average percent parens in population: 0.249
Minimum age in population: 47.34960316121578
Maximum age in population: 53.41124245594256
Average age in population: 51.6298928600949
Median age in population: 51.71480016969144
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.657
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 12600643
--- Timings ---
Current time: 1559583395858 milliseconds
Total Time:          88.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.5 seconds, 73.1%
Fitness Testing:     12.9 seconds, 14.6%
Report:              10.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -45                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: 89                 
Correct output: -51                 | Program output: 57                 
Correct output: -87                 | Program output: 14                 
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: 39                 
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: 76                 
Correct output: -32                 | Program output: 5                  
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: 35                 
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: 3                  
Correct output: -55                 | Program output: 81                 
Correct output: -92                 | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: 74                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 82                 
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -70                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: 5                  
Correct output: -84                 | Program output: -24                
Correct output: -93                 | Program output: 95                 
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -12                
Correct output: -63                 | Program output: 28                 
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in2 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_dup_times in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_stackdepth) (exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) ())
Lexicase best errors: [1 1 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 51
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in2 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_dup_times in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () boolean_not integer_stackdepth) (exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) ())
Zero cases best errors: [1 1 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 51
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1000 170 486 486 486 1000 308)
Population mean number of elite cases: 6.94
Count of perfect (error zero) individuals by case: (0 0 0 0 170 486 486 486 0 308)
Population mean number of perfect (error zero) cases: 1.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in2 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) print_exec (integer_inc integer_dec boolean_dup) integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_dup_times in4 integer_sub exec_y_when_autoconstructing (boolean_or) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ())
Errors: [1 1 1 1 1 0 0 0 1 1]
Total: 7
Mean: 0.7
Genome size: 36
Size: 47
Percent parens: 0.234
--- Population Statistics ---
Average total errors in population: 8.064
Median total errors in population: 8
Error averages by case: (1.0 1.0 1.0 1.0 0.83 0.514 0.514 0.514 1.0 0.692)
Error minima by case: (1 1 1 1 0 0 0 0 1 0)
Average genome size in population (length): 30.549
Average program size in population (points): 40.644
Average percent parens in population: 0.250
Minimum age in population: 50.68581313639879
Maximum age in population: 54.84054205293069
Average age in population: 53.21016040843481
Median age in population: 53.2752364417247
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 117
Genome diversity (% unique genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 12920188
--- Timings ---
Current time: 1559583398289 milliseconds
Total Time:          90.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.4 seconds, 73.3%
Fitness Testing:     13.2 seconds, 14.5%
Report:              11.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 96                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 49                 
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 92                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 90                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 81                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 40                 
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: 73                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 57                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: 47                 
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_flush boolean_yankdup boolean_dup_times integer_dup_items in3 in4 print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) boolean_dup integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_dup_times in4 integer_sub exec_y_when_autoconstructing () integer_stackdepth) (exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) ())
Lexicase best errors: [1 0 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 51
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_flush boolean_yankdup boolean_dup_times integer_dup_items in3 in4 print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times) boolean_dup integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_dup_times in4 integer_sub exec_y_when_autoconstructing () integer_stackdepth) (exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) ())
Zero cases best errors: [1 0 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 51
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 932 2 3 589 350 1000 1000 1000 947)
Population mean number of elite cases: 6.82
Count of perfect (error zero) individuals by case: (0 932 2 3 589 350 0 0 0 947)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Best program: (integer_pop integer_gt exec_if (boolean_yankdup boolean_dup_times boolean_flush boolean_flush boolean_yankdup boolean_dup_times integer_dup_items in3 in2 exec_yankdup print_integer integer_yankdup) (integer_flush integer_lte exec_eq exec_dup_items exec_empty exec_s_when_autoconstructing (exec_swap (in4) ()) () ()))
Errors: [1 0 0 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.177
Median total errors in population: 7
Error averages by case: (1.0 0.068 0.998 0.997 0.411 0.65 1.0 1.0 1.0 0.053)
Error minima by case: (1 0 0 0 0 0 1 1 1 0)
Average genome size in population (length): 32.027
Average program size in population (points): 42.378
Average percent parens in population: 0.244
Minimum age in population: 51.90512104518712
Maximum age in population: 56.28151310587418
Average age in population: 54.59012853329282
Median age in population: 54.66383602214046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 13167727
--- Timings ---
Current time: 1559583400768 milliseconds
Total Time:          93.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.4 seconds, 73.5%
Fitness Testing:     13.4 seconds, 14.4%
Report:              11.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 96                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 49                 
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 92                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 90                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 81                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 40                 
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: 73                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 57                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: 47                 
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_yankdup boolean_dup_times boolean_flush boolean_flush boolean_yankdup boolean_dup_times integer_dup_items in3 in2 exec_yankdup print_integer integer_yankdup) (integer_flush integer_lte exec_eq exec_dup_items exec_empty exec_s_when_autoconstructing (exec_swap (in4) ()) () ()))
Lexicase best errors: [0 0 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_yankdup boolean_dup_times boolean_flush boolean_flush boolean_yankdup boolean_dup_times integer_dup_items in3 in2 exec_yankdup print_integer integer_yankdup) (integer_flush integer_lte exec_eq exec_dup_items exec_empty exec_s_when_autoconstructing (exec_swap (in4) ()) () ()))
Zero cases best errors: [0 0 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (948 726 463 684 219 462 466 256 1000 263)
Population mean number of elite cases: 5.49
Count of perfect (error zero) individuals by case: (948 726 463 684 219 462 466 256 0 263)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Best program: (integer_pop integer_gt exec_if (boolean_yankdup boolean_dup_times boolean_flush boolean_flush boolean_yankdup boolean_dup_times integer_dup_items in3 in2 exec_yankdup print_integer integer_yankdup) (integer_flush integer_lte exec_eq exec_dup_items exec_empty exec_s_when_autoconstructing (exec_swap (in4) ()) () ()))
Errors: [0 0 0 0 1 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 5.513
Median total errors in population: 5
Error averages by case: (0.052 0.274 0.537 0.316 0.781 0.538 0.534 0.744 1.0 0.737)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 31.373
Average program size in population (points): 41.206
Average percent parens in population: 0.240
Minimum age in population: 53.4822667024564
Maximum age in population: 57.87279949169897
Average age in population: 56.46052479414179
Median age in population: 56.43969114270294
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 172
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 173
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 13415054
--- Timings ---
Current time: 1559583402981 milliseconds
Total Time:          95.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.2 seconds, 73.6%
Fitness Testing:     13.6 seconds, 14.3%
Report:              11.5 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in3 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_eq integer_lte exec_eq exec_swap (integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_yankdup)) ())))
Lexicase best errors: [0 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 33
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in3 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor exec_eq integer_lte exec_eq exec_swap (integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_yankdup)) ())))
Zero cases best errors: [0 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 33
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (584 948 261 932 261 585 1000 146 529 1000)
Population mean number of elite cases: 6.25
Count of perfect (error zero) individuals by case: (584 948 261 932 261 585 0 146 529 0)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup})
Best program: (exec_shove (boolean_dup_times boolean_flush in3 exec_empty print_integer integer_yankdup) integer_flush exec_dup_items integer_pop exec_empty boolean_xor exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec integer_dup_times in4 integer_sub exec_y_when_autoconstructing (integer_pop exec_empty exec_s_when_autoconstructing (integer_dup_times in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) exec_shove () exec_pop (integer_stackdepth) exec_shove () boolean_not integer_yank exec_empty boolean_yankdup) () ())))
Errors: [0 0 0 0 0 0 1 1 1 1]
Total: 4
Mean: 0.4
Genome size: 37
Size: 48
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 5.754
Median total errors in population: 5
Error averages by case: (0.416 0.052 0.739 0.068 0.739 0.415 1.0 0.854 0.471 1.0)
Error minima by case: (0 0 0 0 0 0 1 0 0 1)
Average genome size in population (length): 29.157
Average program size in population (points): 38.496
Average percent parens in population: 0.244
Minimum age in population: 54.4822667024564
Maximum age in population: 59.55353286852187
Average age in population: 57.98615882606746
Median age in population: 58.09237748696614
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 236
Genome diversity (% unique genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 238
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 13660853
--- Timings ---
Current time: 1559583405361 milliseconds
Total Time:          97.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.1 seconds, 73.7%
Fitness Testing:     13.9 seconds, 14.2%
Report:              11.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 96                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 49                 
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 92                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 90                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 81                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 40                 
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: 73                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 57                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: 47                 
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_yankdup boolean_dup_times boolean_flush boolean_flush boolean_yankdup boolean_dup_times integer_dup_items in3 in2 exec_yankdup print_integer integer_yankdup) (integer_flush integer_lte exec_eq exec_dup_items integer_mult exec_s_when_autoconstructing (exec_swap (in4) ()) () ()))
Lexicase best errors: [0 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_yankdup boolean_dup_times boolean_flush boolean_flush boolean_yankdup boolean_dup_times integer_dup_items in3 in2 exec_yankdup print_integer integer_yankdup) (integer_flush integer_lte exec_eq exec_dup_items integer_mult exec_s_when_autoconstructing (exec_swap (in4) ()) () ()))
Zero cases best errors: [0 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (248 1000 945 248 1000 540 149 1000 537 248)
Population mean number of elite cases: 5.91
Count of perfect (error zero) individuals by case: (248 0 945 248 0 540 149 0 537 248)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4})
Best program: (integer_pop integer_gt exec_if (boolean_yankdup boolean_dup_times boolean_flush boolean_flush boolean_yankdup boolean_dup_times integer_dup_items in3 in2 exec_yankdup print_integer integer_yankdup) (integer_flush integer_lte exec_eq exec_dup_items exec_empty exec_s_when_autoconstructing (exec_dup_times (in4)) () ()))
Errors: [0 1 0 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.085
Median total errors in population: 7
Error averages by case: (0.752 1.0 0.055 0.752 1.0 0.46 0.851 1.0 0.463 0.752)
Error minima by case: (0 1 0 0 1 0 0 1 0 0)
Average genome size in population (length): 27.185
Average program size in population (points): 36.417
Average percent parens in population: 0.254
Minimum age in population: 55.8920742594637
Maximum age in population: 61.36964825525138
Average age in population: 59.37767257136805
Median age in population: 59.44900218182738
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 145
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 13895695
--- Timings ---
Current time: 1559583407766 milliseconds
Total Time:         100.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.1 seconds, 73.9%
Fitness Testing:     14.1 seconds, 14.1%
Report:              11.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -45                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: 89                 
Correct output: -51                 | Program output: 57                 
Correct output: -87                 | Program output: 14                 
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: 39                 
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: 76                 
Correct output: -32                 | Program output: 5                  
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: 35                 
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: 3                  
Correct output: -55                 | Program output: 81                 
Correct output: -92                 | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: 74                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 82                 
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -70                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: 5                  
Correct output: -84                 | Program output: -24                
Correct output: -93                 | Program output: 95                 
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -12                
Correct output: -63                 | Program output: 28                 
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_926} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in4})
Lexicase best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in2 exec_empty print_integer integer_yankdup integer_flush exec_dup_items tag_boolean_926 exec_shove (exec_dup_items exec_rot () (boolean_xor exec_dup_items integer_stackdepth) (exec_dup_times (integer_inc in4))))
Lexicase best errors: [1 1 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_926} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in4})
Zero cases best program: (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in2 exec_empty print_integer integer_yankdup integer_flush exec_dup_items tag_boolean_926 exec_shove (exec_dup_items exec_rot () (boolean_xor exec_dup_items integer_stackdepth) (exec_dup_times (integer_inc in4))))
Zero cases best errors: [1 1 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 799 1 1 1 416 142 949 142 142)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (10 799 1 1 1 416 142 949 142 142)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times})
Best program: (integer_pop integer_pop integer_gt exec_if (boolean_stackdepth boolean_flush boolean_yankdup boolean_dup_times boolean_flush in2 exec_empty print_integer integer_yankdup) (integer_flush boolean_xor exec_eq exec_shove () exec_dup_items exec_rot () () (boolean_xor exec_dup_items integer_stackdepth) exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times))
Errors: [1 1 1 1 1 1 0 0 0 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 7.397
Median total errors in population: 7
Error averages by case: (0.99 0.201 0.999 0.999 0.999 0.584 0.858 0.051 0.858 0.858)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.858
Average program size in population (points): 34.554
Average percent parens in population: 0.251
Minimum age in population: 56.8920742594637
Maximum age in population: 62.82867817017723
Average age in population: 60.92963540514443
Median age in population: 60.98432670245711
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 198
Genome diversity (% unique genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 14128978
--- Timings ---
Current time: 1559583410097 milliseconds
Total Time:         102.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.9 seconds, 74.1%
Fitness Testing:     14.4 seconds, 14.0%
Report:              12.1 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -2                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 96                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 49                 
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 92                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 90                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 81                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 33                 
Correct output: -33                 | Program output: 42                 
Correct output: -60                 | Program output: 31                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: 4                  
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: 71                 
Correct output: -48                 | Program output: 4                  
Correct output: -63                 | Program output: 78                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: 73                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: 59                 
Correct output: -98                 | Program output: 93                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 70                 
Correct output: -8                  | Program output: 57                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: 47                 
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: 42                 
Correct output: -99                 | Program output: 76                 
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: 79                 
Correct output: -48                 | Program output: 3                  
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (boolean_yankdup boolean_dup_times integer_shove in3 in4 integer_rot print_integer integer_yankdup integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [0 0 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.161
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (boolean_yankdup boolean_dup_times integer_shove in3 in4 integer_rot print_integer integer_yankdup integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [0 0 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (936 144 281 143 17 634 280 327 307 324)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (936 144 281 143 17 634 280 327 307 324)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (print_boolean in4 integer_rot print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Errors: [0 0 0 0 1 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 6.607
Median total errors in population: 7
Error averages by case: (0.064 0.856 0.719 0.857 0.983 0.366 0.72 0.673 0.693 0.676)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.888
Average program size in population (points): 30.277
Average percent parens in population: 0.257
Minimum age in population: 59.32905083710648
Maximum age in population: 64.34243090339078
Average age in population: 61.80757402957727
Median age in population: 61.83903768167147
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 254
Genome diversity (% unique genomes):	 0.447
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 264
Syntactic diversity (% unique Push programs):	 0.425
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 14329683
--- Timings ---
Current time: 1559583412603 milliseconds
Total Time:         105.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.0 seconds, 74.3%
Fitness Testing:     14.6 seconds, 13.9%
Report:              12.3 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 36                 
Correct output: 9                   | Program output: 97                 
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 76                 
Correct output: 4                   | Program output: 58                 
Correct output: 14                  | Program output: 36                 
Correct output: 24                  | Program output: 48                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 96                 
Correct output: 13                  | Program output: 62                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 76                 
Correct output: 3                   | Program output: 47                 
Correct output: 41                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 70                 
Correct output: -48                 | Program output: 26                 
Correct output: -47                 | Program output: 64                 
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: 19                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -19                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 48                 
Correct output: -35                 | Program output: 50                 
Correct output: -90                 | Program output: -19                
Correct output: -48                 | Program output: 60                 
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: 64                 
Correct output: -54                 | Program output: 16                 
Correct output: -32                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: 7                  
Correct output: -77                 | Program output: 20                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 76                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: 75                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -76                
Correct output: -99                 | Program output: 66                 
Correct output: -84                 | Program output: 16                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 47                 
Correct output: -74                 | Program output: 80                 
Correct output: -94                 | Program output: 35                 
Correct output: -35                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 43                 
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -19                
Correct output: -33                 | Program output: 97                 
Correct output: -73                 | Program output: 56                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: 41                 
Correct output: -27                 | Program output: 76                 
Correct output: -93                 | Program output: 20                 
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 31                 
Correct output: -61                 | Program output: -60                
Correct output: -73                 | Program output: -37                
Correct output: -59                 | Program output: 51                 
Correct output: -84                 | Program output: 75                 
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: 85                 
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -1                 
Correct output: -44                 | Program output: 15                 
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Lexicase best program: (boolean_stackdepth in1 print_integer integer_stackdepth integer_flush integer_lte exec_eq exec_dup_items exec_empty exec_s_when_autoconstructing (exec_swap (in4) ()) () ())
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 18
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Zero cases best program: (boolean_stackdepth in1 print_integer integer_stackdepth integer_flush integer_lte exec_eq exec_dup_items exec_empty exec_s_when_autoconstructing (exec_swap (in4) ()) () ())
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 18
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (410 219 866 219 138 219 219 866 219 219)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (410 219 866 219 138 219 219 866 219 219)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4})
Best program: (boolean_stackdepth in1 print_integer integer_stackdepth integer_flush integer_lte exec_eq exec_dup_items exec_empty exec_s_when_autoconstructing (exec_swap (in4) ()) () ())
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 12
Size: 18
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.406
Median total errors in population: 7
Error averages by case: (0.59 0.781 0.134 0.781 0.862 0.781 0.781 0.134 0.781 0.781)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.938
Average program size in population (points): 33.956
Average percent parens in population: 0.223
Minimum age in population: 60.71157239604509
Maximum age in population: 65.7689602303908
Average age in population: 63.09039532897256
Median age in population: 63.1568686037499
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 151
Genome diversity (% unique genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 14576620
--- Timings ---
Current time: 1559583414924 milliseconds
Total Time:         107.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.9 seconds, 74.3%
Fitness Testing:     14.9 seconds, 13.8%
Report:              12.6 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -45                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: 89                 
Correct output: -51                 | Program output: 57                 
Correct output: -87                 | Program output: 14                 
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: 39                 
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: 76                 
Correct output: -32                 | Program output: 5                  
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: 35                 
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: 3                  
Correct output: -55                 | Program output: 81                 
Correct output: -92                 | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: 74                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 82                 
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -70                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: 5                  
Correct output: -84                 | Program output: -24                
Correct output: -93                 | Program output: 95                 
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -12                
Correct output: -63                 | Program output: 28                 
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in4})
Lexicase best program: (boolean_stackdepth integer_min boolean_yankdup boolean_flush in2 boolean_flush print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (in4))
Lexicase best errors: [1 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 15
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in4})
Zero cases best program: (boolean_stackdepth integer_min boolean_yankdup boolean_flush in2 boolean_flush print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (in4))
Zero cases best errors: [1 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 15
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (715 98 131 1 131 1 944 945 131 1)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (715 98 131 1 131 1 944 945 131 1)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_xor})
Best program: (boolean_stackdepth boolean_flush exec_dup_items boolean_dup_times boolean_flush in2 exec_empty print_integer integer_yankdup integer_flush exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (exec_dup_items exec_eq exec_shove (exec_dup_items exec_rot () () (boolean_xor)))))
Errors: [1 1 0 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 30
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.902
Median total errors in population: 7
Error averages by case: (0.285 0.902 0.869 0.999 0.869 0.999 0.056 0.055 0.869 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.056
Average program size in population (points): 22.256
Average percent parens in population: 0.294
Minimum age in population: 61.71157239604509
Maximum age in population: 66.85330845152703
Average age in population: 64.41232964059331
Median age in population: 64.45817170224814
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 411
Genome diversity (% unique genomes):	 0.347
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 462
Syntactic diversity (% unique Push programs):	 0.32
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 14717947
--- Timings ---
Current time: 1559583417887 milliseconds
Total Time:         110.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.5 seconds, 74.7%
Fitness Testing:     15.0 seconds, 13.6%
Report:              12.7 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 integer_yankdup boolean_dup_times integer_shove) (in3 in4 integer_rot print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [0 0 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 integer_yankdup boolean_dup_times integer_shove) (in3 in4 integer_rot print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [0 0 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (317 929 106 129 317 317 317 106 129 551)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (317 929 106 129 317 317 317 106 129 551)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 integer_yankdup boolean_dup_times integer_shove) (in3 in4 integer_rot print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Errors: [0 0 1 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 6.782
Median total errors in population: 6
Error averages by case: (0.683 0.071 0.894 0.871 0.683 0.683 0.683 0.894 0.871 0.449)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.643
Average program size in population (points): 33.34
Average percent parens in population: 0.206
Minimum age in population: 63.41734988783355
Maximum age in population: 68.26790129213089
Average age in population: 66.2739552563872
Median age in population: 66.28511813099675
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 207
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 14964864
--- Timings ---
Current time: 1559583420071 milliseconds
Total Time:         112.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.2 seconds, 74.9%
Fitness Testing:     15.3 seconds, 13.6%
Report:              12.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (boolean_stackdepth in1 print_integer integer_stackdepth integer_flush integer_lte exec_eq in4 integer_rot print_integer integer_yankdup integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank) (integer_stackdepth) ())
Lexicase best errors: [0 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 34
Percent parens: 0.147
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (boolean_stackdepth in1 print_integer integer_stackdepth integer_flush integer_lte exec_eq in4 integer_rot print_integer integer_yankdup integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup integer_dup_times) integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank) (integer_stackdepth) ())
Zero cases best errors: [0 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 34
Percent parens: 0.147
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 467 927 236 1000 1000 223 236 467 467)
Population mean number of elite cases: 5.26
Count of perfect (error zero) individuals by case: (236 467 927 236 0 0 223 236 467 467)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 integer_yankdup boolean_dup_times integer_shove) (in3 in4 integer_rot print_integer exec_empty exec_s_when_autoconstructing (integer_dup_times in4 integer_sub exec_y_when_autoconstructing (integer_stackdepth) boolean_dup) (integer_dec boolean_dup integer_dup_times) (integer_pop exec_empty) exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ()))
Errors: [1 0 0 1 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 6.741
Median total errors in population: 6
Error averages by case: (0.764 0.533 0.073 0.764 1.0 1.0 0.777 0.764 0.533 0.533)
Error minima by case: (0 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 27.131
Average program size in population (points): 33.619
Average percent parens in population: 0.209
Minimum age in population: 64.41734988783355
Maximum age in population: 69.43255716891105
Average age in population: 67.70140249444964
Median age in population: 67.77572118083523
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 181
Genome diversity (% unique genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 193
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 15224800
--- Timings ---
Current time: 1559583422759 milliseconds
Total Time:         115.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.3 seconds, 75.0%
Fitness Testing:     15.5 seconds, 13.5%
Report:              13.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [1 0 1 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 41
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [1 0 1 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 41
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 386 1000 1000 399 399 1000 1000 385 159)
Population mean number of elite cases: 6.73
Count of perfect (error zero) individuals by case: (0 386 0 0 399 399 0 0 385 159)
Population mean number of perfect (error zero) cases: 1.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Errors: [1 0 1 1 1 1 1 1 0 0]
Total: 7
Mean: 0.7
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 8.272
Median total errors in population: 8
Error averages by case: (1.0 0.614 1.0 1.0 0.601 0.601 1.0 1.0 0.615 0.841)
Error minima by case: (1 0 1 1 0 0 1 1 0 0)
Average genome size in population (length): 23.631
Average program size in population (points): 29.917
Average percent parens in population: 0.234
Minimum age in population: 66.1486606652652
Maximum age in population: 71.23343633935033
Average age in population: 69.15661813296748
Median age in population: 69.1976160197922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 15450466
--- Timings ---
Current time: 1559583425178 milliseconds
Total Time:         117.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.3 seconds, 75.1%
Fitness Testing:     15.8 seconds, 13.4%
Report:              13.4 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [0 1 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [0 1 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (560 374 561 560 374 1000 560 374 560 939)
Population mean number of elite cases: 5.86
Count of perfect (error zero) individuals by case: (560 374 561 560 374 0 560 374 560 939)
Population mean number of perfect (error zero) cases: 4.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub) () ())
Errors: [0 1 0 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 36
Size: 43
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 5.138
Median total errors in population: 4
Error averages by case: (0.44 0.626 0.439 0.44 0.626 1.0 0.44 0.626 0.44 0.061)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 25.215
Average program size in population (points): 31.674
Average percent parens in population: 0.228
Minimum age in population: 67.72111804947349
Maximum age in population: 72.50020357650497
Average age in population: 70.05463588358305
Median age in population: 70.22183275372186
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 367
Genome diversity (% unique genomes):	 0.376
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 378
Syntactic diversity (% unique Push programs):	 0.345
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 15685507
--- Timings ---
Current time: 1559583427834 milliseconds
Total Time:         120.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.4 seconds, 75.2%
Fitness Testing:     16.0 seconds, 13.3%
Report:              13.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [1 0 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [1 0 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 937 1000 571 573 1000 358 1000 571 571)
Population mean number of elite cases: 7.58
Count of perfect (error zero) individuals by case: (0 937 0 571 573 0 358 0 571 571)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times exec_yank integer_stackdepth)
Errors: [1 0 1 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 32
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 6.419
Median total errors in population: 5
Error averages by case: (1.0 0.063 1.0 0.429 0.427 1.0 0.642 1.0 0.429 0.429)
Error minima by case: (1 0 1 0 0 1 0 1 0 0)
Average genome size in population (length): 25.409
Average program size in population (points): 31.835
Average percent parens in population: 0.225
Minimum age in population: 68.74657585412217
Maximum age in population: 73.57123737590271
Average age in population: 71.53530272339792
Median age in population: 71.60281293604703
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 239
Genome diversity (% unique genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 252
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 15920364
--- Timings ---
Current time: 1559583429960 milliseconds
Total Time:         122.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.1 seconds, 75.3%
Fitness Testing:     16.2 seconds, 13.3%
Report:              13.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [1 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [1 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 203 1000 1000 940 730 732 939 732 734)
Population mean number of elite cases: 8.01
Count of perfect (error zero) individuals by case: (0 203 0 0 940 730 732 939 732 734)
Population mean number of perfect (error zero) cases: 5.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Errors: [1 1 1 1 0 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 4.99
Median total errors in population: 4
Error averages by case: (1.0 0.797 1.0 1.0 0.06 0.27 0.268 0.061 0.268 0.266)
Error minima by case: (1 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 28.619
Average program size in population (points): 35.132
Average percent parens in population: 0.198
Minimum age in population: 71.0076316399283
Maximum age in population: 74.8490386729358
Average age in population: 72.95697827129264
Median age in population: 73.01749297024085
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 218
Genome diversity (% unique genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 231
Syntactic diversity (% unique Push programs):	 0.525
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 16192890
--- Timings ---
Current time: 1559583432194 milliseconds
Total Time:         124.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.8 seconds, 75.3%
Fitness Testing:     16.5 seconds, 13.3%
Report:              14.1 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth integer_mult integer_inc integer_dec boolean_dup integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [1 0 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth integer_mult integer_inc integer_dec boolean_dup integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [1 0 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 945 1000 961 945 1000 314 639 639 314)
Population mean number of elite cases: 7.76
Count of perfect (error zero) individuals by case: (0 945 0 961 945 0 314 639 639 314)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Errors: [1 0 1 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 5.243
Median total errors in population: 5
Error averages by case: (1.0 0.055 1.0 0.039 0.055 1.0 0.686 0.361 0.361 0.686)
Error minima by case: (1 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 33.257
Average program size in population (points): 40.099
Average percent parens in population: 0.169
Minimum age in population: 72.18524670949353
Maximum age in population: 76.23134713076968
Average age in population: 74.16081758818511
Median age in population: 74.22183275372186
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 213
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 16510248
--- Timings ---
Current time: 1559583434402 milliseconds
Total Time:         126.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.5 seconds, 75.3%
Fitness Testing:     16.8 seconds, 13.3%
Report:              14.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 36                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -19                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 50                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 16                 
Correct output: -32                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -76                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 16                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 47                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 35                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 43                 
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in1 in3 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop integer_dup_items exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [0 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 41
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in1 in3 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop integer_dup_items exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [0 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 41
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (953 484 1000 484 484 463 463 949 463 1000)
Population mean number of elite cases: 6.74
Count of perfect (error zero) individuals by case: (953 484 0 484 484 463 463 949 463 0)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in1 in3 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop integer_dup_items exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Errors: [0 0 1 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 5.257
Median total errors in population: 5
Error averages by case: (0.047 0.516 1.0 0.516 0.516 0.537 0.537 0.051 0.537 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 33.229
Average program size in population (points): 40.076
Average percent parens in population: 0.170
Minimum age in population: 73.22183275372186
Maximum age in population: 77.76179172741386
Average age in population: 75.56244722137016
Median age in population: 75.66727178232296
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 208
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 224
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 16826970
--- Timings ---
Current time: 1559583436636 milliseconds
Total Time:         129.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.2 seconds, 75.3%
Fitness Testing:     17.1 seconds, 13.3%
Report:              14.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq integer_stackdepth integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [0 0 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq integer_stackdepth integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [0 0 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (953 758 801 326 1000 326 1000 326 1000 760)
Population mean number of elite cases: 7.25
Count of perfect (error zero) individuals by case: (953 758 801 326 0 326 0 326 0 760)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in3 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (boolean_not integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Errors: [0 0 1 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 45
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 5.75
Median total errors in population: 6
Error averages by case: (0.047 0.242 0.199 0.674 1.0 0.674 1.0 0.674 1.0 0.24)
Error minima by case: (0 0 0 0 1 0 1 0 1 0)
Average genome size in population (length): 33.463
Average program size in population (points): 40.426
Average percent parens in population: 0.172
Minimum age in population: 74.22183275372186
Maximum age in population: 78.5630507060437
Average age in population: 76.59671909058747
Median age in population: 76.72183275372186
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 376
Genome diversity (% unique genomes):	 0.52
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 400
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 17144741
--- Timings ---
Current time: 1559583438906 milliseconds
Total Time:         131.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.9 seconds, 75.3%
Fitness Testing:     17.4 seconds, 13.2%
Report:              14.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 49                 
Correct output: 14                  | Program output: 36                 
Correct output: 24                  | Program output: 48                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 76                 
Correct output: 3                   | Program output: 47                 
Correct output: 41                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 33                 
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 4                  
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -19                
Correct output: -48                 | Program output: 4                  
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: 73                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 66                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: 59                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 56                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: 20                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: -60                
Correct output: -73                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: 42                 
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -1                 
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items in1 integer_shove) (in1 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte in3 exec_dup_items integer_stackdepth exec_dup_times (in2 integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [0 0 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 41
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items in1 integer_shove) (in1 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte in3 exec_dup_items integer_stackdepth exec_dup_times (in2 integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [0 0 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 41
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (794 942 686 1000 1000 378 928 793 378 794)
Population mean number of elite cases: 7.69
Count of perfect (error zero) individuals by case: (794 942 686 0 0 378 928 793 378 794)
Population mean number of perfect (error zero) cases: 5.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in1 in4 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Errors: [0 0 1 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 4.307
Median total errors in population: 4
Error averages by case: (0.206 0.058 0.314 1.0 1.0 0.622 0.072 0.207 0.622 0.206)
Error minima by case: (0 0 0 1 1 0 0 0 0 0)
Average genome size in population (length): 32.339
Average program size in population (points): 39.008
Average percent parens in population: 0.169
Minimum age in population: 75.22183275372186
Maximum age in population: 80.1462571933305
Average age in population: 78.26449661404577
Median age in population: 78.32316726625734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.008
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 17455314
--- Timings ---
Current time: 1559583441410 milliseconds
Total Time:         133.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.8 seconds, 75.4%
Fitness Testing:     17.7 seconds, 13.2%
Report:              15.2 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 36                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -19                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 50                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 16                 
Correct output: -32                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -76                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 16                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 47                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 35                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 43                 
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction -63} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_items boolean_dup_times integer_shove) (in1 in4 integer_min print_integer integer_yankdup integer_flush in2 exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty) exec_s_when_autoconstructing (integer_inc -63 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [0 0 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction -63} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_items boolean_dup_times integer_shove) (in1 in4 integer_min print_integer integer_yankdup integer_flush in2 exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop exec_empty) exec_s_when_autoconstructing (integer_inc -63 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [0 0 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (943 699 776 406 1000 699 953 700 1000 951)
Population mean number of elite cases: 8.13
Count of perfect (error zero) individuals by case: (943 699 776 406 0 699 953 700 0 951)
Population mean number of perfect (error zero) cases: 6.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times integer_shove) (in1 in3 integer_min print_integer integer_yankdup) integer_flush integer_lte exec_eq exec_dup_items integer_stackdepth exec_dup_times (integer_inc integer_dec boolean_dup) integer_dup_times integer_pop integer_swap exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Errors: [0 0 1 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 3.873
Median total errors in population: 3
Error averages by case: (0.057 0.301 0.224 0.594 1.0 0.301 0.047 0.3 1.0 0.049)
Error minima by case: (0 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 32.999
Average program size in population (points): 39.881
Average percent parens in population: 0.171
Minimum age in population: 77.22183275372186
Maximum age in population: 81.65650276780673
Average age in population: 79.7100596422971
Median age in population: 79.7745806426367
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 17775765
--- Timings ---
Current time: 1559583443811 milliseconds
Total Time:         136.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.7 seconds, 75.4%
Fitness Testing:     18.0 seconds, 13.2%
Report:              15.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in1 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 34
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in1 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 34
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 866 503 521 948 953 864 521 948 1000)
Population mean number of elite cases: 8.12
Count of perfect (error zero) individuals by case: (0 866 503 521 948 953 864 521 948 0)
Population mean number of perfect (error zero) cases: 6.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in1 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Errors: [1 0 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 28
Size: 34
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 3.876
Median total errors in population: 4
Error averages by case: (1.0 0.134 0.497 0.479 0.052 0.047 0.136 0.479 0.052 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 33.465
Average program size in population (points): 40.475
Average percent parens in population: 0.172
Minimum age in population: 78.22183275372186
Maximum age in population: 82.82454609513881
Average age in population: 81.1667132635832
Median age in population: 81.22052052442204
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 18100560
--- Timings ---
Current time: 1559583446312 milliseconds
Total Time:         138.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       104.6 seconds, 75.4%
Fitness Testing:     18.3 seconds, 13.2%
Report:              15.7 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in1 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [1 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 34
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in1 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [1 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 34
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 956 1000 928 928 936 1000 928 944 928)
Population mean number of elite cases: 9.55
Count of perfect (error zero) individuals by case: (0 956 0 928 928 936 0 928 944 928)
Population mean number of perfect (error zero) cases: 6.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in1 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Errors: [1 0 1 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 34
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 3.452
Median total errors in population: 3
Error averages by case: (1.0 0.044 1.0 0.072 0.072 0.064 1.0 0.072 0.056 0.072)
Error minima by case: (1 0 1 0 0 0 1 0 0 0)
Average genome size in population (length): 27.938
Average program size in population (points): 33.984
Average percent parens in population: 0.178
Minimum age in population: 83.3583368802561
Maximum age in population: 84.3583368802561
Average age in population: 83.8523368802561
Median age in population: 83.3583368802561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 625
Genome diversity (% unique genomes):	 0.337
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 651
Syntactic diversity (% unique Push programs):	 0.311
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 18380974
--- Timings ---
Current time: 1559583448743 milliseconds
Total Time:         141.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       106.6 seconds, 75.5%
Fitness Testing:     18.5 seconds, 13.1%
Report:              15.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in1 integer_shove in1 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 36
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in1 integer_shove in1 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 36
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (953 964 953 941 941 941 953 1000 941 1000)
Population mean number of elite cases: 9.59
Count of perfect (error zero) individuals by case: (953 964 953 941 941 941 953 0 941 0)
Population mean number of perfect (error zero) cases: 7.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in1 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_stackdepth) () ())
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 28
Size: 34
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 2.413
Median total errors in population: 2
Error averages by case: (0.047 0.036 0.047 0.059 0.059 0.059 0.047 1.0 0.059 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 0 1)
Average genome size in population (length): 28.131
Average program size in population (points): 34.193
Average percent parens in population: 0.177
Minimum age in population: 84.3583368802561
Maximum age in population: 86.3583368802561
Average age in population: 85.3613368802561
Median age in population: 85.3583368802561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 430
Genome diversity (% unique genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 467
Syntactic diversity (% unique Push programs):	 0.416
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 18664583
--- Timings ---
Current time: 1559583450851 milliseconds
Total Time:         143.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       108.2 seconds, 75.5%
Fitness Testing:     18.8 seconds, 13.1%
Report:              16.2 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_eq})
Lexicase best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in1 in3 integer_min in4 integer_min print_integer integer_yankdup integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_eq) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 33
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_eq})
Zero cases best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in1 in3 integer_min in4 integer_min print_integer integer_yankdup integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub exec_yank integer_eq) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 33
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (922 927 927 934 925 936 927 931 1000 948)
Population mean number of elite cases: 9.38
Count of perfect (error zero) individuals by case: (922 927 927 934 925 936 927 931 0 948)
Population mean number of perfect (error zero) cases: 8.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction -86} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop integer_gt exec_if (boolean_flush boolean_yankdup boolean_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in1 in3 integer_min in4 integer_min print_integer integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc -86 integer_sub exec_yank integer_stackdepth) () ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 30
Size: 36
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 1.623
Median total errors in population: 1
Error averages by case: (0.078 0.073 0.073 0.066 0.075 0.064 0.073 0.069 1.0 0.052)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 28.19
Average program size in population (points): 34.301
Average percent parens in population: 0.177
Minimum age in population: 85.3583368802561
Maximum age in population: 88.3583368802561
Average age in population: 86.84133688025611
Median age in population: 86.8583368802561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 306
Genome diversity (% unique genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 339
Syntactic diversity (% unique Push programs):	 0.514
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 18952207
--- Timings ---
Current time: 1559583452782 milliseconds
Total Time:         145.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       109.6 seconds, 75.5%
Fitness Testing:     19.1 seconds, 13.1%
Report:              16.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 223
Test mean error for best: 0.22300
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 2, :instruction integer_stackdepth})
Lexicase best program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 34
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 2, :instruction integer_stackdepth})
Zero cases best program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 34
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (952 933 933 933 1 1 933 950 952 1)
Population mean number of elite cases: 6.59
Count of perfect (error zero) individuals by case: (952 933 933 933 1 1 933 950 952 1)
Population mean number of perfect (error zero) cases: 6.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 2, :instruction integer_stackdepth})
Best program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 28
Size: 34
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 3.411
Median total errors in population: 3
Error averages by case: (0.048 0.067 0.067 0.067 0.999 0.999 0.067 0.05 0.048 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.342
Average program size in population (points): 34.537
Average percent parens in population: 0.178
Minimum age in population: 86.3583368802561
Maximum age in population: 90.1083368802561
Average age in population: 88.30858688025612
Median age in population: 88.3583368802561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 185
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 19243757
--- Timings ---
Current time: 1559583455014 milliseconds
Total Time:         147.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       111.3 seconds, 75.5%
Fitness Testing:     19.3 seconds, 13.1%
Report:              16.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 59
Successful program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 34


Auto-simplifying with starting size: 34
step: 0
program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 500
program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 1000
program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 1500
program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 2000
program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 2500
program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 3000
program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 3500
program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 4000
program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 4500
program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 5000
program: (integer_pop in2 exec_if (boolean_flush boolean_yankdup integer_dup_times integer_shove in3 boolean_dup_items boolean_dup_times) (integer_shove) in2 in3 integer_min in4 integer_min print_integer integer_yankdup integer_flush integer_dup_times integer_pop exec_empty exec_s_when_autoconstructing (integer_inc in4 integer_sub integer_min integer_stackdepth) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 223
Test mean error for best: 0.22300
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -61                
;;******************************
