Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[71 71 71 57] 57] [[3 83 83 83] 3] [[92 99 99 99] 92] [[-81 -81 -81 98] -81] [[-46 -46 -46 46] -46] [[-74 -15 -74 -74] -74] [[-43 -43 92 -43] -43] [[50 30 50 50] 30] [[36 -89 -89 -89] -89] [[-88 100 -88 -88] -88] [(-92 -92 -92 -92) -92] [(-73 -73 -73 -73) -73] [(-46 -46 -46 -46) -46] [(32 32 32 32) 32] [(6 6 6 6) 6] [(98 83 20 6) 6] [(50 83 80 41) 41] [(49 75 67 64) 49] [(71 92 57 97) 57] [(60 1 32 98) 1] [(51 2 33 7) 2] [(44 25 43 100) 25] [(13 46 74 28) 13] [(0 23 70 55) 0] [(18 63 94 8) 8] [(65 41 42 43) 41] [(48 72 86 54) 48] [(83 95 4 2) 2] [(63 51 98 58) 51] [(89 30 46 86) 30] [(49 62 1 50) 1] [(9 24 83 43) 9] [(66 67 32 95) 32] [(62 76 75 95) 62] [(26 80 24 11) 11] [(-11 -93 -98 -52) -98] [(47 8 -81 51) -81] [(44 99 -54 90) -54] [(42 -10 61 -49) -49] [(5 -42 -100 100) -100] [(-55 -63 -63 50) -63] [(25 69 -58 -44) -58] [(50 -88 88 88) -88] [(57 28 87 86) 28] [(72 45 -99 -69) -99] [(62 50 -97 -33) -97] [(49 -76 13 93) -76] [(-10 41 78 91) -10] [(-9 -62 41 -27) -62] [(60 -47 23 -38) -47] [(26 -9 -67 95) -67] [(-54 -10 36 66) -54] [(90 26 -51 98) -51] [(-74 95 -31 -50) -74] [(-63 -29 90 86) -63] [(-74 -6 48 -96) -96] [(-62 -66 46 -97) -97] [(-11 -50 48 30) -50] [(32 67 -23 73) -23] [(81 -61 46 -86) -86] [(-9 -39 -52 -44) -52] [(-55 78 -94 50) -94] [(25 -50 -1 -46) -50] [(68 -25 57 -49) -49] [(-57 -69 -84 -84) -84] [(-32 17 21 -50) -50] [(-65 -5 -32 -2) -65] [(17 -52 13 -8) -52] [(11 -7 77 -33) -33] [(-43 -15 16 -34) -43] [(42 82 49 51) 42] [(87 84 -49 -100) -100] [(99 32 91 54) 32] [(92 -93 35 70) -93] [(-37 45 -36 -57) -57] [(31 -31 92 46) -31] [(100 66 -23 77) -23] [(11 68 73 -94) -94] [(90 -95 -69 -70) -95] [(-49 27 50 74) -49] [(-4 -59 -14 70) -59] [(-64 89 25 -76) -76] [(79 -79 41 64) -79] [(-77 51 74 73) -77] [(-17 -3 55 25) -17] [(-59 23 -7 -70) -70] [(-53 -59 -92 -81) -92] [(84 71 -5 6) -5] [(-54 47 28 -21) -54] [(-85 64 61 36) -85] [(-83 -54 -73 89) -83] [(-47 99 -15 55) -47] [(84 88 90 49) 49] [(-51 -52 -81 18) -81] [(95 -85 50 29) -85])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[71 71 71 57] 57]
Train Case:   6 | Input/Output: [[3 83 83 83] 3]
Train Case:   7 | Input/Output: [[92 99 99 99] 92]
Train Case:   8 | Input/Output: [[-81 -81 -81 98] -81]
Train Case:   9 | Input/Output: [[-46 -46 -46 46] -46]
Train Case:  10 | Input/Output: [[-74 -15 -74 -74] -74]
Train Case:  11 | Input/Output: [[-43 -43 92 -43] -43]
Train Case:  12 | Input/Output: [[50 30 50 50] 30]
Train Case:  13 | Input/Output: [[36 -89 -89 -89] -89]
Train Case:  14 | Input/Output: [[-88 100 -88 -88] -88]
Train Case:  15 | Input/Output: [(-92 -92 -92 -92) -92]
Train Case:  16 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  17 | Input/Output: [(-46 -46 -46 -46) -46]
Train Case:  18 | Input/Output: [(32 32 32 32) 32]
Train Case:  19 | Input/Output: [(6 6 6 6) 6]
Train Case:  20 | Input/Output: [(98 83 20 6) 6]
Train Case:  21 | Input/Output: [(50 83 80 41) 41]
Train Case:  22 | Input/Output: [(49 75 67 64) 49]
Train Case:  23 | Input/Output: [(71 92 57 97) 57]
Train Case:  24 | Input/Output: [(60 1 32 98) 1]
Train Case:  25 | Input/Output: [(51 2 33 7) 2]
Train Case:  26 | Input/Output: [(44 25 43 100) 25]
Train Case:  27 | Input/Output: [(13 46 74 28) 13]
Train Case:  28 | Input/Output: [(0 23 70 55) 0]
Train Case:  29 | Input/Output: [(18 63 94 8) 8]
Train Case:  30 | Input/Output: [(65 41 42 43) 41]
Train Case:  31 | Input/Output: [(48 72 86 54) 48]
Train Case:  32 | Input/Output: [(83 95 4 2) 2]
Train Case:  33 | Input/Output: [(63 51 98 58) 51]
Train Case:  34 | Input/Output: [(89 30 46 86) 30]
Train Case:  35 | Input/Output: [(49 62 1 50) 1]
Train Case:  36 | Input/Output: [(9 24 83 43) 9]
Train Case:  37 | Input/Output: [(66 67 32 95) 32]
Train Case:  38 | Input/Output: [(62 76 75 95) 62]
Train Case:  39 | Input/Output: [(26 80 24 11) 11]
Train Case:  40 | Input/Output: [(-11 -93 -98 -52) -98]
Train Case:  41 | Input/Output: [(47 8 -81 51) -81]
Train Case:  42 | Input/Output: [(44 99 -54 90) -54]
Train Case:  43 | Input/Output: [(42 -10 61 -49) -49]
Train Case:  44 | Input/Output: [(5 -42 -100 100) -100]
Train Case:  45 | Input/Output: [(-55 -63 -63 50) -63]
Train Case:  46 | Input/Output: [(25 69 -58 -44) -58]
Train Case:  47 | Input/Output: [(50 -88 88 88) -88]
Train Case:  48 | Input/Output: [(57 28 87 86) 28]
Train Case:  49 | Input/Output: [(72 45 -99 -69) -99]
Train Case:  50 | Input/Output: [(62 50 -97 -33) -97]
Train Case:  51 | Input/Output: [(49 -76 13 93) -76]
Train Case:  52 | Input/Output: [(-10 41 78 91) -10]
Train Case:  53 | Input/Output: [(-9 -62 41 -27) -62]
Train Case:  54 | Input/Output: [(60 -47 23 -38) -47]
Train Case:  55 | Input/Output: [(26 -9 -67 95) -67]
Train Case:  56 | Input/Output: [(-54 -10 36 66) -54]
Train Case:  57 | Input/Output: [(90 26 -51 98) -51]
Train Case:  58 | Input/Output: [(-74 95 -31 -50) -74]
Train Case:  59 | Input/Output: [(-63 -29 90 86) -63]
Train Case:  60 | Input/Output: [(-74 -6 48 -96) -96]
Train Case:  61 | Input/Output: [(-62 -66 46 -97) -97]
Train Case:  62 | Input/Output: [(-11 -50 48 30) -50]
Train Case:  63 | Input/Output: [(32 67 -23 73) -23]
Train Case:  64 | Input/Output: [(81 -61 46 -86) -86]
Train Case:  65 | Input/Output: [(-9 -39 -52 -44) -52]
Train Case:  66 | Input/Output: [(-55 78 -94 50) -94]
Train Case:  67 | Input/Output: [(25 -50 -1 -46) -50]
Train Case:  68 | Input/Output: [(68 -25 57 -49) -49]
Train Case:  69 | Input/Output: [(-57 -69 -84 -84) -84]
Train Case:  70 | Input/Output: [(-32 17 21 -50) -50]
Train Case:  71 | Input/Output: [(-65 -5 -32 -2) -65]
Train Case:  72 | Input/Output: [(17 -52 13 -8) -52]
Train Case:  73 | Input/Output: [(11 -7 77 -33) -33]
Train Case:  74 | Input/Output: [(-43 -15 16 -34) -43]
Train Case:  75 | Input/Output: [(42 82 49 51) 42]
Train Case:  76 | Input/Output: [(87 84 -49 -100) -100]
Train Case:  77 | Input/Output: [(99 32 91 54) 32]
Train Case:  78 | Input/Output: [(92 -93 35 70) -93]
Train Case:  79 | Input/Output: [(-37 45 -36 -57) -57]
Train Case:  80 | Input/Output: [(31 -31 92 46) -31]
Train Case:  81 | Input/Output: [(100 66 -23 77) -23]
Train Case:  82 | Input/Output: [(11 68 73 -94) -94]
Train Case:  83 | Input/Output: [(90 -95 -69 -70) -95]
Train Case:  84 | Input/Output: [(-49 27 50 74) -49]
Train Case:  85 | Input/Output: [(-4 -59 -14 70) -59]
Train Case:  86 | Input/Output: [(-64 89 25 -76) -76]
Train Case:  87 | Input/Output: [(79 -79 41 64) -79]
Train Case:  88 | Input/Output: [(-77 51 74 73) -77]
Train Case:  89 | Input/Output: [(-17 -3 55 25) -17]
Train Case:  90 | Input/Output: [(-59 23 -7 -70) -70]
Train Case:  91 | Input/Output: [(-53 -59 -92 -81) -92]
Train Case:  92 | Input/Output: [(84 71 -5 6) -5]
Train Case:  93 | Input/Output: [(-54 47 28 -21) -54]
Train Case:  94 | Input/Output: [(-85 64 61 36) -85]
Train Case:  95 | Input/Output: [(-83 -54 -73 89) -83]
Train Case:  96 | Input/Output: [(-47 99 -15 55) -47]
Train Case:  97 | Input/Output: [(84 88 90 49) 49]
Train Case:  98 | Input/Output: [(-51 -52 -81 18) -81]
Train Case:  99 | Input/Output: [(95 -85 50 29) -85]
Test Case:   0 | Input/Output: [[-41 -41 -90 -41] -90]
Test Case:   1 | Input/Output: [[52 52 -76 52] -76]
Test Case:   2 | Input/Output: [[-15 -15 -31 -15] -31]
Test Case:   3 | Input/Output: [[-33 -33 -33 -18] -33]
Test Case:   4 | Input/Output: [[-41 -41 98 -41] -41]
Test Case:   5 | Input/Output: [[-24 -67 -67 -67] -67]
Test Case:   6 | Input/Output: [[-92 -59 -92 -92] -92]
Test Case:   7 | Input/Output: [[-81 -81 -81 -24] -81]
Test Case:   8 | Input/Output: [[47 60 60 60] 47]
Test Case:   9 | Input/Output: [[44 44 82 44] 44]
Test Case:  10 | Input/Output: [[33 33 -58 33] -58]
Test Case:  11 | Input/Output: [[-6 -3 -6 -6] -6]
Test Case:  12 | Input/Output: [[52 79 79 79] 52]
Test Case:  13 | Input/Output: [[-99 -99 -99 81] -99]
Test Case:  14 | Input/Output: [[6 -61 -61 -61] -61]
Test Case:  15 | Input/Output: [[-83 -88 -88 -88] -88]
Test Case:  16 | Input/Output: [[14 14 -65 14] -65]
Test Case:  17 | Input/Output: [[-94 -94 -94 -24] -94]
Test Case:  18 | Input/Output: [[63 63 -98 63] -98]
Test Case:  19 | Input/Output: [[-48 -57 -57 -57] -57]
Test Case:  20 | Input/Output: [[59 59 59 0] 0]
Test Case:  21 | Input/Output: [[46 52 52 52] 46]
Test Case:  22 | Input/Output: [[-94 -94 76 -94] -94]
Test Case:  23 | Input/Output: [[67 -31 -31 -31] -31]
Test Case:  24 | Input/Output: [[43 43 20 43] 20]
Test Case:  25 | Input/Output: [[-85 -85 37 -85] -85]
Test Case:  26 | Input/Output: [[-65 18 18 18] -65]
Test Case:  27 | Input/Output: [[-79 38 38 38] -79]
Test Case:  28 | Input/Output: [[-77 -77 25 -77] -77]
Test Case:  29 | Input/Output: [[-80 -80 -80 -18] -80]
Test Case:  30 | Input/Output: [[50 53 50 50] 50]
Test Case:  31 | Input/Output: [[72 96 72 72] 72]
Test Case:  32 | Input/Output: [[80 -71 -71 -71] -71]
Test Case:  33 | Input/Output: [[-15 -15 -15 -55] -55]
Test Case:  34 | Input/Output: [[-48 -16 -16 -16] -48]
Test Case:  35 | Input/Output: [[38 38 -98 38] -98]
Test Case:  36 | Input/Output: [[76 76 -76 76] -76]
Test Case:  37 | Input/Output: [[-1 -60 -60 -60] -60]
Test Case:  38 | Input/Output: [[60 60 60 20] 20]
Test Case:  39 | Input/Output: [[-39 -39 -39 90] -39]
Test Case:  40 | Input/Output: [[8 -11 8 8] -11]
Test Case:  41 | Input/Output: [[92 32 32 32] 32]
Test Case:  42 | Input/Output: [[48 48 -34 48] -34]
Test Case:  43 | Input/Output: [[-10 77 -10 -10] -10]
Test Case:  44 | Input/Output: [[-33 -58 -33 -33] -58]
Test Case:  45 | Input/Output: [[-49 -53 -49 -49] -53]
Test Case:  46 | Input/Output: [[23 23 23 -86] -86]
Test Case:  47 | Input/Output: [[41 0 41 41] 0]
Test Case:  48 | Input/Output: [[-40 11 11 11] -40]
Test Case:  49 | Input/Output: [[-97 -97 -97 58] -97]
Test Case:  50 | Input/Output: [[50 -58 50 50] -58]
Test Case:  51 | Input/Output: [[-14 -14 48 -14] -14]
Test Case:  52 | Input/Output: [[79 79 79 -9] -9]
Test Case:  53 | Input/Output: [[40 40 40 -83] -83]
Test Case:  54 | Input/Output: [[78 78 78 -1] -1]
Test Case:  55 | Input/Output: [[-89 -89 44 -89] -89]
Test Case:  56 | Input/Output: [[-53 44 -53 -53] -53]
Test Case:  57 | Input/Output: [[53 57 57 57] 53]
Test Case:  58 | Input/Output: [[79 -77 79 79] -77]
Test Case:  59 | Input/Output: [[-95 -95 -74 -95] -95]
Test Case:  60 | Input/Output: [[60 60 -40 60] -40]
Test Case:  61 | Input/Output: [[30 30 30 61] 30]
Test Case:  62 | Input/Output: [[-34 -34 -34 -62] -62]
Test Case:  63 | Input/Output: [[30 30 30 58] 30]
Test Case:  64 | Input/Output: [[21 21 76 21] 21]
Test Case:  65 | Input/Output: [[11 -54 11 11] -54]
Test Case:  66 | Input/Output: [[59 59 59 -55] -55]
Test Case:  67 | Input/Output: [[-13 -13 -3 -13] -13]
Test Case:  68 | Input/Output: [[-13 -13 0 -13] -13]
Test Case:  69 | Input/Output: [[9 -58 9 9] -58]
Test Case:  70 | Input/Output: [[25 -38 -38 -38] -38]
Test Case:  71 | Input/Output: [[34 34 34 88] 34]
Test Case:  72 | Input/Output: [[29 86 29 29] 29]
Test Case:  73 | Input/Output: [[4 93 4 4] 4]
Test Case:  74 | Input/Output: [[-73 94 94 94] -73]
Test Case:  75 | Input/Output: [[-48 -75 -75 -75] -75]
Test Case:  76 | Input/Output: [[-37 -82 -37 -37] -82]
Test Case:  77 | Input/Output: [[-58 -58 -58 -58] -58]
Test Case:  78 | Input/Output: [[75 75 10 75] 10]
Test Case:  79 | Input/Output: [[-10 85 -10 -10] -10]
Test Case:  80 | Input/Output: [[52 -26 -26 -26] -26]
Test Case:  81 | Input/Output: [[71 -16 71 71] -16]
Test Case:  82 | Input/Output: [[93 93 93 -34] -34]
Test Case:  83 | Input/Output: [[81 81 -44 81] -44]
Test Case:  84 | Input/Output: [[-42 -42 -42 -76] -76]
Test Case:  85 | Input/Output: [[-22 -22 -22 -96] -96]
Test Case:  86 | Input/Output: [[-99 -44 -99 -99] -99]
Test Case:  87 | Input/Output: [[61 61 61 33] 33]
Test Case:  88 | Input/Output: [[79 79 49 79] 49]
Test Case:  89 | Input/Output: [[25 -83 -83 -83] -83]
Test Case:  90 | Input/Output: [[-46 42 42 42] -46]
Test Case:  91 | Input/Output: [[-56 -61 -56 -56] -61]
Test Case:  92 | Input/Output: [[-44 55 55 55] -44]
Test Case:  93 | Input/Output: [[-68 -61 -68 -68] -68]
Test Case:  94 | Input/Output: [[-99 -99 -99 87] -99]
Test Case:  95 | Input/Output: [[-66 -38 -38 -38] -66]
Test Case:  96 | Input/Output: [[25 25 -35 25] -35]
Test Case:  97 | Input/Output: [[-15 -15 -15 7] -15]
Test Case:  98 | Input/Output: [[75 75 75 35] 35]
Test Case:  99 | Input/Output: [[1 1 -76 1] -76]
Test Case: 100 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 101 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 102 | Input/Output: [(15 15 15 15) 15]
Test Case: 103 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 104 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 105 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 106 | Input/Output: [(10 10 10 10) 10]
Test Case: 107 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 108 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 109 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 110 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 111 | Input/Output: [(91 91 91 91) 91]
Test Case: 112 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 113 | Input/Output: [(87 87 87 87) 87]
Test Case: 114 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 115 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 116 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 117 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 118 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 119 | Input/Output: [(75 75 75 75) 75]
Test Case: 120 | Input/Output: [(9 9 9 9) 9]
Test Case: 121 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 122 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 123 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 124 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 125 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 126 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 127 | Input/Output: [(1 1 1 1) 1]
Test Case: 128 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 129 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 130 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 131 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 132 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 133 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 134 | Input/Output: [(76 76 76 76) 76]
Test Case: 135 | Input/Output: [(90 90 90 90) 90]
Test Case: 136 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 137 | Input/Output: [(73 73 73 73) 73]
Test Case: 138 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 139 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 140 | Input/Output: [(1 1 1 1) 1]
Test Case: 141 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 142 | Input/Output: [(100 100 100 100) 100]
Test Case: 143 | Input/Output: [(85 85 85 85) 85]
Test Case: 144 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 145 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 146 | Input/Output: [(56 56 56 56) 56]
Test Case: 147 | Input/Output: [(53 53 53 53) 53]
Test Case: 148 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 149 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 150 | Input/Output: [(63 63 63 63) 63]
Test Case: 151 | Input/Output: [(22 22 22 22) 22]
Test Case: 152 | Input/Output: [(57 57 57 57) 57]
Test Case: 153 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 154 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 155 | Input/Output: [(85 85 85 85) 85]
Test Case: 156 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 157 | Input/Output: [(17 17 17 17) 17]
Test Case: 158 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 159 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 160 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 161 | Input/Output: [(60 60 60 60) 60]
Test Case: 162 | Input/Output: [(64 64 64 64) 64]
Test Case: 163 | Input/Output: [(61 61 61 61) 61]
Test Case: 164 | Input/Output: [(45 45 45 45) 45]
Test Case: 165 | Input/Output: [(89 89 89 89) 89]
Test Case: 166 | Input/Output: [(78 78 78 78) 78]
Test Case: 167 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 168 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 169 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 170 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 171 | Input/Output: [(23 23 23 23) 23]
Test Case: 172 | Input/Output: [(81 81 81 81) 81]
Test Case: 173 | Input/Output: [(31 31 31 31) 31]
Test Case: 174 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 175 | Input/Output: [(52 52 52 52) 52]
Test Case: 176 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 177 | Input/Output: [(6 6 6 6) 6]
Test Case: 178 | Input/Output: [(60 60 60 60) 60]
Test Case: 179 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 180 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 181 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 182 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 183 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 184 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 185 | Input/Output: [(8 8 8 8) 8]
Test Case: 186 | Input/Output: [(51 51 51 51) 51]
Test Case: 187 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 188 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 189 | Input/Output: [(38 38 38 38) 38]
Test Case: 190 | Input/Output: [(23 23 23 23) 23]
Test Case: 191 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 192 | Input/Output: [(52 52 52 52) 52]
Test Case: 193 | Input/Output: [(38 38 38 38) 38]
Test Case: 194 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 195 | Input/Output: [(76 76 76 76) 76]
Test Case: 196 | Input/Output: [(1 1 1 1) 1]
Test Case: 197 | Input/Output: [(42 42 42 42) 42]
Test Case: 198 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 199 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 200 | Input/Output: [(45 68 90 52) 45]
Test Case: 201 | Input/Output: [(56 27 71 69) 27]
Test Case: 202 | Input/Output: [(93 10 100 25) 10]
Test Case: 203 | Input/Output: [(67 48 69 51) 48]
Test Case: 204 | Input/Output: [(19 63 21 19) 19]
Test Case: 205 | Input/Output: [(23 54 88 94) 23]
Test Case: 206 | Input/Output: [(27 6 73 48) 6]
Test Case: 207 | Input/Output: [(10 34 74 2) 2]
Test Case: 208 | Input/Output: [(59 92 92 11) 11]
Test Case: 209 | Input/Output: [(56 60 92 54) 54]
Test Case: 210 | Input/Output: [(9 9 36 80) 9]
Test Case: 211 | Input/Output: [(14 35 64 89) 14]
Test Case: 212 | Input/Output: [(2 91 62 84) 2]
Test Case: 213 | Input/Output: [(35 52 86 24) 24]
Test Case: 214 | Input/Output: [(69 97 66 80) 66]
Test Case: 215 | Input/Output: [(2 71 27 65) 2]
Test Case: 216 | Input/Output: [(86 6 38 66) 6]
Test Case: 217 | Input/Output: [(69 46 59 42) 42]
Test Case: 218 | Input/Output: [(42 46 23 78) 23]
Test Case: 219 | Input/Output: [(45 58 100 75) 45]
Test Case: 220 | Input/Output: [(64 16 34 62) 16]
Test Case: 221 | Input/Output: [(41 47 31 14) 14]
Test Case: 222 | Input/Output: [(24 9 86 36) 9]
Test Case: 223 | Input/Output: [(19 61 93 66) 19]
Test Case: 224 | Input/Output: [(44 83 52 30) 30]
Test Case: 225 | Input/Output: [(5 40 1 50) 1]
Test Case: 226 | Input/Output: [(24 49 89 13) 13]
Test Case: 227 | Input/Output: [(95 14 63 49) 14]
Test Case: 228 | Input/Output: [(3 74 45 8) 3]
Test Case: 229 | Input/Output: [(56 73 16 83) 16]
Test Case: 230 | Input/Output: [(11 98 77 69) 11]
Test Case: 231 | Input/Output: [(48 13 44 9) 9]
Test Case: 232 | Input/Output: [(49 15 67 36) 15]
Test Case: 233 | Input/Output: [(63 95 95 33) 33]
Test Case: 234 | Input/Output: [(81 83 91 53) 53]
Test Case: 235 | Input/Output: [(14 3 84 23) 3]
Test Case: 236 | Input/Output: [(72 65 41 26) 26]
Test Case: 237 | Input/Output: [(69 42 38 3) 3]
Test Case: 238 | Input/Output: [(41 22 70 9) 9]
Test Case: 239 | Input/Output: [(9 23 26 81) 9]
Test Case: 240 | Input/Output: [(51 28 64 17) 17]
Test Case: 241 | Input/Output: [(22 29 100 73) 22]
Test Case: 242 | Input/Output: [(72 27 32 95) 27]
Test Case: 243 | Input/Output: [(1 52 57 58) 1]
Test Case: 244 | Input/Output: [(34 3 42 73) 3]
Test Case: 245 | Input/Output: [(67 71 56 95) 56]
Test Case: 246 | Input/Output: [(16 88 3 8) 3]
Test Case: 247 | Input/Output: [(8 38 17 63) 8]
Test Case: 248 | Input/Output: [(81 28 18 33) 18]
Test Case: 249 | Input/Output: [(16 24 98 25) 16]
Test Case: 250 | Input/Output: [(33 75 90 17) 17]
Test Case: 251 | Input/Output: [(99 95 43 12) 12]
Test Case: 252 | Input/Output: [(61 54 54 66) 54]
Test Case: 253 | Input/Output: [(64 50 99 0) 0]
Test Case: 254 | Input/Output: [(92 19 6 99) 6]
Test Case: 255 | Input/Output: [(48 100 44 19) 19]
Test Case: 256 | Input/Output: [(70 47 39 15) 15]
Test Case: 257 | Input/Output: [(18 84 76 5) 5]
Test Case: 258 | Input/Output: [(91 13 78 77) 13]
Test Case: 259 | Input/Output: [(30 4 95 40) 4]
Test Case: 260 | Input/Output: [(70 56 85 42) 42]
Test Case: 261 | Input/Output: [(48 44 58 88) 44]
Test Case: 262 | Input/Output: [(68 37 62 82) 37]
Test Case: 263 | Input/Output: [(90 61 84 61) 61]
Test Case: 264 | Input/Output: [(8 18 28 57) 8]
Test Case: 265 | Input/Output: [(46 37 19 22) 19]
Test Case: 266 | Input/Output: [(32 64 35 31) 31]
Test Case: 267 | Input/Output: [(11 0 5 87) 0]
Test Case: 268 | Input/Output: [(82 75 17 24) 17]
Test Case: 269 | Input/Output: [(23 30 35 45) 23]
Test Case: 270 | Input/Output: [(67 92 21 43) 21]
Test Case: 271 | Input/Output: [(83 82 75 53) 53]
Test Case: 272 | Input/Output: [(58 2 91 61) 2]
Test Case: 273 | Input/Output: [(13 86 29 60) 13]
Test Case: 274 | Input/Output: [(70 71 59 46) 46]
Test Case: 275 | Input/Output: [(80 17 44 77) 17]
Test Case: 276 | Input/Output: [(82 59 71 99) 59]
Test Case: 277 | Input/Output: [(55 71 15 39) 15]
Test Case: 278 | Input/Output: [(3 84 75 97) 3]
Test Case: 279 | Input/Output: [(24 78 4 44) 4]
Test Case: 280 | Input/Output: [(83 93 86 35) 35]
Test Case: 281 | Input/Output: [(72 55 16 8) 8]
Test Case: 282 | Input/Output: [(61 28 54 53) 28]
Test Case: 283 | Input/Output: [(28 34 11 53) 11]
Test Case: 284 | Input/Output: [(6 32 66 68) 6]
Test Case: 285 | Input/Output: [(13 18 49 25) 13]
Test Case: 286 | Input/Output: [(1 47 68 7) 1]
Test Case: 287 | Input/Output: [(64 18 72 99) 18]
Test Case: 288 | Input/Output: [(84 100 84 2) 2]
Test Case: 289 | Input/Output: [(27 25 17 65) 17]
Test Case: 290 | Input/Output: [(59 59 47 12) 12]
Test Case: 291 | Input/Output: [(66 100 85 68) 66]
Test Case: 292 | Input/Output: [(59 50 51 96) 50]
Test Case: 293 | Input/Output: [(15 36 23 67) 15]
Test Case: 294 | Input/Output: [(39 78 26 6) 6]
Test Case: 295 | Input/Output: [(84 89 92 73) 73]
Test Case: 296 | Input/Output: [(54 0 25 56) 0]
Test Case: 297 | Input/Output: [(74 13 88 5) 5]
Test Case: 298 | Input/Output: [(11 63 70 40) 11]
Test Case: 299 | Input/Output: [(86 83 47 76) 47]
Test Case: 300 | Input/Output: [(1 88 68 12) 1]
Test Case: 301 | Input/Output: [(80 48 23 62) 23]
Test Case: 302 | Input/Output: [(88 61 11 20) 11]
Test Case: 303 | Input/Output: [(8 93 12 94) 8]
Test Case: 304 | Input/Output: [(27 35 85 50) 27]
Test Case: 305 | Input/Output: [(98 90 57 77) 57]
Test Case: 306 | Input/Output: [(92 4 27 58) 4]
Test Case: 307 | Input/Output: [(73 47 39 57) 39]
Test Case: 308 | Input/Output: [(46 91 78 84) 46]
Test Case: 309 | Input/Output: [(83 92 53 44) 44]
Test Case: 310 | Input/Output: [(77 71 19 44) 19]
Test Case: 311 | Input/Output: [(59 74 97 82) 59]
Test Case: 312 | Input/Output: [(11 48 80 96) 11]
Test Case: 313 | Input/Output: [(36 23 49 18) 18]
Test Case: 314 | Input/Output: [(21 67 54 91) 21]
Test Case: 315 | Input/Output: [(38 6 97 87) 6]
Test Case: 316 | Input/Output: [(33 74 81 18) 18]
Test Case: 317 | Input/Output: [(77 14 26 12) 12]
Test Case: 318 | Input/Output: [(12 97 78 41) 12]
Test Case: 319 | Input/Output: [(83 55 48 56) 48]
Test Case: 320 | Input/Output: [(63 87 63 53) 53]
Test Case: 321 | Input/Output: [(67 47 29 54) 29]
Test Case: 322 | Input/Output: [(11 72 64 11) 11]
Test Case: 323 | Input/Output: [(97 63 65 10) 10]
Test Case: 324 | Input/Output: [(28 69 68 40) 28]
Test Case: 325 | Input/Output: [(61 80 7 59) 7]
Test Case: 326 | Input/Output: [(91 68 49 35) 35]
Test Case: 327 | Input/Output: [(47 49 31 80) 31]
Test Case: 328 | Input/Output: [(19 45 85 52) 19]
Test Case: 329 | Input/Output: [(71 4 95 98) 4]
Test Case: 330 | Input/Output: [(37 14 93 42) 14]
Test Case: 331 | Input/Output: [(44 44 65 91) 44]
Test Case: 332 | Input/Output: [(43 85 1 64) 1]
Test Case: 333 | Input/Output: [(32 93 26 55) 26]
Test Case: 334 | Input/Output: [(99 86 27 80) 27]
Test Case: 335 | Input/Output: [(90 43 62 75) 43]
Test Case: 336 | Input/Output: [(77 38 68 9) 9]
Test Case: 337 | Input/Output: [(99 79 38 42) 38]
Test Case: 338 | Input/Output: [(16 96 98 35) 16]
Test Case: 339 | Input/Output: [(75 84 59 48) 48]
Test Case: 340 | Input/Output: [(2 33 32 55) 2]
Test Case: 341 | Input/Output: [(22 89 94 60) 22]
Test Case: 342 | Input/Output: [(48 85 77 27) 27]
Test Case: 343 | Input/Output: [(5 37 51 85) 5]
Test Case: 344 | Input/Output: [(99 14 85 9) 9]
Test Case: 345 | Input/Output: [(20 26 39 95) 20]
Test Case: 346 | Input/Output: [(67 70 48 49) 48]
Test Case: 347 | Input/Output: [(52 32 88 75) 32]
Test Case: 348 | Input/Output: [(64 85 48 39) 39]
Test Case: 349 | Input/Output: [(60 14 34 72) 14]
Test Case: 350 | Input/Output: [(59 19 75 84) 19]
Test Case: 351 | Input/Output: [(37 16 90 84) 16]
Test Case: 352 | Input/Output: [(50 4 16 96) 4]
Test Case: 353 | Input/Output: [(25 77 90 69) 25]
Test Case: 354 | Input/Output: [(41 52 72 58) 41]
Test Case: 355 | Input/Output: [(87 5 20 81) 5]
Test Case: 356 | Input/Output: [(84 98 63 51) 51]
Test Case: 357 | Input/Output: [(47 29 7 61) 7]
Test Case: 358 | Input/Output: [(4 78 42 89) 4]
Test Case: 359 | Input/Output: [(78 99 98 27) 27]
Test Case: 360 | Input/Output: [(79 52 28 77) 28]
Test Case: 361 | Input/Output: [(62 96 23 39) 23]
Test Case: 362 | Input/Output: [(13 66 12 86) 12]
Test Case: 363 | Input/Output: [(42 8 63 87) 8]
Test Case: 364 | Input/Output: [(69 68 60 84) 60]
Test Case: 365 | Input/Output: [(81 47 35 59) 35]
Test Case: 366 | Input/Output: [(25 99 28 80) 25]
Test Case: 367 | Input/Output: [(68 65 42 14) 14]
Test Case: 368 | Input/Output: [(91 97 15 56) 15]
Test Case: 369 | Input/Output: [(28 10 4 46) 4]
Test Case: 370 | Input/Output: [(24 63 5 60) 5]
Test Case: 371 | Input/Output: [(48 99 65 58) 48]
Test Case: 372 | Input/Output: [(65 64 26 83) 26]
Test Case: 373 | Input/Output: [(61 66 14 8) 8]
Test Case: 374 | Input/Output: [(48 83 0 99) 0]
Test Case: 375 | Input/Output: [(51 39 94 77) 39]
Test Case: 376 | Input/Output: [(32 64 0 59) 0]
Test Case: 377 | Input/Output: [(19 73 0 95) 0]
Test Case: 378 | Input/Output: [(27 23 5 23) 5]
Test Case: 379 | Input/Output: [(19 29 44 37) 19]
Test Case: 380 | Input/Output: [(90 20 57 47) 20]
Test Case: 381 | Input/Output: [(54 98 77 22) 22]
Test Case: 382 | Input/Output: [(86 78 66 26) 26]
Test Case: 383 | Input/Output: [(71 39 21 94) 21]
Test Case: 384 | Input/Output: [(91 43 66 23) 23]
Test Case: 385 | Input/Output: [(62 5 41 12) 5]
Test Case: 386 | Input/Output: [(100 18 6 10) 6]
Test Case: 387 | Input/Output: [(5 62 58 2) 2]
Test Case: 388 | Input/Output: [(67 2 19 60) 2]
Test Case: 389 | Input/Output: [(14 59 38 96) 14]
Test Case: 390 | Input/Output: [(63 88 95 10) 10]
Test Case: 391 | Input/Output: [(14 52 69 31) 14]
Test Case: 392 | Input/Output: [(70 36 39 95) 36]
Test Case: 393 | Input/Output: [(4 46 70 72) 4]
Test Case: 394 | Input/Output: [(19 16 55 31) 16]
Test Case: 395 | Input/Output: [(13 29 80 87) 13]
Test Case: 396 | Input/Output: [(70 16 81 27) 16]
Test Case: 397 | Input/Output: [(87 77 44 62) 44]
Test Case: 398 | Input/Output: [(21 2 16 8) 2]
Test Case: 399 | Input/Output: [(27 69 60 89) 27]
Test Case: 400 | Input/Output: [(-84 -72 -68 99) -84]
Test Case: 401 | Input/Output: [(-26 11 84 -45) -45]
Test Case: 402 | Input/Output: [(-91 -93 -63 -21) -93]
Test Case: 403 | Input/Output: [(38 -39 27 -86) -86]
Test Case: 404 | Input/Output: [(-54 -85 -11 1) -85]
Test Case: 405 | Input/Output: [(-82 49 34 -9) -82]
Test Case: 406 | Input/Output: [(-59 -74 66 -74) -74]
Test Case: 407 | Input/Output: [(21 58 1 -81) -81]
Test Case: 408 | Input/Output: [(-88 -83 -80 -73) -88]
Test Case: 409 | Input/Output: [(-7 -24 5 -42) -42]
Test Case: 410 | Input/Output: [(39 -50 31 -14) -50]
Test Case: 411 | Input/Output: [(-11 14 -37 -46) -46]
Test Case: 412 | Input/Output: [(-52 -45 19 1) -52]
Test Case: 413 | Input/Output: [(40 -35 66 83) -35]
Test Case: 414 | Input/Output: [(-31 100 -54 -59) -59]
Test Case: 415 | Input/Output: [(-63 -6 -13 64) -63]
Test Case: 416 | Input/Output: [(-44 -43 20 40) -44]
Test Case: 417 | Input/Output: [(63 34 50 25) 25]
Test Case: 418 | Input/Output: [(-6 -76 14 -3) -76]
Test Case: 419 | Input/Output: [(18 67 -8 85) -8]
Test Case: 420 | Input/Output: [(6 -82 -61 -24) -82]
Test Case: 421 | Input/Output: [(14 -67 -70 1) -70]
Test Case: 422 | Input/Output: [(100 -61 -84 11) -84]
Test Case: 423 | Input/Output: [(-83 27 58 31) -83]
Test Case: 424 | Input/Output: [(-50 -63 2 -43) -63]
Test Case: 425 | Input/Output: [(53 -83 18 50) -83]
Test Case: 426 | Input/Output: [(33 -7 -51 -27) -51]
Test Case: 427 | Input/Output: [(23 71 87 44) 23]
Test Case: 428 | Input/Output: [(94 -13 8 -53) -53]
Test Case: 429 | Input/Output: [(-82 66 84 -22) -82]
Test Case: 430 | Input/Output: [(-57 -31 74 -74) -74]
Test Case: 431 | Input/Output: [(1 92 35 -18) -18]
Test Case: 432 | Input/Output: [(40 83 17 -31) -31]
Test Case: 433 | Input/Output: [(50 36 -75 -31) -75]
Test Case: 434 | Input/Output: [(35 10 -37 50) -37]
Test Case: 435 | Input/Output: [(7 -29 -1 77) -29]
Test Case: 436 | Input/Output: [(-28 -8 -86 -40) -86]
Test Case: 437 | Input/Output: [(3 -51 -66 -56) -66]
Test Case: 438 | Input/Output: [(-44 -15 -13 97) -44]
Test Case: 439 | Input/Output: [(27 20 -67 -18) -67]
Test Case: 440 | Input/Output: [(37 25 -57 -82) -82]
Test Case: 441 | Input/Output: [(27 -80 76 -30) -80]
Test Case: 442 | Input/Output: [(-53 36 -41 47) -53]
Test Case: 443 | Input/Output: [(59 -56 38 -19) -56]
Test Case: 444 | Input/Output: [(71 -27 87 94) -27]
Test Case: 445 | Input/Output: [(-52 -16 -66 45) -66]
Test Case: 446 | Input/Output: [(-26 -96 -96 25) -96]
Test Case: 447 | Input/Output: [(3 91 -66 -20) -66]
Test Case: 448 | Input/Output: [(-19 -81 -37 -20) -81]
Test Case: 449 | Input/Output: [(-56 -49 -7 -23) -56]
Test Case: 450 | Input/Output: [(100 91 -89 3) -89]
Test Case: 451 | Input/Output: [(-35 34 -42 86) -42]
Test Case: 452 | Input/Output: [(4 48 36 95) 4]
Test Case: 453 | Input/Output: [(-55 36 53 25) -55]
Test Case: 454 | Input/Output: [(-76 -62 5 -41) -76]
Test Case: 455 | Input/Output: [(38 45 20 -56) -56]
Test Case: 456 | Input/Output: [(-77 5 62 -20) -77]
Test Case: 457 | Input/Output: [(12 31 39 -75) -75]
Test Case: 458 | Input/Output: [(-47 59 85 50) -47]
Test Case: 459 | Input/Output: [(-17 39 13 26) -17]
Test Case: 460 | Input/Output: [(41 60 -96 -54) -96]
Test Case: 461 | Input/Output: [(10 36 -54 21) -54]
Test Case: 462 | Input/Output: [(-65 -95 -6 -81) -95]
Test Case: 463 | Input/Output: [(56 -13 47 -96) -96]
Test Case: 464 | Input/Output: [(83 -95 37 -63) -95]
Test Case: 465 | Input/Output: [(45 -41 -66 -76) -76]
Test Case: 466 | Input/Output: [(41 -56 -44 32) -56]
Test Case: 467 | Input/Output: [(-35 -100 58 -95) -100]
Test Case: 468 | Input/Output: [(21 -62 72 81) -62]
Test Case: 469 | Input/Output: [(-8 9 -82 39) -82]
Test Case: 470 | Input/Output: [(-10 48 -67 -99) -99]
Test Case: 471 | Input/Output: [(49 -38 72 2) -38]
Test Case: 472 | Input/Output: [(-6 87 61 20) -6]
Test Case: 473 | Input/Output: [(-68 -62 34 -91) -91]
Test Case: 474 | Input/Output: [(-18 -63 -74 -65) -74]
Test Case: 475 | Input/Output: [(15 -78 13 -76) -78]
Test Case: 476 | Input/Output: [(5 -97 77 9) -97]
Test Case: 477 | Input/Output: [(98 6 18 44) 6]
Test Case: 478 | Input/Output: [(-81 27 -18 -36) -81]
Test Case: 479 | Input/Output: [(-55 -43 69 -29) -55]
Test Case: 480 | Input/Output: [(-77 -30 -32 1) -77]
Test Case: 481 | Input/Output: [(-44 7 -44 2) -44]
Test Case: 482 | Input/Output: [(44 63 -22 -83) -83]
Test Case: 483 | Input/Output: [(50 -37 -36 23) -37]
Test Case: 484 | Input/Output: [(-64 -40 24 -51) -64]
Test Case: 485 | Input/Output: [(90 9 95 37) 9]
Test Case: 486 | Input/Output: [(17 63 26 58) 17]
Test Case: 487 | Input/Output: [(7 -55 27 89) -55]
Test Case: 488 | Input/Output: [(-51 49 81 -55) -55]
Test Case: 489 | Input/Output: [(-75 -26 -48 73) -75]
Test Case: 490 | Input/Output: [(-50 32 57 -48) -50]
Test Case: 491 | Input/Output: [(-6 56 40 -99) -99]
Test Case: 492 | Input/Output: [(-84 94 9 23) -84]
Test Case: 493 | Input/Output: [(37 70 -44 74) -44]
Test Case: 494 | Input/Output: [(71 -87 60 38) -87]
Test Case: 495 | Input/Output: [(-63 -9 12 2) -63]
Test Case: 496 | Input/Output: [(42 -17 -4 48) -17]
Test Case: 497 | Input/Output: [(-26 45 0 -31) -31]
Test Case: 498 | Input/Output: [(-19 -100 -19 -20) -100]
Test Case: 499 | Input/Output: [(95 59 19 -3) -3]
Test Case: 500 | Input/Output: [(-66 -27 14 -34) -66]
Test Case: 501 | Input/Output: [(-94 63 -88 -28) -94]
Test Case: 502 | Input/Output: [(-71 -24 56 -10) -71]
Test Case: 503 | Input/Output: [(-32 -59 48 -67) -67]
Test Case: 504 | Input/Output: [(87 -81 77 -50) -81]
Test Case: 505 | Input/Output: [(40 82 23 -91) -91]
Test Case: 506 | Input/Output: [(-53 -15 49 52) -53]
Test Case: 507 | Input/Output: [(8 44 52 74) 8]
Test Case: 508 | Input/Output: [(-83 -23 14 -82) -83]
Test Case: 509 | Input/Output: [(73 57 52 47) 47]
Test Case: 510 | Input/Output: [(-79 5 43 75) -79]
Test Case: 511 | Input/Output: [(-84 -83 -24 12) -84]
Test Case: 512 | Input/Output: [(-66 -92 -60 78) -92]
Test Case: 513 | Input/Output: [(89 32 -28 -1) -28]
Test Case: 514 | Input/Output: [(71 59 89 -68) -68]
Test Case: 515 | Input/Output: [(85 -72 33 -50) -72]
Test Case: 516 | Input/Output: [(-97 -88 46 97) -97]
Test Case: 517 | Input/Output: [(8 58 -12 -68) -68]
Test Case: 518 | Input/Output: [(41 1 61 20) 1]
Test Case: 519 | Input/Output: [(59 -2 59 50) -2]
Test Case: 520 | Input/Output: [(-32 -76 79 23) -76]
Test Case: 521 | Input/Output: [(-22 42 -82 67) -82]
Test Case: 522 | Input/Output: [(-14 56 58 22) -14]
Test Case: 523 | Input/Output: [(41 -15 -35 -6) -35]
Test Case: 524 | Input/Output: [(89 2 92 5) 2]
Test Case: 525 | Input/Output: [(-17 82 -9 -54) -54]
Test Case: 526 | Input/Output: [(-36 77 -10 -2) -36]
Test Case: 527 | Input/Output: [(-93 -9 -17 -33) -93]
Test Case: 528 | Input/Output: [(-45 77 -59 95) -59]
Test Case: 529 | Input/Output: [(42 95 -87 -40) -87]
Test Case: 530 | Input/Output: [(-75 33 -81 4) -81]
Test Case: 531 | Input/Output: [(-91 -17 -58 65) -91]
Test Case: 532 | Input/Output: [(-29 -87 -18 19) -87]
Test Case: 533 | Input/Output: [(-57 51 75 -4) -57]
Test Case: 534 | Input/Output: [(-96 48 20 67) -96]
Test Case: 535 | Input/Output: [(90 -91 18 52) -91]
Test Case: 536 | Input/Output: [(-60 -11 -25 22) -60]
Test Case: 537 | Input/Output: [(91 41 -95 -56) -95]
Test Case: 538 | Input/Output: [(-39 -82 3 -61) -82]
Test Case: 539 | Input/Output: [(23 82 -83 62) -83]
Test Case: 540 | Input/Output: [(6 58 51 79) 6]
Test Case: 541 | Input/Output: [(6 54 -26 -72) -72]
Test Case: 542 | Input/Output: [(-5 91 -92 -90) -92]
Test Case: 543 | Input/Output: [(2 -19 -56 41) -56]
Test Case: 544 | Input/Output: [(12 -71 60 76) -71]
Test Case: 545 | Input/Output: [(55 99 -14 -93) -93]
Test Case: 546 | Input/Output: [(33 -42 -9 36) -42]
Test Case: 547 | Input/Output: [(-59 69 53 -74) -74]
Test Case: 548 | Input/Output: [(92 66 -15 -73) -73]
Test Case: 549 | Input/Output: [(-31 -80 -61 -72) -80]
Test Case: 550 | Input/Output: [(54 86 17 -36) -36]
Test Case: 551 | Input/Output: [(-78 -41 57 24) -78]
Test Case: 552 | Input/Output: [(83 -36 92 -39) -39]
Test Case: 553 | Input/Output: [(-30 -57 97 0) -57]
Test Case: 554 | Input/Output: [(-71 -37 -27 70) -71]
Test Case: 555 | Input/Output: [(-98 -85 35 -55) -98]
Test Case: 556 | Input/Output: [(0 -94 81 78) -94]
Test Case: 557 | Input/Output: [(-54 -55 99 27) -55]
Test Case: 558 | Input/Output: [(88 60 -43 0) -43]
Test Case: 559 | Input/Output: [(32 -70 -87 -18) -87]
Test Case: 560 | Input/Output: [(60 44 -80 -86) -86]
Test Case: 561 | Input/Output: [(-64 -3 60 -75) -75]
Test Case: 562 | Input/Output: [(65 44 -75 -68) -75]
Test Case: 563 | Input/Output: [(-8 -5 -10 33) -10]
Test Case: 564 | Input/Output: [(-61 -4 -68 46) -68]
Test Case: 565 | Input/Output: [(-62 71 -52 -56) -62]
Test Case: 566 | Input/Output: [(56 81 32 -86) -86]
Test Case: 567 | Input/Output: [(-32 -93 53 13) -93]
Test Case: 568 | Input/Output: [(-93 69 66 54) -93]
Test Case: 569 | Input/Output: [(33 -79 -77 -81) -81]
Test Case: 570 | Input/Output: [(85 -89 34 52) -89]
Test Case: 571 | Input/Output: [(-93 95 -54 60) -93]
Test Case: 572 | Input/Output: [(-84 59 -21 -89) -89]
Test Case: 573 | Input/Output: [(26 -60 45 74) -60]
Test Case: 574 | Input/Output: [(2 96 37 -92) -92]
Test Case: 575 | Input/Output: [(79 -6 -89 -23) -89]
Test Case: 576 | Input/Output: [(79 -76 94 -27) -76]
Test Case: 577 | Input/Output: [(8 -53 -74 95) -74]
Test Case: 578 | Input/Output: [(-36 -52 73 37) -52]
Test Case: 579 | Input/Output: [(-23 -23 88 17) -23]
Test Case: 580 | Input/Output: [(29 -2 -60 -59) -60]
Test Case: 581 | Input/Output: [(37 -18 16 -87) -87]
Test Case: 582 | Input/Output: [(16 24 25 28) 16]
Test Case: 583 | Input/Output: [(26 -83 41 -56) -83]
Test Case: 584 | Input/Output: [(44 -71 -67 -72) -72]
Test Case: 585 | Input/Output: [(-57 96 65 -63) -63]
Test Case: 586 | Input/Output: [(13 73 -89 -69) -89]
Test Case: 587 | Input/Output: [(89 -73 84 87) -73]
Test Case: 588 | Input/Output: [(-94 35 21 -99) -99]
Test Case: 589 | Input/Output: [(-10 -37 34 11) -37]
Test Case: 590 | Input/Output: [(-93 10 60 -13) -93]
Test Case: 591 | Input/Output: [(96 -29 -33 -13) -33]
Test Case: 592 | Input/Output: [(-17 -60 88 -71) -71]
Test Case: 593 | Input/Output: [(-91 -18 51 9) -91]
Test Case: 594 | Input/Output: [(34 60 -93 62) -93]
Test Case: 595 | Input/Output: [(-30 32 -3 100) -30]
Test Case: 596 | Input/Output: [(61 -50 -52 37) -52]
Test Case: 597 | Input/Output: [(-44 80 24 -65) -65]
Test Case: 598 | Input/Output: [(-9 20 42 13) -9]
Test Case: 599 | Input/Output: [(-33 49 -88 -91) -91]
Test Case: 600 | Input/Output: [(-4 66 39 -52) -52]
Test Case: 601 | Input/Output: [(-53 -75 18 17) -75]
Test Case: 602 | Input/Output: [(-71 -93 87 -16) -93]
Test Case: 603 | Input/Output: [(10 -69 -4 -69) -69]
Test Case: 604 | Input/Output: [(-98 50 65 20) -98]
Test Case: 605 | Input/Output: [(35 -93 61 29) -93]
Test Case: 606 | Input/Output: [(-70 72 53 6) -70]
Test Case: 607 | Input/Output: [(-53 -92 26 88) -92]
Test Case: 608 | Input/Output: [(99 -43 -46 -4) -46]
Test Case: 609 | Input/Output: [(-42 40 -37 -4) -42]
Test Case: 610 | Input/Output: [(93 -27 -19 27) -27]
Test Case: 611 | Input/Output: [(31 -77 -74 65) -77]
Test Case: 612 | Input/Output: [(-22 88 -18 16) -22]
Test Case: 613 | Input/Output: [(63 -17 -5 -65) -65]
Test Case: 614 | Input/Output: [(62 -36 97 66) -36]
Test Case: 615 | Input/Output: [(-44 -87 -50 76) -87]
Test Case: 616 | Input/Output: [(-80 79 -84 98) -84]
Test Case: 617 | Input/Output: [(-39 65 -95 -54) -95]
Test Case: 618 | Input/Output: [(-38 -27 -36 -6) -38]
Test Case: 619 | Input/Output: [(-32 -16 -24 -14) -32]
Test Case: 620 | Input/Output: [(-1 59 86 25) -1]
Test Case: 621 | Input/Output: [(-74 -93 -44 -78) -93]
Test Case: 622 | Input/Output: [(-14 42 61 -40) -40]
Test Case: 623 | Input/Output: [(-53 22 95 13) -53]
Test Case: 624 | Input/Output: [(98 18 -96 -21) -96]
Test Case: 625 | Input/Output: [(41 6 -46 -7) -46]
Test Case: 626 | Input/Output: [(41 70 3 -70) -70]
Test Case: 627 | Input/Output: [(-6 -51 -37 6) -51]
Test Case: 628 | Input/Output: [(92 -2 40 -92) -92]
Test Case: 629 | Input/Output: [(-81 -94 66 -37) -94]
Test Case: 630 | Input/Output: [(-37 -46 44 -40) -46]
Test Case: 631 | Input/Output: [(14 -75 -73 91) -75]
Test Case: 632 | Input/Output: [(-100 0 -25 9) -100]
Test Case: 633 | Input/Output: [(-2 28 78 51) -2]
Test Case: 634 | Input/Output: [(-46 -1 85 -87) -87]
Test Case: 635 | Input/Output: [(-16 -84 84 66) -84]
Test Case: 636 | Input/Output: [(-5 52 -67 -75) -75]
Test Case: 637 | Input/Output: [(73 95 9 45) 9]
Test Case: 638 | Input/Output: [(-36 85 7 54) -36]
Test Case: 639 | Input/Output: [(49 -43 -48 -58) -58]
Test Case: 640 | Input/Output: [(-40 54 -26 -13) -40]
Test Case: 641 | Input/Output: [(-60 -89 -40 42) -89]
Test Case: 642 | Input/Output: [(-45 48 34 -55) -55]
Test Case: 643 | Input/Output: [(92 -15 -83 80) -83]
Test Case: 644 | Input/Output: [(-24 50 47 12) -24]
Test Case: 645 | Input/Output: [(-58 9 -48 49) -58]
Test Case: 646 | Input/Output: [(-45 8 -85 -81) -85]
Test Case: 647 | Input/Output: [(25 -74 65 48) -74]
Test Case: 648 | Input/Output: [(43 -17 -4 87) -17]
Test Case: 649 | Input/Output: [(90 -52 -84 -40) -84]
Test Case: 650 | Input/Output: [(64 73 80 45) 45]
Test Case: 651 | Input/Output: [(29 2 -32 -49) -49]
Test Case: 652 | Input/Output: [(-69 -20 -64 6) -69]
Test Case: 653 | Input/Output: [(-94 90 -80 -18) -94]
Test Case: 654 | Input/Output: [(-90 -60 -49 -62) -90]
Test Case: 655 | Input/Output: [(-96 61 49 35) -96]
Test Case: 656 | Input/Output: [(-3 -14 91 22) -14]
Test Case: 657 | Input/Output: [(-4 -82 69 -28) -82]
Test Case: 658 | Input/Output: [(-60 -6 97 -83) -83]
Test Case: 659 | Input/Output: [(54 -97 83 21) -97]
Test Case: 660 | Input/Output: [(99 20 27 27) 20]
Test Case: 661 | Input/Output: [(-23 53 33 -16) -23]
Test Case: 662 | Input/Output: [(90 -90 -25 -9) -90]
Test Case: 663 | Input/Output: [(-78 -22 45 63) -78]
Test Case: 664 | Input/Output: [(-76 -29 62 61) -76]
Test Case: 665 | Input/Output: [(-11 -87 -39 38) -87]
Test Case: 666 | Input/Output: [(42 -35 -88 76) -88]
Test Case: 667 | Input/Output: [(-76 -48 91 34) -76]
Test Case: 668 | Input/Output: [(-17 -4 41 15) -17]
Test Case: 669 | Input/Output: [(-83 -31 -38 -71) -83]
Test Case: 670 | Input/Output: [(-95 8 27 -31) -95]
Test Case: 671 | Input/Output: [(-1 31 -60 87) -60]
Test Case: 672 | Input/Output: [(-15 -43 79 14) -43]
Test Case: 673 | Input/Output: [(3 -23 -1 -88) -88]
Test Case: 674 | Input/Output: [(-74 -88 -89 -73) -89]
Test Case: 675 | Input/Output: [(-30 52 74 28) -30]
Test Case: 676 | Input/Output: [(-67 31 -84 37) -84]
Test Case: 677 | Input/Output: [(-91 -37 79 59) -91]
Test Case: 678 | Input/Output: [(51 -40 -50 25) -50]
Test Case: 679 | Input/Output: [(62 24 16 64) 16]
Test Case: 680 | Input/Output: [(59 -98 -81 33) -98]
Test Case: 681 | Input/Output: [(-100 24 -76 -20) -100]
Test Case: 682 | Input/Output: [(92 95 -42 89) -42]
Test Case: 683 | Input/Output: [(-65 80 1 -76) -76]
Test Case: 684 | Input/Output: [(-75 31 -58 -82) -82]
Test Case: 685 | Input/Output: [(74 44 -91 -88) -91]
Test Case: 686 | Input/Output: [(-74 -42 5 60) -74]
Test Case: 687 | Input/Output: [(74 -7 -86 -56) -86]
Test Case: 688 | Input/Output: [(82 -15 59 92) -15]
Test Case: 689 | Input/Output: [(60 72 -82 -53) -82]
Test Case: 690 | Input/Output: [(-94 49 -71 -79) -94]
Test Case: 691 | Input/Output: [(69 -49 89 8) -49]
Test Case: 692 | Input/Output: [(-20 -68 -86 23) -86]
Test Case: 693 | Input/Output: [(21 72 12 32) 12]
Test Case: 694 | Input/Output: [(-59 -11 70 92) -59]
Test Case: 695 | Input/Output: [(66 -84 85 90) -84]
Test Case: 696 | Input/Output: [(37 98 32 37) 32]
Test Case: 697 | Input/Output: [(59 70 83 -54) -54]
Test Case: 698 | Input/Output: [(-95 44 90 16) -95]
Test Case: 699 | Input/Output: [(47 -80 98 -9) -80]
Test Case: 700 | Input/Output: [(-44 17 -5 -49) -49]
Test Case: 701 | Input/Output: [(16 29 -43 -31) -43]
Test Case: 702 | Input/Output: [(85 -78 85 -67) -78]
Test Case: 703 | Input/Output: [(-73 -12 -68 -10) -73]
Test Case: 704 | Input/Output: [(100 41 63 62) 41]
Test Case: 705 | Input/Output: [(45 -30 -1 -22) -30]
Test Case: 706 | Input/Output: [(-5 37 -90 97) -90]
Test Case: 707 | Input/Output: [(47 -32 78 24) -32]
Test Case: 708 | Input/Output: [(-29 74 -77 -76) -77]
Test Case: 709 | Input/Output: [(-66 97 -48 -80) -80]
Test Case: 710 | Input/Output: [(48 2 -83 -59) -83]
Test Case: 711 | Input/Output: [(18 -47 53 -95) -95]
Test Case: 712 | Input/Output: [(-100 24 -7 29) -100]
Test Case: 713 | Input/Output: [(76 -97 4 -96) -97]
Test Case: 714 | Input/Output: [(-95 -15 52 75) -95]
Test Case: 715 | Input/Output: [(-71 -91 -30 22) -91]
Test Case: 716 | Input/Output: [(50 -50 12 59) -50]
Test Case: 717 | Input/Output: [(-92 -80 -91 89) -92]
Test Case: 718 | Input/Output: [(-47 45 -67 -27) -67]
Test Case: 719 | Input/Output: [(13 99 -82 0) -82]
Test Case: 720 | Input/Output: [(97 3 -32 60) -32]
Test Case: 721 | Input/Output: [(-38 63 -33 56) -38]
Test Case: 722 | Input/Output: [(9 -67 -56 51) -67]
Test Case: 723 | Input/Output: [(73 28 28 -8) -8]
Test Case: 724 | Input/Output: [(-16 -6 64 4) -16]
Test Case: 725 | Input/Output: [(20 -92 16 -29) -92]
Test Case: 726 | Input/Output: [(9 -44 34 -69) -69]
Test Case: 727 | Input/Output: [(-83 -25 78 -61) -83]
Test Case: 728 | Input/Output: [(-50 99 -14 53) -50]
Test Case: 729 | Input/Output: [(-19 -68 2 42) -68]
Test Case: 730 | Input/Output: [(32 62 11 43) 11]
Test Case: 731 | Input/Output: [(-52 68 -75 -84) -84]
Test Case: 732 | Input/Output: [(34 41 46 70) 34]
Test Case: 733 | Input/Output: [(35 -63 -66 46) -66]
Test Case: 734 | Input/Output: [(-58 21 64 88) -58]
Test Case: 735 | Input/Output: [(58 -69 -42 58) -69]
Test Case: 736 | Input/Output: [(-93 90 54 27) -93]
Test Case: 737 | Input/Output: [(-1 -78 31 -69) -78]
Test Case: 738 | Input/Output: [(66 32 -29 -84) -84]
Test Case: 739 | Input/Output: [(96 52 30 -59) -59]
Test Case: 740 | Input/Output: [(72 -82 -79 29) -82]
Test Case: 741 | Input/Output: [(-6 55 55 43) -6]
Test Case: 742 | Input/Output: [(-30 -76 6 -40) -76]
Test Case: 743 | Input/Output: [(33 -74 56 7) -74]
Test Case: 744 | Input/Output: [(49 -46 -3 51) -46]
Test Case: 745 | Input/Output: [(54 -59 5 32) -59]
Test Case: 746 | Input/Output: [(-1 97 14 -70) -70]
Test Case: 747 | Input/Output: [(75 -38 89 -54) -54]
Test Case: 748 | Input/Output: [(-64 33 -89 -65) -89]
Test Case: 749 | Input/Output: [(-30 74 89 87) -30]
Test Case: 750 | Input/Output: [(98 -66 76 -2) -66]
Test Case: 751 | Input/Output: [(-56 52 29 -65) -65]
Test Case: 752 | Input/Output: [(70 97 100 80) 70]
Test Case: 753 | Input/Output: [(53 67 -69 69) -69]
Test Case: 754 | Input/Output: [(-34 -63 -77 -33) -77]
Test Case: 755 | Input/Output: [(-80 93 -26 54) -80]
Test Case: 756 | Input/Output: [(-62 39 -59 -46) -62]
Test Case: 757 | Input/Output: [(89 -21 88 -9) -21]
Test Case: 758 | Input/Output: [(85 -75 95 -38) -75]
Test Case: 759 | Input/Output: [(-60 -33 39 -84) -84]
Test Case: 760 | Input/Output: [(81 20 -38 -82) -82]
Test Case: 761 | Input/Output: [(40 73 -76 -63) -76]
Test Case: 762 | Input/Output: [(-75 78 -31 -66) -75]
Test Case: 763 | Input/Output: [(63 72 -48 -45) -48]
Test Case: 764 | Input/Output: [(-21 90 91 -57) -57]
Test Case: 765 | Input/Output: [(17 -34 -99 -14) -99]
Test Case: 766 | Input/Output: [(-28 -6 91 29) -28]
Test Case: 767 | Input/Output: [(46 -12 -40 -25) -40]
Test Case: 768 | Input/Output: [(82 65 83 -28) -28]
Test Case: 769 | Input/Output: [(52 29 -66 -44) -66]
Test Case: 770 | Input/Output: [(-67 -93 -77 27) -93]
Test Case: 771 | Input/Output: [(-75 -4 0 -14) -75]
Test Case: 772 | Input/Output: [(-79 -16 -58 31) -79]
Test Case: 773 | Input/Output: [(57 97 83 -77) -77]
Test Case: 774 | Input/Output: [(-28 -58 -21 3) -58]
Test Case: 775 | Input/Output: [(-55 52 62 -84) -84]
Test Case: 776 | Input/Output: [(82 22 55 -13) -13]
Test Case: 777 | Input/Output: [(67 -7 58 7) -7]
Test Case: 778 | Input/Output: [(-15 31 36 63) -15]
Test Case: 779 | Input/Output: [(13 42 -83 3) -83]
Test Case: 780 | Input/Output: [(94 -73 14 27) -73]
Test Case: 781 | Input/Output: [(-58 69 -80 42) -80]
Test Case: 782 | Input/Output: [(41 53 14 -96) -96]
Test Case: 783 | Input/Output: [(-72 0 -68 -19) -72]
Test Case: 784 | Input/Output: [(-51 43 -15 52) -51]
Test Case: 785 | Input/Output: [(45 7 -31 26) -31]
Test Case: 786 | Input/Output: [(-71 -73 16 -23) -73]
Test Case: 787 | Input/Output: [(68 -2 35 -97) -97]
Test Case: 788 | Input/Output: [(-25 79 72 -58) -58]
Test Case: 789 | Input/Output: [(-57 28 -30 69) -57]
Test Case: 790 | Input/Output: [(-23 -53 -63 -24) -63]
Test Case: 791 | Input/Output: [(28 -67 46 -89) -89]
Test Case: 792 | Input/Output: [(-43 10 -76 -89) -89]
Test Case: 793 | Input/Output: [(-11 1 58 -21) -21]
Test Case: 794 | Input/Output: [(20 -38 93 48) -38]
Test Case: 795 | Input/Output: [(-96 11 50 -10) -96]
Test Case: 796 | Input/Output: [(83 -7 -95 -31) -95]
Test Case: 797 | Input/Output: [(78 -23 -13 -74) -74]
Test Case: 798 | Input/Output: [(-53 64 56 -91) -91]
Test Case: 799 | Input/Output: [(-11 -19 26 46) -19]
Test Case: 800 | Input/Output: [(54 -86 5 44) -86]
Test Case: 801 | Input/Output: [(-78 -65 -77 -65) -78]
Test Case: 802 | Input/Output: [(76 -30 49 20) -30]
Test Case: 803 | Input/Output: [(-59 -6 39 -7) -59]
Test Case: 804 | Input/Output: [(21 81 1 24) 1]
Test Case: 805 | Input/Output: [(-11 -38 70 79) -38]
Test Case: 806 | Input/Output: [(-12 42 -17 -71) -71]
Test Case: 807 | Input/Output: [(23 57 77 -37) -37]
Test Case: 808 | Input/Output: [(44 -15 5 11) -15]
Test Case: 809 | Input/Output: [(-91 -89 -32 -88) -91]
Test Case: 810 | Input/Output: [(-50 -87 79 -55) -87]
Test Case: 811 | Input/Output: [(79 -8 66 74) -8]
Test Case: 812 | Input/Output: [(74 -78 -48 -1) -78]
Test Case: 813 | Input/Output: [(-40 32 -66 57) -66]
Test Case: 814 | Input/Output: [(-75 -62 38 -38) -75]
Test Case: 815 | Input/Output: [(68 80 30 96) 30]
Test Case: 816 | Input/Output: [(-46 79 8 -56) -56]
Test Case: 817 | Input/Output: [(41 -62 57 -77) -77]
Test Case: 818 | Input/Output: [(50 -59 -90 -22) -90]
Test Case: 819 | Input/Output: [(-14 57 6 -35) -35]
Test Case: 820 | Input/Output: [(-51 -58 48 23) -58]
Test Case: 821 | Input/Output: [(68 3 30 -40) -40]
Test Case: 822 | Input/Output: [(-63 21 4 60) -63]
Test Case: 823 | Input/Output: [(-45 16 -25 56) -45]
Test Case: 824 | Input/Output: [(8 -60 -6 -18) -60]
Test Case: 825 | Input/Output: [(-3 73 32 56) -3]
Test Case: 826 | Input/Output: [(-24 76 -62 12) -62]
Test Case: 827 | Input/Output: [(-42 -2 -75 -40) -75]
Test Case: 828 | Input/Output: [(3 -67 -23 -21) -67]
Test Case: 829 | Input/Output: [(-45 -13 -46 0) -46]
Test Case: 830 | Input/Output: [(91 -3 -60 -75) -75]
Test Case: 831 | Input/Output: [(12 -4 95 -83) -83]
Test Case: 832 | Input/Output: [(-67 -74 44 87) -74]
Test Case: 833 | Input/Output: [(-30 -90 -38 61) -90]
Test Case: 834 | Input/Output: [(33 -35 26 89) -35]
Test Case: 835 | Input/Output: [(93 -75 -15 95) -75]
Test Case: 836 | Input/Output: [(-91 -25 47 -89) -91]
Test Case: 837 | Input/Output: [(-83 -10 55 3) -83]
Test Case: 838 | Input/Output: [(24 22 -56 -80) -80]
Test Case: 839 | Input/Output: [(-44 -73 87 30) -73]
Test Case: 840 | Input/Output: [(7 44 68 26) 7]
Test Case: 841 | Input/Output: [(-13 41 10 -69) -69]
Test Case: 842 | Input/Output: [(-26 -35 -51 72) -51]
Test Case: 843 | Input/Output: [(32 -85 5 60) -85]
Test Case: 844 | Input/Output: [(34 -12 -89 37) -89]
Test Case: 845 | Input/Output: [(-96 -15 -91 79) -96]
Test Case: 846 | Input/Output: [(97 -18 30 -89) -89]
Test Case: 847 | Input/Output: [(39 -74 -90 20) -90]
Test Case: 848 | Input/Output: [(-67 -98 11 32) -98]
Test Case: 849 | Input/Output: [(-6 24 -88 -62) -88]
Test Case: 850 | Input/Output: [(61 58 54 97) 54]
Test Case: 851 | Input/Output: [(-15 77 -57 -23) -57]
Test Case: 852 | Input/Output: [(71 -26 -62 6) -62]
Test Case: 853 | Input/Output: [(-34 -56 -65 -65) -65]
Test Case: 854 | Input/Output: [(-39 36 -83 20) -83]
Test Case: 855 | Input/Output: [(12 57 -83 -32) -83]
Test Case: 856 | Input/Output: [(-31 -58 58 38) -58]
Test Case: 857 | Input/Output: [(9 80 -99 -25) -99]
Test Case: 858 | Input/Output: [(67 30 52 87) 30]
Test Case: 859 | Input/Output: [(-10 -35 -41 -35) -41]
Test Case: 860 | Input/Output: [(50 -83 95 23) -83]
Test Case: 861 | Input/Output: [(80 -8 96 -12) -12]
Test Case: 862 | Input/Output: [(-86 39 74 -77) -86]
Test Case: 863 | Input/Output: [(-73 97 11 -90) -90]
Test Case: 864 | Input/Output: [(-88 94 91 -98) -98]
Test Case: 865 | Input/Output: [(-36 27 91 -97) -97]
Test Case: 866 | Input/Output: [(30 -73 89 18) -73]
Test Case: 867 | Input/Output: [(-69 -40 -40 -83) -83]
Test Case: 868 | Input/Output: [(-28 -27 23 -50) -50]
Test Case: 869 | Input/Output: [(12 -68 68 2) -68]
Test Case: 870 | Input/Output: [(27 -55 -53 77) -55]
Test Case: 871 | Input/Output: [(93 27 2 -52) -52]
Test Case: 872 | Input/Output: [(-74 -41 84 -14) -74]
Test Case: 873 | Input/Output: [(-72 70 88 -14) -72]
Test Case: 874 | Input/Output: [(22 25 -77 76) -77]
Test Case: 875 | Input/Output: [(-8 39 -15 -2) -15]
Test Case: 876 | Input/Output: [(98 -8 93 11) -8]
Test Case: 877 | Input/Output: [(85 -49 -87 -80) -87]
Test Case: 878 | Input/Output: [(-48 59 99 27) -48]
Test Case: 879 | Input/Output: [(42 4 -31 -98) -98]
Test Case: 880 | Input/Output: [(-90 20 22 44) -90]
Test Case: 881 | Input/Output: [(-74 26 -52 -9) -74]
Test Case: 882 | Input/Output: [(52 61 53 38) 38]
Test Case: 883 | Input/Output: [(-81 29 -53 31) -81]
Test Case: 884 | Input/Output: [(94 -11 -71 23) -71]
Test Case: 885 | Input/Output: [(-88 27 87 71) -88]
Test Case: 886 | Input/Output: [(-66 -59 43 91) -66]
Test Case: 887 | Input/Output: [(-25 -92 6 -77) -92]
Test Case: 888 | Input/Output: [(-76 39 -53 38) -76]
Test Case: 889 | Input/Output: [(-27 -72 64 -1) -72]
Test Case: 890 | Input/Output: [(-74 79 -22 77) -74]
Test Case: 891 | Input/Output: [(-58 -77 -59 20) -77]
Test Case: 892 | Input/Output: [(66 94 32 32) 32]
Test Case: 893 | Input/Output: [(-63 -49 -52 -25) -63]
Test Case: 894 | Input/Output: [(-46 -28 1 88) -46]
Test Case: 895 | Input/Output: [(-47 -79 80 -83) -83]
Test Case: 896 | Input/Output: [(-100 -92 88 81) -100]
Test Case: 897 | Input/Output: [(-75 93 -100 66) -100]
Test Case: 898 | Input/Output: [(-93 -84 0 -68) -93]
Test Case: 899 | Input/Output: [(-34 24 -65 -10) -65]
Test Case: 900 | Input/Output: [(-34 84 57 61) -34]
Test Case: 901 | Input/Output: [(31 45 -71 -1) -71]
Test Case: 902 | Input/Output: [(-54 54 67 -84) -84]
Test Case: 903 | Input/Output: [(-77 -27 -27 -5) -77]
Test Case: 904 | Input/Output: [(-16 -55 -43 59) -55]
Test Case: 905 | Input/Output: [(-31 -5 100 67) -31]
Test Case: 906 | Input/Output: [(36 -7 77 -65) -65]
Test Case: 907 | Input/Output: [(-6 85 73 65) -6]
Test Case: 908 | Input/Output: [(-77 10 21 67) -77]
Test Case: 909 | Input/Output: [(-35 -69 99 18) -69]
Test Case: 910 | Input/Output: [(92 100 44 59) 44]
Test Case: 911 | Input/Output: [(-57 43 -21 75) -57]
Test Case: 912 | Input/Output: [(0 28 -43 -22) -43]
Test Case: 913 | Input/Output: [(98 19 85 68) 19]
Test Case: 914 | Input/Output: [(-25 -78 61 -72) -78]
Test Case: 915 | Input/Output: [(23 68 -13 -14) -14]
Test Case: 916 | Input/Output: [(76 -87 -84 -1) -87]
Test Case: 917 | Input/Output: [(50 5 94 -22) -22]
Test Case: 918 | Input/Output: [(9 -39 17 3) -39]
Test Case: 919 | Input/Output: [(88 -82 54 95) -82]
Test Case: 920 | Input/Output: [(97 -99 -49 -10) -99]
Test Case: 921 | Input/Output: [(-43 43 -96 -8) -96]
Test Case: 922 | Input/Output: [(39 -16 86 -15) -16]
Test Case: 923 | Input/Output: [(97 -85 -100 -39) -100]
Test Case: 924 | Input/Output: [(24 96 -99 0) -99]
Test Case: 925 | Input/Output: [(58 9 18 -21) -21]
Test Case: 926 | Input/Output: [(-80 -13 27 41) -80]
Test Case: 927 | Input/Output: [(62 -79 -66 32) -79]
Test Case: 928 | Input/Output: [(67 19 -2 -61) -61]
Test Case: 929 | Input/Output: [(-47 -21 -43 86) -47]
Test Case: 930 | Input/Output: [(-94 64 84 97) -94]
Test Case: 931 | Input/Output: [(0 8 -94 -93) -94]
Test Case: 932 | Input/Output: [(71 17 -78 32) -78]
Test Case: 933 | Input/Output: [(-25 51 40 -55) -55]
Test Case: 934 | Input/Output: [(8 39 -97 95) -97]
Test Case: 935 | Input/Output: [(74 88 -58 0) -58]
Test Case: 936 | Input/Output: [(-41 1 -99 -91) -99]
Test Case: 937 | Input/Output: [(34 73 -80 -87) -87]
Test Case: 938 | Input/Output: [(53 -87 63 75) -87]
Test Case: 939 | Input/Output: [(21 45 22 90) 21]
Test Case: 940 | Input/Output: [(-52 -65 68 56) -65]
Test Case: 941 | Input/Output: [(-90 -83 95 6) -90]
Test Case: 942 | Input/Output: [(28 88 87 61) 28]
Test Case: 943 | Input/Output: [(-81 16 76 -38) -81]
Test Case: 944 | Input/Output: [(24 56 65 76) 24]
Test Case: 945 | Input/Output: [(-29 63 44 69) -29]
Test Case: 946 | Input/Output: [(17 -73 75 -97) -97]
Test Case: 947 | Input/Output: [(-2 73 6 54) -2]
Test Case: 948 | Input/Output: [(-39 -78 23 9) -78]
Test Case: 949 | Input/Output: [(-95 -17 2 -95) -95]
Test Case: 950 | Input/Output: [(-16 -50 85 35) -50]
Test Case: 951 | Input/Output: [(-59 31 -65 32) -65]
Test Case: 952 | Input/Output: [(5 -61 -92 -69) -92]
Test Case: 953 | Input/Output: [(70 51 71 -38) -38]
Test Case: 954 | Input/Output: [(41 55 70 -54) -54]
Test Case: 955 | Input/Output: [(-74 27 83 82) -74]
Test Case: 956 | Input/Output: [(73 77 57 88) 57]
Test Case: 957 | Input/Output: [(-51 21 69 54) -51]
Test Case: 958 | Input/Output: [(-33 -7 -28 48) -33]
Test Case: 959 | Input/Output: [(-84 -11 -40 66) -84]
Test Case: 960 | Input/Output: [(-94 37 20 42) -94]
Test Case: 961 | Input/Output: [(-13 -65 -51 -87) -87]
Test Case: 962 | Input/Output: [(32 -90 63 -34) -90]
Test Case: 963 | Input/Output: [(63 -79 32 23) -79]
Test Case: 964 | Input/Output: [(41 -55 -24 66) -55]
Test Case: 965 | Input/Output: [(-79 -3 83 17) -79]
Test Case: 966 | Input/Output: [(64 31 6 23) 6]
Test Case: 967 | Input/Output: [(-83 42 -42 34) -83]
Test Case: 968 | Input/Output: [(53 12 54 -6) -6]
Test Case: 969 | Input/Output: [(54 -27 -58 -78) -78]
Test Case: 970 | Input/Output: [(-52 81 59 77) -52]
Test Case: 971 | Input/Output: [(63 70 -54 2) -54]
Test Case: 972 | Input/Output: [(58 27 99 68) 27]
Test Case: 973 | Input/Output: [(-9 94 78 54) -9]
Test Case: 974 | Input/Output: [(-2 -30 -3 99) -30]
Test Case: 975 | Input/Output: [(82 -74 -80 96) -80]
Test Case: 976 | Input/Output: [(-71 -86 -48 -1) -86]
Test Case: 977 | Input/Output: [(-13 -56 74 82) -56]
Test Case: 978 | Input/Output: [(-99 -37 -81 -42) -99]
Test Case: 979 | Input/Output: [(36 -76 -13 63) -76]
Test Case: 980 | Input/Output: [(-77 61 -2 -24) -77]
Test Case: 981 | Input/Output: [(49 -81 -29 30) -81]
Test Case: 982 | Input/Output: [(36 -45 44 -24) -45]
Test Case: 983 | Input/Output: [(29 -56 22 97) -56]
Test Case: 984 | Input/Output: [(1 42 -74 -92) -92]
Test Case: 985 | Input/Output: [(-44 32 6 -61) -61]
Test Case: 986 | Input/Output: [(82 60 33 70) 33]
Test Case: 987 | Input/Output: [(73 -92 24 5) -92]
Test Case: 988 | Input/Output: [(72 -82 15 60) -82]
Test Case: 989 | Input/Output: [(70 88 -47 51) -47]
Test Case: 990 | Input/Output: [(-59 -5 22 -57) -59]
Test Case: 991 | Input/Output: [(97 27 57 -50) -50]
Test Case: 992 | Input/Output: [(-99 -80 -36 21) -99]
Test Case: 993 | Input/Output: [(-48 -86 -37 -32) -86]
Test Case: 994 | Input/Output: [(13 -86 -20 78) -86]
Test Case: 995 | Input/Output: [(-86 -95 39 -2) -95]
Test Case: 996 | Input/Output: [(67 97 33 -87) -87]
Test Case: 997 | Input/Output: [(75 15 73 -46) -46]
Test Case: 998 | Input/Output: [(83 96 -11 -61) -61]
Test Case: 999 | Input/Output: [(21 83 18 -52) -52]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -34 -25 -89 66 -77 23 -83 6 118 -72 51 -32 91 -85 -123 -72
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[71 71 71 57] 57] [[3 83 83 83] 3] [[92 99 99 99] 92] [[-81 -81 -81 98] -81] [[-46 -46 -46 46] -46] [[-74 -15 -74 -74] -74] [[-43 -43 92 -43] -43] [[50 30 50 50] 30] [[36 -89 -89 -89] -89] [[-88 100 -88 -88] -88] [(-92 -92 -92 -92) -92] [(-73 -73 -73 -73) -73] [(-46 -46 -46 -46) -46] [(32 32 32 32) 32] [(6 6 6 6) 6] [(98 83 20 6) 6] [(50 83 80 41) 41] [(49 75 67 64) 49] [(71 92 57 97) 57] [(60 1 32 98) 1] [(51 2 33 7) 2] [(44 25 43 100) 25] [(13 46 74 28) 13] [(0 23 70 55) 0] [(18 63 94 8) 8] [(65 41 42 43) 41] [(48 72 86 54) 48] [(83 95 4 2) 2] [(63 51 98 58) 51] [(89 30 46 86) 30] [(49 62 1 50) 1] [(9 24 83 43) 9] [(66 67 32 95) 32] [(62 76 75 95) 62] [(26 80 24 11) 11] [(-11 -93 -98 -52) -98] [(47 8 -81 51) -81] [(44 99 -54 90) -54] [(42 -10 61 -49) -49] [(5 -42 -100 100) -100] [(-55 -63 -63 50) -63] [(25 69 -58 -44) -58] [(50 -88 88 88) -88] [(57 28 87 86) 28] [(72 45 -99 -69) -99] [(62 50 -97 -33) -97] [(49 -76 13 93) -76] [(-10 41 78 91) -10] [(-9 -62 41 -27) -62] [(60 -47 23 -38) -47] [(26 -9 -67 95) -67] [(-54 -10 36 66) -54] [(90 26 -51 98) -51] [(-74 95 -31 -50) -74] [(-63 -29 90 86) -63] [(-74 -6 48 -96) -96] [(-62 -66 46 -97) -97] [(-11 -50 48 30) -50] [(32 67 -23 73) -23] [(81 -61 46 -86) -86] [(-9 -39 -52 -44) -52] [(-55 78 -94 50) -94] [(25 -50 -1 -46) -50] [(68 -25 57 -49) -49] [(-57 -69 -84 -84) -84] [(-32 17 21 -50) -50] [(-65 -5 -32 -2) -65] [(17 -52 13 -8) -52] [(11 -7 77 -33) -33] [(-43 -15 16 -34) -43] [(42 82 49 51) 42] [(87 84 -49 -100) -100] [(99 32 91 54) 32] [(92 -93 35 70) -93] [(-37 45 -36 -57) -57] [(31 -31 92 46) -31] [(100 66 -23 77) -23] [(11 68 73 -94) -94] [(90 -95 -69 -70) -95] [(-49 27 50 74) -49] [(-4 -59 -14 70) -59] [(-64 89 25 -76) -76] [(79 -79 41 64) -79] [(-77 51 74 73) -77] [(-17 -3 55 25) -17] [(-59 23 -7 -70) -70] [(-53 -59 -92 -81) -92] [(84 71 -5 6) -5] [(-54 47 28 -21) -54] [(-85 64 61 36) -85] [(-83 -54 -73 89) -83] [(-47 99 -15 55) -47] [(84 88 90 49) 49] [(-51 -52 -81 18) -81] [(95 -85 50 29) -85])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 98                 
Correct output: 41                  | Program output: 50                 
Correct output: 49                  | Program output: 49                 
Correct output: 57                  | Program output: 71                 
Correct output: 1                   | Program output: 60                 
Correct output: 2                   | Program output: 51                 
Correct output: 25                  | Program output: 44                 
Correct output: 13                  | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 18                 
Correct output: 41                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 83                 
Correct output: 51                  | Program output: 63                 
Correct output: 30                  | Program output: 89                 
Correct output: 1                   | Program output: 49                 
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: 11                  | Program output: 26                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: 47                 
Correct output: -54                 | Program output: 44                 
Correct output: -49                 | Program output: 42                 
Correct output: -100                | Program output: 5                  
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: 25                 
Correct output: -88                 | Program output: 50                 
Correct output: 28                  | Program output: 57                 
Correct output: -99                 | Program output: 72                 
Correct output: -97                 | Program output: 62                 
Correct output: -76                 | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: 60                 
Correct output: -67                 | Program output: 26                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 90                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 32                 
Correct output: -86                 | Program output: 81                 
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: 25                 
Correct output: -49                 | Program output: 68                 
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: 17                 
Correct output: -33                 | Program output: 11                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 42                 
Correct output: -100                | Program output: 87                 
Correct output: 32                  | Program output: 99                 
Correct output: -93                 | Program output: 92                 
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: 31                 
Correct output: -23                 | Program output: 100                
Correct output: -94                 | Program output: 11                 
Correct output: -95                 | Program output: 90                 
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: 79                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 84                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 2, :instruction tag_exec_582} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_275} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -7} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_integer_91} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_stackdepth in1 in2 integer_lte in2 in2 boolean_empty boolean_yank print_integer exec_do*while () exec_dup_items boolean_eq exec_do*count (exec_eq exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 boolean_eq integer_lte integer_dup exec_y_when_autoconstructing (integer_shove integer_flush) integer_shove exec_yankdup exec_do*range (exec_swap (exec_noop boolean_pop) () exec_do*while () integer_dec integer_flush exec_flush tag_exec_582 ()) integer_shove exec_pop (integer_gt in1 in3 integer_dup exec_yank print_integer boolean_dup exec_if (exec_while (boolean_frominteger print_newline) tagged_275 boolean_yankdup integer_empty exec_dup (print_boolean print_boolean exec_y (print_newline) exec_y_when_autoconstructing () boolean_pop) integer_yank) (boolean_flush exec_s_when_autoconstructing (-7 exec_do*count (exec_k_when_autoconstructing (integer_inc integer_dec) () boolean_dup_times integer_pop boolean_invert_first_then_and boolean_dup_times integer_shove) print_exec (exec_k (boolean_yankdup tag_integer_91 exec_s_when_autoconstructing (boolean_invert_second_then_and boolean_and boolean_pop exec_do*while (integer_dup_items) exec_yank) (exec_do*while (boolean_invert_second_then_and integer_sub integer_lt boolean_dup_times boolean_flush in1) integer_lte integer_pop) ()) ())) () ())))))
Lexicase best errors: [1 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 126
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 2, :instruction tag_exec_582} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_275} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -7} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_integer_91} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_stackdepth in1 in2 integer_lte in2 in2 boolean_empty boolean_yank print_integer exec_do*while () exec_dup_items boolean_eq exec_do*count (exec_eq exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 boolean_eq integer_lte integer_dup exec_y_when_autoconstructing (integer_shove integer_flush) integer_shove exec_yankdup exec_do*range (exec_swap (exec_noop boolean_pop) () exec_do*while () integer_dec integer_flush exec_flush tag_exec_582 ()) integer_shove exec_pop (integer_gt in1 in3 integer_dup exec_yank print_integer boolean_dup exec_if (exec_while (boolean_frominteger print_newline) tagged_275 boolean_yankdup integer_empty exec_dup (print_boolean print_boolean exec_y (print_newline) exec_y_when_autoconstructing () boolean_pop) integer_yank) (boolean_flush exec_s_when_autoconstructing (-7 exec_do*count (exec_k_when_autoconstructing (integer_inc integer_dec) () boolean_dup_times integer_pop boolean_invert_first_then_and boolean_dup_times integer_shove) print_exec (exec_k (boolean_yankdup tag_integer_91 exec_s_when_autoconstructing (boolean_invert_second_then_and boolean_and boolean_pop exec_do*while (integer_dup_items) exec_yank) (exec_do*while (boolean_invert_second_then_and integer_sub integer_lt boolean_dup_times boolean_flush in1) integer_lte integer_pop) ()) ())) () ())))))
Zero cases best errors: [1 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 126
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 1 3 15 2 8 2 2 1 12)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (3 1 3 15 2 8 2 2 1 12)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 2, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_integer_611} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction 52} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_flush})
Best program: (integer_lte exec_s_when_autoconstructing () (boolean_empty boolean_and boolean_shove boolean_invert_second_then_and exec_while () integer_fromboolean integer_dec in1) () integer_yankdup print_integer print_integer boolean_or exec_pop (integer_div exec_pop () integer_sub) integer_inc boolean_flush exec_while (exec_empty tag_integer_611 exec_while (exec_k (integer_gt) (exec_when (exec_dup (in4 integer_yank integer_dec integer_div integer_empty boolean_frominteger exec_eq integer_gt exec_while (boolean_swap exec_do*while (integer_sub boolean_yank exec_yankdup boolean_swap boolean_frominteger exec_stackdepth) boolean_invert_first_then_and) exec_do*while (integer_min) in3 integer_eq)) exec_y (print_exec (boolean_flush boolean_invert_second_then_and exec_noop exec_while (integer_dec 52 integer_dup_times boolean_frominteger integer_pop) integer_rot boolean_and exec_y (integer_add exec_s_when_autoconstructing (integer_stackdepth boolean_eq) (integer_lte integer_dup exec_rot () (boolean_flush) ()) ())))))))
Errors: [1 0 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 72
Size: 98
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 9.951
Median total errors in population: 10
Error averages by case: (0.997 0.999 0.997 0.985 0.998 0.992 0.998 0.998 0.999 0.988)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.539
Average program size in population (points): 70.816
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 465211
--- Timings ---
Current time: 1559584387585 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 31.1%
Fitness Testing:      1.7 seconds, 65.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 83                 
Correct output: 41                  | Program output: 83                 
Correct output: 49                  | Program output: 75                 
Correct output: 57                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 46                 
Correct output: 0                   | Program output: 23                 
Correct output: 8                   | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 72                 
Correct output: 2                   | Program output: 95                 
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 67                 
Correct output: 62                  | Program output: 76                 
Correct output: 11                  | Program output: 80                 
Correct output: -98                 | Program output: -93                
Correct output: -81                 | Program output: 8                  
Correct output: -54                 | Program output: 99                 
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 69                 
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: 45                 
Correct output: -97                 | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 41                 
Correct output: -62                 | Program output: -62                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -9                 
Correct output: -54                 | Program output: -10                
Correct output: -51                 | Program output: 26                 
Correct output: -74                 | Program output: 95                 
Correct output: -63                 | Program output: -29                
Correct output: -96                 | Program output: -6                 
Correct output: -97                 | Program output: -66                
Correct output: -50                 | Program output: -50                
Correct output: -23                 | Program output: 67                 
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -39                
Correct output: -94                 | Program output: 78                 
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -69                
Correct output: -50                 | Program output: 17                 
Correct output: -65                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -15                
Correct output: 42                  | Program output: 82                 
Correct output: -100                | Program output: 84                 
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 45                 
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: 66                 
Correct output: -94                 | Program output: 68                 
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: 89                 
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: 51                 
Correct output: -17                 | Program output: -3                 
Correct output: -70                 | Program output: 23                 
Correct output: -92                 | Program output: -59                
Correct output: -5                  | Program output: 71                 
Correct output: -54                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -83                 | Program output: -54                
Correct output: -47                 | Program output: 99                 
Correct output: 49                  | Program output: 88                 
Correct output: -81                 | Program output: -52                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_dup})
Lexicase best program: (exec_stackdepth in2 print_integer exec_s_when_autoconstructing () (boolean_eq) (exec_dup ()))
Lexicase best errors: [1 1 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 11
Percent parens: 0.455
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_dup})
Zero cases best program: (exec_stackdepth in2 print_integer exec_s_when_autoconstructing () (boolean_eq) (exec_dup ()))
Zero cases best errors: [1 1 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 11
Percent parens: 0.455
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 136 286 286 286 287 357 223 906 906)
Population mean number of elite cases: 3.89
Count of perfect (error zero) individuals by case: (221 136 286 286 286 287 357 223 906 906)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_empty} {:close 1, :instruction tag_exec_26} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_boolean_972} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items})
Best program: (integer_stackdepth in1 in2 integer_lte in2 in2 boolean_empty boolean_yank print_integer exec_do*while () exec_dup_items boolean_eq exec_do*count (exec_eq exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 boolean_eq integer_lte integer_dup exec_y_when_autoconstructing (integer_shove integer_flush) integer_shove exec_yankdup exec_do*range (exec_swap (exec_noop integer_yank integer_lte boolean_stackdepth boolean_stackdepth exec_empty) (tag_exec_26 () exec_do*range (exec_s_when_autoconstructing (integer_yankdup tag_boolean_972 in2 boolean_invert_first_then_and boolean_yankdup exec_yankdup exec_dup_items) () ()))))))
Errors: [1 1 0 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 47
Size: 61
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 6.106
Median total errors in population: 5
Error averages by case: (0.779 0.864 0.714 0.714 0.714 0.713 0.643 0.777 0.094 0.094)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.521
Average program size in population (points): 76.32
Average percent parens in population: 0.295
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.465
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.545
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 832701
--- Timings ---
Current time: 1559584390168 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.5 seconds, 48.0%
Fitness Testing:      2.3 seconds, 43.7%
Report:               0.3 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: 92                 
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 33                 
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 70                 
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 98                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 87                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: 78                 
Correct output: -62                 | Program output: 41                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: 36                 
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: 90                 
Correct output: -96                 | Program output: 48                 
Correct output: -97                 | Program output: 46                 
Correct output: -50                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 21                 
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: 16                 
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 91                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 50                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: 25                 
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: 74                 
Correct output: -17                 | Program output: 55                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: 28                 
Correct output: -85                 | Program output: 61                 
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_641} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction -73} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 15} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop})
Lexicase best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (exec_do*times (integer_sub) integer_sub in3 integer_fromboolean print_integer) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth integer_dup exec_y_when_autoconstructing (exec_s (integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not integer_lte integer_empty boolean_stackdepth) (boolean_shove boolean_yank) (exec_y () boolean_frominteger boolean_invert_second_then_and exec_k () (exec_do*times (exec_do*count (print_boolean boolean_or exec_eq tagged_641 exec_do*count (print_newline boolean_empty integer_add exec_s_when_autoconstructing (exec_do*times (-73 boolean_dup_items exec_when () integer_stackdepth print_boolean) integer_inc) (print_boolean exec_y () boolean_invert_first_then_and in1 boolean_flush integer_sub integer_dup_items) (integer_empty integer_yankdup 15) boolean_frominteger integer_yankdup integer_yank) print_boolean exec_dup_times (integer_sub integer_gt exec_stackdepth exec_y (integer_max boolean_frominteger integer_add exec_y () exec_flush) boolean_frominteger integer_dup) boolean_yank boolean_invert_first_then_and integer_dup_times integer_gt exec_k (integer_rot in2) (integer_yankdup) exec_k_when_autoconstructing () (integer_min exec_pop ())))))) () ())) ())) ())
Lexicase best errors: [1 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 132
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_641} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction -73} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 15} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop})
Zero cases best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (exec_do*times (integer_sub) integer_sub in3 integer_fromboolean print_integer) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth integer_dup exec_y_when_autoconstructing (exec_s (integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not integer_lte integer_empty boolean_stackdepth) (boolean_shove boolean_yank) (exec_y () boolean_frominteger boolean_invert_second_then_and exec_k () (exec_do*times (exec_do*count (print_boolean boolean_or exec_eq tagged_641 exec_do*count (print_newline boolean_empty integer_add exec_s_when_autoconstructing (exec_do*times (-73 boolean_dup_items exec_when () integer_stackdepth print_boolean) integer_inc) (print_boolean exec_y () boolean_invert_first_then_and in1 boolean_flush integer_sub integer_dup_items) (integer_empty integer_yankdup 15) boolean_frominteger integer_yankdup integer_yank) print_boolean exec_dup_times (integer_sub integer_gt exec_stackdepth exec_y (integer_max boolean_frominteger integer_add exec_y () exec_flush) boolean_frominteger integer_dup) boolean_yank boolean_invert_first_then_and integer_dup_times integer_gt exec_k (integer_rot in2) (integer_yankdup) exec_k_when_autoconstructing () (integer_min exec_pop ())))))) () ())) ())) ())
Zero cases best errors: [1 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 132
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (482 138 1000 619 481 138 138 925 306 925)
Population mean number of elite cases: 5.15
Count of perfect (error zero) individuals by case: (482 138 0 619 481 138 138 925 306 925)
Population mean number of perfect (error zero) cases: 4.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction tagged_907} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_520} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod})
Best program: (integer_dec integer_dup_times integer_eq boolean_rot boolean_invert_second_then_and exec_rot (exec_swap (exec_s_when_autoconstructing (exec_noop) (integer_swap in3 print_integer integer_swap exec_rot (boolean_eq in3 integer_empty integer_fromboolean) (tag_boolean_556 exec_when (exec_s_when_autoconstructing (integer_shove integer_yankdup integer_shove) (integer_dec integer_eq integer_stackdepth) (exec_eq exec_eq)) integer_sub) (integer_sub) integer_inc) (in4 tagged_907 exec_s_when_autoconstructing (exec_shove (boolean_yankdup) integer_rot tagged_520 exec_do*count () exec_do*times (integer_swap integer_eq exec_stackdepth integer_dec boolean_dup_items tag_exec_5 (integer_swap exec_y (boolean_and) integer_empty exec_yank boolean_not print_boolean integer_rot exec_do*while () boolean_frominteger) boolean_dup) integer_mod) () ())) ()) () ())
Errors: [1 0 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 59
Size: 84
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 5.848
Median total errors in population: 5
Error averages by case: (0.518 0.862 1.0 0.381 0.519 0.862 0.862 0.075 0.694 0.075)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 46.433
Average program size in population (points): 64.153
Average percent parens in population: 0.311
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9395
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 187
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1187903
--- Timings ---
Current time: 1559584393696 milliseconds
Total Time:           8.5 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         5.1 seconds, 59.3%
Fitness Testing:      2.8 seconds, 32.5%
Report:               0.6 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 83                 
Correct output: 41                  | Program output: 83                 
Correct output: 49                  | Program output: 75                 
Correct output: 57                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 46                 
Correct output: 0                   | Program output: 23                 
Correct output: 8                   | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 72                 
Correct output: 2                   | Program output: 95                 
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 67                 
Correct output: 62                  | Program output: 76                 
Correct output: 11                  | Program output: 80                 
Correct output: -98                 | Program output: -93                
Correct output: -81                 | Program output: 8                  
Correct output: -54                 | Program output: 99                 
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 69                 
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: 45                 
Correct output: -97                 | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 41                 
Correct output: -62                 | Program output: -62                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -9                 
Correct output: -54                 | Program output: -10                
Correct output: -51                 | Program output: 26                 
Correct output: -74                 | Program output: 95                 
Correct output: -63                 | Program output: -29                
Correct output: -96                 | Program output: -6                 
Correct output: -97                 | Program output: -66                
Correct output: -50                 | Program output: -50                
Correct output: -23                 | Program output: 67                 
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -39                
Correct output: -94                 | Program output: 78                 
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -69                
Correct output: -50                 | Program output: 17                 
Correct output: -65                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -15                
Correct output: 42                  | Program output: 82                 
Correct output: -100                | Program output: 84                 
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 45                 
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: 66                 
Correct output: -94                 | Program output: 68                 
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: 89                 
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: 51                 
Correct output: -17                 | Program output: -3                 
Correct output: -70                 | Program output: 23                 
Correct output: -92                 | Program output: -59                
Correct output: -5                  | Program output: 71                 
Correct output: -54                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -83                 | Program output: -54                
Correct output: -47                 | Program output: 99                 
Correct output: 49                  | Program output: 88                 
Correct output: -81                 | Program output: -52                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_dup})
Lexicase best program: (exec_stackdepth in2 print_integer exec_s_when_autoconstructing () (boolean_eq) (exec_dup ()))
Lexicase best errors: [0 0 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 11
Percent parens: 0.455
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_dup})
Zero cases best program: (exec_stackdepth in2 print_integer exec_s_when_autoconstructing () (boolean_eq) (exec_dup ()))
Zero cases best errors: [0 0 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 11
Percent parens: 0.455
--- Lexicase Population Statistics ---
Count of elite individuals by case: (309 307 307 475 781 473 472 307 307 307)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (309 307 307 475 781 473 472 307 307 307)
Population mean number of perfect (error zero) cases: 4.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction tagged_907} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_520} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_5} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod})
Best program: (integer_stackdepth in1 in2 integer_lte in2 in2 boolean_empty boolean_yank print_integer integer_swap exec_rot () (boolean_eq in3 integer_empty integer_fromboolean) (tag_boolean_556 exec_when (exec_s_when_autoconstructing (integer_shove integer_yankdup integer_shove integer_dec integer_eq integer_stackdepth) (exec_eq exec_eq) (integer_sub integer_sub) integer_inc) in4 tagged_907 exec_s_when_autoconstructing (exec_shove (boolean_yankdup) integer_rot tagged_520 exec_do*count () exec_do*times (integer_swap) integer_eq exec_stackdepth integer_dec boolean_dup_items tag_exec_5 () integer_swap exec_y (boolean_and) integer_empty) (exec_yank boolean_not print_boolean integer_rot exec_do*while () boolean_frominteger boolean_dup) (integer_mod)))
Errors: [0 0 0 1 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 56
Size: 73
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 5.955
Median total errors in population: 6
Error averages by case: (0.691 0.693 0.693 0.525 0.219 0.527 0.528 0.693 0.693 0.693)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.337
Average program size in population (points): 70.474
Average percent parens in population: 0.310
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.41675
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1715618
--- Timings ---
Current time: 1559584397138 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.2 seconds, 60.9%
Fitness Testing:      3.4 seconds, 29.1%
Report:               1.1 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: 92                 
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 33                 
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 70                 
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 98                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 87                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: 78                 
Correct output: -62                 | Program output: 41                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: 36                 
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: 90                 
Correct output: -96                 | Program output: 48                 
Correct output: -97                 | Program output: 46                 
Correct output: -50                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 21                 
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: 16                 
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 91                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 50                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: 25                 
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: 74                 
Correct output: -17                 | Program output: 55                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: 28                 
Correct output: -85                 | Program output: 61                 
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_mult boolean_frominteger exec_s (integer_dec integer_dup_times integer_eq boolean_rot boolean_invert_second_then_and exec_rot (exec_swap (exec_s_when_autoconstructing (exec_noop) (integer_swap in3 print_integer integer_swap exec_rot (boolean_eq in3 integer_empty integer_fromboolean) (tag_boolean_556 exec_when (boolean_dup_items integer_min exec_dup (integer_sub integer_inc boolean_flush integer_gte))) ()) ()) ()) () ()) () ())
Lexicase best errors: [1 1 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 47
Percent parens: 0.362
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_mult boolean_frominteger exec_s (integer_dec integer_dup_times integer_eq boolean_rot boolean_invert_second_then_and exec_rot (exec_swap (exec_s_when_autoconstructing (exec_noop) (integer_swap in3 print_integer integer_swap exec_rot (boolean_eq in3 integer_empty integer_fromboolean) (tag_boolean_556 exec_when (boolean_dup_items integer_min exec_dup (integer_sub integer_inc boolean_flush integer_gte))) ()) ()) ()) () ()) () ())
Zero cases best errors: [1 1 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 47
Percent parens: 0.362
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 659 1000 273 273 1000 273 1000 1000)
Population mean number of elite cases: 7.48
Count of perfect (error zero) individuals by case: (0 0 659 0 273 273 0 273 0 0)
Population mean number of perfect (error zero) cases: 1.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction tagged_1017} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_520} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_5} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod})
Best program: (integer_dec integer_dup_times integer_eq boolean_rot boolean_invert_second_then_and exec_rot (exec_swap (exec_s_when_autoconstructing (exec_noop) (integer_swap in3 print_integer integer_swap exec_rot (boolean_eq in3 integer_empty integer_fromboolean) (tag_boolean_556 exec_when (exec_s_when_autoconstructing (integer_shove integer_yankdup integer_shove integer_dec integer_eq integer_stackdepth) (exec_eq exec_eq) (integer_sub integer_sub) integer_inc) in4 tagged_1017 exec_s_when_autoconstructing (exec_shove (boolean_yankdup) integer_rot tagged_520 exec_do*count () exec_do*times (integer_swap) integer_eq exec_stackdepth) (integer_dec boolean_dup_items) (tag_exec_5 () integer_swap exec_y (boolean_and) integer_empty) exec_yank boolean_not print_boolean integer_rot exec_do*while (boolean_frominteger boolean_dup) integer_mod) ()) ()) ()) () ())
Errors: [1 1 1 1 0 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 59
Size: 84
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 8.522
Median total errors in population: 9
Error averages by case: (1.0 1.0 0.341 1.0 0.727 0.727 1.0 0.727 1.0 1.0)
Error minima by case: (1 1 0 1 0 0 1 0 1 1)
Average genome size in population (length): 39.019
Average program size in population (points): 54.434
Average percent parens in population: 0.333
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.913125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 247
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 263
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2064611
--- Timings ---
Current time: 1559584400100 milliseconds
Total Time:          14.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.1 seconds, 61.4%
Fitness Testing:      3.8 seconds, 25.9%
Report:               1.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 98                 
Correct output: 41                  | Program output: 50                 
Correct output: 49                  | Program output: 49                 
Correct output: 57                  | Program output: 71                 
Correct output: 1                   | Program output: 60                 
Correct output: 2                   | Program output: 51                 
Correct output: 25                  | Program output: 44                 
Correct output: 13                  | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 18                 
Correct output: 41                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 83                 
Correct output: 51                  | Program output: 63                 
Correct output: 30                  | Program output: 89                 
Correct output: 1                   | Program output: 49                 
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: 11                  | Program output: 26                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: 47                 
Correct output: -54                 | Program output: 44                 
Correct output: -49                 | Program output: 42                 
Correct output: -100                | Program output: 5                  
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: 25                 
Correct output: -88                 | Program output: 50                 
Correct output: 28                  | Program output: 57                 
Correct output: -99                 | Program output: 72                 
Correct output: -97                 | Program output: 62                 
Correct output: -76                 | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: 60                 
Correct output: -67                 | Program output: 26                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 90                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 32                 
Correct output: -86                 | Program output: 81                 
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: 25                 
Correct output: -49                 | Program output: 68                 
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: 17                 
Correct output: -33                 | Program output: 11                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 42                 
Correct output: -100                | Program output: 87                 
Correct output: 32                  | Program output: 99                 
Correct output: -93                 | Program output: 92                 
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: 31                 
Correct output: -23                 | Program output: 100                
Correct output: -94                 | Program output: 11                 
Correct output: -95                 | Program output: 90                 
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: 79                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 84                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_641} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add})
Lexicase best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (exec_do*times (integer_sub) integer_sub in1 integer_fromboolean print_integer) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_s (integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not integer_lte integer_empty boolean_stackdepth) (boolean_shove boolean_yank) (exec_y () boolean_frominteger boolean_or exec_eq tagged_641 exec_do*count (print_newline boolean_empty integer_add))) () ())) ())) ())
Lexicase best errors: [0 0 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_641} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add})
Zero cases best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (exec_do*times (integer_sub) integer_sub in1 integer_fromboolean print_integer) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_s (integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not integer_lte integer_empty boolean_stackdepth) (boolean_shove boolean_yank) (exec_y () boolean_frominteger boolean_or exec_eq tagged_641 exec_do*count (print_newline boolean_empty integer_add))) () ())) ())) ())
Zero cases best errors: [0 0 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 4 246 1000 666 666 664 1 910 245)
Population mean number of elite cases: 4.40
Count of perfect (error zero) individuals by case: (1 4 246 0 666 666 664 1 910 245)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_641} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add})
Best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (exec_do*times (integer_sub) integer_sub in1 integer_fromboolean print_integer) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_s (integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not integer_lte integer_empty boolean_stackdepth) (boolean_shove boolean_yank) (exec_y () boolean_frominteger boolean_or exec_eq tagged_641 exec_do*count (print_newline boolean_empty integer_add))) () ())) ())) ())
Errors: [0 0 1 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 44
Size: 63
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 6.597
Median total errors in population: 6
Error averages by case: (0.999 0.996 0.754 1.0 0.334 0.334 0.336 0.999 0.09 0.755)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 48.37
Average program size in population (points): 68.556
Average percent parens in population: 0.314
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.3651875
Median age in population: 7.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2646492
--- Timings ---
Current time: 1559584403046 milliseconds
Total Time:          17.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.8 seconds, 60.7%
Fitness Testing:      4.5 seconds, 25.1%
Report:               2.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 98                 
Correct output: 41                  | Program output: 50                 
Correct output: 49                  | Program output: 49                 
Correct output: 57                  | Program output: 71                 
Correct output: 1                   | Program output: 60                 
Correct output: 2                   | Program output: 51                 
Correct output: 25                  | Program output: 44                 
Correct output: 13                  | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 18                 
Correct output: 41                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 83                 
Correct output: 51                  | Program output: 63                 
Correct output: 30                  | Program output: 89                 
Correct output: 1                   | Program output: 49                 
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: 11                  | Program output: 26                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: 47                 
Correct output: -54                 | Program output: 44                 
Correct output: -49                 | Program output: 42                 
Correct output: -100                | Program output: 5                  
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: 25                 
Correct output: -88                 | Program output: 50                 
Correct output: 28                  | Program output: 57                 
Correct output: -99                 | Program output: 72                 
Correct output: -97                 | Program output: 62                 
Correct output: -76                 | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: 60                 
Correct output: -67                 | Program output: 26                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 90                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 32                 
Correct output: -86                 | Program output: 81                 
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: 25                 
Correct output: -49                 | Program output: 68                 
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: 17                 
Correct output: -33                 | Program output: 11                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 42                 
Correct output: -100                | Program output: 87                 
Correct output: 32                  | Program output: 99                 
Correct output: -93                 | Program output: 92                 
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: 31                 
Correct output: -23                 | Program output: 100                
Correct output: -94                 | Program output: 11                 
Correct output: -95                 | Program output: 90                 
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: 79                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 84                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_641} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add})
Lexicase best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (exec_do*times (integer_sub) integer_sub in1 integer_fromboolean print_integer) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_s (integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not integer_lte integer_empty boolean_stackdepth) (boolean_shove boolean_yank) (exec_y () boolean_frominteger boolean_or exec_eq tagged_641 exec_do*count (print_newline boolean_empty integer_add))) () ())) ())) ())
Lexicase best errors: [0 1 1 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 63
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_641} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add})
Zero cases best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (exec_do*times (integer_sub) integer_sub in1 integer_fromboolean print_integer) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_s (integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not integer_lte integer_empty boolean_stackdepth) (boolean_shove boolean_yank) (exec_y () boolean_frominteger boolean_or exec_eq tagged_641 exec_do*count (print_newline boolean_empty integer_add))) () ())) ())) ())
Zero cases best errors: [0 1 1 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 63
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (382 1000 366 143 143 382 370 143 378 1000)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (382 0 366 143 143 382 370 143 378 0)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_641} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add})
Best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (exec_do*times (integer_sub) integer_sub in1 integer_fromboolean print_integer) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_s (integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not integer_lte integer_empty boolean_stackdepth) (boolean_shove boolean_yank) (exec_y () boolean_frominteger boolean_or exec_eq tagged_641 exec_do*count (print_newline boolean_empty integer_add))) () ())) ())) ())
Errors: [0 1 1 1 1 0 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 44
Size: 63
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 7.693
Median total errors in population: 7
Error averages by case: (0.618 1.0 0.634 0.857 0.857 0.618 0.63 0.857 0.622 1.0)
Error minima by case: (0 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 44.026
Average program size in population (points): 62.779
Average percent parens in population: 0.310
Minimum age in population: 6.0
Maximum age in population: 10.53125
Average age in population: 8.747875
Median age in population: 8.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 217
Genome diversity (% unique genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3338176
--- Timings ---
Current time: 1559584406290 milliseconds
Total Time:          21.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.7 seconds, 60.2%
Fitness Testing:      5.3 seconds, 25.1%
Report:               3.0 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: 92                 
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 33                 
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 70                 
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 98                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 87                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: 78                 
Correct output: -62                 | Program output: 41                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: 36                 
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: 90                 
Correct output: -96                 | Program output: 48                 
Correct output: -97                 | Program output: 46                 
Correct output: -50                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 21                 
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: 16                 
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 91                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 50                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: 25                 
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: 74                 
Correct output: -17                 | Program output: 55                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: 28                 
Correct output: -85                 | Program output: 61                 
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction tagged_907} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_520} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_9881} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod})
Lexicase best program: (integer_dec integer_dup_times integer_eq boolean_rot boolean_invert_second_then_and exec_rot (integer_gte exec_s_when_autoconstructing (exec_noop) (integer_swap in3 print_integer integer_swap exec_rot (boolean_eq in3 integer_empty integer_fromboolean) (tag_boolean_556 exec_when (exec_s_when_autoconstructing (integer_shove integer_yankdup integer_shove integer_dec integer_eq integer_stackdepth) (exec_eq exec_eq) (integer_sub integer_sub) integer_inc) in4 tagged_907 exec_s_when_autoconstructing (exec_shove (boolean_yankdup) integer_rot tagged_520 exec_do*count () exec_do*times (exec_yank) integer_eq exec_stackdepth) (integer_dec boolean_dup_items tag_exec_9881 () integer_swap exec_y (boolean_and) integer_empty) (exec_yank boolean_not print_boolean integer_rot exec_do*while (boolean_frominteger boolean_dup) integer_mod)) ()) ()) () ())
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 82
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction tagged_907} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_520} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_9881} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod})
Zero cases best program: (integer_dec integer_dup_times integer_eq boolean_rot boolean_invert_second_then_and exec_rot (integer_gte exec_s_when_autoconstructing (exec_noop) (integer_swap in3 print_integer integer_swap exec_rot (boolean_eq in3 integer_empty integer_fromboolean) (tag_boolean_556 exec_when (exec_s_when_autoconstructing (integer_shove integer_yankdup integer_shove integer_dec integer_eq integer_stackdepth) (exec_eq exec_eq) (integer_sub integer_sub) integer_inc) in4 tagged_907 exec_s_when_autoconstructing (exec_shove (boolean_yankdup) integer_rot tagged_520 exec_do*count () exec_do*times (exec_yank) integer_eq exec_stackdepth) (integer_dec boolean_dup_items tag_exec_9881 () integer_swap exec_y (boolean_and) integer_empty) (exec_yank boolean_not print_boolean integer_rot exec_do*while (boolean_frominteger boolean_dup) integer_mod)) ()) ()) () ())
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 82
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (899 1000 215 899 215 1000 310 1000 215 1000)
Population mean number of elite cases: 6.75
Count of perfect (error zero) individuals by case: (899 0 215 899 215 0 310 0 215 0)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_641} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty})
Best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 integer_pop boolean_invert_first_then_and exec_do*times (integer_sub) integer_sub in3 integer_fromboolean print_integer exec_rot () (exec_stackdepth exec_y (integer_gte integer_flush exec_swap (print_integer exec_dup () exec_stackdepth integer_dup exec_y_when_autoconstructing (exec_s (integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not integer_lte integer_empty boolean_stackdepth) (boolean_shove boolean_yank) (exec_y () boolean_frominteger boolean_invert_second_then_and exec_k () (exec_do*times (exec_do*count (print_boolean boolean_or exec_eq tagged_641 exec_do*count (print_newline boolean_empty)))))) () ())) ())) ())
Errors: [0 1 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 49
Size: 71
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.247
Median total errors in population: 7
Error averages by case: (0.101 1.0 0.785 0.101 0.785 1.0 0.69 1.0 0.785 1.0)
Error minima by case: (0 1 0 0 0 1 0 1 0 1)
Average genome size in population (length): 35.946
Average program size in population (points): 51.173
Average percent parens in population: 0.323
Minimum age in population: 7.75
Maximum age in population: 12.421875
Average age in population: 10.27665625
Median age in population: 10.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 165
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3904131
--- Timings ---
Current time: 1559584409518 milliseconds
Total Time:          24.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.7 seconds, 60.4%
Fitness Testing:      5.9 seconds, 24.5%
Report:               3.6 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: 92                 
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 33                 
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 70                 
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 98                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 87                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: 78                 
Correct output: -62                 | Program output: 41                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: 36                 
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: 90                 
Correct output: -96                 | Program output: 48                 
Correct output: -97                 | Program output: 46                 
Correct output: -50                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 21                 
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: 16                 
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 91                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 50                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: 25                 
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: 74                 
Correct output: -17                 | Program output: 55                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: 28                 
Correct output: -85                 | Program output: 61                 
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction 58} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction tagged_907} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_520} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_5} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_yank})
Lexicase best program: (integer_dec integer_dup_times integer_eq 58 boolean_invert_second_then_and exec_rot (exec_swap (exec_s_when_autoconstructing (exec_noop) (integer_swap in3 print_integer integer_swap exec_rot (boolean_eq in3 integer_empty) (integer_fromboolean) (tag_boolean_556 exec_when (exec_s_when_autoconstructing (integer_shove) (integer_yankdup integer_shove integer_dec integer_eq integer_stackdepth) (integer_dec integer_eq integer_stackdepth) exec_eq exec_eq) integer_sub integer_sub integer_inc) in4 tagged_907 exec_s_when_autoconstructing (exec_shove (boolean_yankdup)) (integer_rot tagged_520 exec_do*count (exec_do*times (integer_swap)) integer_eq exec_stackdepth) (integer_dec boolean_dup_items) tag_exec_5 () integer_swap exec_y (boolean_and) integer_rot) (exec_yank)) ()) () ())
Lexicase best errors: [0 0 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction 58} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction tagged_907} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_520} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_5} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_yank})
Zero cases best program: (integer_dec integer_dup_times integer_eq 58 boolean_invert_second_then_and exec_rot (exec_swap (exec_s_when_autoconstructing (exec_noop) (integer_swap in3 print_integer integer_swap exec_rot (boolean_eq in3 integer_empty) (integer_fromboolean) (tag_boolean_556 exec_when (exec_s_when_autoconstructing (integer_shove) (integer_yankdup integer_shove integer_dec integer_eq integer_stackdepth) (integer_dec integer_eq integer_stackdepth) exec_eq exec_eq) integer_sub integer_sub integer_inc) in4 tagged_907 exec_s_when_autoconstructing (exec_shove (boolean_yankdup)) (integer_rot tagged_520 exec_do*count (exec_do*times (integer_swap)) integer_eq exec_stackdepth) (integer_dec boolean_dup_items) tag_exec_5 () integer_swap exec_y (boolean_and) integer_rot) (exec_yank)) ()) () ())
Zero cases best errors: [0 0 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (684 684 680 909 220 684 1 684 908 220)
Population mean number of elite cases: 5.67
Count of perfect (error zero) individuals by case: (684 684 680 909 220 684 1 684 908 220)
Population mean number of perfect (error zero) cases: 5.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction tagged_907} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_5} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger})
Best program: (integer_dec integer_dup_times integer_eq integer_dec integer_dup_times integer_eq boolean_rot boolean_invert_second_then_and exec_rot (exec_swap (exec_s_when_autoconstructing (exec_noop) (integer_swap in3 print_integer integer_swap exec_rot (boolean_eq in3 integer_empty integer_fromboolean) (tag_boolean_556 exec_when (exec_s_when_autoconstructing (integer_shove integer_yankdup integer_shove integer_dec integer_eq integer_stackdepth) (exec_eq exec_eq) (integer_sub integer_sub) exec_y () in4 tagged_907 exec_s_when_autoconstructing (exec_shove (boolean_pop)) (exec_do*while ()) (integer_dec integer_flush exec_flush exec_do*count () exec_do*times (integer_swap) integer_eq exec_stackdepth) integer_dec boolean_dup_items tag_exec_5 () boolean_dup exec_y (integer_lte) integer_empty) exec_yank boolean_not print_boolean integer_rot exec_do*while (boolean_frominteger)) ()) ()) ()) () ())
Errors: [0 0 0 0 1 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 62
Size: 89
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 4.326
Median total errors in population: 3
Error averages by case: (0.316 0.316 0.32 0.091 0.78 0.316 0.999 0.316 0.092 0.78)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.239
Average program size in population (points): 68.863
Average percent parens in population: 0.299
Minimum age in population: 9.0
Maximum age in population: 13.71875
Average age in population: 11.7764296875
Median age in population: 11.828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4619643
--- Timings ---
Current time: 1559584413231 milliseconds
Total Time:          28.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.0 seconds, 60.7%
Fitness Testing:      6.7 seconds, 24.1%
Report:               4.2 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: 92                 
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 33                 
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 70                 
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 98                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 87                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: 78                 
Correct output: -62                 | Program output: 41                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: 36                 
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: 90                 
Correct output: -96                 | Program output: 48                 
Correct output: -97                 | Program output: 46                 
Correct output: -50                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 21                 
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: 16                 
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 91                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 50                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: 25                 
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: 74                 
Correct output: -17                 | Program output: 55                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: 28                 
Correct output: -85                 | Program output: 61                 
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction tagged_907} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_520} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_5} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 print_integer integer_swap exec_rot (boolean_eq in3 integer_empty integer_fromboolean) (tag_boolean_556 exec_when (exec_s_when_autoconstructing (integer_shove integer_yankdup integer_shove integer_dec integer_eq integer_stackdepth) (exec_eq exec_eq) (integer_lte boolean_not) integer_inc) in4 tagged_907 exec_s_when_autoconstructing (exec_shove (boolean_yankdup) integer_rot tagged_520 exec_do*count () exec_do*times (integer_swap) integer_eq exec_stackdepth) (integer_dec boolean_dup_items tag_exec_5 () integer_swap exec_y (boolean_and) integer_empty) (exec_yank boolean_not in2 integer_rot exec_do*while (boolean_frominteger boolean_dup) integer_mod)) ())
Lexicase best errors: [1 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 69
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction tagged_907} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_520} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_5} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 print_integer integer_swap exec_rot (boolean_eq in3 integer_empty integer_fromboolean) (tag_boolean_556 exec_when (exec_s_when_autoconstructing (integer_shove integer_yankdup integer_shove integer_dec integer_eq integer_stackdepth) (exec_eq exec_eq) (integer_lte boolean_not) integer_inc) in4 tagged_907 exec_s_when_autoconstructing (exec_shove (boolean_yankdup) integer_rot tagged_520 exec_do*count () exec_do*times (integer_swap) integer_eq exec_stackdepth) (integer_dec boolean_dup_items tag_exec_5 () integer_swap exec_y (boolean_and) integer_empty) (exec_yank boolean_not in2 integer_rot exec_do*while (boolean_frominteger boolean_dup) integer_mod)) ())
Zero cases best errors: [1 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 69
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 1000 557 115 556 889 114 556 329 889)
Population mean number of elite cases: 5.22
Count of perfect (error zero) individuals by case: (215 0 557 115 556 889 114 556 329 889)
Population mean number of perfect (error zero) cases: 4.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -55} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction boolean_rot} {:close 1, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup})
Best program: (integer_flush exec_dup_times (-55 exec_dup_items integer_rot integer_dup in3) integer_gt boolean_yankdup boolean_invert_second_then_and print_integer in2 integer_shove exec_dup_items exec_if (boolean_empty integer_rot boolean_pop boolean_stackdepth exec_empty integer_empty) (exec_pop () boolean_yank) integer_fromboolean exec_dup () exec_while (integer_pop exec_dup (exec_y (print_integer integer_yank exec_rot (integer_gte exec_eq boolean_not in2) (exec_s (boolean_rot) () (exec_noop) boolean_pop) () exec_do*while ()) integer_dec integer_flush exec_flush exec_do*count () exec_do*times (integer_inc exec_s_when_autoconstructing (integer_dup) () ()))))
Errors: [1 1 0 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 49
Size: 70
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 5.78
Median total errors in population: 5
Error averages by case: (0.785 1.0 0.443 0.885 0.444 0.111 0.886 0.444 0.671 0.111)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.326
Average program size in population (points): 66.949
Average percent parens in population: 0.292
Minimum age in population: 10.5
Maximum age in population: 15.046875
Average age in population: 13.3723515625
Median age in population: 13.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5398876
--- Timings ---
Current time: 1559584416176 milliseconds
Total Time:          31.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.8 seconds, 60.2%
Fitness Testing:      7.6 seconds, 24.3%
Report:               4.7 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: 92                 
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 33                 
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 70                 
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 98                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 87                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: 78                 
Correct output: -62                 | Program output: 41                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: 36                 
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: 90                 
Correct output: -96                 | Program output: 48                 
Correct output: -97                 | Program output: 46                 
Correct output: -50                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 21                 
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: 16                 
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 91                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 50                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: 25                 
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: 74                 
Correct output: -17                 | Program output: 55                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: 28                 
Correct output: -85                 | Program output: 61                 
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_5} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_dup_times boolean_stackdepth boolean_dup exec_k_when_autoconstructing (integer_mult exec_do*count (exec_do*times (integer_sub) integer_sub in1 integer_fromboolean print_integer)) (exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_s (integer_gt boolean_dup_times exec_s (boolean_yank exec_s (integer_lte boolean_not integer_lte exec_do*times (integer_swap) integer_eq exec_rot () (integer_dec boolean_dup_items tag_exec_5 () integer_swap exec_y (boolean_and) integer_empty) (exec_yank boolean_not in2 integer_rot exec_do*while (boolean_frominteger boolean_dup) integer_mod)) () ()) () ()) () ())) ())) ()))
Lexicase best errors: [1 0 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 79
Percent parens: 0.367
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_5} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_dup_times boolean_stackdepth boolean_dup exec_k_when_autoconstructing (integer_mult exec_do*count (exec_do*times (integer_sub) integer_sub in1 integer_fromboolean print_integer)) (exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_s (integer_gt boolean_dup_times exec_s (boolean_yank exec_s (integer_lte boolean_not integer_lte exec_do*times (integer_swap) integer_eq exec_rot () (integer_dec boolean_dup_items tag_exec_5 () integer_swap exec_y (boolean_and) integer_empty) (exec_yank boolean_not in2 integer_rot exec_do*while (boolean_frominteger boolean_dup) integer_mod)) () ()) () ()) () ())) ())) ()))
Zero cases best errors: [1 0 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 79
Percent parens: 0.367
--- Lexicase Population Statistics ---
Count of elite individuals by case: (398 169 347 1 169 347 400 1000 398 169)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (398 169 347 1 169 347 400 0 398 169)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction tagged_907} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_520} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth})
Best program: (integer_dec integer_dup_times integer_eq boolean_rot boolean_invert_second_then_and exec_rot (exec_swap (exec_s_when_autoconstructing (exec_noop) (integer_swap) (in3 print_integer integer_swap exec_rot () (boolean_eq in3 integer_empty integer_fromboolean) (tag_boolean_556 exec_when (exec_eq exec_eq) integer_sub boolean_not) integer_inc) in4 tagged_907 exec_s_when_autoconstructing (exec_shove (boolean_yankdup) integer_rot tagged_520 exec_do*count () exec_do*times (integer_swap) integer_eq exec_stackdepth) () ()) ()) () ())
Errors: [0 1 1 1 1 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 37
Size: 56
Percent parens: 0.339
--- Population Statistics ---
Average total errors in population: 7.602
Median total errors in population: 7
Error averages by case: (0.602 0.831 0.653 0.999 0.831 0.653 0.6 1.0 0.602 0.831)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 47.766
Average program size in population (points): 66.321
Average percent parens in population: 0.279
Minimum age in population: 12.046875
Maximum age in population: 16.7734375
Average age in population: 14.984150390625
Median age in population: 15.0537109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6237827
--- Timings ---
Current time: 1559584419742 milliseconds
Total Time:          34.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.1 seconds, 60.9%
Fitness Testing:      8.5 seconds, 24.4%
Report:               5.0 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: 92                 
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 33                 
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 70                 
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 98                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 87                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: 78                 
Correct output: -62                 | Program output: 41                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: 36                 
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: 90                 
Correct output: -96                 | Program output: 48                 
Correct output: -97                 | Program output: 46                 
Correct output: -50                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 21                 
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: 16                 
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 91                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 50                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: 25                 
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: 74                 
Correct output: -17                 | Program output: 55                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: 28                 
Correct output: -85                 | Program output: 61                 
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_integer_611} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction 52} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_dec integer_dup_times integer_eq boolean_rot exec_rot (exec_swap (exec_s_when_autoconstructing (integer_rot integer_swap in3 print_integer integer_swap exec_rot (boolean_eq in3 integer_empty integer_fromboolean) (tag_boolean_556 exec_when (integer_mod integer_shove integer_yankdup integer_shove integer_dec integer_eq integer_stackdepth) exec_eq exec_eq) (integer_sub integer_sub) boolean_yankdup) (integer_dec integer_eq boolean_eq) (integer_sub) integer_inc boolean_flush exec_while (exec_empty tag_integer_611 exec_while (exec_k (integer_gt) (exec_when (exec_dup (in4 integer_yank integer_dec integer_div integer_empty boolean_frominteger exec_eq integer_gt exec_while (boolean_swap exec_do*while (integer_sub boolean_yank exec_yankdup boolean_swap boolean_frominteger exec_stackdepth) boolean_invert_first_then_and)) exec_do*while (integer_min) in3 integer_eq)) exec_y (print_exec (boolean_flush boolean_invert_second_then_and exec_noop exec_while (integer_dec 52 integer_dup_times)))))) ()) () ())
Lexicase best errors: [1 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 101
Percent parens: 0.248
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_integer_611} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction 52} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_dec integer_dup_times integer_eq boolean_rot exec_rot (exec_swap (exec_s_when_autoconstructing (integer_rot integer_swap in3 print_integer integer_swap exec_rot (boolean_eq in3 integer_empty integer_fromboolean) (tag_boolean_556 exec_when (integer_mod integer_shove integer_yankdup integer_shove integer_dec integer_eq integer_stackdepth) exec_eq exec_eq) (integer_sub integer_sub) boolean_yankdup) (integer_dec integer_eq boolean_eq) (integer_sub) integer_inc boolean_flush exec_while (exec_empty tag_integer_611 exec_while (exec_k (integer_gt) (exec_when (exec_dup (in4 integer_yank integer_dec integer_div integer_empty boolean_frominteger exec_eq integer_gt exec_while (boolean_swap exec_do*while (integer_sub boolean_yank exec_yankdup boolean_swap boolean_frominteger exec_stackdepth) boolean_invert_first_then_and)) exec_do*while (integer_min) in3 integer_eq)) exec_y (print_exec (boolean_flush boolean_invert_second_then_and exec_noop exec_while (integer_dec 52 integer_dup_times)))))) ()) () ())
Zero cases best errors: [1 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 101
Percent parens: 0.248
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 3 308 309 308 296 604 504 309 308)
Population mean number of elite cases: 3.24
Count of perfect (error zero) individuals by case: (291 3 308 309 308 296 604 504 309 308)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction -73} {:close 0, :instruction boolean_dup_items})
Best program: (integer_dec integer_dup_times integer_eq boolean_rot boolean_invert_second_then_and exec_rot (boolean_rot exec_s_when_autoconstructing (exec_noop) (integer_swap in3 print_integer integer_swap exec_rot (exec_pop () boolean_yank exec_dup_times (exec_dup () exec_while (integer_pop integer_mult exec_y (print_integer integer_yank exec_rot (integer_gte exec_eq boolean_not in2) (boolean_frominteger boolean_pop) (integer_inc boolean_flush integer_pop exec_dup (exec_y (boolean_invert_second_then_and integer_yank exec_rot (integer_gte boolean_empty integer_add exec_s_when_autoconstructing (exec_do*times (-73 boolean_dup_items)) () ()) () ()))))))) () ()) ()) () ())
Errors: [1 1 0 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 46
Size: 73
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 6.76
Median total errors in population: 6
Error averages by case: (0.709 0.997 0.692 0.691 0.692 0.704 0.396 0.496 0.691 0.692)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.745
Average program size in population (points): 61.266
Average percent parens in population: 0.286
Minimum age in population: 13.046875
Maximum age in population: 18.1708984375
Average age in population: 16.53051171875
Median age in population: 16.576171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7094490
--- Timings ---
Current time: 1559584422874 milliseconds
Total Time:          38.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.1 seconds, 60.9%
Fitness Testing:      9.4 seconds, 24.7%
Report:               5.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: 98                 
Correct output: -46                 | Program output: 46                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 6                  
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 64                 
Correct output: 57                  | Program output: 97                 
Correct output: 1                   | Program output: 98                 
Correct output: 2                   | Program output: 7                  
Correct output: 25                  | Program output: 100                
Correct output: 13                  | Program output: 28                 
Correct output: 0                   | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 43                 
Correct output: 48                  | Program output: 54                 
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 58                 
Correct output: 30                  | Program output: 86                 
Correct output: 1                   | Program output: 50                 
Correct output: 9                   | Program output: 43                 
Correct output: 32                  | Program output: 95                 
Correct output: 62                  | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -52                
Correct output: -81                 | Program output: 51                 
Correct output: -54                 | Program output: 90                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: 100                
Correct output: -63                 | Program output: 50                 
Correct output: -58                 | Program output: -44                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 86                 
Correct output: -99                 | Program output: -69                
Correct output: -97                 | Program output: -33                
Correct output: -76                 | Program output: 93                 
Correct output: -10                 | Program output: 91                 
Correct output: -62                 | Program output: -27                
Correct output: -47                 | Program output: -38                
Correct output: -67                 | Program output: 95                 
Correct output: -54                 | Program output: 66                 
Correct output: -51                 | Program output: 98                 
Correct output: -74                 | Program output: -50                
Correct output: -63                 | Program output: 86                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: 30                 
Correct output: -23                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -44                
Correct output: -94                 | Program output: 50                 
Correct output: -50                 | Program output: -46                
Correct output: -49                 | Program output: -49                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -2                 
Correct output: -52                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -34                
Correct output: 42                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: 32                  | Program output: 54                 
Correct output: -93                 | Program output: 70                 
Correct output: -57                 | Program output: -57                
Correct output: -31                 | Program output: 46                 
Correct output: -23                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -70                
Correct output: -49                 | Program output: 74                 
Correct output: -59                 | Program output: 70                 
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: 64                 
Correct output: -77                 | Program output: 73                 
Correct output: -17                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -81                
Correct output: -5                  | Program output: 6                  
Correct output: -54                 | Program output: -21                
Correct output: -85                 | Program output: 36                 
Correct output: -83                 | Program output: 89                 
Correct output: -47                 | Program output: 55                 
Correct output: 49                  | Program output: 49                 
Correct output: -81                 | Program output: 18                 
Correct output: -85                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_641} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add})
Lexicase best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (exec_do*times (integer_sub) integer_sub in1 integer_fromboolean print_integer) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_s (integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not integer_lte integer_empty boolean_stackdepth) (boolean_shove boolean_yank) (exec_y () boolean_frominteger boolean_or exec_while (tagged_641 exec_do*count (print_newline boolean_empty integer_add)))) () ())) ())) ())
Lexicase best errors: [1 0 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 64
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_641} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add})
Zero cases best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (exec_do*times (integer_sub) integer_sub in1 integer_fromboolean print_integer) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_s (integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not integer_lte integer_empty boolean_stackdepth) (boolean_shove boolean_yank) (exec_y () boolean_frominteger boolean_or exec_while (tagged_641 exec_do*count (print_newline boolean_empty integer_add)))) () ())) ())) ())
Zero cases best errors: [1 0 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 64
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (516 267 105 105 107 105 782 265 265 2)
Population mean number of elite cases: 2.52
Count of perfect (error zero) individuals by case: (516 267 105 105 107 105 782 265 265 2)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count () boolean_dup_times integer_sub integer_sub in1 integer_fromboolean integer_yankdup exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())
Errors: [1 1 0 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 25
Size: 35
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.481
Median total errors in population: 8
Error averages by case: (0.484 0.733 0.895 0.895 0.893 0.895 0.218 0.735 0.735 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.497
Average program size in population (points): 59.298
Average percent parens in population: 0.299
Minimum age in population: 15.109375
Maximum age in population: 19.81982421875
Average age in population: 17.99965380859375
Median age in population: 18.08837890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7896776
--- Timings ---
Current time: 1559584426645 milliseconds
Total Time:          41.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.3 seconds, 61.4%
Fitness Testing:     10.2 seconds, 24.8%
Report:               5.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: 98                 
Correct output: -46                 | Program output: 46                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 6                  
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 64                 
Correct output: 57                  | Program output: 97                 
Correct output: 1                   | Program output: 98                 
Correct output: 2                   | Program output: 7                  
Correct output: 25                  | Program output: 100                
Correct output: 13                  | Program output: 28                 
Correct output: 0                   | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 43                 
Correct output: 48                  | Program output: 54                 
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 58                 
Correct output: 30                  | Program output: 86                 
Correct output: 1                   | Program output: 50                 
Correct output: 9                   | Program output: 43                 
Correct output: 32                  | Program output: 95                 
Correct output: 62                  | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -52                
Correct output: -81                 | Program output: 51                 
Correct output: -54                 | Program output: 90                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: 100                
Correct output: -63                 | Program output: 50                 
Correct output: -58                 | Program output: -44                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 86                 
Correct output: -99                 | Program output: -69                
Correct output: -97                 | Program output: -33                
Correct output: -76                 | Program output: 93                 
Correct output: -10                 | Program output: 91                 
Correct output: -62                 | Program output: -27                
Correct output: -47                 | Program output: -38                
Correct output: -67                 | Program output: 95                 
Correct output: -54                 | Program output: 66                 
Correct output: -51                 | Program output: 98                 
Correct output: -74                 | Program output: -50                
Correct output: -63                 | Program output: 86                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: 30                 
Correct output: -23                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -44                
Correct output: -94                 | Program output: 50                 
Correct output: -50                 | Program output: -46                
Correct output: -49                 | Program output: -49                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -2                 
Correct output: -52                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -34                
Correct output: 42                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: 32                  | Program output: 54                 
Correct output: -93                 | Program output: 70                 
Correct output: -57                 | Program output: -57                
Correct output: -31                 | Program output: 46                 
Correct output: -23                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -70                
Correct output: -49                 | Program output: 74                 
Correct output: -59                 | Program output: 70                 
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: 64                 
Correct output: -77                 | Program output: 73                 
Correct output: -17                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -81                
Correct output: -5                  | Program output: 6                  
Correct output: -54                 | Program output: -21                
Correct output: -85                 | Program output: 36                 
Correct output: -83                 | Program output: 89                 
Correct output: -47                 | Program output: 55                 
Correct output: 49                  | Program output: 49                 
Correct output: -81                 | Program output: 18                 
Correct output: -85                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (boolean_dup_times integer_sub) integer_sub boolean_and integer_fromboolean exec_stackdepth exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())
Lexicase best errors: [1 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (boolean_dup_times integer_sub) integer_sub boolean_and integer_fromboolean exec_stackdepth exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())
Zero cases best errors: [1 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 300 299 405 299 303 434 106 299)
Population mean number of elite cases: 4.45
Count of perfect (error zero) individuals by case: (0 0 300 299 405 299 303 434 106 299)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (boolean_dup_times integer_sub) integer_sub in1 integer_fromboolean integer_yankdup exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())
Errors: [1 1 0 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 25
Size: 35
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.555
Median total errors in population: 9
Error averages by case: (1.0 1.0 0.7 0.701 0.595 0.701 0.697 0.566 0.894 0.701)
Error minima by case: (1 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.192
Average program size in population (points): 48.972
Average percent parens in population: 0.310
Minimum age in population: 16.42529296875
Maximum age in population: 21.5517578125
Average age in population: 19.55737670898438
Median age in population: 19.6065673828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 8841783
--- Timings ---
Current time: 1559584430449 milliseconds
Total Time:          45.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.4 seconds, 60.8%
Fitness Testing:     11.3 seconds, 25.0%
Report:               6.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: 98                 
Correct output: -46                 | Program output: 46                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 6                  
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 64                 
Correct output: 57                  | Program output: 97                 
Correct output: 1                   | Program output: 98                 
Correct output: 2                   | Program output: 7                  
Correct output: 25                  | Program output: 100                
Correct output: 13                  | Program output: 28                 
Correct output: 0                   | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 43                 
Correct output: 48                  | Program output: 54                 
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 58                 
Correct output: 30                  | Program output: 86                 
Correct output: 1                   | Program output: 50                 
Correct output: 9                   | Program output: 43                 
Correct output: 32                  | Program output: 95                 
Correct output: 62                  | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -52                
Correct output: -81                 | Program output: 51                 
Correct output: -54                 | Program output: 90                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: 100                
Correct output: -63                 | Program output: 50                 
Correct output: -58                 | Program output: -44                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 86                 
Correct output: -99                 | Program output: -69                
Correct output: -97                 | Program output: -33                
Correct output: -76                 | Program output: 93                 
Correct output: -10                 | Program output: 91                 
Correct output: -62                 | Program output: -27                
Correct output: -47                 | Program output: -38                
Correct output: -67                 | Program output: 95                 
Correct output: -54                 | Program output: 66                 
Correct output: -51                 | Program output: 98                 
Correct output: -74                 | Program output: -50                
Correct output: -63                 | Program output: 86                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: 30                 
Correct output: -23                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -44                
Correct output: -94                 | Program output: 50                 
Correct output: -50                 | Program output: -46                
Correct output: -49                 | Program output: -49                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -2                 
Correct output: -52                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -34                
Correct output: 42                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: 32                  | Program output: 54                 
Correct output: -93                 | Program output: 70                 
Correct output: -57                 | Program output: -57                
Correct output: -31                 | Program output: 46                 
Correct output: -23                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -70                
Correct output: -49                 | Program output: 74                 
Correct output: -59                 | Program output: 70                 
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: 64                 
Correct output: -77                 | Program output: 73                 
Correct output: -17                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -81                
Correct output: -5                  | Program output: 6                  
Correct output: -54                 | Program output: -21                
Correct output: -85                 | Program output: 36                 
Correct output: -83                 | Program output: 89                 
Correct output: -47                 | Program output: 55                 
Correct output: 49                  | Program output: 49                 
Correct output: -81                 | Program output: 18                 
Correct output: -85                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (boolean_dup_times integer_sub) integer_sub boolean_and integer_fromboolean exec_stackdepth exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())
Lexicase best errors: [1 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (boolean_dup_times integer_sub) integer_sub boolean_and integer_fromboolean exec_stackdepth exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())
Zero cases best errors: [1 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (196 201 1 78 546 201 78 547 625 546)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (196 201 1 78 546 201 78 547 625 546)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (boolean_dup_times integer_sub) integer_sub in1 integer_fromboolean integer_yankdup exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())
Errors: [1 1 1 1 0 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 25
Size: 35
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.981
Median total errors in population: 6
Error averages by case: (0.804 0.799 0.999 0.922 0.454 0.799 0.922 0.453 0.375 0.454)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.901
Average program size in population (points): 43.164
Average percent parens in population: 0.284
Minimum age in population: 18.65625
Maximum age in population: 23.051513671875
Average age in population: 21.14
Median age in population: 21.2518310546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 170
Genome diversity (% unique genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.473
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 9933876
--- Timings ---
Current time: 1559584434700 milliseconds
Total Time:          49.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.8 seconds, 60.4%
Fitness Testing:     12.4 seconds, 25.1%
Report:               7.0 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: 92                 
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 33                 
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 70                 
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 98                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 87                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: 78                 
Correct output: -62                 | Program output: 41                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: 36                 
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: 90                 
Correct output: -96                 | Program output: 48                 
Correct output: -97                 | Program output: 46                 
Correct output: -50                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 21                 
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: 16                 
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 91                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 50                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: 25                 
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: 74                 
Correct output: -17                 | Program output: 55                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: 28                 
Correct output: -85                 | Program output: 61                 
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_732} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_5} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_dup_times integer_rot integer_dup in3 integer_gt boolean_yankdup boolean_invert_second_then_and print_integer print_integer boolean_xor exec_empty in4 exec_pop (boolean_or exec_noop) integer_mult exec_dup_times (exec_when (exec_s_when_autoconstructing (integer_shove integer_yankdup integer_shove integer_dec integer_eq exec_eq integer_pop tag_boolean_732 integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not integer_lte integer_eq exec_stackdepth) (integer_dec boolean_dup_items tag_exec_5 () integer_swap exec_y (boolean_and) integer_empty) (exec_yank integer_mod in2 integer_rot exec_do*while (boolean_frominteger boolean_dup) integer_mod)) () ())))
Lexicase best errors: [1 0 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 65
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_732} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_5} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_dup_times integer_rot integer_dup in3 integer_gt boolean_yankdup boolean_invert_second_then_and print_integer print_integer boolean_xor exec_empty in4 exec_pop (boolean_or exec_noop) integer_mult exec_dup_times (exec_when (exec_s_when_autoconstructing (integer_shove integer_yankdup integer_shove integer_dec integer_eq exec_eq integer_pop tag_boolean_732 integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not integer_lte integer_eq exec_stackdepth) (integer_dec boolean_dup_items tag_exec_5 () integer_swap exec_y (boolean_and) integer_empty) (exec_yank integer_mod in2 integer_rot exec_do*while (boolean_frominteger boolean_dup) integer_mod)) () ())))
Zero cases best errors: [1 0 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 65
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (307 582 280 6 289 302 283 6 155 307)
Population mean number of elite cases: 2.52
Count of perfect (error zero) individuals by case: (307 582 280 6 289 302 283 6 155 307)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction tag_integer_835} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*times})
Best program: (boolean_stackdepth boolean_dup in2 integer_mult boolean_invert_first_then_and exec_do*times (boolean_eq) integer_sub in3 exec_k_when_autoconstructing (print_integer) (exec_rot (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth integer_dup exec_do*while (exec_s (integer_gt boolean_dup_times integer_sub boolean_yank integer_yankdup integer_lte boolean_not integer_lte integer_empty boolean_stackdepth boolean_shove boolean_yank) (tag_integer_835) (boolean_frominteger boolean_invert_second_then_and exec_k () (exec_do*times ())))) ())) () ()))
Errors: [1 0 0 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 40
Size: 58
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.483
Median total errors in population: 6
Error averages by case: (0.693 0.418 0.72 0.994 0.711 0.698 0.717 0.994 0.845 0.693)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.14
Average program size in population (points): 48.858
Average percent parens in population: 0.282
Minimum age in population: 19.65625
Maximum age in population: 24.69970703125
Average age in population: 22.69433917236328
Median age in population: 22.7410888671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 10988875
--- Timings ---
Current time: 1559584438572 milliseconds
Total Time:          53.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.8 seconds, 59.9%
Fitness Testing:     13.4 seconds, 25.3%
Report:               7.7 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 98                 
Correct output: 41                  | Program output: 50                 
Correct output: 49                  | Program output: 49                 
Correct output: 57                  | Program output: 71                 
Correct output: 1                   | Program output: 60                 
Correct output: 2                   | Program output: 51                 
Correct output: 25                  | Program output: 44                 
Correct output: 13                  | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 18                 
Correct output: 41                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 83                 
Correct output: 51                  | Program output: 63                 
Correct output: 30                  | Program output: 89                 
Correct output: 1                   | Program output: 49                 
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: 11                  | Program output: 26                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: 47                 
Correct output: -54                 | Program output: 44                 
Correct output: -49                 | Program output: 42                 
Correct output: -100                | Program output: 5                  
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: 25                 
Correct output: -88                 | Program output: 50                 
Correct output: 28                  | Program output: 57                 
Correct output: -99                 | Program output: 72                 
Correct output: -97                 | Program output: 62                 
Correct output: -76                 | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: 60                 
Correct output: -67                 | Program output: 26                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 90                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 32                 
Correct output: -86                 | Program output: 81                 
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: 25                 
Correct output: -49                 | Program output: 68                 
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: 17                 
Correct output: -33                 | Program output: 11                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 42                 
Correct output: -100                | Program output: 87                 
Correct output: 32                  | Program output: 99                 
Correct output: -93                 | Program output: 92                 
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: 31                 
Correct output: -23                 | Program output: 100                
Correct output: -94                 | Program output: 11                 
Correct output: -95                 | Program output: 90                 
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: 79                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 84                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in4 boolean_stackdepth boolean_dup integer_mult exec_do*count (exec_dup (integer_sub) integer_sub boolean_and integer_fromboolean exec_stackdepth) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (in2) (integer_mult exec_do*count (boolean_dup_times integer_sub) integer_sub in1 integer_fromboolean integer_yankdup) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())) ())
Lexicase best errors: [1 1 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 57
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in4 boolean_stackdepth boolean_dup integer_mult exec_do*count (exec_dup (integer_sub) integer_sub boolean_and integer_fromboolean exec_stackdepth) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (in2) (integer_mult exec_do*count (boolean_dup_times integer_sub) integer_sub in1 integer_fromboolean integer_yankdup) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())) ())
Zero cases best errors: [1 1 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 225 160 1000 287 208 163 206 1000 290)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (0 225 160 0 287 208 163 206 0 290)
Population mean number of perfect (error zero) cases: 1.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Best program: (exec_s_when_autoconstructing (boolean_stackdepth boolean_dup in2) (integer_mult exec_do*count (exec_dup (integer_sub) integer_sub boolean_and integer_fromboolean exec_stackdepth) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (in2) (integer_mult exec_do*count (boolean_dup_times integer_sub) integer_sub in1 integer_sub integer_yankdup) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())) ()) ())
Errors: [1 1 0 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 40
Size: 61
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 8.461
Median total errors in population: 9
Error averages by case: (1.0 0.775 0.84 1.0 0.713 0.792 0.837 0.794 1.0 0.71)
Error minima by case: (1 0 0 1 0 0 0 0 1 0)
Average genome size in population (length): 34.986
Average program size in population (points): 50.848
Average percent parens in population: 0.308
Minimum age in population: 20.65625
Maximum age in population: 26.02130126953125
Average age in population: 24.18027581787109
Median age in population: 24.2735595703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 12025595
--- Timings ---
Current time: 1559584442606 milliseconds
Total Time:          57.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.1 seconds, 59.5%
Fitness Testing:     14.5 seconds, 25.3%
Report:               8.6 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: 92                 
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 33                 
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 70                 
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 98                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 87                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: 78                 
Correct output: -62                 | Program output: 41                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: 36                 
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: 90                 
Correct output: -96                 | Program output: 48                 
Correct output: -97                 | Program output: 46                 
Correct output: -50                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 21                 
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: 16                 
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 91                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 50                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: 25                 
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: 74                 
Correct output: -17                 | Program output: 55                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: 28                 
Correct output: -85                 | Program output: 61                 
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in4 boolean_stackdepth in2 integer_mult exec_do*count (boolean_dup_times integer_sub) integer_sub boolean_and integer_fromboolean exec_stackdepth exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())
Lexicase best errors: [0 0 0 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in4 boolean_stackdepth in2 integer_mult exec_do*count (boolean_dup_times integer_sub) integer_sub boolean_and integer_fromboolean exec_stackdepth exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())
Zero cases best errors: [0 0 0 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (738 190 326 135 134 456 188 189 137 1000)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (738 190 326 135 134 456 188 189 137 0)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_641} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction tagged_907} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_520} {:close 1, :instruction tagged_856} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_5} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod})
Best program: (integer_dec integer_dup_times integer_eq boolean_rot boolean_invert_second_then_and exec_rot (exec_swap () (exec_s_when_autoconstructing (exec_noop integer_swap) (in3 print_integer integer_swap exec_rot () (boolean_eq in3) (integer_empty integer_fromboolean) tag_boolean_641 exec_when (exec_s_when_autoconstructing (integer_shove integer_yankdup integer_shove) (integer_dec integer_eq integer_stackdepth exec_eq exec_eq) (integer_sub integer_sub) integer_inc) in4 tagged_907) (exec_stackdepth exec_shove (boolean_yankdup integer_rot tagged_520 tagged_856) exec_do*times (integer_swap) exec_flush integer_empty integer_dec boolean_dup_items tag_exec_5 () integer_swap exec_y () boolean_and) integer_empty) exec_yank boolean_not print_boolean integer_rot exec_do*while (boolean_frominteger) boolean_dup) (integer_mod) ())
Errors: [0 1 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 59
Size: 80
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.507
Median total errors in population: 8
Error averages by case: (0.262 0.81 0.674 0.865 0.866 0.544 0.812 0.811 0.863 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 35.776
Average program size in population (points): 52.758
Average percent parens in population: 0.319
Minimum age in population: 22.82763671875
Maximum age in population: 27.39752197265625
Average age in population: 25.73323698425293
Median age in population: 25.83058929443359
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 13162434
--- Timings ---
Current time: 1559584446311 milliseconds
Total Time:          61.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.1 seconds, 59.0%
Fitness Testing:     15.7 seconds, 25.6%
Report:               9.3 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: 92                 
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 33                 
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 70                 
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 98                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 87                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: 78                 
Correct output: -62                 | Program output: 41                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: 36                 
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: 90                 
Correct output: -96                 | Program output: 48                 
Correct output: -97                 | Program output: 46                 
Correct output: -50                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 21                 
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: 16                 
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 91                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 50                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: 25                 
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: 74                 
Correct output: -17                 | Program output: 55                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: 28                 
Correct output: -85                 | Program output: 61                 
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 integer_mult boolean_invert_first_then_and exec_do*times (integer_sub) exec_k (in3 integer_fromboolean print_integer) ())
Lexicase best errors: [1 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 16
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 integer_mult boolean_invert_first_then_and exec_do*times (integer_sub) exec_k (in3 integer_fromboolean print_integer) ())
Zero cases best errors: [1 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 16
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 8 390 389 7 388 499 393 391 111)
Population mean number of elite cases: 2.59
Count of perfect (error zero) individuals by case: (9 8 390 389 7 388 499 393 391 111)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer})
Best program: (boolean_dup_times boolean_stackdepth boolean_dup in2 integer_mult integer_shove exec_do*times (integer_sub) exec_k (in3 integer_fromboolean print_integer) ())
Errors: [1 1 0 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 12
Size: 16
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.415
Median total errors in population: 8
Error averages by case: (0.991 0.992 0.61 0.611 0.993 0.612 0.501 0.607 0.609 0.889)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.537
Average program size in population (points): 45.025
Average percent parens in population: 0.296
Minimum age in population: 24.1015625
Maximum age in population: 29.05720520019531
Average age in population: 27.30344914245605
Median age in population: 27.40847015380859
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.535
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 13986296
--- Timings ---
Current time: 1559584449358 milliseconds
Total Time:          64.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.1 seconds, 59.1%
Fitness Testing:     16.5 seconds, 25.6%
Report:               9.8 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 98                 
Correct output: 41                  | Program output: 50                 
Correct output: 49                  | Program output: 49                 
Correct output: 57                  | Program output: 71                 
Correct output: 1                   | Program output: 60                 
Correct output: 2                   | Program output: 51                 
Correct output: 25                  | Program output: 44                 
Correct output: 13                  | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 18                 
Correct output: 41                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 83                 
Correct output: 51                  | Program output: 63                 
Correct output: 30                  | Program output: 89                 
Correct output: 1                   | Program output: 49                 
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: 11                  | Program output: 26                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: 47                 
Correct output: -54                 | Program output: 44                 
Correct output: -49                 | Program output: 42                 
Correct output: -100                | Program output: 5                  
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: 25                 
Correct output: -88                 | Program output: 50                 
Correct output: 28                  | Program output: 57                 
Correct output: -99                 | Program output: 72                 
Correct output: -97                 | Program output: 62                 
Correct output: -76                 | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: 60                 
Correct output: -67                 | Program output: 26                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 90                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 32                 
Correct output: -86                 | Program output: 81                 
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: 25                 
Correct output: -49                 | Program output: 68                 
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: 17                 
Correct output: -33                 | Program output: 11                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 42                 
Correct output: -100                | Program output: 87                 
Correct output: 32                  | Program output: 99                 
Correct output: -93                 | Program output: 92                 
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: 31                 
Correct output: -23                 | Program output: 100                
Correct output: -94                 | Program output: 11                 
Correct output: -95                 | Program output: 90                 
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: 79                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 84                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction tagged_811} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_520} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod})
Lexicase best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (boolean_dup_times integer_sub) exec_do*count (exec_eq) exec_when () boolean_yank boolean_frominteger integer_empty exec_when (integer_inc in1) boolean_eq integer_lte integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not boolean_empty boolean_dup_times integer_eq integer_stackdepth) (exec_eq exec_eq) (integer_dup exec_while () integer_inc) in4 tagged_811 exec_s_when_autoconstructing (exec_shove (boolean_yankdup) integer_rot tagged_520 exec_do*count () exec_do*times (integer_swap) integer_eq exec_stackdepth integer_dec in2 integer_rot exec_do*while (boolean_frominteger boolean_yank) integer_mod) () ())
Lexicase best errors: [1 1 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 75
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction tagged_811} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_520} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod})
Zero cases best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (boolean_dup_times integer_sub) exec_do*count (exec_eq) exec_when () boolean_yank boolean_frominteger integer_empty exec_when (integer_inc in1) boolean_eq integer_lte integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup integer_lte boolean_not boolean_empty boolean_dup_times integer_eq integer_stackdepth) (exec_eq exec_eq) (integer_dup exec_while () integer_inc) in4 tagged_811 exec_s_when_autoconstructing (exec_shove (boolean_yankdup) integer_rot tagged_520 exec_do*count () exec_do*times (integer_swap) integer_eq exec_stackdepth integer_dec in2 integer_rot exec_do*while (boolean_frominteger boolean_yank) integer_mod) () ())
Zero cases best errors: [1 1 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 75
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 874 1000 1000 871 1000 1000 366 1000)
Population mean number of elite cases: 9.11
Count of perfect (error zero) individuals by case: (0 0 874 0 0 871 0 0 366 0)
Population mean number of perfect (error zero) cases: 2.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Best program: (in4 boolean_stackdepth boolean_dup integer_min exec_do*count (exec_dup (integer_sub) integer_sub boolean_and integer_fromboolean exec_stackdepth) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (in2) (integer_mult exec_do*count (boolean_dup_times integer_sub) integer_sub in1 integer_fromboolean integer_yankdup) exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())) ())
Errors: [1 1 0 1 1 0 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 7.889
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.126 1.0 1.0 0.129 1.0 1.0 0.634 1.0)
Error minima by case: (1 1 0 1 1 0 1 1 0 1)
Average genome size in population (length): 33.275
Average program size in population (points): 47.52
Average percent parens in population: 0.294
Minimum age in population: 25.474853515625
Maximum age in population: 30.80064392089844
Average age in population: 29.03413679504395
Median age in population: 29.115478515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 14591972
--- Timings ---
Current time: 1559584452633 milliseconds
Total Time:          67.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.1 seconds, 59.6%
Fitness Testing:     17.2 seconds, 25.5%
Report:               9.9 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 98                 
Correct output: 41                  | Program output: 50                 
Correct output: 49                  | Program output: 49                 
Correct output: 57                  | Program output: 71                 
Correct output: 1                   | Program output: 60                 
Correct output: 2                   | Program output: 51                 
Correct output: 25                  | Program output: 44                 
Correct output: 13                  | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 18                 
Correct output: 41                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 83                 
Correct output: 51                  | Program output: 63                 
Correct output: 30                  | Program output: 89                 
Correct output: 1                   | Program output: 49                 
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: 11                  | Program output: 26                 
Correct output: -98                 | Program output: -52                
Correct output: -81                 | Program output: 47                 
Correct output: -54                 | Program output: 44                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: 5                  
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: -44                
Correct output: -88                 | Program output: 50                 
Correct output: 28                  | Program output: 57                 
Correct output: -99                 | Program output: -69                
Correct output: -97                 | Program output: -33                
Correct output: -76                 | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -27                
Correct output: -47                 | Program output: -38                
Correct output: -67                 | Program output: 26                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 90                 
Correct output: -74                 | Program output: -50                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 32                 
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -44                
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: -46                
Correct output: -49                 | Program output: -49                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -2                 
Correct output: -52                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -34                
Correct output: 42                  | Program output: 42                 
Correct output: -100                | Program output: -100               
Correct output: 32                  | Program output: 99                 
Correct output: -93                 | Program output: 92                 
Correct output: -57                 | Program output: -57                
Correct output: -31                 | Program output: 31                 
Correct output: -23                 | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: 79                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -81                
Correct output: -5                  | Program output: 84                 
Correct output: -54                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 84                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Lexicase best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (boolean_dup_times integer_sub) exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte))
Lexicase best errors: [1 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Zero cases best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (boolean_dup_times integer_sub) exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte))
Zero cases best errors: [1 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1 865 856 11 1000 855 863 853 1)
Population mean number of elite cases: 6.30
Count of perfect (error zero) individuals by case: (0 1 865 856 11 0 855 863 853 1)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (boolean_dup_times integer_sub) exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte))
Errors: [1 1 0 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 32
Size: 40
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.695
Median total errors in population: 5
Error averages by case: (1.0 0.999 0.135 0.144 0.989 1.0 0.145 0.137 0.147 0.999)
Error minima by case: (1 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 31.346
Average program size in population (points): 42.837
Average percent parens in population: 0.262
Minimum age in population: 28.59884071350098
Maximum age in population: 32.40734100341797
Average age in population: 30.79219795417786
Median age in population: 30.82806587219238
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 15195888
--- Timings ---
Current time: 1559584455355 milliseconds
Total Time:          70.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.9 seconds, 59.5%
Fitness Testing:     17.8 seconds, 25.2%
Report:              10.6 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 83                 
Correct output: 41                  | Program output: 83                 
Correct output: 49                  | Program output: 75                 
Correct output: 57                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 46                 
Correct output: 0                   | Program output: 23                 
Correct output: 8                   | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 72                 
Correct output: 2                   | Program output: 95                 
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 67                 
Correct output: 62                  | Program output: 76                 
Correct output: 11                  | Program output: 80                 
Correct output: -98                 | Program output: -93                
Correct output: -81                 | Program output: 8                  
Correct output: -54                 | Program output: 99                 
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 69                 
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: 45                 
Correct output: -97                 | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 41                 
Correct output: -62                 | Program output: -62                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -9                 
Correct output: -54                 | Program output: -10                
Correct output: -51                 | Program output: 26                 
Correct output: -74                 | Program output: 95                 
Correct output: -63                 | Program output: -29                
Correct output: -96                 | Program output: -6                 
Correct output: -97                 | Program output: -66                
Correct output: -50                 | Program output: -50                
Correct output: -23                 | Program output: 67                 
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -39                
Correct output: -94                 | Program output: 78                 
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -69                
Correct output: -50                 | Program output: 17                 
Correct output: -65                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -15                
Correct output: 42                  | Program output: 82                 
Correct output: -100                | Program output: 84                 
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 45                 
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: 66                 
Correct output: -94                 | Program output: 68                 
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: 89                 
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: 51                 
Correct output: -17                 | Program output: -3                 
Correct output: -70                 | Program output: 23                 
Correct output: -92                 | Program output: -59                
Correct output: -5                  | Program output: 71                 
Correct output: -54                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -83                 | Program output: -54                
Correct output: -47                 | Program output: 99                 
Correct output: 49                  | Program output: 88                 
Correct output: -81                 | Program output: -52                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times integer_gt integer_sub in1 integer_fromboolean integer_yankdup exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())
Lexicase best errors: [0 0 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 34
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times integer_gt integer_sub in1 integer_fromboolean integer_yankdup exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())
Zero cases best errors: [0 0 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 34
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 837 837 852 16 597 2 1 614 616)
Population mean number of elite cases: 4.37
Count of perfect (error zero) individuals by case: (1 837 837 852 16 597 2 1 614 616)
Population mean number of perfect (error zero) cases: 4.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times integer_gt integer_sub in1 integer_fromboolean integer_yankdup exec_rot () (exec_stackdepth exec_y (integer_gte integer_mod exec_swap (print_integer exec_dup () exec_stackdepth exec_y_when_autoconstructing (exec_noop integer_gt boolean_dup_times)) ())) ())
Errors: [0 0 0 0 1 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 25
Size: 34
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 5.627
Median total errors in population: 4
Error averages by case: (0.999 0.163 0.163 0.148 0.984 0.403 0.998 0.999 0.386 0.384)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.986
Average program size in population (points): 38.513
Average percent parens in population: 0.223
Minimum age in population: 31.04749298095703
Maximum age in population: 33.10894393920898
Average age in population: 31.87076070022583
Median age in population: 32.04749298095703
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 417
Genome diversity (% unique genomes):	 0.384
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 430
Syntactic diversity (% unique Push programs):	 0.362
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 15842471
--- Timings ---
Current time: 1559584458525 milliseconds
Total Time:          73.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.8 seconds, 59.8%
Fitness Testing:     18.4 seconds, 25.2%
Report:              10.9 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 98                 
Correct output: 41                  | Program output: 50                 
Correct output: 49                  | Program output: 49                 
Correct output: 57                  | Program output: 71                 
Correct output: 1                   | Program output: 60                 
Correct output: 2                   | Program output: 51                 
Correct output: 25                  | Program output: 44                 
Correct output: 13                  | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 18                 
Correct output: 41                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 83                 
Correct output: 51                  | Program output: 63                 
Correct output: 30                  | Program output: 89                 
Correct output: 1                   | Program output: 49                 
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: 11                  | Program output: 26                 
Correct output: -98                 | Program output: -52                
Correct output: -81                 | Program output: 47                 
Correct output: -54                 | Program output: 44                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: 5                  
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: -44                
Correct output: -88                 | Program output: 50                 
Correct output: 28                  | Program output: 57                 
Correct output: -99                 | Program output: -69                
Correct output: -97                 | Program output: -33                
Correct output: -76                 | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -27                
Correct output: -47                 | Program output: -38                
Correct output: -67                 | Program output: 26                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 90                 
Correct output: -74                 | Program output: -50                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 32                 
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -44                
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: -46                
Correct output: -49                 | Program output: -49                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -2                 
Correct output: -52                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -34                
Correct output: 42                  | Program output: 42                 
Correct output: -100                | Program output: -100               
Correct output: 32                  | Program output: 99                 
Correct output: -93                 | Program output: 92                 
Correct output: -57                 | Program output: -57                
Correct output: -31                 | Program output: 31                 
Correct output: -23                 | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: 79                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -81                
Correct output: -5                  | Program output: 84                 
Correct output: -54                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 84                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Lexicase best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (boolean_dup_times integer_sub) exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte))
Lexicase best errors: [0 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Zero cases best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (boolean_dup_times integer_sub) exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte))
Zero cases best errors: [0 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 258 258 454 454 255 369 1000 1000 1000)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (255 258 258 454 454 255 369 0 0 0)
Population mean number of perfect (error zero) cases: 2.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Best program: (in4 boolean_stackdepth boolean_dup in2 integer_mult exec_do*count (boolean_dup_times integer_sub) exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte))
Errors: [0 0 0 1 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 40
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.697
Median total errors in population: 8
Error averages by case: (0.745 0.742 0.742 0.546 0.546 0.745 0.631 1.0 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 1 1)
Average genome size in population (length): 27.527
Average program size in population (points): 35.973
Average percent parens in population: 0.237
Minimum age in population: 32.04749298095703
Maximum age in population: 34.57821846008301
Average age in population: 33.67903438568115
Median age in population: 33.57821846008301
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 358
Genome diversity (% unique genomes):	 0.405
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 378
Syntactic diversity (% unique Push programs):	 0.378
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 16697545
--- Timings ---
Current time: 1559584461573 milliseconds
Total Time:          76.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.8 seconds, 59.7%
Fitness Testing:     19.3 seconds, 25.2%
Report:              11.5 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 83                 
Correct output: 41                  | Program output: 83                 
Correct output: 49                  | Program output: 75                 
Correct output: 57                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 46                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 72                 
Correct output: 2                   | Program output: 95                 
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 67                 
Correct output: 62                  | Program output: 76                 
Correct output: 11                  | Program output: 80                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: 8                  
Correct output: -54                 | Program output: 99                 
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -42                
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: 69                 
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: 45                 
Correct output: -97                 | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -9                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 67                 
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 82                 
Correct output: -100                | Program output: 84                 
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: 66                 
Correct output: -94                 | Program output: 68                 
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: 71                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 88                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times integer_gt integer_sub in1 integer_fromboolean in1 boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte))
Lexicase best errors: [1 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.129
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times integer_gt integer_sub in1 integer_fromboolean in1 boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte))
Zero cases best errors: [1 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.129
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 580 875 210 1 1 571 485 199 465)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (1 580 875 210 1 1 571 485 199 465)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times integer_gt integer_sub in1 integer_fromboolean in1 boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte))
Errors: [1 0 0 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 31
Percent parens: 0.129
--- Population Statistics ---
Average total errors in population: 6.612
Median total errors in population: 6
Error averages by case: (0.999 0.42 0.125 0.79 0.999 0.999 0.429 0.515 0.801 0.535)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.942
Average program size in population (points): 38.024
Average percent parens in population: 0.184
Minimum age in population: 33.04749298095703
Maximum age in population: 36.57821846008301
Average age in population: 34.9066560049057
Median age in population: 34.93017435073853
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.441
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.414
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 17027371
--- Timings ---
Current time: 1559584464417 milliseconds
Total Time:          79.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.1 seconds, 60.4%
Fitness Testing:     19.6 seconds, 24.7%
Report:              11.8 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 83                 
Correct output: 41                  | Program output: 83                 
Correct output: 49                  | Program output: 75                 
Correct output: 57                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 46                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 72                 
Correct output: 2                   | Program output: 95                 
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 67                 
Correct output: 62                  | Program output: 76                 
Correct output: 11                  | Program output: 80                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: 8                  
Correct output: -54                 | Program output: 99                 
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -42                
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: 69                 
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: 45                 
Correct output: -97                 | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -9                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 67                 
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 82                 
Correct output: -100                | Program output: 84                 
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: 66                 
Correct output: -94                 | Program output: 68                 
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: 71                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 88                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times integer_gt integer_sub integer_sub in1 integer_fromboolean in1 boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times integer_gt integer_sub integer_sub in1 integer_fromboolean in1 boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (413 531 358 468 448 293 221 359 293 323)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (413 531 358 468 448 293 221 359 293 323)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times integer_gt integer_sub in1 integer_fromboolean in1 boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte))
Errors: [0 0 0 0 1 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 27
Size: 31
Percent parens: 0.129
--- Population Statistics ---
Average total errors in population: 6.293
Median total errors in population: 7
Error averages by case: (0.587 0.469 0.642 0.532 0.552 0.707 0.779 0.641 0.707 0.677)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.851
Average program size in population (points): 41.527
Average percent parens in population: 0.178
Minimum age in population: 34.04749298095703
Maximum age in population: 38.06285572052002
Average age in population: 36.59276789689064
Median age in population: 36.56285572052002
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 206
Genome diversity (% unique genomes):	 0.491
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.007
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 17390685
--- Timings ---
Current time: 1559584466913 milliseconds
Total Time:          82.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.0 seconds, 60.9%
Fitness Testing:     20.0 seconds, 24.4%
Report:              12.0 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 0                  
Correct output: 2                   | Program output: 33                 
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 70                 
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 98                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 87                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 78                 
Correct output: -62                 | Program output: -62                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -9                 
Correct output: -54                 | Program output: -10                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: -29                
Correct output: -96                 | Program output: -6                 
Correct output: -97                 | Program output: -66                
Correct output: -50                 | Program output: -50                
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -69                
Correct output: -50                 | Program output: 21                 
Correct output: -65                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -15                
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 91                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: 25                 
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: 74                 
Correct output: -17                 | Program output: -3                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -59                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: 28                 
Correct output: -85                 | Program output: 61                 
Correct output: -83                 | Program output: -54                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -52                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_dec integer_dup_times boolean_dup in2 integer_mod exec_noop boolean_dup_times integer_gt integer_sub exec_do*count (exec_eq) exec_when (boolean_yank in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte)) () ())
Lexicase best errors: [0 0 1 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_dec integer_dup_times boolean_dup in2 integer_mod exec_noop boolean_dup_times integer_gt integer_sub exec_do*count (exec_eq) exec_when (boolean_yank in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte)) () ())
Zero cases best errors: [0 0 1 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (683 73 50 917 117 8 161 186 154 9)
Population mean number of elite cases: 2.36
Count of perfect (error zero) individuals by case: (683 73 50 917 117 8 161 186 154 9)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Best program: (integer_dec integer_dup_times boolean_dup in2 integer_mod exec_noop boolean_dup_times integer_gt integer_sub exec_do*count (exec_eq) exec_when (boolean_yank in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte)) () ())
Errors: [0 0 1 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 48
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 7.642
Median total errors in population: 8
Error averages by case: (0.317 0.927 0.95 0.083 0.883 0.992 0.839 0.814 0.846 0.991)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.349
Average program size in population (points): 37.609
Average percent parens in population: 0.161
Minimum age in population: 35.04749298095703
Maximum age in population: 39.62535572052002
Average age in population: 38.12581949877739
Median age in population: 38.18785572052002
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 173
Genome diversity (% unique genomes):	 0.539
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 17710581
--- Timings ---
Current time: 1559584469393 milliseconds
Total Time:          84.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.9 seconds, 61.4%
Fitness Testing:     20.3 seconds, 24.0%
Report:              12.2 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: 92                 
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 6                  
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 64                 
Correct output: 57                  | Program output: 97                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 7                  
Correct output: 25                  | Program output: 100                
Correct output: 13                  | Program output: 28                 
Correct output: 0                   | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 43                 
Correct output: 48                  | Program output: 54                 
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 58                 
Correct output: 30                  | Program output: 86                 
Correct output: 1                   | Program output: 50                 
Correct output: 9                   | Program output: 43                 
Correct output: 32                  | Program output: 95                 
Correct output: 62                  | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: 51                 
Correct output: -54                 | Program output: 90                 
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -44                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 86                 
Correct output: -99                 | Program output: -69                
Correct output: -97                 | Program output: -33                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: 91                 
Correct output: -62                 | Program output: 41                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: 36                 
Correct output: -51                 | Program output: 98                 
Correct output: -74                 | Program output: -50                
Correct output: -63                 | Program output: 90                 
Correct output: -96                 | Program output: 48                 
Correct output: -97                 | Program output: 46                 
Correct output: -50                 | Program output: 48                 
Correct output: -23                 | Program output: 73                 
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: 50                 
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: 16                 
Correct output: 42                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: 32                  | Program output: 54                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -57                
Correct output: -31                 | Program output: 92                 
Correct output: -23                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 74                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: 73                 
Correct output: -17                 | Program output: 55                 
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: 6                  
Correct output: -54                 | Program output: -21                
Correct output: -85                 | Program output: 36                 
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: 55                 
Correct output: 49                  | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Lexicase best program: (in4 boolean_stackdepth boolean_dup in2 exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 exec_do*count (boolean_dup_times integer_sub) exec_do*count (exec_eq)) exec_when (boolean_yank in3 integer_empty) exec_when (integer_inc in1 in4 integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte)) () ())
Lexicase best errors: [0 0 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Zero cases best program: (in4 boolean_stackdepth boolean_dup in2 exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 exec_do*count (boolean_dup_times integer_sub) exec_do*count (exec_eq)) exec_when (boolean_yank in3 integer_empty) exec_when (integer_inc in1 in4 integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte)) () ())
Zero cases best errors: [0 0 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (450 266 6 283 15 449 590 14 265 878)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (450 266 6 283 15 449 590 14 265 878)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Best program: (in4 boolean_stackdepth boolean_dup in2 exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 exec_do*count (boolean_dup_times integer_sub) exec_do*count (exec_eq)) exec_when (boolean_yank in3 integer_empty) exec_when (integer_inc in1 in4 integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte)) () ())
Errors: [0 0 1 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 45
Size: 59
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 6.784
Median total errors in population: 7
Error averages by case: (0.55 0.734 0.994 0.717 0.985 0.551 0.41 0.986 0.735 0.122)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.226
Average program size in population (points): 45.59
Average percent parens in population: 0.204
Minimum age in population: 37.31285572052002
Maximum age in population: 41.26310020685196
Average age in population: 39.71319928473234
Median age in population: 39.76117986440659
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.5
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 18067833
--- Timings ---
Current time: 1559584471918 milliseconds
Total Time:          87.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.8 seconds, 61.9%
Fitness Testing:     20.6 seconds, 23.7%
Report:              12.4 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 531
Test mean error for best: 0.53100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 6                  
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 64                 
Correct output: 57                  | Program output: 97                 
Correct output: 1                   | Program output: 0                  
Correct output: 2                   | Program output: 7                  
Correct output: 25                  | Program output: 100                
Correct output: 13                  | Program output: 28                 
Correct output: 0                   | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 43                 
Correct output: 48                  | Program output: 54                 
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 58                 
Correct output: 30                  | Program output: 86                 
Correct output: 1                   | Program output: 50                 
Correct output: 9                   | Program output: 43                 
Correct output: 32                  | Program output: 95                 
Correct output: 62                  | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -93                
Correct output: -81                 | Program output: 51                 
Correct output: -54                 | Program output: 90                 
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -44                
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 86                 
Correct output: -99                 | Program output: -69                
Correct output: -97                 | Program output: -33                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 91                 
Correct output: -62                 | Program output: -62                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -9                 
Correct output: -54                 | Program output: -10                
Correct output: -51                 | Program output: 98                 
Correct output: -74                 | Program output: -50                
Correct output: -63                 | Program output: -29                
Correct output: -96                 | Program output: -6                 
Correct output: -97                 | Program output: -66                
Correct output: -50                 | Program output: -50                
Correct output: -23                 | Program output: 73                 
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -39                
Correct output: -94                 | Program output: 50                 
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -69                
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -15                
Correct output: 42                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: 32                  | Program output: 54                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 74                 
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: 73                 
Correct output: -17                 | Program output: -3                 
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -59                
Correct output: -5                  | Program output: 6                  
Correct output: -54                 | Program output: -21                
Correct output: -85                 | Program output: 36                 
Correct output: -83                 | Program output: -54                
Correct output: -47                 | Program output: 55                 
Correct output: 49                  | Program output: 49                 
Correct output: -81                 | Program output: -52                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Lexicase best program: (in4 boolean_stackdepth boolean_dup in2 exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 exec_do*count (boolean_dup_times integer_sub) in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ())
Lexicase best errors: [0 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Zero cases best program: (in4 boolean_stackdepth boolean_dup in2 exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 exec_do*count (boolean_dup_times integer_sub) in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ())
Zero cases best errors: [0 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (246 26 8 332 11 247 547 865 339 247)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (246 26 8 332 11 247 547 865 339 247)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Best program: (in4 boolean_stackdepth boolean_dup in2 exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ())
Errors: [0 0 1 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 51
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 7.132
Median total errors in population: 6
Error averages by case: (0.754 0.974 0.992 0.668 0.989 0.753 0.453 0.135 0.661 0.753)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.229
Average program size in population (points): 56.376
Average percent parens in population: 0.232
Minimum age in population: 39.36383366584778
Maximum age in population: 42.82560020685196
Average age in population: 41.56243115863204
Median age in population: 41.54976227879524
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 210
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 213
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 18448883
--- Timings ---
Current time: 1559584474686 milliseconds
Total Time:          89.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.9 seconds, 62.3%
Fitness Testing:     21.0 seconds, 23.4%
Report:              12.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 540
Test mean error for best: 0.54000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 83                 
Correct output: 41                  | Program output: 83                 
Correct output: 49                  | Program output: 75                 
Correct output: 57                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 46                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 72                 
Correct output: 2                   | Program output: 95                 
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 67                 
Correct output: 62                  | Program output: 76                 
Correct output: 11                  | Program output: 80                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: 8                  
Correct output: -54                 | Program output: 99                 
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -42                
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: 69                 
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: 45                 
Correct output: -97                 | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -9                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 67                 
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 82                 
Correct output: -100                | Program output: 84                 
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: 66                 
Correct output: -94                 | Program output: 68                 
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: 71                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 88                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte)) () ()) () ())
Lexicase best errors: [0 0 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 59
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not integer_lte)) () ()) () ())
Zero cases best errors: [0 0 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 59
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (66 64 348 64 375 115 552 510 348 349)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (66 64 348 64 375 115 552 510 348 349)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ())
Errors: [0 0 0 1 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 44
Size: 59
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 7.209
Median total errors in population: 7
Error averages by case: (0.934 0.936 0.652 0.936 0.625 0.885 0.448 0.49 0.652 0.651)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.685
Average program size in population (points): 56.985
Average percent parens in population: 0.251
Minimum age in population: 41.38137900829315
Maximum age in population: 44.32542572915554
Average age in population: 43.18603896659613
Median age in population: 43.14063176512718
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.547
Total error diversity:				 0.006
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 18857428
--- Timings ---
Current time: 1559584477384 milliseconds
Total Time:          92.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.9 seconds, 62.7%
Fitness Testing:     21.4 seconds, 23.2%
Report:              13.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 6                  
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 64                 
Correct output: 57                  | Program output: 97                 
Correct output: 1                   | Program output: 98                 
Correct output: 2                   | Program output: 7                  
Correct output: 25                  | Program output: 100                
Correct output: 13                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 43                 
Correct output: 48                  | Program output: 54                 
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 58                 
Correct output: 30                  | Program output: 86                 
Correct output: 1                   | Program output: 50                 
Correct output: 9                   | Program output: 43                 
Correct output: 32                  | Program output: 95                 
Correct output: 62                  | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: 51                 
Correct output: -54                 | Program output: 90                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: 100                
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: -44                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 86                 
Correct output: -99                 | Program output: -69                
Correct output: -97                 | Program output: -33                
Correct output: -76                 | Program output: 93                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: -38                
Correct output: -67                 | Program output: 95                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 98                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: -46                
Correct output: -49                 | Program output: -49                
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: 32                  | Program output: 54                 
Correct output: -93                 | Program output: 70                 
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: 46                 
Correct output: -23                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: 6                  
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 49                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Lexicase best program: (in4 boolean_stackdepth in3 integer_empty exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) exec_noop boolean_dup_times integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 65
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Zero cases best program: (in4 boolean_stackdepth in3 integer_empty exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) exec_noop boolean_dup_times integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 65
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (626 534 627 158 631 626 627 866 74 824)
Population mean number of elite cases: 5.59
Count of perfect (error zero) individuals by case: (626 534 627 158 631 626 627 866 74 824)
Population mean number of perfect (error zero) cases: 5.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Best program: (in4 boolean_stackdepth boolean_dup in2 integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ())
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 41
Size: 56
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 4.407
Median total errors in population: 3
Error averages by case: (0.374 0.466 0.373 0.842 0.369 0.374 0.373 0.134 0.926 0.176)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.563
Average program size in population (points): 59.594
Average percent parens in population: 0.252
Minimum age in population: 42.77392435073853
Maximum age in population: 46.29002943634987
Average age in population: 44.63074520725757
Median age in population: 44.7061650827527
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 19257732
--- Timings ---
Current time: 1559584480012 milliseconds
Total Time:          95.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.8 seconds, 63.0%
Fitness Testing:     21.8 seconds, 23.0%
Report:              13.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 531
Test mean error for best: 0.53100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 6                  
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 64                 
Correct output: 57                  | Program output: 97                 
Correct output: 1                   | Program output: 0                  
Correct output: 2                   | Program output: 7                  
Correct output: 25                  | Program output: 100                
Correct output: 13                  | Program output: 28                 
Correct output: 0                   | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 43                 
Correct output: 48                  | Program output: 54                 
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 58                 
Correct output: 30                  | Program output: 86                 
Correct output: 1                   | Program output: 50                 
Correct output: 9                   | Program output: 43                 
Correct output: 32                  | Program output: 95                 
Correct output: 62                  | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -93                
Correct output: -81                 | Program output: 51                 
Correct output: -54                 | Program output: 90                 
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -44                
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 86                 
Correct output: -99                 | Program output: -69                
Correct output: -97                 | Program output: -33                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 91                 
Correct output: -62                 | Program output: -62                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -9                 
Correct output: -54                 | Program output: -10                
Correct output: -51                 | Program output: 98                 
Correct output: -74                 | Program output: -50                
Correct output: -63                 | Program output: -29                
Correct output: -96                 | Program output: -6                 
Correct output: -97                 | Program output: -66                
Correct output: -50                 | Program output: -50                
Correct output: -23                 | Program output: 73                 
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -39                
Correct output: -94                 | Program output: 50                 
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -69                
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -15                
Correct output: 42                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: 32                  | Program output: 54                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 74                 
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: 73                 
Correct output: -17                 | Program output: -3                 
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -59                
Correct output: -5                  | Program output: 6                  
Correct output: -54                 | Program output: -21                
Correct output: -85                 | Program output: 36                 
Correct output: -83                 | Program output: -54                
Correct output: -47                 | Program output: 55                 
Correct output: 49                  | Program output: 49                 
Correct output: -81                 | Program output: -52                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Lexicase best program: (in4 boolean_stackdepth boolean_dup in2 exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 exec_do*count (boolean_dup_times integer_sub) in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ())
Lexicase best errors: [1 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 56
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Zero cases best program: (in4 boolean_stackdepth boolean_dup in2 exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 exec_do*count (boolean_dup_times integer_sub) in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ())
Zero cases best errors: [1 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 56
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (55 826 288 516 36 839 521 791 292 292)
Population mean number of elite cases: 4.46
Count of perfect (error zero) individuals by case: (55 826 288 516 36 839 521 791 292 292)
Population mean number of perfect (error zero) cases: 4.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Best program: (in4 boolean_stackdepth boolean_dup in2 exec_do*count (exec_eq) exec_when (boolean_yank boolean_frominteger integer_empty) exec_when (integer_inc in1 exec_do*count (boolean_dup_times integer_sub) in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ()) () ())
Errors: [1 0 1 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 46
Size: 63
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 5.544
Median total errors in population: 5
Error averages by case: (0.945 0.174 0.712 0.484 0.964 0.161 0.479 0.209 0.708 0.708)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.353
Average program size in population (points): 59.621
Average percent parens in population: 0.256
Minimum age in population: 43.77392435073853
Maximum age in population: 47.60802874714136
Average age in population: 45.88154887146875
Median age in population: 45.91247620433569
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 19681736
--- Timings ---
Current time: 1559584482723 milliseconds
Total Time:          97.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.8 seconds, 63.3%
Fitness Testing:     22.3 seconds, 22.8%
Report:              13.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 33                 
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 98                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 87                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 91                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Lexicase best program: (in4 boolean_stackdepth in3 integer_empty exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) exec_noop boolean_dup_times integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ())
Lexicase best errors: [0 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 76
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Zero cases best program: (in4 boolean_stackdepth in3 integer_empty exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) exec_noop boolean_dup_times integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ())
Zero cases best errors: [0 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 76
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (143 141 504 141 862 440 417 77 173 191)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (143 141 504 141 862 440 417 77 173 191)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) exec_noop boolean_dup_times integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ())
Errors: [0 0 0 0 0 1 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 70
Size: 92
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 6.911
Median total errors in population: 7
Error averages by case: (0.857 0.859 0.496 0.859 0.138 0.56 0.583 0.923 0.827 0.809)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.581
Average program size in population (points): 57.107
Average percent parens in population: 0.253
Minimum age in population: 44.77392435073853
Maximum age in population: 49.38473418913782
Average age in population: 47.48033663039654
Median age in population: 47.57500565424562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.007
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 20075963
--- Timings ---
Current time: 1559584485462 milliseconds
Total Time:         100.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.8 seconds, 63.5%
Fitness Testing:     22.7 seconds, 22.6%
Report:              13.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 600
Test mean error for best: 0.60000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: 98                 
Correct output: -46                 | Program output: 46                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 6                  
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 64                 
Correct output: 57                  | Program output: 97                 
Correct output: 1                   | Program output: 98                 
Correct output: 2                   | Program output: 7                  
Correct output: 25                  | Program output: 100                
Correct output: 13                  | Program output: 28                 
Correct output: 0                   | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 43                 
Correct output: 48                  | Program output: 54                 
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 58                 
Correct output: 30                  | Program output: 86                 
Correct output: 1                   | Program output: 49                 
Correct output: 9                   | Program output: 43                 
Correct output: 32                  | Program output: 95                 
Correct output: 62                  | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 50                 
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 86                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 93                 
Correct output: -10                 | Program output: 91                 
Correct output: -62                 | Program output: -27                
Correct output: -47                 | Program output: -38                
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: 66                 
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -50                
Correct output: -63                 | Program output: 86                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: 30                 
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -44                
Correct output: -94                 | Program output: 50                 
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: -49                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -2                 
Correct output: -52                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -34                
Correct output: 42                  | Program output: 51                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 54                 
Correct output: -93                 | Program output: 70                 
Correct output: -57                 | Program output: -57                
Correct output: -31                 | Program output: 46                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 74                 
Correct output: -59                 | Program output: 70                 
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: 64                 
Correct output: -77                 | Program output: 73                 
Correct output: -17                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -81                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: -21                
Correct output: -85                 | Program output: 36                 
Correct output: -83                 | Program output: 89                 
Correct output: -47                 | Program output: 55                 
Correct output: 49                  | Program output: 49                 
Correct output: -81                 | Program output: 18                 
Correct output: -85                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Lexicase best program: (in4 boolean_stackdepth boolean_dup in2 integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq in3 integer_dup) boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove) () ())
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 40
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Zero cases best program: (in4 boolean_stackdepth boolean_dup in2 integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq in3 integer_dup) boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove) () ())
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 40
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (272 179 176 469 3 240 179 449 176 471)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (272 179 176 469 3 240 179 449 176 471)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (in4 boolean_stackdepth boolean_dup in2 integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq in3 integer_dup) boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove) () ())
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 7.386
Median total errors in population: 7
Error averages by case: (0.728 0.821 0.824 0.531 0.997 0.76 0.821 0.551 0.824 0.529)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.039
Average program size in population (points): 57.813
Average percent parens in population: 0.255
Minimum age in population: 45.77392435073853
Maximum age in population: 50.63229278288782
Average age in population: 48.98594707800541
Median age in population: 48.97765220096335
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.009
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 20451405
--- Timings ---
Current time: 1559584488041 milliseconds
Total Time:         103.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.7 seconds, 63.8%
Fitness Testing:     23.0 seconds, 22.3%
Report:              14.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 495
Test mean error for best: 0.49500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 6                  
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 64                 
Correct output: 57                  | Program output: 97                 
Correct output: 1                   | Program output: 98                 
Correct output: 2                   | Program output: 7                  
Correct output: 25                  | Program output: 100                
Correct output: 13                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 43                 
Correct output: 48                  | Program output: 54                 
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 58                 
Correct output: 30                  | Program output: 86                 
Correct output: 1                   | Program output: 49                 
Correct output: 9                   | Program output: 43                 
Correct output: 32                  | Program output: 95                 
Correct output: 62                  | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 86                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 93                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: -38                
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: -49                
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 51                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 54                 
Correct output: -93                 | Program output: 70                 
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: 46                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 49                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Lexicase best program: (in4 boolean_stackdepth boolean_dup in2 integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 in3 integer_empty) exec_when (integer_inc in1 boolean_eq exec_do*times () boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_flush integer_shove integer_gt boolean_rot exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ())
Lexicase best errors: [1 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 67
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove})
Zero cases best program: (in4 boolean_stackdepth boolean_dup in2 integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 in3 integer_empty) exec_when (integer_inc in1 boolean_eq exec_do*times () boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_flush integer_shove integer_gt boolean_rot exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove integer_gt boolean_dup_times exec_s (boolean_yank integer_yankdup) () (integer_lte boolean_not boolean_shove)) () ()) () ())
Zero cases best errors: [1 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 67
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 68 95 890 491 99 611 137 68 491)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (6 68 95 890 491 99 611 137 68 491)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (in4 boolean_stackdepth boolean_dup in2 integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 integer_empty) exec_when (integer_inc in1 boolean_eq in3 integer_dup boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove) () ())
Errors: [1 0 1 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 7.044
Median total errors in population: 6
Error averages by case: (0.994 0.932 0.905 0.11 0.509 0.901 0.389 0.863 0.932 0.509)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.68
Average program size in population (points): 49.728
Average percent parens in population: 0.239
Minimum age in population: 49.00782468356192
Maximum age in population: 52.01487614493817
Average age in population: 50.4364744865438
Median age in population: 50.57285204203799
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 318
Genome diversity (% unique genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 334
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 20774595
--- Timings ---
Current time: 1559584490609 milliseconds
Total Time:         105.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.7 seconds, 64.1%
Fitness Testing:     23.4 seconds, 22.1%
Report:              14.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 555
Test mean error for best: 0.55500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 83                 
Correct output: 41                  | Program output: 83                 
Correct output: 49                  | Program output: 75                 
Correct output: 57                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 46                 
Correct output: 0                   | Program output: 23                 
Correct output: 8                   | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 72                 
Correct output: 2                   | Program output: 95                 
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 67                 
Correct output: 62                  | Program output: 76                 
Correct output: 11                  | Program output: 80                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 41                 
Correct output: -62                 | Program output: -62                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: -10                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: -29                
Correct output: -96                 | Program output: -6                 
Correct output: -97                 | Program output: -66                
Correct output: -50                 | Program output: -50                
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 17                 
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -15                
Correct output: 42                  | Program output: 82                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 68                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 27                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: 89                 
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: 51                 
Correct output: -17                 | Program output: -3                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times in3 integer_dup boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove) () ())
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 25
Percent parens: 0.160
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times in3 integer_dup boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove) () ())
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 25
Percent parens: 0.160
--- Lexicase Population Statistics ---
Count of elite individuals by case: (129 266 266 109 650 131 692 46 266 543)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (129 266 266 109 650 131 692 46 266 543)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove})
Best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times in3 integer_dup boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove) () ())
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 21
Size: 25
Percent parens: 0.160
--- Population Statistics ---
Average total errors in population: 6.902
Median total errors in population: 8
Error averages by case: (0.871 0.734 0.734 0.891 0.35 0.869 0.308 0.954 0.734 0.457)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.728
Average program size in population (points): 45.842
Average percent parens in population: 0.236
Minimum age in population: 50.00782468356192
Maximum age in population: 53.7168547778856
Average age in population: 52.31258206098736
Median age in population: 52.43295162392315
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 21092845
--- Timings ---
Current time: 1559584493100 milliseconds
Total Time:         108.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.7 seconds, 64.4%
Fitness Testing:     23.7 seconds, 21.9%
Report:              14.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 552
Test mean error for best: 0.55200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 98                 
Correct output: 41                  | Program output: 50                 
Correct output: 49                  | Program output: 49                 
Correct output: 57                  | Program output: 71                 
Correct output: 1                   | Program output: 60                 
Correct output: 2                   | Program output: 51                 
Correct output: 25                  | Program output: 44                 
Correct output: 13                  | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 18                 
Correct output: 41                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 83                 
Correct output: 51                  | Program output: 63                 
Correct output: 30                  | Program output: 89                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: 11                  | Program output: 26                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 42                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 50                 
Correct output: 28                  | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: 60                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 81                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 68                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: 17                 
Correct output: -33                 | Program output: 11                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 42                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 99                 
Correct output: -93                 | Program output: 92                 
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: 31                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 11                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: 79                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 84                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_dec integer_dup_times exec_when (integer_inc in1 in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_empty) exec_when (exec_eq) exec_when (boolean_yank) in3 boolean_rot boolean_eq in3 integer_dup boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove) () ())
Lexicase best errors: [0 0 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 41
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_dec integer_dup_times exec_when (integer_inc in1 in3 integer_empty) exec_when (integer_inc in1 boolean_eq integer_empty) exec_when (exec_eq) exec_when (boolean_yank) in3 boolean_rot boolean_eq in3 integer_dup boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove) () ())
Zero cases best errors: [0 0 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 41
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (123 891 761 882 11 123 831 82 8 73)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (123 891 761 882 11 123 831 82 8 73)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (in1 in3 integer_empty exec_when (integer_inc in1 boolean_eq integer_empty) exec_when (exec_eq) exec_when (boolean_yank) in3 integer_empty boolean_eq in3 integer_dup boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove) () ())
Errors: [0 0 0 0 1 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 36
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 6.215
Median total errors in population: 6
Error averages by case: (0.877 0.109 0.239 0.118 0.989 0.877 0.169 0.918 0.992 0.927)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.981
Average program size in population (points): 33.157
Average percent parens in population: 0.179
Minimum age in population: 52.57285204203799
Maximum age in population: 55.46716370433569
Average age in population: 53.92329963196989
Median age in population: 54.02000787318684
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 346
Genome diversity (% unique genomes):	 0.389
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 395
Syntactic diversity (% unique Push programs):	 0.351
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 21386323
--- Timings ---
Current time: 1559584495527 milliseconds
Total Time:         110.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.6 seconds, 64.7%
Fitness Testing:     24.0 seconds, 21.7%
Report:              14.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 540
Test mean error for best: 0.54000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 83                 
Correct output: 41                  | Program output: 83                 
Correct output: 49                  | Program output: 75                 
Correct output: 57                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 46                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 72                 
Correct output: 2                   | Program output: 95                 
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 67                 
Correct output: 62                  | Program output: 76                 
Correct output: 11                  | Program output: 80                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: 8                  
Correct output: -54                 | Program output: 99                 
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -42                
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: 69                 
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: 45                 
Correct output: -97                 | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -9                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 67                 
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 82                 
Correct output: -100                | Program output: 84                 
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: 66                 
Correct output: -94                 | Program output: 68                 
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: 71                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 88                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush})
Lexicase best program: (in4 boolean_stackdepth boolean_dup in2 in2 exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 exec_shove () exec_when (integer_inc in1 boolean_eq integer_empty) exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup print_integer integer_shove integer_dup_times integer_shove integer_gt integer_min exec_s (integer_flush) () ())
Lexicase best errors: [0 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush})
Zero cases best program: (in4 boolean_stackdepth boolean_dup in2 in2 exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 exec_shove () exec_when (integer_inc in1 boolean_eq integer_empty) exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup print_integer integer_shove integer_dup_times integer_shove integer_gt integer_min exec_s (integer_flush) () ())
Zero cases best errors: [0 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (196 577 630 133 282 445 72 830 581 123)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (196 577 630 133 282 445 72 830 581 123)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (in4 boolean_stackdepth integer_eq in2 integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 exec_shove () exec_when (integer_inc in1 boolean_eq integer_empty) exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ())
Errors: [0 1 0 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.131
Median total errors in population: 6
Error averages by case: (0.804 0.423 0.37 0.867 0.718 0.555 0.928 0.17 0.419 0.877)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.619
Average program size in population (points): 40.739
Average percent parens in population: 0.197
Minimum age in population: 53.57285204203799
Maximum age in population: 56.52369964926038
Average age in population: 55.40720014357596
Median age in population: 55.38677153910976
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.439
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.415
Total error diversity:				 0.007
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 21677629
--- Timings ---
Current time: 1559584497997 milliseconds
Total Time:         113.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.6 seconds, 65.1%
Fitness Testing:     24.3 seconds, 21.5%
Report:              15.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 540
Test mean error for best: 0.54000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 83                 
Correct output: 41                  | Program output: 83                 
Correct output: 49                  | Program output: 75                 
Correct output: 57                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 46                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 72                 
Correct output: 2                   | Program output: 95                 
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 67                 
Correct output: 62                  | Program output: 76                 
Correct output: 11                  | Program output: 80                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: 8                  
Correct output: -54                 | Program output: 99                 
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -42                
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: 69                 
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: 45                 
Correct output: -97                 | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -9                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 67                 
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 82                 
Correct output: -100                | Program output: 84                 
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: 66                 
Correct output: -94                 | Program output: 68                 
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: 71                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 88                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush})
Lexicase best program: (in4 boolean_stackdepth boolean_dup in2 in2 exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 exec_shove () exec_when (integer_inc in1 boolean_eq integer_empty) exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup print_integer integer_shove integer_dup_times integer_shove integer_gt integer_min exec_s (integer_flush) () ())
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush})
Zero cases best program: (in4 boolean_stackdepth boolean_dup in2 in2 exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 exec_shove () exec_when (integer_inc in1 boolean_eq integer_empty) exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup print_integer integer_shove integer_dup_times integer_shove integer_gt integer_min exec_s (integer_flush) () ())
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (362 165 610 915 361 106 361 610 798 460)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (362 165 610 915 361 106 361 610 798 460)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (in4 boolean_stackdepth integer_eq in2 integer_gt exec_k (in1 exec_do*count (exec_eq)) (exec_when (boolean_yank) in3 exec_shove () exec_when (integer_inc in1 boolean_eq integer_empty) exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ())
Errors: [0 1 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 5.252
Median total errors in population: 5
Error averages by case: (0.638 0.835 0.39 0.085 0.639 0.894 0.639 0.39 0.202 0.54)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.866
Average program size in population (points): 44.888
Average percent parens in population: 0.199
Minimum age in population: 55.02000787318684
Maximum age in population: 58.45609128015349
Average age in population: 57.08516560057338
Median age in population: 57.08023559418507
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.527
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 21942495
--- Timings ---
Current time: 1559584500455 milliseconds
Total Time:         115.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.6 seconds, 65.4%
Fitness Testing:     24.6 seconds, 21.3%
Report:              15.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 552
Test mean error for best: 0.55200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 83                 
Correct output: 41                  | Program output: 83                 
Correct output: 49                  | Program output: 75                 
Correct output: 57                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 46                 
Correct output: 0                   | Program output: 23                 
Correct output: 8                   | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 72                 
Correct output: 2                   | Program output: 95                 
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 67                 
Correct output: 62                  | Program output: 76                 
Correct output: 11                  | Program output: 80                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 41                 
Correct output: -62                 | Program output: -62                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: -10                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: -29                
Correct output: -96                 | Program output: -6                 
Correct output: -97                 | Program output: -66                
Correct output: -50                 | Program output: -50                
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 17                 
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -15                
Correct output: 42                  | Program output: 82                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 68                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 27                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: 89                 
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: 51                 
Correct output: -17                 | Program output: -3                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 2, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop in1 in3 integer_empty exec_when (integer_inc in1 boolean_eq exec_when () boolean_yank) in3 integer_empty exec_when (integer_inc in1 boolean_eq integer_empty) exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ())
Lexicase best errors: [0 0 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 51
Percent parens: 0.157
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 2, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop in1 in3 integer_empty exec_when (integer_inc in1 boolean_eq exec_when () boolean_yank) in3 integer_empty exec_when (integer_inc in1 boolean_eq integer_empty) exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ())
Zero cases best errors: [0 0 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 51
Percent parens: 0.157
--- Lexicase Population Statistics ---
Count of elite individuals by case: (890 439 176 440 346 478 331 346 882 427)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (890 439 176 440 346 478 331 346 882 427)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (integer_dec integer_dup_times boolean_dup in2 integer_mult exec_noop boolean_dup_times in3 integer_dup integer_lt integer_yank exec_eq exec_when (boolean_yank) in3 integer_empty exec_when (integer_inc in1 boolean_eq integer_empty) exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ())
Errors: [0 0 0 0 1 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 42
Size: 49
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 5.245
Median total errors in population: 5
Error averages by case: (0.11 0.561 0.824 0.56 0.654 0.522 0.669 0.654 0.118 0.573)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.408
Average program size in population (points): 43.714
Average percent parens in population: 0.213
Minimum age in population: 56.02000787318684
Maximum age in population: 60.08613209276518
Average age in population: 58.66008827658959
Median age in population: 58.73393068362202
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.497
Total error diversity:				 0.008
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 22201815
--- Timings ---
Current time: 1559584502911 milliseconds
Total Time:         118.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.5 seconds, 65.7%
Fitness Testing:     24.9 seconds, 21.1%
Report:              15.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 582
Test mean error for best: 0.58200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 83                 
Correct output: 41                  | Program output: 83                 
Correct output: 49                  | Program output: 75                 
Correct output: 57                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 46                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 72                 
Correct output: 2                   | Program output: 95                 
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 67                 
Correct output: 62                  | Program output: 76                 
Correct output: 11                  | Program output: 80                 
Correct output: -98                 | Program output: -93                
Correct output: -81                 | Program output: 8                  
Correct output: -54                 | Program output: 99                 
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 69                 
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: 45                 
Correct output: -97                 | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -9                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 26                 
Correct output: -74                 | Program output: 95                 
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 67                 
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -39                
Correct output: -94                 | Program output: 78                 
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -69                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 82                 
Correct output: -100                | Program output: 84                 
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 45                 
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: 66                 
Correct output: -94                 | Program output: 68                 
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: 23                 
Correct output: -92                 | Program output: -59                
Correct output: -5                  | Program output: 71                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -54                
Correct output: -47                 | Program output: 99                 
Correct output: 49                  | Program output: 88                 
Correct output: -81                 | Program output: -52                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Lexicase best program: (in4 boolean_stackdepth integer_eq in2 integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_shove (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
Lexicase best errors: [0 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 50
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Zero cases best program: (in4 boolean_stackdepth integer_eq in2 integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_shove (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
Zero cases best errors: [0 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 50
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (457 40 463 885 861 318 255 850 12 316)
Population mean number of elite cases: 4.46
Count of perfect (error zero) individuals by case: (457 40 463 885 861 318 255 850 12 316)
Population mean number of perfect (error zero) cases: 4.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt})
Best program: (in4 boolean_stackdepth integer_eq in2 integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_shove (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt) ())
Errors: [0 1 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 35
Size: 43
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 5.543
Median total errors in population: 6
Error averages by case: (0.543 0.96 0.537 0.115 0.139 0.682 0.745 0.15 0.988 0.684)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.127
Average program size in population (points): 44.295
Average percent parens in population: 0.206
Minimum age in population: 57.32654381811153
Maximum age in population: 61.65296475808282
Average age in population: 59.95766162506731
Median age in population: 60.06590710019373
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.531
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 22474961
--- Timings ---
Current time: 1559584505390 milliseconds
Total Time:         120.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.5 seconds, 66.0%
Fitness Testing:     25.2 seconds, 20.9%
Report:              15.7 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 572
Test mean error for best: 0.57200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 6                  
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 64                 
Correct output: 57                  | Program output: 97                 
Correct output: 1                   | Program output: 98                 
Correct output: 2                   | Program output: 7                  
Correct output: 25                  | Program output: 100                
Correct output: 13                  | Program output: 28                 
Correct output: 0                   | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 43                 
Correct output: 48                  | Program output: 54                 
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 58                 
Correct output: 30                  | Program output: 86                 
Correct output: 1                   | Program output: 63                 
Correct output: 9                   | Program output: 43                 
Correct output: 32                  | Program output: 95                 
Correct output: 62                  | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 86                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 93                 
Correct output: -10                 | Program output: 91                 
Correct output: -62                 | Program output: -27                
Correct output: -47                 | Program output: -38                
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: 66                 
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -31                
Correct output: -63                 | Program output: 86                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: 30                 
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: -49                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -32                
Correct output: -52                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -34                
Correct output: 42                  | Program output: 51                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 54                 
Correct output: -93                 | Program output: 70                 
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: 46                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 74                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: 64                 
Correct output: -77                 | Program output: 73                 
Correct output: -17                 | Program output: 25                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: -21                
Correct output: -85                 | Program output: 36                 
Correct output: -83                 | Program output: -73                
Correct output: -47                 | Program output: -15                
Correct output: 49                  | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush})
Lexicase best program: (in4 boolean_stackdepth boolean_dup in2 in2 exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_shove () integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) (boolean_pop integer_yank integer_dup print_integer integer_shove integer_dup_times integer_shove in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup print_integer integer_shove integer_dup_times integer_shove integer_gt integer_min exec_s (integer_flush) () ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 67
Percent parens: 0.164
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush})
Zero cases best program: (in4 boolean_stackdepth boolean_dup in2 in2 exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_shove () integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) (boolean_pop integer_yank integer_dup print_integer integer_shove integer_dup_times integer_shove in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup print_integer integer_shove integer_dup_times integer_shove integer_gt integer_min exec_s (integer_flush) () ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 67
Percent parens: 0.164
--- Lexicase Population Statistics ---
Count of elite individuals by case: (44 137 823 281 419 570 228 137 794 150)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (44 137 823 281 419 570 228 137 794 150)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (in4 boolean_stackdepth boolean_dup in2 in2 exec_k (integer_inc boolean_stackdepth boolean_dup in2 integer_gt) (exec_do*count (in1 exec_do*count (exec_eq)) exec_when (boolean_yank) in3 boolean_rot) boolean_eq in3 integer_dup boolean_eq integer_yank exec_y_when_autoconstructing () print_integer integer_shove boolean_stackdepth integer_shove integer_gt boolean_dup_times exec_s (integer_flush integer_shove) () ())
Errors: [0 0 0 0 1 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 6.417
Median total errors in population: 6
Error averages by case: (0.956 0.863 0.177 0.719 0.581 0.43 0.772 0.863 0.206 0.85)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.564
Average program size in population (points): 49.546
Average percent parens in population: 0.219
Minimum age in population: 59.89315638243716
Maximum age in population: 63.08761319646874
Average age in population: 61.5262302299254
Median age in population: 61.72473142448871
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.492
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.479
Total error diversity:				 0.009
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 22744418
--- Timings ---
Current time: 1559584507904 milliseconds
Total Time:         123.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.4 seconds, 66.2%
Fitness Testing:     25.5 seconds, 20.7%
Report:              15.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 98                 
Correct output: 41                  | Program output: 50                 
Correct output: 49                  | Program output: 49                 
Correct output: 57                  | Program output: 71                 
Correct output: 1                   | Program output: 60                 
Correct output: 2                   | Program output: 51                 
Correct output: 25                  | Program output: 44                 
Correct output: 13                  | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 18                 
Correct output: 41                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 83                 
Correct output: 51                  | Program output: 63                 
Correct output: 30                  | Program output: 89                 
Correct output: 1                   | Program output: 49                 
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: 11                  | Program output: 26                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: 47                 
Correct output: -54                 | Program output: 44                 
Correct output: -49                 | Program output: 42                 
Correct output: -100                | Program output: 5                  
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: 25                 
Correct output: -88                 | Program output: 50                 
Correct output: 28                  | Program output: 57                 
Correct output: -99                 | Program output: 72                 
Correct output: -97                 | Program output: 62                 
Correct output: -76                 | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: 60                 
Correct output: -67                 | Program output: 26                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 90                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 32                 
Correct output: -86                 | Program output: 81                 
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: 25                 
Correct output: -49                 | Program output: 68                 
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: 17                 
Correct output: -33                 | Program output: 11                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 42                 
Correct output: -100                | Program output: 87                 
Correct output: 32                  | Program output: 99                 
Correct output: -93                 | Program output: 92                 
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: 31                 
Correct output: -23                 | Program output: 100                
Correct output: -94                 | Program output: 11                 
Correct output: -95                 | Program output: 90                 
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: 79                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 84                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Lexicase best program: (in4 boolean_stackdepth in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub in1 exec_do*count (exec_eq) exec_when (in1) in3 exec_shove (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.180
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Zero cases best program: (in4 boolean_stackdepth in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub in1 exec_do*count (exec_eq) exec_when (in1) in3 exec_shove (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (375 514 3 15 182 174 2 274 222 78)
Population mean number of elite cases: 1.84
Count of perfect (error zero) individuals by case: (375 514 3 15 182 174 2 274 222 78)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (in4 boolean_stackdepth boolean_dup in2 exec_eq in1 boolean_eq integer_empty exec_when (exec_when (boolean_yank) in3 boolean_rot) boolean_eq in3 integer_dup in1 boolean_eq integer_empty exec_when (-89 boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ())
Errors: [1 1 0 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 40
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 8.161
Median total errors in population: 8
Error averages by case: (0.625 0.486 0.997 0.985 0.818 0.826 0.998 0.726 0.778 0.922)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.891
Average program size in population (points): 44.465
Average percent parens in population: 0.215
Minimum age in population: 60.94017866393551
Maximum age in population: 65.03293065150137
Average age in population: 63.26311463454823
Median age in population: 63.27006209570936
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.454
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.436
Total error diversity:				 0.006
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 23025066
--- Timings ---
Current time: 1559584510412 milliseconds
Total Time:         125.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.4 seconds, 66.5%
Fitness Testing:     25.8 seconds, 20.6%
Report:              16.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 33                 
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 98                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 87                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -9                 
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -57                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 91                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -53                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Lexicase best program: (in4 boolean_stackdepth integer_eq in2 integer_flush exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min integer_dup_times integer_flush integer_shove) ())
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 47
Percent parens: 0.170
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Zero cases best program: (in4 boolean_stackdepth integer_eq in2 integer_flush exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min integer_dup_times integer_flush integer_shove) ())
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 47
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (577 176 293 290 38 909 314 314 390 288)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (577 176 293 290 38 909 314 314 390 288)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (integer_yank boolean_stackdepth integer_eq in2 integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min integer_dup_times integer_flush integer_shove) ())
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 39
Size: 47
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 6.411
Median total errors in population: 7
Error averages by case: (0.423 0.824 0.707 0.71 0.962 0.091 0.686 0.686 0.61 0.712)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.396
Average program size in population (points): 43.987
Average percent parens in population: 0.196
Minimum age in population: 63.03720472160785
Maximum age in population: 66.0779855244491
Average age in population: 64.89515528886236
Median age in population: 64.90205722207611
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.447
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.426
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 23317563
--- Timings ---
Current time: 1559584512906 milliseconds
Total Time:         128.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.4 seconds, 66.7%
Fitness Testing:     26.2 seconds, 20.4%
Report:              16.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 526
Test mean error for best: 0.52600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 6                  
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 64                 
Correct output: 57                  | Program output: 97                 
Correct output: 1                   | Program output: 98                 
Correct output: 2                   | Program output: 7                  
Correct output: 25                  | Program output: 100                
Correct output: 13                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 43                 
Correct output: 48                  | Program output: 54                 
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 58                 
Correct output: 30                  | Program output: 86                 
Correct output: 1                   | Program output: 50                 
Correct output: 9                   | Program output: 43                 
Correct output: 32                  | Program output: 95                 
Correct output: 62                  | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -52                
Correct output: -81                 | Program output: 51                 
Correct output: -54                 | Program output: 90                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: 100                
Correct output: -63                 | Program output: -55                
Correct output: -58                 | Program output: -44                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 86                 
Correct output: -99                 | Program output: -69                
Correct output: -97                 | Program output: -33                
Correct output: -76                 | Program output: 93                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: -38                
Correct output: -67                 | Program output: 95                 
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: 98                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -44                
Correct output: -94                 | Program output: -55                
Correct output: -50                 | Program output: -46                
Correct output: -49                 | Program output: -49                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: 32                  | Program output: 54                 
Correct output: -93                 | Program output: 70                 
Correct output: -57                 | Program output: -57                
Correct output: -31                 | Program output: 46                 
Correct output: -23                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -4                 
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -81                
Correct output: -5                  | Program output: 6                  
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 49                 
Correct output: -81                 | Program output: -51                
Correct output: -85                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Lexicase best program: (in4 boolean_stackdepth in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_shove (exec_when (boolean_invert_first_then_and in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ())
Lexicase best errors: [0 0 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 50
Percent parens: 0.180
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Zero cases best program: (in4 boolean_stackdepth in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_shove (exec_when (boolean_invert_first_then_and in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ())
Zero cases best errors: [0 0 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 50
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (51 46 46 40 14 453 23 136 457 47)
Population mean number of elite cases: 1.31
Count of perfect (error zero) individuals by case: (51 46 46 40 14 453 23 136 457 47)
Population mean number of perfect (error zero) cases: 1.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (in4 boolean_stackdepth in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_shove (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ())
Errors: [0 0 0 0 1 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 41
Size: 50
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 8.687
Median total errors in population: 9
Error averages by case: (0.949 0.954 0.954 0.96 0.986 0.547 0.977 0.864 0.543 0.953)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.434
Average program size in population (points): 47.631
Average percent parens in population: 0.195
Minimum age in population: 64.28016443137312
Maximum age in population: 67.86396499249531
Average age in population: 66.06513624141712
Median age in population: 66.13895609714382
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 23587965
--- Timings ---
Current time: 1559584515388 milliseconds
Total Time:         130.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.3 seconds, 66.9%
Fitness Testing:     26.5 seconds, 20.3%
Report:              16.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 584
Test mean error for best: 0.58400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 83                 
Correct output: 41                  | Program output: 83                 
Correct output: 49                  | Program output: 75                 
Correct output: 57                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 46                 
Correct output: 0                   | Program output: 23                 
Correct output: 8                   | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 72                 
Correct output: 2                   | Program output: 95                 
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 67                 
Correct output: 62                  | Program output: 76                 
Correct output: 11                  | Program output: 80                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: 8                  
Correct output: -54                 | Program output: 99                 
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 41                 
Correct output: -62                 | Program output: -62                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -9                 
Correct output: -54                 | Program output: -10                
Correct output: -51                 | Program output: 26                 
Correct output: -74                 | Program output: 95                 
Correct output: -63                 | Program output: -29                
Correct output: -96                 | Program output: -6                 
Correct output: -97                 | Program output: -66                
Correct output: -50                 | Program output: -50                
Correct output: -23                 | Program output: 67                 
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: 78                 
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 17                 
Correct output: -65                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -15                
Correct output: 42                  | Program output: 82                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -36                
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 68                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: 89                 
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: 51                 
Correct output: -17                 | Program output: -3                 
Correct output: -70                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -83                 | Program output: -54                
Correct output: -47                 | Program output: 99                 
Correct output: 49                  | Program output: 88                 
Correct output: -81                 | Program output: -52                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Lexicase best program: (in4 boolean_stackdepth integer_gt exec_do*count (in1 exec_do*count (exec_eq)) exec_when (boolean_yank) in3 boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in2 in3 exec_shove (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ())
Lexicase best errors: [1 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Zero cases best program: (in4 boolean_stackdepth integer_gt exec_do*count (in1 exec_do*count (exec_eq)) exec_when (boolean_yank) in3 boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in2 in3 exec_shove (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ())
Zero cases best errors: [1 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 140 140 140 656 94 843 21 569 144)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (239 140 140 140 656 94 843 21 569 144)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (integer_yank boolean_stackdepth integer_eq in2 integer_gt exec_k (in1 in4 boolean_dup boolean_rot) (boolean_eq in3 integer_dup) integer_gt boolean_dup in2 in3 exec_shove (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove)
Errors: [1 0 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 45
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 7.014
Median total errors in population: 7
Error averages by case: (0.761 0.86 0.86 0.86 0.344 0.906 0.157 0.979 0.431 0.856)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.025
Average program size in population (points): 49.589
Average percent parens in population: 0.192
Minimum age in population: 65.28016443137312
Maximum age in population: 69.65264131954928
Average age in population: 67.6751932611654
Median age in population: 67.69681946054152
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 145
Genome diversity (% unique genomes):	 0.481
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 23861711
--- Timings ---
Current time: 1559584517961 milliseconds
Total Time:         133.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.4 seconds, 67.2%
Fitness Testing:     26.8 seconds, 20.1%
Report:              16.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 338
Test mean error for best: 0.33800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 46                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 72                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: -61                
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: -25                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -7                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 68                 
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Lexicase best program: (in4 boolean_stackdepth integer_eq in2 integer_flush exec_empty in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 integer_fromboolean integer_eq in2 integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
Lexicase best errors: [0 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 60
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Zero cases best program: (in4 boolean_stackdepth integer_eq in2 integer_flush exec_empty in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 integer_fromboolean integer_eq in2 integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
Zero cases best errors: [0 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 60
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (168 262 498 716 320 228 616 251 546 486)
Population mean number of elite cases: 4.09
Count of perfect (error zero) individuals by case: (168 262 498 716 320 228 616 251 546 486)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (in4 boolean_stackdepth integer_eq in2 integer_flush exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 integer_fromboolean integer_eq in2 integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ()) ())
Errors: [0 1 0 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 47
Size: 62
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 5.909
Median total errors in population: 6
Error averages by case: (0.832 0.738 0.502 0.284 0.68 0.772 0.384 0.749 0.454 0.514)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.247
Average program size in population (points): 48.77
Average percent parens in population: 0.170
Minimum age in population: 67.69681946054152
Maximum age in population: 71.08169785078235
Average age in population: 69.11663654953033
Median age in population: 69.11535624938733
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 181
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.008
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 24153579
--- Timings ---
Current time: 1559584520517 milliseconds
Total Time:         135.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.3 seconds, 67.4%
Fitness Testing:     27.1 seconds, 20.0%
Report:              17.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 352
Test mean error for best: 0.35200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 6                  
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 64                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 7                  
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 54                 
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 58                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 86                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: -38                
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -46                
Correct output: -49                 | Program output: -49                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: 32                  | Program output: 54                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: 46                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Lexicase best program: (in4 boolean_stackdepth in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub in1 exec_do*count (exec_eq) exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 58
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Zero cases best program: (in4 boolean_stackdepth in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub in1 exec_do*count (exec_eq) exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 58
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (317 218 414 826 840 684 319 317 415 249)
Population mean number of elite cases: 4.60
Count of perfect (error zero) individuals by case: (317 218 414 826 840 684 319 317 415 249)
Population mean number of perfect (error zero) cases: 4.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (in4 boolean_stackdepth in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub in1 exec_do*count (exec_eq) exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
Errors: [0 1 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 45
Size: 58
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 5.401
Median total errors in population: 5
Error averages by case: (0.683 0.782 0.586 0.174 0.16 0.316 0.681 0.683 0.585 0.751)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.741
Average program size in population (points): 53.15
Average percent parens in population: 0.190
Minimum age in population: 68.90867578030338
Maximum age in population: 72.76839742200025
Average age in population: 71.06174941920113
Median age in population: 71.14221945125502
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 118
Genome diversity (% unique genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.009
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 24492021
--- Timings ---
Current time: 1559584523131 milliseconds
Total Time:         138.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.3 seconds, 67.5%
Fitness Testing:     27.4 seconds, 19.9%
Report:              17.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 456
Test mean error for best: 0.45600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 6                  
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 64                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 7                  
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 28                 
Correct output: 0                   | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 54                 
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 58                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 88                 
Correct output: 28                  | Program output: 86                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: 91                 
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -50                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: 50                 
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: 32                  | Program output: 54                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -57                
Correct output: -31                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: 74                 
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: 73                 
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: -21                
Correct output: -85                 | Program output: 36                 
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: 55                 
Correct output: 49                  | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in2 integer_yank integer_min exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_not in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove)
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 42
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in2 integer_yank integer_min exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_not in3 in1 boolean_eq integer_empty) in3 integer_dup) boolean_eq integer_yank integer_dup print_integer integer_shove integer_flush integer_shove)
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 42
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (44 466 245 75 358 765 484 537 661 796)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (44 466 245 75 358 765 484 537 661 796)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (in4 boolean_stackdepth in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 42
Size: 54
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.569
Median total errors in population: 5
Error averages by case: (0.956 0.534 0.755 0.925 0.642 0.235 0.516 0.463 0.339 0.204)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.138
Average program size in population (points): 53.057
Average percent parens in population: 0.199
Minimum age in population: 70.09175640163085
Maximum age in population: 74.460721103683
Average age in population: 72.8062826566701
Median age in population: 72.85425552618668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 164
Genome diversity (% unique genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.009
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 24830892
--- Timings ---
Current time: 1559584525737 milliseconds
Total Time:         140.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.3 seconds, 67.7%
Fitness Testing:     27.8 seconds, 19.8%
Report:              17.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 50                 
Correct output: 49                  | Program output: 49                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 32                 
Correct output: 2                   | Program output: 33                 
Correct output: 25                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 18                 
Correct output: 41                  | Program output: 42                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 63                 
Correct output: 30                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 62                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 42                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 50                 
Correct output: 28                  | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: 13                 
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -9                 
Correct output: -47                 | Program output: 23                 
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: -54                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -11                
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -1                 
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -52                 | Program output: 13                 
Correct output: -33                 | Program output: 11                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 42                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 91                 
Correct output: -93                 | Program output: 35                 
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: 31                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 11                 
Correct output: -95                 | Program output: -69                
Correct output: -49                 | Program output: -49                
Correct output: -59                 | Program output: -14                
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: 41                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 84                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Lexicase best program: (in4 boolean_stackdepth integer_eq in2 integer_flush exec_k (in1 in1 exec_do*count (exec_eq) exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 59
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Zero cases best program: (in4 boolean_stackdepth integer_eq in2 integer_flush exec_k (in1 in1 exec_do*count (exec_eq) exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 59
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (854 433 9 816 432 865 450 454 375 431)
Population mean number of elite cases: 5.12
Count of perfect (error zero) individuals by case: (854 433 9 816 432 865 450 454 375 431)
Population mean number of perfect (error zero) cases: 5.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (in4 boolean_stackdepth integer_eq in2 integer_flush exec_k (in1 in1 exec_do*count (exec_eq) exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 boolean_eq integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_shove integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ()) ())
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 44
Size: 59
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 4.881
Median total errors in population: 5
Error averages by case: (0.146 0.567 0.991 0.184 0.568 0.135 0.55 0.546 0.625 0.569)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.64
Average program size in population (points): 48.68
Average percent parens in population: 0.156
Minimum age in population: 73.89482507260897
Maximum age in population: 76.11707390055375
Average age in population: 75.32507438164703
Median age in population: 75.24204734077696
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 257
Genome diversity (% unique genomes):	 0.462
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 260
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.009
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 25126460
--- Timings ---
Current time: 1559584528271 milliseconds
Total Time:         143.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.3 seconds, 67.9%
Fitness Testing:     28.1 seconds, 19.6%
Report:              17.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 377
Test mean error for best: 0.37700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 1
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 1
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 1
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 1
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 23                 
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 41                 
Correct output: -62                 | Program output: -62                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: -10                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -29                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -50                
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: 51                 
Correct output: -17                 | Program output: -3                 
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -54                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -52                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Lexicase best program: (in4 boolean_stackdepth in4 boolean_stackdepth integer_eq in2 exec_yankdup integer_yank exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 70
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Zero cases best program: (in4 boolean_stackdepth in4 boolean_stackdepth integer_eq in2 exec_yankdup integer_yank exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 70
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (667 179 36 177 631 39 852 18 846 36)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (667 179 36 177 631 39 852 18 846 36)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction -89} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove})
Best program: (in4 integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in4 boolean_xor in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 58
Size: 70
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 6.519
Median total errors in population: 6
Error averages by case: (0.333 0.821 0.964 0.823 0.369 0.961 0.148 0.982 0.154 0.964)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.142
Average program size in population (points): 53.356
Average percent parens in population: 0.161
Minimum age in population: 74.89482507260897
Maximum age in population: 77.85317175474935
Average age in population: 76.4379924423284
Median age in population: 76.56843620669297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.011
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 25480887
--- Timings ---
Current time: 1559584530954 milliseconds
Total Time:         146.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.3 seconds, 68.0%
Fitness Testing:     28.5 seconds, 19.5%
Report:              18.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 49
Successful program: (in4 integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in4 boolean_xor in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 70


Auto-simplifying with starting size: 70
step: 0
program: (in4 integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in4 boolean_xor in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 500
program: (in4 integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in4 boolean_xor in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 1000
program: (in4 integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in4 boolean_xor in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 1500
program: (in4 integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in4 boolean_xor in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 2000
program: (in4 integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in4 boolean_xor in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 2500
program: (in4 integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in4 boolean_xor in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 3000
program: (in4 integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in4 boolean_xor in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 3500
program: (in4 integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in4 boolean_xor in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 4000
program: (in4 integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in4 boolean_xor in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 4500
program: (in4 integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in4 boolean_xor in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 5000
program: (in4 integer_yank boolean_stackdepth integer_eq in2 integer_gt integer_shove in1 in4 boolean_dup boolean_rot boolean_eq in3 integer_dup integer_gt boolean_dup in4 boolean_xor in4 boolean_stackdepth integer_eq in2 integer_gt integer_sub exec_when (boolean_yank) integer_gt exec_k (in1 exec_do*count (exec_eq) exec_when (boolean_yank) in3 exec_y_when_autoconstructing (exec_when (integer_inc in1 print_newline integer_empty exec_when (-89 boolean_eq integer_empty) in3 integer_dup) integer_min integer_yank integer_dup) print_integer integer_shove integer_flush integer_yank integer_gt integer_min exec_s (integer_flush integer_shove) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 377
Test mean error for best: 0.37700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 1
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 1
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 1
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 1
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 71                 
Correct output: 3                   | Program output: 83                 
Correct output: 92                  | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 30                  | Program output: 30                 
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -73                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 6                   | Program output: 20                 
Correct output: 41                  | Program output: 80                 
Correct output: 49                  | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 74                 
Correct output: 0                   | Program output: 23                 
Correct output: 8                   | Program output: 94                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 4                  
Correct output: 51                  | Program output: 51                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 24                 
Correct output: 32                  | Program output: 32                 
Correct output: 62                  | Program output: 75                 
Correct output: 11                  | Program output: 24                 
Correct output: -98                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 61                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: -88                
Correct output: 28                  | Program output: 28                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 41                 
Correct output: -62                 | Program output: -62                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -54                 | Program output: -10                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -29                
Correct output: -96                 | Program output: -74                
Correct output: -97                 | Program output: -62                
Correct output: -50                 | Program output: -50                
Correct output: -23                 | Program output: -23                
Correct output: -86                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -49                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -32                
Correct output: -65                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 77                 
Correct output: -43                 | Program output: -43                
Correct output: 42                  | Program output: 49                 
Correct output: -100                | Program output: -49                
Correct output: 32                  | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -37                
Correct output: -31                 | Program output: -31                
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 73                 
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -64                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: 51                 
Correct output: -17                 | Program output: -3                 
Correct output: -70                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -5                  | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -54                
Correct output: -47                 | Program output: -47                
Correct output: 49                  | Program output: 90                 
Correct output: -81                 | Program output: -52                
Correct output: -85                 | Program output: -85                
;;******************************
