Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-1 66 66 66] -1] [[24 24 24 -4] -4] [[-16 -26 -16 -16] -26] [[26 26 17 26] 17] [[50 50 54 50] 50] [[78 13 78 78] 13] [[12 -69 12 12] -69] [[56 8 8 8] 8] [[-28 35 35 35] -28] [[39 -18 39 39] -18] [(-97 -97 -97 -97) -97] [(-10 -10 -10 -10) -10] [(-62 -62 -62 -62) -62] [(-9 -9 -9 -9) -9] [(26 26 26 26) 26] [(2 67 60 30) 2] [(24 43 56 17) 17] [(93 8 32 91) 8] [(9 57 60 90) 9] [(7 30 15 81) 7] [(97 49 73 64) 49] [(8 83 33 67) 8] [(72 19 98 29) 19] [(2 64 6 27) 2] [(82 78 60 22) 22] [(65 49 62 62) 49] [(37 21 12 35) 12] [(11 33 42 100) 11] [(32 82 58 36) 32] [(99 80 56 22) 22] [(54 27 7 44) 7] [(81 20 14 94) 14] [(1 64 69 91) 1] [(73 82 76 54) 54] [(78 73 12 37) 12] [(12 47 -93 100) -93] [(76 64 -30 -85) -85] [(13 -93 29 31) -93] [(14 -77 -55 72) -77] [(-63 90 42 96) -63] [(-14 15 82 91) -14] [(-20 59 -10 -63) -63] [(-37 -26 63 90) -37] [(-13 -96 -40 -47) -96] [(69 -4 11 -23) -23] [(-25 25 -72 -35) -72] [(-34 69 17 -73) -73] [(-91 -15 60 86) -91] [(79 -26 38 -9) -26] [(-65 18 -54 -23) -65] [(-4 58 72 6) -4] [(-73 87 -64 -27) -73] [(57 26 36 39) 26] [(63 -63 49 -5) -63] [(90 68 30 -80) -80] [(62 -28 18 76) -28] [(26 -42 81 88) -42] [(-88 8 -16 -20) -88] [(77 67 58 -9) -9] [(21 69 73 73) 21] [(28 -85 52 33) -85] [(-94 -28 -45 -12) -94] [(-18 -23 -70 -31) -70] [(37 49 48 -8) -8] [(-79 7 30 93) -79] [(51 -85 13 33) -85] [(-89 51 1 58) -89] [(-41 88 90 -21) -41] [(-25 12 -1 26) -25] [(-5 -10 -98 -61) -98] [(78 -3 22 37) -3] [(25 -92 -53 78) -92] [(-34 9 97 -94) -94] [(-29 23 46 -100) -100] [(99 82 93 -66) -66] [(76 -36 -98 54) -98] [(-39 67 -64 89) -64] [(-14 90 87 -65) -65] [(-97 82 -3 -2) -97] [(-71 -65 -72 73) -72] [(-69 -28 23 100) -69] [(42 -48 -61 -98) -98] [(-98 26 18 85) -98] [(2 -39 -52 71) -52] [(-81 42 49 -41) -81] [(98 -65 -31 -25) -65] [(-25 -2 27 -4) -25] [(-65 -88 91 -3) -88] [(-47 40 -9 87) -47] [(-95 51 -30 -37) -95] [(23 -16 6 66) -16] [(-8 6 -78 -32) -78] [(-82 -92 -92 -27) -92] [(-44 27 13 24) -44] [(1 -70 -22 85) -70])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-1 66 66 66] -1]
Train Case:   6 | Input/Output: [[24 24 24 -4] -4]
Train Case:   7 | Input/Output: [[-16 -26 -16 -16] -26]
Train Case:   8 | Input/Output: [[26 26 17 26] 17]
Train Case:   9 | Input/Output: [[50 50 54 50] 50]
Train Case:  10 | Input/Output: [[78 13 78 78] 13]
Train Case:  11 | Input/Output: [[12 -69 12 12] -69]
Train Case:  12 | Input/Output: [[56 8 8 8] 8]
Train Case:  13 | Input/Output: [[-28 35 35 35] -28]
Train Case:  14 | Input/Output: [[39 -18 39 39] -18]
Train Case:  15 | Input/Output: [(-97 -97 -97 -97) -97]
Train Case:  16 | Input/Output: [(-10 -10 -10 -10) -10]
Train Case:  17 | Input/Output: [(-62 -62 -62 -62) -62]
Train Case:  18 | Input/Output: [(-9 -9 -9 -9) -9]
Train Case:  19 | Input/Output: [(26 26 26 26) 26]
Train Case:  20 | Input/Output: [(2 67 60 30) 2]
Train Case:  21 | Input/Output: [(24 43 56 17) 17]
Train Case:  22 | Input/Output: [(93 8 32 91) 8]
Train Case:  23 | Input/Output: [(9 57 60 90) 9]
Train Case:  24 | Input/Output: [(7 30 15 81) 7]
Train Case:  25 | Input/Output: [(97 49 73 64) 49]
Train Case:  26 | Input/Output: [(8 83 33 67) 8]
Train Case:  27 | Input/Output: [(72 19 98 29) 19]
Train Case:  28 | Input/Output: [(2 64 6 27) 2]
Train Case:  29 | Input/Output: [(82 78 60 22) 22]
Train Case:  30 | Input/Output: [(65 49 62 62) 49]
Train Case:  31 | Input/Output: [(37 21 12 35) 12]
Train Case:  32 | Input/Output: [(11 33 42 100) 11]
Train Case:  33 | Input/Output: [(32 82 58 36) 32]
Train Case:  34 | Input/Output: [(99 80 56 22) 22]
Train Case:  35 | Input/Output: [(54 27 7 44) 7]
Train Case:  36 | Input/Output: [(81 20 14 94) 14]
Train Case:  37 | Input/Output: [(1 64 69 91) 1]
Train Case:  38 | Input/Output: [(73 82 76 54) 54]
Train Case:  39 | Input/Output: [(78 73 12 37) 12]
Train Case:  40 | Input/Output: [(12 47 -93 100) -93]
Train Case:  41 | Input/Output: [(76 64 -30 -85) -85]
Train Case:  42 | Input/Output: [(13 -93 29 31) -93]
Train Case:  43 | Input/Output: [(14 -77 -55 72) -77]
Train Case:  44 | Input/Output: [(-63 90 42 96) -63]
Train Case:  45 | Input/Output: [(-14 15 82 91) -14]
Train Case:  46 | Input/Output: [(-20 59 -10 -63) -63]
Train Case:  47 | Input/Output: [(-37 -26 63 90) -37]
Train Case:  48 | Input/Output: [(-13 -96 -40 -47) -96]
Train Case:  49 | Input/Output: [(69 -4 11 -23) -23]
Train Case:  50 | Input/Output: [(-25 25 -72 -35) -72]
Train Case:  51 | Input/Output: [(-34 69 17 -73) -73]
Train Case:  52 | Input/Output: [(-91 -15 60 86) -91]
Train Case:  53 | Input/Output: [(79 -26 38 -9) -26]
Train Case:  54 | Input/Output: [(-65 18 -54 -23) -65]
Train Case:  55 | Input/Output: [(-4 58 72 6) -4]
Train Case:  56 | Input/Output: [(-73 87 -64 -27) -73]
Train Case:  57 | Input/Output: [(57 26 36 39) 26]
Train Case:  58 | Input/Output: [(63 -63 49 -5) -63]
Train Case:  59 | Input/Output: [(90 68 30 -80) -80]
Train Case:  60 | Input/Output: [(62 -28 18 76) -28]
Train Case:  61 | Input/Output: [(26 -42 81 88) -42]
Train Case:  62 | Input/Output: [(-88 8 -16 -20) -88]
Train Case:  63 | Input/Output: [(77 67 58 -9) -9]
Train Case:  64 | Input/Output: [(21 69 73 73) 21]
Train Case:  65 | Input/Output: [(28 -85 52 33) -85]
Train Case:  66 | Input/Output: [(-94 -28 -45 -12) -94]
Train Case:  67 | Input/Output: [(-18 -23 -70 -31) -70]
Train Case:  68 | Input/Output: [(37 49 48 -8) -8]
Train Case:  69 | Input/Output: [(-79 7 30 93) -79]
Train Case:  70 | Input/Output: [(51 -85 13 33) -85]
Train Case:  71 | Input/Output: [(-89 51 1 58) -89]
Train Case:  72 | Input/Output: [(-41 88 90 -21) -41]
Train Case:  73 | Input/Output: [(-25 12 -1 26) -25]
Train Case:  74 | Input/Output: [(-5 -10 -98 -61) -98]
Train Case:  75 | Input/Output: [(78 -3 22 37) -3]
Train Case:  76 | Input/Output: [(25 -92 -53 78) -92]
Train Case:  77 | Input/Output: [(-34 9 97 -94) -94]
Train Case:  78 | Input/Output: [(-29 23 46 -100) -100]
Train Case:  79 | Input/Output: [(99 82 93 -66) -66]
Train Case:  80 | Input/Output: [(76 -36 -98 54) -98]
Train Case:  81 | Input/Output: [(-39 67 -64 89) -64]
Train Case:  82 | Input/Output: [(-14 90 87 -65) -65]
Train Case:  83 | Input/Output: [(-97 82 -3 -2) -97]
Train Case:  84 | Input/Output: [(-71 -65 -72 73) -72]
Train Case:  85 | Input/Output: [(-69 -28 23 100) -69]
Train Case:  86 | Input/Output: [(42 -48 -61 -98) -98]
Train Case:  87 | Input/Output: [(-98 26 18 85) -98]
Train Case:  88 | Input/Output: [(2 -39 -52 71) -52]
Train Case:  89 | Input/Output: [(-81 42 49 -41) -81]
Train Case:  90 | Input/Output: [(98 -65 -31 -25) -65]
Train Case:  91 | Input/Output: [(-25 -2 27 -4) -25]
Train Case:  92 | Input/Output: [(-65 -88 91 -3) -88]
Train Case:  93 | Input/Output: [(-47 40 -9 87) -47]
Train Case:  94 | Input/Output: [(-95 51 -30 -37) -95]
Train Case:  95 | Input/Output: [(23 -16 6 66) -16]
Train Case:  96 | Input/Output: [(-8 6 -78 -32) -78]
Train Case:  97 | Input/Output: [(-82 -92 -92 -27) -92]
Train Case:  98 | Input/Output: [(-44 27 13 24) -44]
Train Case:  99 | Input/Output: [(1 -70 -22 85) -70]
Test Case:   0 | Input/Output: [[13 -32 13 13] -32]
Test Case:   1 | Input/Output: [[-48 52 52 52] -48]
Test Case:   2 | Input/Output: [[-31 17 17 17] -31]
Test Case:   3 | Input/Output: [[79 79 79 -90] -90]
Test Case:   4 | Input/Output: [[-3 35 35 35] -3]
Test Case:   5 | Input/Output: [[-50 -1 -50 -50] -50]
Test Case:   6 | Input/Output: [[18 18 18 99] 18]
Test Case:   7 | Input/Output: [[-59 -56 -59 -59] -59]
Test Case:   8 | Input/Output: [[-2 -2 -2 24] -2]
Test Case:   9 | Input/Output: [[-99 -99 -99 65] -99]
Test Case:  10 | Input/Output: [[7 73 7 7] 7]
Test Case:  11 | Input/Output: [[-96 51 -96 -96] -96]
Test Case:  12 | Input/Output: [[-21 -21 -21 55] -21]
Test Case:  13 | Input/Output: [[15 53 53 53] 15]
Test Case:  14 | Input/Output: [[47 -39 -39 -39] -39]
Test Case:  15 | Input/Output: [[-98 -98 47 -98] -98]
Test Case:  16 | Input/Output: [[-32 -32 75 -32] -32]
Test Case:  17 | Input/Output: [[59 -10 -10 -10] -10]
Test Case:  18 | Input/Output: [[-91 -91 -91 34] -91]
Test Case:  19 | Input/Output: [[84 13 84 84] 13]
Test Case:  20 | Input/Output: [[26 26 -34 26] -34]
Test Case:  21 | Input/Output: [[81 81 80 81] 80]
Test Case:  22 | Input/Output: [[-48 -48 -48 75] -48]
Test Case:  23 | Input/Output: [[24 24 21 24] 21]
Test Case:  24 | Input/Output: [[44 44 44 -9] -9]
Test Case:  25 | Input/Output: [[-97 82 82 82] -97]
Test Case:  26 | Input/Output: [[-96 -96 -96 -3] -96]
Test Case:  27 | Input/Output: [[-51 77 77 77] -51]
Test Case:  28 | Input/Output: [[-49 94 -49 -49] -49]
Test Case:  29 | Input/Output: [[83 83 83 -61] -61]
Test Case:  30 | Input/Output: [[7 -65 7 7] -65]
Test Case:  31 | Input/Output: [[-66 -66 39 -66] -66]
Test Case:  32 | Input/Output: [[57 23 23 23] 23]
Test Case:  33 | Input/Output: [[-1 -52 -1 -1] -52]
Test Case:  34 | Input/Output: [[-54 -54 -90 -54] -90]
Test Case:  35 | Input/Output: [[17 17 56 17] 17]
Test Case:  36 | Input/Output: [[32 32 46 32] 32]
Test Case:  37 | Input/Output: [[58 -44 -44 -44] -44]
Test Case:  38 | Input/Output: [[15 15 15 86] 15]
Test Case:  39 | Input/Output: [[10 10 12 10] 10]
Test Case:  40 | Input/Output: [[-47 -47 59 -47] -47]
Test Case:  41 | Input/Output: [[9 9 9 18] 9]
Test Case:  42 | Input/Output: [[-35 15 -35 -35] -35]
Test Case:  43 | Input/Output: [[-20 51 51 51] -20]
Test Case:  44 | Input/Output: [[-63 -63 -63 -64] -64]
Test Case:  45 | Input/Output: [[-15 22 -15 -15] -15]
Test Case:  46 | Input/Output: [[38 38 38 65] 38]
Test Case:  47 | Input/Output: [[93 93 93 -94] -94]
Test Case:  48 | Input/Output: [[-82 -82 -82 -64] -82]
Test Case:  49 | Input/Output: [[24 87 24 24] 24]
Test Case:  50 | Input/Output: [[81 -76 -76 -76] -76]
Test Case:  51 | Input/Output: [[-30 -30 -30 -59] -59]
Test Case:  52 | Input/Output: [[12 12 -35 12] -35]
Test Case:  53 | Input/Output: [[-14 -14 -14 72] -14]
Test Case:  54 | Input/Output: [[-15 29 -15 -15] -15]
Test Case:  55 | Input/Output: [[-99 -55 -55 -55] -99]
Test Case:  56 | Input/Output: [[-68 -68 -68 -68] -68]
Test Case:  57 | Input/Output: [[89 89 89 67] 67]
Test Case:  58 | Input/Output: [[-90 -90 -90 -43] -90]
Test Case:  59 | Input/Output: [[90 90 44 90] 44]
Test Case:  60 | Input/Output: [[73 73 -38 73] -38]
Test Case:  61 | Input/Output: [[-17 52 52 52] -17]
Test Case:  62 | Input/Output: [[22 91 22 22] 22]
Test Case:  63 | Input/Output: [[33 73 73 73] 33]
Test Case:  64 | Input/Output: [[-31 -31 -60 -31] -60]
Test Case:  65 | Input/Output: [[-4 -4 -4 32] -4]
Test Case:  66 | Input/Output: [[48 48 48 80] 48]
Test Case:  67 | Input/Output: [[-53 -53 -56 -53] -56]
Test Case:  68 | Input/Output: [[5 5 -59 5] -59]
Test Case:  69 | Input/Output: [[-16 -16 55 -16] -16]
Test Case:  70 | Input/Output: [[-38 -38 -38 61] -38]
Test Case:  71 | Input/Output: [[68 68 68 99] 68]
Test Case:  72 | Input/Output: [[-62 -62 1 -62] -62]
Test Case:  73 | Input/Output: [[-51 -51 1 -51] -51]
Test Case:  74 | Input/Output: [[-8 -8 -8 21] -8]
Test Case:  75 | Input/Output: [[89 18 89 89] 18]
Test Case:  76 | Input/Output: [[-67 -67 85 -67] -67]
Test Case:  77 | Input/Output: [[31 31 31 19] 19]
Test Case:  78 | Input/Output: [[100 100 -68 100] -68]
Test Case:  79 | Input/Output: [[-15 16 -15 -15] -15]
Test Case:  80 | Input/Output: [[2 2 2 63] 2]
Test Case:  81 | Input/Output: [[-93 -93 93 -93] -93]
Test Case:  82 | Input/Output: [[93 40 93 93] 40]
Test Case:  83 | Input/Output: [[84 -29 -29 -29] -29]
Test Case:  84 | Input/Output: [[59 -94 -94 -94] -94]
Test Case:  85 | Input/Output: [[-69 82 -69 -69] -69]
Test Case:  86 | Input/Output: [[75 -23 75 75] -23]
Test Case:  87 | Input/Output: [[32 -51 -51 -51] -51]
Test Case:  88 | Input/Output: [[36 36 36 -52] -52]
Test Case:  89 | Input/Output: [[-75 -75 -75 -12] -75]
Test Case:  90 | Input/Output: [[100 100 100 73] 73]
Test Case:  91 | Input/Output: [[51 -87 -87 -87] -87]
Test Case:  92 | Input/Output: [[33 99 99 99] 33]
Test Case:  93 | Input/Output: [[74 -88 74 74] -88]
Test Case:  94 | Input/Output: [[-27 -54 -54 -54] -54]
Test Case:  95 | Input/Output: [[8 0 0 0] 0]
Test Case:  96 | Input/Output: [[19 19 -80 19] -80]
Test Case:  97 | Input/Output: [[61 61 61 -9] -9]
Test Case:  98 | Input/Output: [[90 -90 90 90] -90]
Test Case:  99 | Input/Output: [[-36 96 96 96] -36]
Test Case: 100 | Input/Output: [(57 57 57 57) 57]
Test Case: 101 | Input/Output: [(52 52 52 52) 52]
Test Case: 102 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 103 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 104 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 105 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 106 | Input/Output: [(14 14 14 14) 14]
Test Case: 107 | Input/Output: [(60 60 60 60) 60]
Test Case: 108 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 109 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 110 | Input/Output: [(68 68 68 68) 68]
Test Case: 111 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 112 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 113 | Input/Output: [(71 71 71 71) 71]
Test Case: 114 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 115 | Input/Output: [(43 43 43 43) 43]
Test Case: 116 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 117 | Input/Output: [(58 58 58 58) 58]
Test Case: 118 | Input/Output: [(96 96 96 96) 96]
Test Case: 119 | Input/Output: [(55 55 55 55) 55]
Test Case: 120 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 121 | Input/Output: [(10 10 10 10) 10]
Test Case: 122 | Input/Output: [(35 35 35 35) 35]
Test Case: 123 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 124 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 125 | Input/Output: [(11 11 11 11) 11]
Test Case: 126 | Input/Output: [(99 99 99 99) 99]
Test Case: 127 | Input/Output: [(8 8 8 8) 8]
Test Case: 128 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 129 | Input/Output: [(95 95 95 95) 95]
Test Case: 130 | Input/Output: [(45 45 45 45) 45]
Test Case: 131 | Input/Output: [(31 31 31 31) 31]
Test Case: 132 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 133 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 134 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 135 | Input/Output: [(70 70 70 70) 70]
Test Case: 136 | Input/Output: [(33 33 33 33) 33]
Test Case: 137 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 138 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 139 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 140 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 141 | Input/Output: [(21 21 21 21) 21]
Test Case: 142 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 143 | Input/Output: [(17 17 17 17) 17]
Test Case: 144 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 145 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 146 | Input/Output: [(44 44 44 44) 44]
Test Case: 147 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 148 | Input/Output: [(16 16 16 16) 16]
Test Case: 149 | Input/Output: [(18 18 18 18) 18]
Test Case: 150 | Input/Output: [(79 79 79 79) 79]
Test Case: 151 | Input/Output: [(22 22 22 22) 22]
Test Case: 152 | Input/Output: [(62 62 62 62) 62]
Test Case: 153 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 154 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 155 | Input/Output: [(7 7 7 7) 7]
Test Case: 156 | Input/Output: [(48 48 48 48) 48]
Test Case: 157 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 158 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 159 | Input/Output: [(23 23 23 23) 23]
Test Case: 160 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 161 | Input/Output: [(14 14 14 14) 14]
Test Case: 162 | Input/Output: [(89 89 89 89) 89]
Test Case: 163 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 164 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 165 | Input/Output: [(19 19 19 19) 19]
Test Case: 166 | Input/Output: [(75 75 75 75) 75]
Test Case: 167 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 168 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 169 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 170 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 171 | Input/Output: [(21 21 21 21) 21]
Test Case: 172 | Input/Output: [(67 67 67 67) 67]
Test Case: 173 | Input/Output: [(26 26 26 26) 26]
Test Case: 174 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 175 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 176 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 177 | Input/Output: [(14 14 14 14) 14]
Test Case: 178 | Input/Output: [(69 69 69 69) 69]
Test Case: 179 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 180 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 181 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 182 | Input/Output: [(38 38 38 38) 38]
Test Case: 183 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 184 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 185 | Input/Output: [(29 29 29 29) 29]
Test Case: 186 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 187 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 188 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 189 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 190 | Input/Output: [(29 29 29 29) 29]
Test Case: 191 | Input/Output: [(71 71 71 71) 71]
Test Case: 192 | Input/Output: [(21 21 21 21) 21]
Test Case: 193 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 194 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 195 | Input/Output: [(25 25 25 25) 25]
Test Case: 196 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 197 | Input/Output: [(54 54 54 54) 54]
Test Case: 198 | Input/Output: [(27 27 27 27) 27]
Test Case: 199 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 200 | Input/Output: [(16 50 7 92) 7]
Test Case: 201 | Input/Output: [(29 25 61 87) 25]
Test Case: 202 | Input/Output: [(82 67 72 2) 2]
Test Case: 203 | Input/Output: [(87 35 79 58) 35]
Test Case: 204 | Input/Output: [(84 61 57 55) 55]
Test Case: 205 | Input/Output: [(13 97 81 49) 13]
Test Case: 206 | Input/Output: [(34 58 57 56) 34]
Test Case: 207 | Input/Output: [(71 87 97 87) 71]
Test Case: 208 | Input/Output: [(23 10 46 95) 10]
Test Case: 209 | Input/Output: [(53 50 19 88) 19]
Test Case: 210 | Input/Output: [(4 85 86 4) 4]
Test Case: 211 | Input/Output: [(91 43 75 14) 14]
Test Case: 212 | Input/Output: [(1 61 52 28) 1]
Test Case: 213 | Input/Output: [(39 69 64 78) 39]
Test Case: 214 | Input/Output: [(4 86 36 69) 4]
Test Case: 215 | Input/Output: [(5 89 33 13) 5]
Test Case: 216 | Input/Output: [(27 91 51 81) 27]
Test Case: 217 | Input/Output: [(38 0 0 35) 0]
Test Case: 218 | Input/Output: [(6 97 44 1) 1]
Test Case: 219 | Input/Output: [(62 83 52 17) 17]
Test Case: 220 | Input/Output: [(96 2 49 98) 2]
Test Case: 221 | Input/Output: [(56 76 17 94) 17]
Test Case: 222 | Input/Output: [(63 13 96 67) 13]
Test Case: 223 | Input/Output: [(14 28 55 8) 8]
Test Case: 224 | Input/Output: [(2 49 73 30) 2]
Test Case: 225 | Input/Output: [(15 88 12 75) 12]
Test Case: 226 | Input/Output: [(87 51 32 97) 32]
Test Case: 227 | Input/Output: [(11 32 77 6) 6]
Test Case: 228 | Input/Output: [(85 4 45 91) 4]
Test Case: 229 | Input/Output: [(30 60 34 95) 30]
Test Case: 230 | Input/Output: [(35 3 96 19) 3]
Test Case: 231 | Input/Output: [(65 1 66 66) 1]
Test Case: 232 | Input/Output: [(92 0 64 33) 0]
Test Case: 233 | Input/Output: [(35 30 13 43) 13]
Test Case: 234 | Input/Output: [(66 28 85 80) 28]
Test Case: 235 | Input/Output: [(18 6 34 90) 6]
Test Case: 236 | Input/Output: [(48 93 31 9) 9]
Test Case: 237 | Input/Output: [(100 68 49 87) 49]
Test Case: 238 | Input/Output: [(42 93 54 41) 41]
Test Case: 239 | Input/Output: [(4 11 78 11) 4]
Test Case: 240 | Input/Output: [(17 74 60 56) 17]
Test Case: 241 | Input/Output: [(14 63 80 33) 14]
Test Case: 242 | Input/Output: [(36 96 71 5) 5]
Test Case: 243 | Input/Output: [(27 10 87 44) 10]
Test Case: 244 | Input/Output: [(99 59 97 92) 59]
Test Case: 245 | Input/Output: [(11 86 36 51) 11]
Test Case: 246 | Input/Output: [(22 43 9 89) 9]
Test Case: 247 | Input/Output: [(35 56 77 93) 35]
Test Case: 248 | Input/Output: [(29 45 6 50) 6]
Test Case: 249 | Input/Output: [(70 92 38 8) 8]
Test Case: 250 | Input/Output: [(71 33 85 38) 33]
Test Case: 251 | Input/Output: [(96 26 27 20) 20]
Test Case: 252 | Input/Output: [(64 7 30 46) 7]
Test Case: 253 | Input/Output: [(3 64 58 12) 3]
Test Case: 254 | Input/Output: [(22 64 16 57) 16]
Test Case: 255 | Input/Output: [(85 32 32 87) 32]
Test Case: 256 | Input/Output: [(13 74 90 57) 13]
Test Case: 257 | Input/Output: [(52 48 46 33) 33]
Test Case: 258 | Input/Output: [(35 79 90 91) 35]
Test Case: 259 | Input/Output: [(84 48 82 23) 23]
Test Case: 260 | Input/Output: [(10 16 18 50) 10]
Test Case: 261 | Input/Output: [(47 67 27 54) 27]
Test Case: 262 | Input/Output: [(91 2 57 79) 2]
Test Case: 263 | Input/Output: [(65 12 28 86) 12]
Test Case: 264 | Input/Output: [(36 22 8 56) 8]
Test Case: 265 | Input/Output: [(93 31 43 64) 31]
Test Case: 266 | Input/Output: [(3 51 65 86) 3]
Test Case: 267 | Input/Output: [(27 41 28 38) 27]
Test Case: 268 | Input/Output: [(3 98 80 22) 3]
Test Case: 269 | Input/Output: [(91 22 12 61) 12]
Test Case: 270 | Input/Output: [(79 60 98 84) 60]
Test Case: 271 | Input/Output: [(8 29 69 84) 8]
Test Case: 272 | Input/Output: [(66 60 26 38) 26]
Test Case: 273 | Input/Output: [(10 66 54 67) 10]
Test Case: 274 | Input/Output: [(33 91 57 2) 2]
Test Case: 275 | Input/Output: [(100 65 17 99) 17]
Test Case: 276 | Input/Output: [(76 74 92 34) 34]
Test Case: 277 | Input/Output: [(4 39 70 49) 4]
Test Case: 278 | Input/Output: [(44 98 100 89) 44]
Test Case: 279 | Input/Output: [(67 79 67 100) 67]
Test Case: 280 | Input/Output: [(61 24 87 44) 24]
Test Case: 281 | Input/Output: [(36 77 31 39) 31]
Test Case: 282 | Input/Output: [(67 71 70 90) 67]
Test Case: 283 | Input/Output: [(45 67 48 55) 45]
Test Case: 284 | Input/Output: [(40 91 48 24) 24]
Test Case: 285 | Input/Output: [(19 39 83 74) 19]
Test Case: 286 | Input/Output: [(56 99 61 46) 46]
Test Case: 287 | Input/Output: [(93 86 14 28) 14]
Test Case: 288 | Input/Output: [(82 20 69 57) 20]
Test Case: 289 | Input/Output: [(31 99 21 2) 2]
Test Case: 290 | Input/Output: [(20 7 34 98) 7]
Test Case: 291 | Input/Output: [(82 8 76 48) 8]
Test Case: 292 | Input/Output: [(13 89 62 64) 13]
Test Case: 293 | Input/Output: [(53 54 0 54) 0]
Test Case: 294 | Input/Output: [(77 85 73 7) 7]
Test Case: 295 | Input/Output: [(87 22 14 88) 14]
Test Case: 296 | Input/Output: [(65 10 93 11) 10]
Test Case: 297 | Input/Output: [(15 67 97 3) 3]
Test Case: 298 | Input/Output: [(80 14 6 26) 6]
Test Case: 299 | Input/Output: [(30 35 49 69) 30]
Test Case: 300 | Input/Output: [(4 14 46 96) 4]
Test Case: 301 | Input/Output: [(83 40 76 77) 40]
Test Case: 302 | Input/Output: [(36 64 19 60) 19]
Test Case: 303 | Input/Output: [(39 16 33 14) 14]
Test Case: 304 | Input/Output: [(5 4 29 76) 4]
Test Case: 305 | Input/Output: [(100 92 76 73) 73]
Test Case: 306 | Input/Output: [(74 85 80 64) 64]
Test Case: 307 | Input/Output: [(2 53 83 43) 2]
Test Case: 308 | Input/Output: [(23 16 74 39) 16]
Test Case: 309 | Input/Output: [(40 71 21 93) 21]
Test Case: 310 | Input/Output: [(95 31 55 55) 31]
Test Case: 311 | Input/Output: [(67 8 50 48) 8]
Test Case: 312 | Input/Output: [(89 90 54 13) 13]
Test Case: 313 | Input/Output: [(63 19 26 5) 5]
Test Case: 314 | Input/Output: [(70 29 27 79) 27]
Test Case: 315 | Input/Output: [(81 54 92 20) 20]
Test Case: 316 | Input/Output: [(56 86 98 77) 56]
Test Case: 317 | Input/Output: [(82 92 3 58) 3]
Test Case: 318 | Input/Output: [(71 9 15 7) 7]
Test Case: 319 | Input/Output: [(12 61 72 49) 12]
Test Case: 320 | Input/Output: [(82 73 63 25) 25]
Test Case: 321 | Input/Output: [(66 53 88 57) 53]
Test Case: 322 | Input/Output: [(4 28 44 74) 4]
Test Case: 323 | Input/Output: [(55 4 51 73) 4]
Test Case: 324 | Input/Output: [(44 41 89 44) 41]
Test Case: 325 | Input/Output: [(89 39 93 38) 38]
Test Case: 326 | Input/Output: [(18 59 24 8) 8]
Test Case: 327 | Input/Output: [(83 57 47 69) 47]
Test Case: 328 | Input/Output: [(76 85 39 86) 39]
Test Case: 329 | Input/Output: [(21 27 94 48) 21]
Test Case: 330 | Input/Output: [(31 69 46 4) 4]
Test Case: 331 | Input/Output: [(77 21 86 99) 21]
Test Case: 332 | Input/Output: [(85 64 77 19) 19]
Test Case: 333 | Input/Output: [(94 88 85 8) 8]
Test Case: 334 | Input/Output: [(7 46 15 52) 7]
Test Case: 335 | Input/Output: [(60 64 66 83) 60]
Test Case: 336 | Input/Output: [(37 51 85 82) 37]
Test Case: 337 | Input/Output: [(88 100 65 54) 54]
Test Case: 338 | Input/Output: [(23 39 44 22) 22]
Test Case: 339 | Input/Output: [(14 0 71 73) 0]
Test Case: 340 | Input/Output: [(98 88 62 63) 62]
Test Case: 341 | Input/Output: [(96 31 7 6) 6]
Test Case: 342 | Input/Output: [(43 61 69 59) 43]
Test Case: 343 | Input/Output: [(33 12 72 92) 12]
Test Case: 344 | Input/Output: [(5 79 23 47) 5]
Test Case: 345 | Input/Output: [(1 76 10 20) 1]
Test Case: 346 | Input/Output: [(91 41 44 1) 1]
Test Case: 347 | Input/Output: [(49 100 9 5) 5]
Test Case: 348 | Input/Output: [(73 64 72 12) 12]
Test Case: 349 | Input/Output: [(55 66 57 57) 55]
Test Case: 350 | Input/Output: [(32 66 57 62) 32]
Test Case: 351 | Input/Output: [(36 76 25 41) 25]
Test Case: 352 | Input/Output: [(18 97 33 24) 18]
Test Case: 353 | Input/Output: [(55 88 70 94) 55]
Test Case: 354 | Input/Output: [(37 1 70 81) 1]
Test Case: 355 | Input/Output: [(57 0 79 45) 0]
Test Case: 356 | Input/Output: [(6 0 35 33) 0]
Test Case: 357 | Input/Output: [(66 88 44 87) 44]
Test Case: 358 | Input/Output: [(90 58 15 98) 15]
Test Case: 359 | Input/Output: [(88 0 44 1) 0]
Test Case: 360 | Input/Output: [(53 36 43 44) 36]
Test Case: 361 | Input/Output: [(57 50 100 88) 50]
Test Case: 362 | Input/Output: [(46 17 64 77) 17]
Test Case: 363 | Input/Output: [(1 69 24 69) 1]
Test Case: 364 | Input/Output: [(54 72 49 29) 29]
Test Case: 365 | Input/Output: [(40 98 3 50) 3]
Test Case: 366 | Input/Output: [(65 9 54 53) 9]
Test Case: 367 | Input/Output: [(36 42 2 17) 2]
Test Case: 368 | Input/Output: [(8 83 90 16) 8]
Test Case: 369 | Input/Output: [(77 52 36 99) 36]
Test Case: 370 | Input/Output: [(7 81 91 77) 7]
Test Case: 371 | Input/Output: [(3 55 45 29) 3]
Test Case: 372 | Input/Output: [(51 98 31 64) 31]
Test Case: 373 | Input/Output: [(95 89 15 16) 15]
Test Case: 374 | Input/Output: [(12 44 50 47) 12]
Test Case: 375 | Input/Output: [(3 43 55 4) 3]
Test Case: 376 | Input/Output: [(4 75 68 75) 4]
Test Case: 377 | Input/Output: [(42 28 33 97) 28]
Test Case: 378 | Input/Output: [(52 79 76 95) 52]
Test Case: 379 | Input/Output: [(15 75 75 66) 15]
Test Case: 380 | Input/Output: [(60 11 100 62) 11]
Test Case: 381 | Input/Output: [(73 88 59 79) 59]
Test Case: 382 | Input/Output: [(79 24 90 88) 24]
Test Case: 383 | Input/Output: [(31 48 89 85) 31]
Test Case: 384 | Input/Output: [(27 80 24 17) 17]
Test Case: 385 | Input/Output: [(95 23 67 71) 23]
Test Case: 386 | Input/Output: [(60 89 94 36) 36]
Test Case: 387 | Input/Output: [(44 18 89 73) 18]
Test Case: 388 | Input/Output: [(4 44 33 83) 4]
Test Case: 389 | Input/Output: [(55 99 99 51) 51]
Test Case: 390 | Input/Output: [(93 9 93 69) 9]
Test Case: 391 | Input/Output: [(39 40 30 15) 15]
Test Case: 392 | Input/Output: [(32 86 51 85) 32]
Test Case: 393 | Input/Output: [(98 85 21 68) 21]
Test Case: 394 | Input/Output: [(45 53 45 80) 45]
Test Case: 395 | Input/Output: [(70 16 76 82) 16]
Test Case: 396 | Input/Output: [(9 85 0 88) 0]
Test Case: 397 | Input/Output: [(77 36 18 8) 8]
Test Case: 398 | Input/Output: [(83 69 69 17) 17]
Test Case: 399 | Input/Output: [(51 77 46 56) 46]
Test Case: 400 | Input/Output: [(61 33 -56 -46) -56]
Test Case: 401 | Input/Output: [(88 62 53 80) 53]
Test Case: 402 | Input/Output: [(65 -82 8 40) -82]
Test Case: 403 | Input/Output: [(-43 -50 -17 23) -50]
Test Case: 404 | Input/Output: [(0 57 -22 -39) -39]
Test Case: 405 | Input/Output: [(94 -73 96 2) -73]
Test Case: 406 | Input/Output: [(-13 91 48 -36) -36]
Test Case: 407 | Input/Output: [(-13 1 -94 -85) -94]
Test Case: 408 | Input/Output: [(12 61 75 -18) -18]
Test Case: 409 | Input/Output: [(-51 80 -99 88) -99]
Test Case: 410 | Input/Output: [(-7 75 68 -99) -99]
Test Case: 411 | Input/Output: [(84 -84 54 5) -84]
Test Case: 412 | Input/Output: [(-61 7 38 91) -61]
Test Case: 413 | Input/Output: [(-17 80 -68 -14) -68]
Test Case: 414 | Input/Output: [(64 82 81 -99) -99]
Test Case: 415 | Input/Output: [(43 95 -17 -56) -56]
Test Case: 416 | Input/Output: [(27 -81 32 88) -81]
Test Case: 417 | Input/Output: [(-60 -42 3 59) -60]
Test Case: 418 | Input/Output: [(-49 4 -92 -87) -92]
Test Case: 419 | Input/Output: [(-48 52 -68 -33) -68]
Test Case: 420 | Input/Output: [(-7 38 56 -52) -52]
Test Case: 421 | Input/Output: [(-80 44 88 -42) -80]
Test Case: 422 | Input/Output: [(-9 -68 -87 42) -87]
Test Case: 423 | Input/Output: [(-32 51 67 19) -32]
Test Case: 424 | Input/Output: [(70 -90 -8 96) -90]
Test Case: 425 | Input/Output: [(89 -16 4 73) -16]
Test Case: 426 | Input/Output: [(-67 27 78 -31) -67]
Test Case: 427 | Input/Output: [(-34 51 -82 2) -82]
Test Case: 428 | Input/Output: [(-99 57 4 -3) -99]
Test Case: 429 | Input/Output: [(40 -4 -68 15) -68]
Test Case: 430 | Input/Output: [(22 96 -29 -58) -58]
Test Case: 431 | Input/Output: [(-26 22 7 41) -26]
Test Case: 432 | Input/Output: [(36 63 -15 91) -15]
Test Case: 433 | Input/Output: [(-76 60 31 -100) -100]
Test Case: 434 | Input/Output: [(47 -77 88 25) -77]
Test Case: 435 | Input/Output: [(10 -5 45 -1) -5]
Test Case: 436 | Input/Output: [(56 38 -11 -59) -59]
Test Case: 437 | Input/Output: [(-54 -47 -46 -51) -54]
Test Case: 438 | Input/Output: [(-21 -23 -44 -85) -85]
Test Case: 439 | Input/Output: [(77 -39 -11 -58) -58]
Test Case: 440 | Input/Output: [(54 16 74 -68) -68]
Test Case: 441 | Input/Output: [(90 -24 45 79) -24]
Test Case: 442 | Input/Output: [(66 -42 -32 -66) -66]
Test Case: 443 | Input/Output: [(88 91 58 -30) -30]
Test Case: 444 | Input/Output: [(84 74 -78 1) -78]
Test Case: 445 | Input/Output: [(64 38 4 -47) -47]
Test Case: 446 | Input/Output: [(-58 22 -85 94) -85]
Test Case: 447 | Input/Output: [(46 -32 -77 -61) -77]
Test Case: 448 | Input/Output: [(-85 43 -1 35) -85]
Test Case: 449 | Input/Output: [(-54 0 -8 -85) -85]
Test Case: 450 | Input/Output: [(89 91 -2 -92) -92]
Test Case: 451 | Input/Output: [(-26 -40 76 83) -40]
Test Case: 452 | Input/Output: [(-43 -33 92 13) -43]
Test Case: 453 | Input/Output: [(45 -22 -40 51) -40]
Test Case: 454 | Input/Output: [(-25 -69 -67 -67) -69]
Test Case: 455 | Input/Output: [(-19 25 42 -99) -99]
Test Case: 456 | Input/Output: [(27 19 35 11) 11]
Test Case: 457 | Input/Output: [(66 -27 54 66) -27]
Test Case: 458 | Input/Output: [(35 13 24 -9) -9]
Test Case: 459 | Input/Output: [(60 -49 20 -43) -49]
Test Case: 460 | Input/Output: [(-86 -68 23 -78) -86]
Test Case: 461 | Input/Output: [(-17 -21 -74 79) -74]
Test Case: 462 | Input/Output: [(-28 -35 55 98) -35]
Test Case: 463 | Input/Output: [(-95 31 -32 -90) -95]
Test Case: 464 | Input/Output: [(-24 58 -41 -57) -57]
Test Case: 465 | Input/Output: [(-29 71 22 -13) -29]
Test Case: 466 | Input/Output: [(-95 -82 25 41) -95]
Test Case: 467 | Input/Output: [(-16 60 24 -31) -31]
Test Case: 468 | Input/Output: [(25 73 -30 32) -30]
Test Case: 469 | Input/Output: [(91 75 -29 -62) -62]
Test Case: 470 | Input/Output: [(-93 -16 45 -1) -93]
Test Case: 471 | Input/Output: [(7 -56 -87 4) -87]
Test Case: 472 | Input/Output: [(-44 24 -43 -83) -83]
Test Case: 473 | Input/Output: [(-65 35 45 -28) -65]
Test Case: 474 | Input/Output: [(95 -26 -62 -79) -79]
Test Case: 475 | Input/Output: [(-63 35 -6 -56) -63]
Test Case: 476 | Input/Output: [(-58 -86 -94 -54) -94]
Test Case: 477 | Input/Output: [(9 87 -92 -29) -92]
Test Case: 478 | Input/Output: [(19 7 -98 -15) -98]
Test Case: 479 | Input/Output: [(-23 -9 -70 4) -70]
Test Case: 480 | Input/Output: [(-76 -36 -46 -53) -76]
Test Case: 481 | Input/Output: [(3 -98 8 70) -98]
Test Case: 482 | Input/Output: [(93 -58 -3 3) -58]
Test Case: 483 | Input/Output: [(-69 -76 -5 22) -76]
Test Case: 484 | Input/Output: [(-88 -28 25 -46) -88]
Test Case: 485 | Input/Output: [(-54 35 86 13) -54]
Test Case: 486 | Input/Output: [(41 57 87 -86) -86]
Test Case: 487 | Input/Output: [(84 3 -34 77) -34]
Test Case: 488 | Input/Output: [(93 -47 -81 -17) -81]
Test Case: 489 | Input/Output: [(-3 45 -5 36) -5]
Test Case: 490 | Input/Output: [(23 -15 -25 8) -25]
Test Case: 491 | Input/Output: [(53 -94 -92 47) -94]
Test Case: 492 | Input/Output: [(20 -98 -72 20) -98]
Test Case: 493 | Input/Output: [(-32 -70 -22 30) -70]
Test Case: 494 | Input/Output: [(88 5 50 50) 5]
Test Case: 495 | Input/Output: [(70 12 -3 53) -3]
Test Case: 496 | Input/Output: [(24 -44 52 78) -44]
Test Case: 497 | Input/Output: [(83 84 24 83) 24]
Test Case: 498 | Input/Output: [(96 -95 47 56) -95]
Test Case: 499 | Input/Output: [(-8 -68 61 -77) -77]
Test Case: 500 | Input/Output: [(-99 -84 -40 -95) -99]
Test Case: 501 | Input/Output: [(-19 88 -60 39) -60]
Test Case: 502 | Input/Output: [(-64 -44 -52 -100) -100]
Test Case: 503 | Input/Output: [(83 -89 -89 100) -89]
Test Case: 504 | Input/Output: [(-6 23 60 4) -6]
Test Case: 505 | Input/Output: [(-27 67 23 30) -27]
Test Case: 506 | Input/Output: [(-6 45 -21 -25) -25]
Test Case: 507 | Input/Output: [(64 -80 17 -32) -80]
Test Case: 508 | Input/Output: [(-26 3 53 -68) -68]
Test Case: 509 | Input/Output: [(-33 29 -68 -20) -68]
Test Case: 510 | Input/Output: [(4 21 -64 -6) -64]
Test Case: 511 | Input/Output: [(3 -26 28 -84) -84]
Test Case: 512 | Input/Output: [(18 -44 71 -60) -60]
Test Case: 513 | Input/Output: [(-79 -25 13 -1) -79]
Test Case: 514 | Input/Output: [(94 77 60 -13) -13]
Test Case: 515 | Input/Output: [(-92 -29 -51 -50) -92]
Test Case: 516 | Input/Output: [(-25 66 66 89) -25]
Test Case: 517 | Input/Output: [(-9 28 33 -63) -63]
Test Case: 518 | Input/Output: [(-9 -17 17 1) -17]
Test Case: 519 | Input/Output: [(-29 96 -5 -18) -29]
Test Case: 520 | Input/Output: [(-77 -18 -86 93) -86]
Test Case: 521 | Input/Output: [(31 13 -24 2) -24]
Test Case: 522 | Input/Output: [(93 71 99 6) 6]
Test Case: 523 | Input/Output: [(30 -94 38 65) -94]
Test Case: 524 | Input/Output: [(14 38 -28 22) -28]
Test Case: 525 | Input/Output: [(4 -61 80 -76) -76]
Test Case: 526 | Input/Output: [(-96 -28 17 46) -96]
Test Case: 527 | Input/Output: [(33 81 29 -62) -62]
Test Case: 528 | Input/Output: [(-98 -37 -37 14) -98]
Test Case: 529 | Input/Output: [(25 79 -86 -55) -86]
Test Case: 530 | Input/Output: [(-37 -52 48 81) -52]
Test Case: 531 | Input/Output: [(58 -99 8 57) -99]
Test Case: 532 | Input/Output: [(35 -34 -100 -51) -100]
Test Case: 533 | Input/Output: [(-32 72 -76 -71) -76]
Test Case: 534 | Input/Output: [(39 43 -65 31) -65]
Test Case: 535 | Input/Output: [(21 -36 99 -30) -36]
Test Case: 536 | Input/Output: [(-6 -5 94 -67) -67]
Test Case: 537 | Input/Output: [(-8 -69 68 44) -69]
Test Case: 538 | Input/Output: [(-51 -76 9 -37) -76]
Test Case: 539 | Input/Output: [(-58 21 -51 -60) -60]
Test Case: 540 | Input/Output: [(-21 -77 70 -73) -77]
Test Case: 541 | Input/Output: [(-10 -29 -77 92) -77]
Test Case: 542 | Input/Output: [(-46 78 -2 56) -46]
Test Case: 543 | Input/Output: [(58 -21 -65 -32) -65]
Test Case: 544 | Input/Output: [(-35 -21 -65 -48) -65]
Test Case: 545 | Input/Output: [(45 -26 -54 -99) -99]
Test Case: 546 | Input/Output: [(11 64 -24 -93) -93]
Test Case: 547 | Input/Output: [(67 -53 -1 62) -53]
Test Case: 548 | Input/Output: [(-72 -27 -86 -75) -86]
Test Case: 549 | Input/Output: [(-80 -54 31 6) -80]
Test Case: 550 | Input/Output: [(-72 87 57 68) -72]
Test Case: 551 | Input/Output: [(72 -2 -65 -69) -69]
Test Case: 552 | Input/Output: [(4 24 -75 -100) -100]
Test Case: 553 | Input/Output: [(64 48 76 -47) -47]
Test Case: 554 | Input/Output: [(47 90 10 18) 10]
Test Case: 555 | Input/Output: [(-7 -100 44 11) -100]
Test Case: 556 | Input/Output: [(43 -93 -49 -88) -93]
Test Case: 557 | Input/Output: [(-10 -46 -64 -83) -83]
Test Case: 558 | Input/Output: [(-39 73 33 36) -39]
Test Case: 559 | Input/Output: [(-6 -12 -90 -76) -90]
Test Case: 560 | Input/Output: [(-52 47 67 -95) -95]
Test Case: 561 | Input/Output: [(-4 68 47 -40) -40]
Test Case: 562 | Input/Output: [(-5 -35 -31 47) -35]
Test Case: 563 | Input/Output: [(-42 95 -31 -23) -42]
Test Case: 564 | Input/Output: [(26 17 -10 8) -10]
Test Case: 565 | Input/Output: [(67 10 -10 83) -10]
Test Case: 566 | Input/Output: [(-78 18 -38 48) -78]
Test Case: 567 | Input/Output: [(-37 -5 -19 26) -37]
Test Case: 568 | Input/Output: [(98 32 -12 -59) -59]
Test Case: 569 | Input/Output: [(-74 -3 75 -43) -74]
Test Case: 570 | Input/Output: [(78 100 -41 -36) -41]
Test Case: 571 | Input/Output: [(8 99 -53 -96) -96]
Test Case: 572 | Input/Output: [(-50 96 -52 -11) -52]
Test Case: 573 | Input/Output: [(57 -63 65 6) -63]
Test Case: 574 | Input/Output: [(33 47 47 -41) -41]
Test Case: 575 | Input/Output: [(79 -70 -71 77) -71]
Test Case: 576 | Input/Output: [(0 -14 -77 0) -77]
Test Case: 577 | Input/Output: [(11 -78 26 -48) -78]
Test Case: 578 | Input/Output: [(48 -71 -98 26) -98]
Test Case: 579 | Input/Output: [(-99 -89 -46 47) -99]
Test Case: 580 | Input/Output: [(-45 -99 48 -41) -99]
Test Case: 581 | Input/Output: [(21 8 88 -33) -33]
Test Case: 582 | Input/Output: [(52 -31 -56 98) -56]
Test Case: 583 | Input/Output: [(64 63 91 -53) -53]
Test Case: 584 | Input/Output: [(77 0 88 -69) -69]
Test Case: 585 | Input/Output: [(21 -50 -65 -34) -65]
Test Case: 586 | Input/Output: [(-84 -25 1 23) -84]
Test Case: 587 | Input/Output: [(-75 -3 91 26) -75]
Test Case: 588 | Input/Output: [(-10 -59 -11 100) -59]
Test Case: 589 | Input/Output: [(-67 33 -86 7) -86]
Test Case: 590 | Input/Output: [(-100 23 -33 -40) -100]
Test Case: 591 | Input/Output: [(38 -37 88 -6) -37]
Test Case: 592 | Input/Output: [(41 -90 14 -86) -90]
Test Case: 593 | Input/Output: [(-61 23 80 30) -61]
Test Case: 594 | Input/Output: [(-38 -4 95 -45) -45]
Test Case: 595 | Input/Output: [(-83 -42 -14 65) -83]
Test Case: 596 | Input/Output: [(63 41 84 3) 3]
Test Case: 597 | Input/Output: [(-9 32 20 90) -9]
Test Case: 598 | Input/Output: [(-78 18 21 93) -78]
Test Case: 599 | Input/Output: [(-37 75 -55 24) -55]
Test Case: 600 | Input/Output: [(-87 -50 52 -18) -87]
Test Case: 601 | Input/Output: [(-64 51 67 -89) -89]
Test Case: 602 | Input/Output: [(-6 -38 -41 75) -41]
Test Case: 603 | Input/Output: [(-24 44 -69 -17) -69]
Test Case: 604 | Input/Output: [(57 67 36 -100) -100]
Test Case: 605 | Input/Output: [(24 62 17 50) 17]
Test Case: 606 | Input/Output: [(34 -99 -96 23) -99]
Test Case: 607 | Input/Output: [(1 3 67 -14) -14]
Test Case: 608 | Input/Output: [(62 18 -14 97) -14]
Test Case: 609 | Input/Output: [(-50 85 -55 -48) -55]
Test Case: 610 | Input/Output: [(96 -26 12 91) -26]
Test Case: 611 | Input/Output: [(-96 -75 -59 46) -96]
Test Case: 612 | Input/Output: [(-15 -98 -78 45) -98]
Test Case: 613 | Input/Output: [(-89 62 -10 61) -89]
Test Case: 614 | Input/Output: [(-13 -46 0 12) -46]
Test Case: 615 | Input/Output: [(-52 39 14 -21) -52]
Test Case: 616 | Input/Output: [(26 -43 -32 -34) -43]
Test Case: 617 | Input/Output: [(70 38 -84 61) -84]
Test Case: 618 | Input/Output: [(-66 66 34 -58) -66]
Test Case: 619 | Input/Output: [(78 40 99 -80) -80]
Test Case: 620 | Input/Output: [(25 -78 7 -87) -87]
Test Case: 621 | Input/Output: [(58 98 80 -75) -75]
Test Case: 622 | Input/Output: [(-34 39 83 38) -34]
Test Case: 623 | Input/Output: [(-75 -39 77 -67) -75]
Test Case: 624 | Input/Output: [(42 63 21 79) 21]
Test Case: 625 | Input/Output: [(-80 20 6 -11) -80]
Test Case: 626 | Input/Output: [(41 15 -65 -69) -69]
Test Case: 627 | Input/Output: [(-50 58 -92 -8) -92]
Test Case: 628 | Input/Output: [(44 67 22 58) 22]
Test Case: 629 | Input/Output: [(42 -3 -51 -45) -51]
Test Case: 630 | Input/Output: [(63 -47 76 37) -47]
Test Case: 631 | Input/Output: [(-2 32 -76 -83) -83]
Test Case: 632 | Input/Output: [(92 69 -64 36) -64]
Test Case: 633 | Input/Output: [(83 -16 49 38) -16]
Test Case: 634 | Input/Output: [(87 49 -6 -59) -59]
Test Case: 635 | Input/Output: [(13 70 -78 -6) -78]
Test Case: 636 | Input/Output: [(41 8 -9 76) -9]
Test Case: 637 | Input/Output: [(-45 86 88 7) -45]
Test Case: 638 | Input/Output: [(90 -77 52 3) -77]
Test Case: 639 | Input/Output: [(6 -50 36 -12) -50]
Test Case: 640 | Input/Output: [(99 55 -23 86) -23]
Test Case: 641 | Input/Output: [(4 86 -5 -6) -6]
Test Case: 642 | Input/Output: [(1 -12 45 2) -12]
Test Case: 643 | Input/Output: [(-19 -95 23 -67) -95]
Test Case: 644 | Input/Output: [(47 -34 -59 39) -59]
Test Case: 645 | Input/Output: [(-69 -77 71 53) -77]
Test Case: 646 | Input/Output: [(67 87 11 63) 11]
Test Case: 647 | Input/Output: [(77 70 43 -8) -8]
Test Case: 648 | Input/Output: [(73 74 -88 -43) -88]
Test Case: 649 | Input/Output: [(52 5 -75 -86) -86]
Test Case: 650 | Input/Output: [(33 -85 87 -12) -85]
Test Case: 651 | Input/Output: [(46 35 -72 -55) -72]
Test Case: 652 | Input/Output: [(55 100 62 -44) -44]
Test Case: 653 | Input/Output: [(-88 23 -21 87) -88]
Test Case: 654 | Input/Output: [(43 -95 70 -19) -95]
Test Case: 655 | Input/Output: [(3 -50 -98 82) -98]
Test Case: 656 | Input/Output: [(85 19 55 -71) -71]
Test Case: 657 | Input/Output: [(-10 17 -32 -27) -32]
Test Case: 658 | Input/Output: [(21 -43 47 -52) -52]
Test Case: 659 | Input/Output: [(-47 51 40 97) -47]
Test Case: 660 | Input/Output: [(-34 -89 -30 58) -89]
Test Case: 661 | Input/Output: [(-78 68 96 46) -78]
Test Case: 662 | Input/Output: [(92 -56 97 9) -56]
Test Case: 663 | Input/Output: [(-43 74 53 -61) -61]
Test Case: 664 | Input/Output: [(97 4 -29 -81) -81]
Test Case: 665 | Input/Output: [(-22 63 16 35) -22]
Test Case: 666 | Input/Output: [(7 43 25 -71) -71]
Test Case: 667 | Input/Output: [(-78 -71 93 -28) -78]
Test Case: 668 | Input/Output: [(-9 -12 46 -3) -12]
Test Case: 669 | Input/Output: [(-34 -78 -8 -62) -78]
Test Case: 670 | Input/Output: [(71 -46 -37 -14) -46]
Test Case: 671 | Input/Output: [(80 15 -11 -71) -71]
Test Case: 672 | Input/Output: [(78 -96 -72 -79) -96]
Test Case: 673 | Input/Output: [(77 -24 25 -13) -24]
Test Case: 674 | Input/Output: [(25 -99 20 -86) -99]
Test Case: 675 | Input/Output: [(44 -68 -35 -44) -68]
Test Case: 676 | Input/Output: [(1 -21 -59 -35) -59]
Test Case: 677 | Input/Output: [(-98 -47 -67 -78) -98]
Test Case: 678 | Input/Output: [(0 22 -56 -5) -56]
Test Case: 679 | Input/Output: [(-2 55 -77 -89) -89]
Test Case: 680 | Input/Output: [(89 -96 51 45) -96]
Test Case: 681 | Input/Output: [(-64 -54 72 -33) -64]
Test Case: 682 | Input/Output: [(-9 -7 -73 62) -73]
Test Case: 683 | Input/Output: [(81 17 45 18) 17]
Test Case: 684 | Input/Output: [(-77 -88 91 73) -88]
Test Case: 685 | Input/Output: [(-26 5 48 -44) -44]
Test Case: 686 | Input/Output: [(41 -67 7 42) -67]
Test Case: 687 | Input/Output: [(-35 -28 -80 45) -80]
Test Case: 688 | Input/Output: [(-47 -64 -44 -73) -73]
Test Case: 689 | Input/Output: [(-48 58 50 55) -48]
Test Case: 690 | Input/Output: [(-2 -79 55 -70) -79]
Test Case: 691 | Input/Output: [(-47 79 11 -66) -66]
Test Case: 692 | Input/Output: [(-52 53 -71 -47) -71]
Test Case: 693 | Input/Output: [(-33 -14 80 -86) -86]
Test Case: 694 | Input/Output: [(-50 -65 44 -80) -80]
Test Case: 695 | Input/Output: [(-98 69 22 87) -98]
Test Case: 696 | Input/Output: [(-34 55 97 -19) -34]
Test Case: 697 | Input/Output: [(79 46 14 38) 14]
Test Case: 698 | Input/Output: [(15 -41 76 -22) -41]
Test Case: 699 | Input/Output: [(75 -31 47 -89) -89]
Test Case: 700 | Input/Output: [(-41 73 16 -64) -64]
Test Case: 701 | Input/Output: [(48 16 -66 96) -66]
Test Case: 702 | Input/Output: [(46 -78 -85 89) -85]
Test Case: 703 | Input/Output: [(-50 -7 27 -87) -87]
Test Case: 704 | Input/Output: [(11 -31 -47 -37) -47]
Test Case: 705 | Input/Output: [(-70 100 -98 15) -98]
Test Case: 706 | Input/Output: [(0 19 85 49) 0]
Test Case: 707 | Input/Output: [(-26 10 -26 64) -26]
Test Case: 708 | Input/Output: [(63 32 19 5) 5]
Test Case: 709 | Input/Output: [(-58 -60 92 32) -60]
Test Case: 710 | Input/Output: [(-2 -81 100 -58) -81]
Test Case: 711 | Input/Output: [(-46 83 45 26) -46]
Test Case: 712 | Input/Output: [(-11 -5 -10 -8) -11]
Test Case: 713 | Input/Output: [(-83 -81 -95 -63) -95]
Test Case: 714 | Input/Output: [(-46 92 -10 56) -46]
Test Case: 715 | Input/Output: [(79 -45 87 -18) -45]
Test Case: 716 | Input/Output: [(-96 -70 -98 -29) -98]
Test Case: 717 | Input/Output: [(58 79 67 33) 33]
Test Case: 718 | Input/Output: [(-39 82 62 64) -39]
Test Case: 719 | Input/Output: [(-43 3 46 -76) -76]
Test Case: 720 | Input/Output: [(42 55 -36 21) -36]
Test Case: 721 | Input/Output: [(68 -64 -57 26) -64]
Test Case: 722 | Input/Output: [(52 -32 28 -27) -32]
Test Case: 723 | Input/Output: [(-17 34 -38 -83) -83]
Test Case: 724 | Input/Output: [(76 85 19 -51) -51]
Test Case: 725 | Input/Output: [(51 -6 -11 -86) -86]
Test Case: 726 | Input/Output: [(-73 -70 -71 91) -73]
Test Case: 727 | Input/Output: [(63 -38 24 -6) -38]
Test Case: 728 | Input/Output: [(26 21 22 -86) -86]
Test Case: 729 | Input/Output: [(87 -79 -52 6) -79]
Test Case: 730 | Input/Output: [(10 91 -26 28) -26]
Test Case: 731 | Input/Output: [(75 72 19 55) 19]
Test Case: 732 | Input/Output: [(-98 -53 31 -26) -98]
Test Case: 733 | Input/Output: [(-42 -32 -96 11) -96]
Test Case: 734 | Input/Output: [(87 -7 84 -47) -47]
Test Case: 735 | Input/Output: [(-36 -9 -63 71) -63]
Test Case: 736 | Input/Output: [(5 16 18 -75) -75]
Test Case: 737 | Input/Output: [(-23 -92 -31 74) -92]
Test Case: 738 | Input/Output: [(-53 -70 10 -69) -70]
Test Case: 739 | Input/Output: [(66 39 -13 -72) -72]
Test Case: 740 | Input/Output: [(-34 -42 34 -19) -42]
Test Case: 741 | Input/Output: [(66 27 -83 -34) -83]
Test Case: 742 | Input/Output: [(26 30 -25 80) -25]
Test Case: 743 | Input/Output: [(-22 -78 54 -96) -96]
Test Case: 744 | Input/Output: [(74 -71 74 -63) -71]
Test Case: 745 | Input/Output: [(93 85 -2 -72) -72]
Test Case: 746 | Input/Output: [(-52 19 33 95) -52]
Test Case: 747 | Input/Output: [(28 -61 -9 -50) -61]
Test Case: 748 | Input/Output: [(50 -60 75 -48) -60]
Test Case: 749 | Input/Output: [(51 70 57 91) 51]
Test Case: 750 | Input/Output: [(30 7 -82 -26) -82]
Test Case: 751 | Input/Output: [(-67 -54 85 -80) -80]
Test Case: 752 | Input/Output: [(-38 -90 25 56) -90]
Test Case: 753 | Input/Output: [(2 59 74 41) 2]
Test Case: 754 | Input/Output: [(-33 -88 -29 -23) -88]
Test Case: 755 | Input/Output: [(88 -65 -3 79) -65]
Test Case: 756 | Input/Output: [(6 -75 -96 -10) -96]
Test Case: 757 | Input/Output: [(-99 32 75 -88) -99]
Test Case: 758 | Input/Output: [(73 -64 1 -22) -64]
Test Case: 759 | Input/Output: [(76 17 69 56) 17]
Test Case: 760 | Input/Output: [(78 96 -34 93) -34]
Test Case: 761 | Input/Output: [(89 7 -100 47) -100]
Test Case: 762 | Input/Output: [(-83 -46 88 -13) -83]
Test Case: 763 | Input/Output: [(-96 42 100 -3) -96]
Test Case: 764 | Input/Output: [(90 -63 83 89) -63]
Test Case: 765 | Input/Output: [(23 31 -93 -76) -93]
Test Case: 766 | Input/Output: [(16 -60 -33 91) -60]
Test Case: 767 | Input/Output: [(-18 -77 94 -47) -77]
Test Case: 768 | Input/Output: [(4 50 -41 -79) -79]
Test Case: 769 | Input/Output: [(-76 81 15 -32) -76]
Test Case: 770 | Input/Output: [(-9 -18 86 87) -18]
Test Case: 771 | Input/Output: [(-38 -84 5 57) -84]
Test Case: 772 | Input/Output: [(70 38 -31 -23) -31]
Test Case: 773 | Input/Output: [(-12 -93 -49 85) -93]
Test Case: 774 | Input/Output: [(-84 -12 78 61) -84]
Test Case: 775 | Input/Output: [(-98 -54 -47 -52) -98]
Test Case: 776 | Input/Output: [(-83 8 71 73) -83]
Test Case: 777 | Input/Output: [(-92 -53 -50 -73) -92]
Test Case: 778 | Input/Output: [(-17 5 74 -31) -31]
Test Case: 779 | Input/Output: [(4 -74 -82 -71) -82]
Test Case: 780 | Input/Output: [(-68 37 -23 -21) -68]
Test Case: 781 | Input/Output: [(-71 31 66 48) -71]
Test Case: 782 | Input/Output: [(46 23 -98 -87) -98]
Test Case: 783 | Input/Output: [(37 14 3 75) 3]
Test Case: 784 | Input/Output: [(33 -62 -52 -42) -62]
Test Case: 785 | Input/Output: [(64 1 -89 82) -89]
Test Case: 786 | Input/Output: [(-59 -65 -10 -99) -99]
Test Case: 787 | Input/Output: [(-78 87 -49 55) -78]
Test Case: 788 | Input/Output: [(46 77 -44 91) -44]
Test Case: 789 | Input/Output: [(-30 1 -23 79) -30]
Test Case: 790 | Input/Output: [(-47 -43 42 -56) -56]
Test Case: 791 | Input/Output: [(17 -21 -38 15) -38]
Test Case: 792 | Input/Output: [(-17 92 56 100) -17]
Test Case: 793 | Input/Output: [(-88 -64 -19 46) -88]
Test Case: 794 | Input/Output: [(62 25 -55 -81) -81]
Test Case: 795 | Input/Output: [(5 30 56 2) 2]
Test Case: 796 | Input/Output: [(92 83 -35 93) -35]
Test Case: 797 | Input/Output: [(-7 79 -53 -1) -53]
Test Case: 798 | Input/Output: [(-37 -53 -58 64) -58]
Test Case: 799 | Input/Output: [(56 69 -88 58) -88]
Test Case: 800 | Input/Output: [(-76 -96 -29 20) -96]
Test Case: 801 | Input/Output: [(71 -52 -95 -20) -95]
Test Case: 802 | Input/Output: [(-26 76 19 -97) -97]
Test Case: 803 | Input/Output: [(-46 -44 8 -95) -95]
Test Case: 804 | Input/Output: [(-71 33 -59 -85) -85]
Test Case: 805 | Input/Output: [(21 -1 -93 -68) -93]
Test Case: 806 | Input/Output: [(-46 -45 -20 -49) -49]
Test Case: 807 | Input/Output: [(48 -69 27 -89) -89]
Test Case: 808 | Input/Output: [(-37 -35 -76 -44) -76]
Test Case: 809 | Input/Output: [(-42 -87 -34 3) -87]
Test Case: 810 | Input/Output: [(-19 6 -84 -22) -84]
Test Case: 811 | Input/Output: [(-81 100 80 -5) -81]
Test Case: 812 | Input/Output: [(60 81 22 -29) -29]
Test Case: 813 | Input/Output: [(-7 57 10 -57) -57]
Test Case: 814 | Input/Output: [(-24 27 22 41) -24]
Test Case: 815 | Input/Output: [(-29 -46 -29 -26) -46]
Test Case: 816 | Input/Output: [(51 51 -2 48) -2]
Test Case: 817 | Input/Output: [(70 96 0 31) 0]
Test Case: 818 | Input/Output: [(-98 32 -62 -46) -98]
Test Case: 819 | Input/Output: [(47 -53 -60 23) -60]
Test Case: 820 | Input/Output: [(13 -23 10 47) -23]
Test Case: 821 | Input/Output: [(93 -10 -31 -7) -31]
Test Case: 822 | Input/Output: [(-76 -2 -82 -63) -82]
Test Case: 823 | Input/Output: [(-7 -65 -39 -89) -89]
Test Case: 824 | Input/Output: [(-7 17 -92 13) -92]
Test Case: 825 | Input/Output: [(15 -14 -100 47) -100]
Test Case: 826 | Input/Output: [(-47 17 -64 88) -64]
Test Case: 827 | Input/Output: [(-5 25 -46 87) -46]
Test Case: 828 | Input/Output: [(-19 62 -4 67) -19]
Test Case: 829 | Input/Output: [(-80 37 -81 -50) -81]
Test Case: 830 | Input/Output: [(-25 35 19 -58) -58]
Test Case: 831 | Input/Output: [(72 -36 -22 63) -36]
Test Case: 832 | Input/Output: [(79 -88 -68 -96) -96]
Test Case: 833 | Input/Output: [(91 -20 -44 76) -44]
Test Case: 834 | Input/Output: [(-18 -20 -66 27) -66]
Test Case: 835 | Input/Output: [(-52 -25 28 71) -52]
Test Case: 836 | Input/Output: [(-62 29 -26 73) -62]
Test Case: 837 | Input/Output: [(-99 -72 -51 85) -99]
Test Case: 838 | Input/Output: [(74 80 51 -44) -44]
Test Case: 839 | Input/Output: [(1 -95 -35 -62) -95]
Test Case: 840 | Input/Output: [(90 52 6 -23) -23]
Test Case: 841 | Input/Output: [(67 52 -67 -22) -67]
Test Case: 842 | Input/Output: [(-68 -50 -74 -36) -74]
Test Case: 843 | Input/Output: [(78 -19 -91 -46) -91]
Test Case: 844 | Input/Output: [(16 -18 -45 -84) -84]
Test Case: 845 | Input/Output: [(78 -27 -98 -8) -98]
Test Case: 846 | Input/Output: [(-26 34 44 -40) -40]
Test Case: 847 | Input/Output: [(-63 -50 -72 -12) -72]
Test Case: 848 | Input/Output: [(-28 55 43 58) -28]
Test Case: 849 | Input/Output: [(4 -90 85 0) -90]
Test Case: 850 | Input/Output: [(93 16 -46 -20) -46]
Test Case: 851 | Input/Output: [(24 88 -58 -7) -58]
Test Case: 852 | Input/Output: [(-84 7 96 -62) -84]
Test Case: 853 | Input/Output: [(27 -64 40 22) -64]
Test Case: 854 | Input/Output: [(98 -69 18 98) -69]
Test Case: 855 | Input/Output: [(3 93 -14 97) -14]
Test Case: 856 | Input/Output: [(19 -59 -95 38) -95]
Test Case: 857 | Input/Output: [(-68 -66 25 97) -68]
Test Case: 858 | Input/Output: [(-29 -1 -55 31) -55]
Test Case: 859 | Input/Output: [(-48 68 -81 72) -81]
Test Case: 860 | Input/Output: [(-20 -74 35 -40) -74]
Test Case: 861 | Input/Output: [(-50 83 88 74) -50]
Test Case: 862 | Input/Output: [(4 -43 -96 -98) -98]
Test Case: 863 | Input/Output: [(-23 -87 72 -54) -87]
Test Case: 864 | Input/Output: [(18 -33 -37 -17) -37]
Test Case: 865 | Input/Output: [(49 -44 18 4) -44]
Test Case: 866 | Input/Output: [(84 -90 56 -9) -90]
Test Case: 867 | Input/Output: [(-31 -81 -35 -47) -81]
Test Case: 868 | Input/Output: [(28 -77 -82 31) -82]
Test Case: 869 | Input/Output: [(27 -69 42 -70) -70]
Test Case: 870 | Input/Output: [(64 -20 24 -61) -61]
Test Case: 871 | Input/Output: [(-44 30 26 69) -44]
Test Case: 872 | Input/Output: [(79 80 -5 -62) -62]
Test Case: 873 | Input/Output: [(-96 66 -73 7) -96]
Test Case: 874 | Input/Output: [(49 32 -95 98) -95]
Test Case: 875 | Input/Output: [(-41 34 -36 -78) -78]
Test Case: 876 | Input/Output: [(-55 41 74 -30) -55]
Test Case: 877 | Input/Output: [(-29 36 72 62) -29]
Test Case: 878 | Input/Output: [(-16 -26 16 61) -26]
Test Case: 879 | Input/Output: [(-22 2 -54 72) -54]
Test Case: 880 | Input/Output: [(-99 -55 -33 70) -99]
Test Case: 881 | Input/Output: [(-77 -51 -97 85) -97]
Test Case: 882 | Input/Output: [(80 -95 32 4) -95]
Test Case: 883 | Input/Output: [(-54 -83 -51 40) -83]
Test Case: 884 | Input/Output: [(-44 10 -68 -8) -68]
Test Case: 885 | Input/Output: [(74 16 -76 59) -76]
Test Case: 886 | Input/Output: [(-18 5 11 -85) -85]
Test Case: 887 | Input/Output: [(-54 -78 97 -89) -89]
Test Case: 888 | Input/Output: [(-95 -35 -56 -8) -95]
Test Case: 889 | Input/Output: [(-14 82 75 -58) -58]
Test Case: 890 | Input/Output: [(59 83 58 66) 58]
Test Case: 891 | Input/Output: [(50 -93 79 31) -93]
Test Case: 892 | Input/Output: [(81 -24 50 56) -24]
Test Case: 893 | Input/Output: [(30 28 -97 -9) -97]
Test Case: 894 | Input/Output: [(97 -64 -98 49) -98]
Test Case: 895 | Input/Output: [(99 91 -53 0) -53]
Test Case: 896 | Input/Output: [(26 10 79 42) 10]
Test Case: 897 | Input/Output: [(-9 95 -70 36) -70]
Test Case: 898 | Input/Output: [(-38 -10 31 20) -38]
Test Case: 899 | Input/Output: [(-73 29 -78 -68) -78]
Test Case: 900 | Input/Output: [(-81 79 -85 -37) -85]
Test Case: 901 | Input/Output: [(-97 -43 -56 -49) -97]
Test Case: 902 | Input/Output: [(-58 42 87 55) -58]
Test Case: 903 | Input/Output: [(100 -75 30 23) -75]
Test Case: 904 | Input/Output: [(-89 -23 2 -100) -100]
Test Case: 905 | Input/Output: [(-65 97 87 -81) -81]
Test Case: 906 | Input/Output: [(-49 84 69 75) -49]
Test Case: 907 | Input/Output: [(81 -11 78 2) -11]
Test Case: 908 | Input/Output: [(90 20 76 31) 20]
Test Case: 909 | Input/Output: [(6 -19 91 64) -19]
Test Case: 910 | Input/Output: [(-45 66 91 -8) -45]
Test Case: 911 | Input/Output: [(-76 -13 68 -42) -76]
Test Case: 912 | Input/Output: [(0 37 -20 51) -20]
Test Case: 913 | Input/Output: [(32 -4 -79 54) -79]
Test Case: 914 | Input/Output: [(-41 -52 -17 -20) -52]
Test Case: 915 | Input/Output: [(19 67 69 -69) -69]
Test Case: 916 | Input/Output: [(-32 28 9 1) -32]
Test Case: 917 | Input/Output: [(-10 -33 76 -36) -36]
Test Case: 918 | Input/Output: [(36 -96 1 -42) -96]
Test Case: 919 | Input/Output: [(-50 54 47 7) -50]
Test Case: 920 | Input/Output: [(51 70 85 -83) -83]
Test Case: 921 | Input/Output: [(10 51 85 66) 10]
Test Case: 922 | Input/Output: [(60 69 100 -55) -55]
Test Case: 923 | Input/Output: [(75 -98 56 -52) -98]
Test Case: 924 | Input/Output: [(-49 2 20 -50) -50]
Test Case: 925 | Input/Output: [(22 59 73 54) 22]
Test Case: 926 | Input/Output: [(88 -54 -42 -88) -88]
Test Case: 927 | Input/Output: [(-69 4 97 -72) -72]
Test Case: 928 | Input/Output: [(17 -61 85 48) -61]
Test Case: 929 | Input/Output: [(-37 90 -22 81) -37]
Test Case: 930 | Input/Output: [(-11 -7 -43 -88) -88]
Test Case: 931 | Input/Output: [(-10 84 26 -73) -73]
Test Case: 932 | Input/Output: [(91 88 -65 -20) -65]
Test Case: 933 | Input/Output: [(45 42 -68 -87) -87]
Test Case: 934 | Input/Output: [(22 32 2 13) 2]
Test Case: 935 | Input/Output: [(61 25 88 45) 25]
Test Case: 936 | Input/Output: [(21 -69 -62 -46) -69]
Test Case: 937 | Input/Output: [(94 -47 47 -66) -66]
Test Case: 938 | Input/Output: [(84 49 -13 -52) -52]
Test Case: 939 | Input/Output: [(-77 86 -99 -97) -99]
Test Case: 940 | Input/Output: [(86 23 -59 90) -59]
Test Case: 941 | Input/Output: [(24 -41 45 51) -41]
Test Case: 942 | Input/Output: [(-51 18 -63 39) -63]
Test Case: 943 | Input/Output: [(75 -79 29 -65) -79]
Test Case: 944 | Input/Output: [(18 -79 94 79) -79]
Test Case: 945 | Input/Output: [(-100 5 5 -5) -100]
Test Case: 946 | Input/Output: [(42 35 -26 92) -26]
Test Case: 947 | Input/Output: [(-17 -15 19 44) -17]
Test Case: 948 | Input/Output: [(-31 -10 5 100) -31]
Test Case: 949 | Input/Output: [(1 15 17 41) 1]
Test Case: 950 | Input/Output: [(15 -69 63 -94) -94]
Test Case: 951 | Input/Output: [(-58 78 -99 65) -99]
Test Case: 952 | Input/Output: [(13 23 64 87) 13]
Test Case: 953 | Input/Output: [(53 41 34 16) 16]
Test Case: 954 | Input/Output: [(-68 -57 -30 87) -68]
Test Case: 955 | Input/Output: [(-31 11 -77 -98) -98]
Test Case: 956 | Input/Output: [(-42 15 -41 -46) -46]
Test Case: 957 | Input/Output: [(-92 -48 36 37) -92]
Test Case: 958 | Input/Output: [(84 13 -1 73) -1]
Test Case: 959 | Input/Output: [(-51 -67 -67 60) -67]
Test Case: 960 | Input/Output: [(-77 48 -38 -54) -77]
Test Case: 961 | Input/Output: [(33 21 -12 -48) -48]
Test Case: 962 | Input/Output: [(55 82 -20 -60) -60]
Test Case: 963 | Input/Output: [(5 25 15 -62) -62]
Test Case: 964 | Input/Output: [(-79 23 53 5) -79]
Test Case: 965 | Input/Output: [(-95 84 -52 60) -95]
Test Case: 966 | Input/Output: [(82 -10 66 10) -10]
Test Case: 967 | Input/Output: [(3 -38 48 -67) -67]
Test Case: 968 | Input/Output: [(61 51 -41 -65) -65]
Test Case: 969 | Input/Output: [(22 78 95 -33) -33]
Test Case: 970 | Input/Output: [(-100 -6 27 -82) -100]
Test Case: 971 | Input/Output: [(-42 46 40 -23) -42]
Test Case: 972 | Input/Output: [(-48 17 31 8) -48]
Test Case: 973 | Input/Output: [(-60 96 -34 96) -60]
Test Case: 974 | Input/Output: [(59 -100 -86 43) -100]
Test Case: 975 | Input/Output: [(93 25 -42 10) -42]
Test Case: 976 | Input/Output: [(25 11 85 19) 11]
Test Case: 977 | Input/Output: [(72 9 61 -10) -10]
Test Case: 978 | Input/Output: [(92 -37 63 56) -37]
Test Case: 979 | Input/Output: [(77 -21 52 42) -21]
Test Case: 980 | Input/Output: [(50 45 97 82) 45]
Test Case: 981 | Input/Output: [(53 -60 87 96) -60]
Test Case: 982 | Input/Output: [(49 -91 70 74) -91]
Test Case: 983 | Input/Output: [(63 20 -52 77) -52]
Test Case: 984 | Input/Output: [(3 19 58 -62) -62]
Test Case: 985 | Input/Output: [(97 -6 61 -23) -23]
Test Case: 986 | Input/Output: [(-43 46 83 -89) -89]
Test Case: 987 | Input/Output: [(-68 25 2 96) -68]
Test Case: 988 | Input/Output: [(17 62 54 37) 17]
Test Case: 989 | Input/Output: [(-74 -10 74 -75) -75]
Test Case: 990 | Input/Output: [(29 -30 62 33) -30]
Test Case: 991 | Input/Output: [(70 -80 42 -10) -80]
Test Case: 992 | Input/Output: [(-27 55 -47 -58) -58]
Test Case: 993 | Input/Output: [(71 -45 -12 -96) -96]
Test Case: 994 | Input/Output: [(94 -24 -10 51) -24]
Test Case: 995 | Input/Output: [(-99 -56 3 54) -99]
Test Case: 996 | Input/Output: [(-60 95 70 97) -60]
Test Case: 997 | Input/Output: [(26 97 -51 -38) -51]
Test Case: 998 | Input/Output: [(-52 -80 -30 63) -80]
Test Case: 999 | Input/Output: [(-53 85 62 7) -53]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -83 23 -43 93 -59 -67 -24 51 112 49 119 41 -6 19 81 46
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-1 66 66 66] -1] [[24 24 24 -4] -4] [[-16 -26 -16 -16] -26] [[26 26 17 26] 17] [[50 50 54 50] 50] [[78 13 78 78] 13] [[12 -69 12 12] -69] [[56 8 8 8] 8] [[-28 35 35 35] -28] [[39 -18 39 39] -18] [(-97 -97 -97 -97) -97] [(-10 -10 -10 -10) -10] [(-62 -62 -62 -62) -62] [(-9 -9 -9 -9) -9] [(26 26 26 26) 26] [(2 67 60 30) 2] [(24 43 56 17) 17] [(93 8 32 91) 8] [(9 57 60 90) 9] [(7 30 15 81) 7] [(97 49 73 64) 49] [(8 83 33 67) 8] [(72 19 98 29) 19] [(2 64 6 27) 2] [(82 78 60 22) 22] [(65 49 62 62) 49] [(37 21 12 35) 12] [(11 33 42 100) 11] [(32 82 58 36) 32] [(99 80 56 22) 22] [(54 27 7 44) 7] [(81 20 14 94) 14] [(1 64 69 91) 1] [(73 82 76 54) 54] [(78 73 12 37) 12] [(12 47 -93 100) -93] [(76 64 -30 -85) -85] [(13 -93 29 31) -93] [(14 -77 -55 72) -77] [(-63 90 42 96) -63] [(-14 15 82 91) -14] [(-20 59 -10 -63) -63] [(-37 -26 63 90) -37] [(-13 -96 -40 -47) -96] [(69 -4 11 -23) -23] [(-25 25 -72 -35) -72] [(-34 69 17 -73) -73] [(-91 -15 60 86) -91] [(79 -26 38 -9) -26] [(-65 18 -54 -23) -65] [(-4 58 72 6) -4] [(-73 87 -64 -27) -73] [(57 26 36 39) 26] [(63 -63 49 -5) -63] [(90 68 30 -80) -80] [(62 -28 18 76) -28] [(26 -42 81 88) -42] [(-88 8 -16 -20) -88] [(77 67 58 -9) -9] [(21 69 73 73) 21] [(28 -85 52 33) -85] [(-94 -28 -45 -12) -94] [(-18 -23 -70 -31) -70] [(37 49 48 -8) -8] [(-79 7 30 93) -79] [(51 -85 13 33) -85] [(-89 51 1 58) -89] [(-41 88 90 -21) -41] [(-25 12 -1 26) -25] [(-5 -10 -98 -61) -98] [(78 -3 22 37) -3] [(25 -92 -53 78) -92] [(-34 9 97 -94) -94] [(-29 23 46 -100) -100] [(99 82 93 -66) -66] [(76 -36 -98 54) -98] [(-39 67 -64 89) -64] [(-14 90 87 -65) -65] [(-97 82 -3 -2) -97] [(-71 -65 -72 73) -72] [(-69 -28 23 100) -69] [(42 -48 -61 -98) -98] [(-98 26 18 85) -98] [(2 -39 -52 71) -52] [(-81 42 49 -41) -81] [(98 -65 -31 -25) -65] [(-25 -2 27 -4) -25] [(-65 -88 91 -3) -88] [(-47 40 -9 87) -47] [(-95 51 -30 -37) -95] [(23 -16 6 66) -16] [(-8 6 -78 -32) -78] [(-82 -92 -92 -27) -92] [(-44 27 13 24) -44] [(1 -70 -22 85) -70])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 91                 
Correct output: 9                   | Program output: 90                 
Correct output: 7                   | Program output: 81                 
Correct output: 49                  | Program output: 64                 
Correct output: 8                   | Program output: 67                 
Correct output: 19                  | Program output: 29                 
Correct output: 2                   | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 35                 
Correct output: 11                  | Program output: 100                
Correct output: 32                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 94                 
Correct output: 1                   | Program output: 91                 
Correct output: 54                  | Program output: 54                 
Correct output: 12                  | Program output: 37                 
Correct output: -93                 | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: 31                 
Correct output: -77                 | Program output: 72                 
Correct output: -63                 | Program output: 96                 
Correct output: -14                 | Program output: 91                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: 90                 
Correct output: -96                 | Program output: -47                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 86                 
Correct output: -26                 | Program output: -9                 
Correct output: -65                 | Program output: -23                
Correct output: -4                  | Program output: 6                  
Correct output: -73                 | Program output: -27                
Correct output: 26                  | Program output: 39                 
Correct output: -63                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -28                 | Program output: 76                 
Correct output: -42                 | Program output: 88                 
Correct output: -88                 | Program output: -20                
Correct output: -9                  | Program output: -9                 
Correct output: 21                  | Program output: 73                 
Correct output: -85                 | Program output: 33                 
Correct output: -94                 | Program output: -12                
Correct output: -70                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: 93                 
Correct output: -85                 | Program output: 33                 
Correct output: -89                 | Program output: 58                 
Correct output: -41                 | Program output: -21                
Correct output: -25                 | Program output: 26                 
Correct output: -98                 | Program output: -61                
Correct output: -3                  | Program output: 37                 
Correct output: -92                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: 54                 
Correct output: -64                 | Program output: 89                 
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -2                 
Correct output: -72                 | Program output: 73                 
Correct output: -69                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 85                 
Correct output: -52                 | Program output: 71                 
Correct output: -81                 | Program output: -41                
Correct output: -65                 | Program output: -25                
Correct output: -25                 | Program output: -4                 
Correct output: -88                 | Program output: -3                 
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: -37                
Correct output: -16                 | Program output: 66                 
Correct output: -78                 | Program output: -32                
Correct output: -92                 | Program output: -27                
Correct output: -44                 | Program output: 24                 
Correct output: -70                 | Program output: 85                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if})
Lexicase best program: (boolean_frominteger boolean_eq boolean_dup_items exec_yank integer_eq integer_empty exec_yank integer_swap exec_dup_items integer_add boolean_pop integer_pop boolean_pop exec_do*while (in3) integer_min exec_k_when_autoconstructing (integer_dec exec_dup_items) (integer_lt) in4 print_integer exec_flush boolean_empty exec_while () integer_lt boolean_dup_items integer_stackdepth integer_eq exec_y_when_autoconstructing (integer_empty integer_mult) print_integer exec_rot (exec_yank exec_rot (boolean_stackdepth integer_inc integer_fromboolean) (print_exec () integer_lte exec_do*range (exec_do*count (exec_when (exec_y_when_autoconstructing (exec_yank integer_gt integer_inc exec_pop (exec_dup (exec_eq) boolean_yank exec_dup (boolean_dup_times integer_div exec_rot (exec_do*range (in3 integer_dup_items print_integer boolean_dup exec_if () ())) () ()))))))) ()) () ())
Lexicase best errors: [0 1 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 88
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if})
Zero cases best program: (boolean_frominteger boolean_eq boolean_dup_items exec_yank integer_eq integer_empty exec_yank integer_swap exec_dup_items integer_add boolean_pop integer_pop boolean_pop exec_do*while (in3) integer_min exec_k_when_autoconstructing (integer_dec exec_dup_items) (integer_lt) in4 print_integer exec_flush boolean_empty exec_while () integer_lt boolean_dup_items integer_stackdepth integer_eq exec_y_when_autoconstructing (integer_empty integer_mult) print_integer exec_rot (exec_yank exec_rot (boolean_stackdepth integer_inc integer_fromboolean) (print_exec () integer_lte exec_do*range (exec_do*count (exec_when (exec_y_when_autoconstructing (exec_yank integer_gt integer_inc exec_pop (exec_dup (exec_eq) boolean_yank exec_dup (boolean_dup_times integer_div exec_rot (exec_do*range (in3 integer_dup_items print_integer boolean_dup exec_if () ())) () ()))))))) ()) () ())
Zero cases best errors: [0 1 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 88
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 1 4 1 9 4 1 4 3 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (9 1 4 1 9 4 1 4 3 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank})
Best program: (integer_swap exec_do*count (exec_shove (exec_while () exec_dup_items boolean_dup exec_when (integer_fromboolean) in4 integer_fromboolean) print_integer boolean_stackdepth) integer_mod boolean_dup_items exec_shove (exec_y_when_autoconstructing (integer_gt boolean_frominteger exec_dup () integer_swap exec_do*count (boolean_invert_second_then_and) exec_while (integer_mult integer_yank))))
Errors: [0 1 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 25
Size: 35
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 9.961
Median total errors in population: 10
Error averages by case: (0.991 0.999 0.996 0.999 0.991 0.996 0.999 0.996 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.161
Average program size in population (points): 69.016
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 463947
--- Timings ---
Current time: 1559583065429 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.4%
Reproduction:         0.8 seconds, 30.5%
Fitness Testing:      1.6 seconds, 65.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_761} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_s} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_boolean_785} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction tagged_973} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction 62} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 1, :instruction tag_exec_791} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 1, :instruction in2})
Lexicase best program: (boolean_xor in1 integer_lte integer_sub boolean_eq exec_do*range (print_integer boolean_frominteger integer_add) exec_y () print_newline boolean_invert_first_then_and integer_add print_integer exec_yank integer_div boolean_stackdepth exec_s_when_autoconstructing () (boolean_or in1 integer_empty boolean_eq) (exec_flush) exec_empty integer_max boolean_yank integer_max exec_if (exec_shove (boolean_yankdup exec_dup_times (in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq integer_rot boolean_stackdepth exec_if () () exec_k_when_autoconstructing (in1 exec_if (exec_empty boolean_and) (boolean_eq boolean_swap integer_div) print_boolean tagged_761 in3 integer_div boolean_invert_second_then_and exec_flush boolean_dup) (exec_eq exec_s_when_autoconstructing (integer_empty integer_yankdup boolean_shove boolean_invert_second_then_and exec_s () () (integer_lt) exec_when (in3) integer_dup_times exec_do*times (integer_gt tag_boolean_785 integer_lte integer_mult integer_rot exec_do*range (integer_dup integer_add exec_stackdepth) exec_noop) tagged_973 boolean_xor exec_do*count (in1) exec_yank integer_eq) (integer_dec 62 integer_empty) (exec_do*range (exec_eq boolean_invert_second_then_and integer_inc boolean_not tag_exec_791 () exec_do*count (exec_do*range () in2)))))))) ())
Lexicase best errors: [1 1 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 132
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_761} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_s} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_boolean_785} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction tagged_973} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction 62} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 1, :instruction tag_exec_791} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 1, :instruction in2})
Zero cases best program: (boolean_xor in1 integer_lte integer_sub boolean_eq exec_do*range (print_integer boolean_frominteger integer_add) exec_y () print_newline boolean_invert_first_then_and integer_add print_integer exec_yank integer_div boolean_stackdepth exec_s_when_autoconstructing () (boolean_or in1 integer_empty boolean_eq) (exec_flush) exec_empty integer_max boolean_yank integer_max exec_if (exec_shove (boolean_yankdup exec_dup_times (in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq integer_rot boolean_stackdepth exec_if () () exec_k_when_autoconstructing (in1 exec_if (exec_empty boolean_and) (boolean_eq boolean_swap integer_div) print_boolean tagged_761 in3 integer_div boolean_invert_second_then_and exec_flush boolean_dup) (exec_eq exec_s_when_autoconstructing (integer_empty integer_yankdup boolean_shove boolean_invert_second_then_and exec_s () () (integer_lt) exec_when (in3) integer_dup_times exec_do*times (integer_gt tag_boolean_785 integer_lte integer_mult integer_rot exec_do*range (integer_dup integer_add exec_stackdepth) exec_noop) tagged_973 boolean_xor exec_do*count (in1) exec_yank integer_eq) (integer_dec 62 integer_empty) (exec_do*range (exec_eq boolean_invert_second_then_and integer_inc boolean_not tag_exec_791 () exec_do*count (exec_do*range () in2)))))))) ())
Zero cases best errors: [1 1 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 132
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (581 1000 1000 324 324 353 352 324 232 912)
Population mean number of elite cases: 5.40
Count of perfect (error zero) individuals by case: (581 0 0 324 324 353 352 324 232 912)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_761} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_s} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_boolean_785} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction tagged_973} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction 62} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 1, :instruction tag_exec_791} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 1, :instruction in2})
Best program: (boolean_xor in1 integer_lte integer_sub boolean_eq exec_do*range (print_integer boolean_frominteger integer_add) exec_y () print_newline boolean_invert_first_then_and integer_add boolean_dup_times exec_yank integer_div boolean_stackdepth exec_s_when_autoconstructing () (boolean_or in1 integer_empty boolean_eq) (exec_flush) exec_empty integer_max exec_if (exec_shove (boolean_yankdup exec_dup_times (in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq integer_rot boolean_stackdepth exec_if () () exec_k_when_autoconstructing (in1 exec_if (exec_empty boolean_and) (boolean_eq boolean_swap integer_div) print_boolean tagged_761 in3 integer_div boolean_invert_second_then_and exec_flush boolean_dup) (exec_eq exec_s_when_autoconstructing (integer_empty integer_yankdup boolean_shove boolean_invert_second_then_and exec_s () () (integer_lt) exec_when (in3) integer_dup_times exec_do*times (integer_gt tag_boolean_785 integer_lte integer_mult integer_rot exec_do*range (integer_dup integer_add exec_stackdepth) exec_noop) tagged_973 boolean_xor exec_do*count (in1) exec_yank integer_eq) (integer_dec 62 integer_empty) (exec_do*range (exec_eq boolean_invert_second_then_and integer_inc boolean_not tag_exec_791 () exec_do*count (exec_do*range () in2)))))))) ())
Errors: [1 1 1 0 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 98
Size: 130
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 6.598
Median total errors in population: 6
Error averages by case: (0.419 1.0 1.0 0.676 0.676 0.647 0.648 0.676 0.768 0.088)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 61.68
Average program size in population (points): 82.215
Average percent parens in population: 0.244
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.482
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 951971
--- Timings ---
Current time: 1559583068206 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         2.3 seconds, 46.0%
Fitness Testing:      2.2 seconds, 44.1%
Report:               0.4 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_761} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_s} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_boolean_785} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction tagged_973} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction 62} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 1, :instruction tag_exec_791} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction in2})
Lexicase best program: (boolean_xor in1 integer_lte integer_sub boolean_eq exec_do*range (print_integer boolean_frominteger integer_add) exec_y () print_newline boolean_invert_first_then_and integer_add print_integer exec_yank integer_div boolean_stackdepth exec_s_when_autoconstructing () (boolean_or in1 integer_empty boolean_eq) (exec_flush) exec_empty integer_max boolean_yank integer_max exec_if (exec_shove (boolean_yankdup exec_dup_times (in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq integer_rot boolean_stackdepth exec_if () () exec_k_when_autoconstructing (in1 exec_if (exec_empty boolean_and) (boolean_eq boolean_swap integer_div) print_boolean) (tagged_761 in3 integer_div boolean_invert_second_then_and exec_flush boolean_dup) exec_eq exec_s_when_autoconstructing (integer_empty integer_yankdup boolean_shove boolean_invert_second_then_and exec_s () () (integer_lt) exec_when (in3) integer_dup_times exec_do*times (integer_gt tag_boolean_785 integer_lte integer_mult integer_rot exec_do*range (integer_dup integer_add exec_stackdepth) exec_noop) tagged_973 boolean_xor exec_do*count (in1) exec_yank integer_eq) (integer_dec 62 integer_empty) (exec_do*range (exec_eq boolean_invert_second_then_and integer_inc boolean_not tag_exec_791 () exec_do*count (exec_do*range (in2)))))))) ())
Lexicase best errors: [1 0 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 132
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_761} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_s} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_boolean_785} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction tagged_973} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction 62} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 1, :instruction tag_exec_791} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction in2})
Zero cases best program: (boolean_xor in1 integer_lte integer_sub boolean_eq exec_do*range (print_integer boolean_frominteger integer_add) exec_y () print_newline boolean_invert_first_then_and integer_add print_integer exec_yank integer_div boolean_stackdepth exec_s_when_autoconstructing () (boolean_or in1 integer_empty boolean_eq) (exec_flush) exec_empty integer_max boolean_yank integer_max exec_if (exec_shove (boolean_yankdup exec_dup_times (in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq integer_rot boolean_stackdepth exec_if () () exec_k_when_autoconstructing (in1 exec_if (exec_empty boolean_and) (boolean_eq boolean_swap integer_div) print_boolean) (tagged_761 in3 integer_div boolean_invert_second_then_and exec_flush boolean_dup) exec_eq exec_s_when_autoconstructing (integer_empty integer_yankdup boolean_shove boolean_invert_second_then_and exec_s () () (integer_lt) exec_when (in3) integer_dup_times exec_do*times (integer_gt tag_boolean_785 integer_lte integer_mult integer_rot exec_do*range (integer_dup integer_add exec_stackdepth) exec_noop) tagged_973 boolean_xor exec_do*count (in1) exec_yank integer_eq) (integer_dec 62 integer_empty) (exec_do*range (exec_eq boolean_invert_second_then_and integer_inc boolean_not tag_exec_791 () exec_do*count (exec_do*range (in2)))))))) ())
Zero cases best errors: [1 0 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 132
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (329 421 421 421 167 421 172 421 420 328)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (329 421 421 421 167 421 172 421 420 328)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 2, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_761} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_boolean_785} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction tagged_973} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction 62} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 1, :instruction tag_exec_791} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 1, :instruction in2})
Best program: (boolean_xor in1 integer_lte integer_sub boolean_eq exec_do*range (print_integer boolean_frominteger integer_add) exec_y () print_newline boolean_invert_first_then_and integer_add print_integer exec_yank integer_div boolean_stackdepth exec_s_when_autoconstructing () (boolean_or in1 integer_empty boolean_eq) (exec_flush) exec_empty integer_max boolean_yank integer_max exec_if (exec_shove (boolean_yankdup exec_dup_times (in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq integer_rot boolean_stackdepth exec_if () () exec_k_when_autoconstructing (in1 exec_if (exec_empty boolean_and) (boolean_eq boolean_swap integer_div) print_boolean tagged_761 in3) (integer_div boolean_invert_second_then_and exec_flush boolean_dup) exec_eq exec_s_when_autoconstructing (integer_empty integer_yankdup boolean_shove boolean_invert_second_then_and exec_s () () (integer_lt exec_when (in3) integer_dup_times exec_do*times (integer_gt tag_boolean_785 integer_lte integer_mult integer_rot exec_do*range (integer_dup integer_add exec_stackdepth) exec_noop) tagged_973 boolean_xor exec_do*count (in1) exec_yank integer_eq) integer_dec 62 integer_empty) (exec_do*range (exec_eq boolean_invert_second_then_and integer_inc) boolean_not tag_exec_791 () exec_do*count (exec_do*range () in2)) ())))) ())
Errors: [1 0 0 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 100
Size: 132
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.479
Median total errors in population: 8
Error averages by case: (0.671 0.579 0.579 0.579 0.833 0.579 0.828 0.579 0.58 0.672)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.734
Average program size in population (points): 81.089
Average percent parens in population: 0.249
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9545
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1460720
--- Timings ---
Current time: 1559583071538 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.5 seconds, 53.2%
Fitness Testing:      2.8 seconds, 33.6%
Report:               1.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if})
Lexicase best program: (boolean_xor in1 integer_lte integer_sub boolean_eq exec_do*range (print_integer boolean_frominteger integer_add) exec_y () print_newline boolean_invert_first_then_and integer_add print_integer exec_yank integer_div integer_shove exec_s_when_autoconstructing () (boolean_or in1 integer_empty boolean_eq) (exec_flush) exec_empty integer_max boolean_yank integer_max exec_if (exec_shove (boolean_yankdup exec_dup_times (in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq integer_rot boolean_stackdepth exec_if () ())))) ())
Lexicase best errors: [1 0 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if})
Zero cases best program: (boolean_xor in1 integer_lte integer_sub boolean_eq exec_do*range (print_integer boolean_frominteger integer_add) exec_y () print_newline boolean_invert_first_then_and integer_add print_integer exec_yank integer_div integer_shove exec_s_when_autoconstructing () (boolean_or in1 integer_empty boolean_eq) (exec_flush) exec_empty integer_max boolean_yank integer_max exec_if (exec_shove (boolean_yankdup exec_dup_times (in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq integer_rot boolean_stackdepth exec_if () ())))) ())
Zero cases best errors: [1 0 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (155 571 339 1000 572 571 913 1000 1000 913)
Population mean number of elite cases: 7.03
Count of perfect (error zero) individuals by case: (155 571 339 0 572 571 913 0 0 913)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction -74} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction tag_boolean_145} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush})
Best program: (boolean_xor in1 integer_lte integer_sub boolean_eq exec_do*range (print_integer boolean_frominteger integer_add) exec_y () print_newline boolean_invert_first_then_and integer_add print_integer exec_yank exec_swap (boolean_stackdepth) (exec_s_when_autoconstructing () (boolean_or in1 integer_empty boolean_eq) (exec_flush) exec_empty integer_max boolean_yank) integer_max exec_if (exec_shove (boolean_yankdup exec_dup_times (in4 integer_yankdup exec_y_when_autoconstructing (integer_sub) integer_flush boolean_or exec_s_when_autoconstructing () (integer_eq integer_stackdepth exec_dup_items exec_yankdup integer_dup_items) () exec_eq integer_pop) boolean_dup integer_pop boolean_stackdepth) in2 -74 boolean_yankdup) (exec_eq integer_dup exec_do*range () boolean_and) integer_min print_newline tag_boolean_145 exec_dup_items integer_gte integer_mod exec_flush)
Errors: [1 0 1 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 79
Percent parens: 0.215
--- Population Statistics ---
Average total errors in population: 5.966
Median total errors in population: 5
Error averages by case: (0.845 0.429 0.661 1.0 0.428 0.429 0.087 1.0 1.0 0.087)
Error minima by case: (0 0 0 1 0 0 0 1 1 0)
Average genome size in population (length): 62.794
Average program size in population (points): 83.167
Average percent parens in population: 0.242
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.44425
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2020047
--- Timings ---
Current time: 1559583074813 milliseconds
Total Time:          11.7 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.5 seconds, 55.8%
Fitness Testing:      3.5 seconds, 29.7%
Report:               1.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (exec_eq print_integer integer_dup_items boolean_yank in2 integer_sub print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank in2 exec_noop integer_gte integer_dec exec_do*count () exec_yank boolean_and exec_noop integer_dup_times integer_gte boolean_dup integer_min exec_dup_items boolean_or exec_y_when_autoconstructing (exec_dup_items boolean_yank boolean_dup integer_yankdup boolean_invert_first_then_and boolean_yank integer_yankdup integer_lte boolean_eq integer_flush boolean_invert_second_then_and boolean_dup boolean_dup_times))
Lexicase best errors: [0 1 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.113
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (exec_eq print_integer integer_dup_items boolean_yank in2 integer_sub print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank in2 exec_noop integer_gte integer_dec exec_do*count () exec_yank boolean_and exec_noop integer_dup_times integer_gte boolean_dup integer_min exec_dup_items boolean_or exec_y_when_autoconstructing (exec_dup_items boolean_yank boolean_dup integer_yankdup boolean_invert_first_then_and boolean_yank integer_yankdup integer_lte boolean_eq integer_flush boolean_invert_second_then_and boolean_dup boolean_dup_times))
Zero cases best errors: [0 1 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.113
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 551 1 351 552 551 903 552 353 351)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (350 551 1 351 552 551 903 552 353 351)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max})
Best program: (boolean_xor in1 integer_lte integer_sub boolean_eq exec_do*range (print_integer boolean_frominteger integer_add) exec_y () print_newline boolean_invert_first_then_and integer_add print_integer exec_yank integer_div boolean_stackdepth exec_s_when_autoconstructing () (boolean_or in1 integer_empty boolean_eq) (exec_flush) exec_empty integer_max boolean_yank integer_max)
Errors: [1 0 1 1 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 33
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 5.485
Median total errors in population: 5
Error averages by case: (0.65 0.449 0.999 0.649 0.448 0.449 0.097 0.448 0.647 0.649)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.373
Average program size in population (points): 69.873
Average percent parens in population: 0.233
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.96725
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.754
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2571034
--- Timings ---
Current time: 1559583077921 milliseconds
Total Time:          14.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.5 seconds, 57.1%
Fitness Testing:      4.1 seconds, 27.5%
Report:               2.2 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Lexicase best program: (integer_pop boolean_yank exec_dup_items integer_lte integer_swap integer_pop exec_swap (boolean_rot boolean_eq integer_div integer_mult) (exec_stackdepth integer_min) integer_mult in2 in2 exec_dup_times () print_integer integer_empty integer_lte boolean_or)
Lexicase best errors: [1 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 25
Percent parens: 0.160
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Zero cases best program: (integer_pop boolean_yank exec_dup_items integer_lte integer_swap integer_pop exec_swap (boolean_rot boolean_eq integer_div integer_mult) (exec_stackdepth integer_min) integer_mult in2 in2 exec_dup_times () print_integer integer_empty integer_lte boolean_or)
Zero cases best errors: [1 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 25
Percent parens: 0.160
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 369 1 367 368 369 909 367 367 101)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (1 369 1 367 368 369 909 367 367 101)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop print_integer integer_dup_items boolean_yank in2 integer_sub print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank in2 exec_noop integer_gt integer_dec exec_do*count () exec_yank boolean_and exec_noop integer_dup_times integer_gte boolean_dup integer_min exec_dup_items boolean_or exec_y_when_autoconstructing (exec_dup_items boolean_yank boolean_dup integer_yankdup boolean_invert_first_then_and boolean_yank integer_yankdup integer_lte boolean_eq integer_flush boolean_invert_second_then_and boolean_dup boolean_dup_times))
Errors: [1 0 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 47
Size: 53
Percent parens: 0.113
--- Population Statistics ---
Average total errors in population: 6.781
Median total errors in population: 9
Error averages by case: (0.999 0.631 0.999 0.633 0.632 0.631 0.091 0.633 0.633 0.899)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.577
Average program size in population (points): 66.325
Average percent parens in population: 0.234
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.2485
Median age in population: 7.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3112385
--- Timings ---
Current time: 1559583080762 milliseconds
Total Time:          17.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.2 seconds, 57.5%
Fitness Testing:      4.7 seconds, 26.6%
Report:               2.7 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 91                 
Correct output: 9                   | Program output: 90                 
Correct output: 7                   | Program output: 81                 
Correct output: 49                  | Program output: 64                 
Correct output: 8                   | Program output: 67                 
Correct output: 19                  | Program output: 29                 
Correct output: 2                   | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 35                 
Correct output: 11                  | Program output: 100                
Correct output: 32                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 94                 
Correct output: 1                   | Program output: 91                 
Correct output: 54                  | Program output: 54                 
Correct output: 12                  | Program output: 37                 
Correct output: -93                 | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: 31                 
Correct output: -77                 | Program output: 72                 
Correct output: -63                 | Program output: 96                 
Correct output: -14                 | Program output: 91                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: 90                 
Correct output: -96                 | Program output: -47                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 86                 
Correct output: -26                 | Program output: -9                 
Correct output: -65                 | Program output: -23                
Correct output: -4                  | Program output: 6                  
Correct output: -73                 | Program output: -27                
Correct output: 26                  | Program output: 39                 
Correct output: -63                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -28                 | Program output: 76                 
Correct output: -42                 | Program output: 88                 
Correct output: -88                 | Program output: -20                
Correct output: -9                  | Program output: -9                 
Correct output: 21                  | Program output: 73                 
Correct output: -85                 | Program output: 33                 
Correct output: -94                 | Program output: -12                
Correct output: -70                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: 93                 
Correct output: -85                 | Program output: 33                 
Correct output: -89                 | Program output: 58                 
Correct output: -41                 | Program output: -21                
Correct output: -25                 | Program output: 26                 
Correct output: -98                 | Program output: -61                
Correct output: -3                  | Program output: 37                 
Correct output: -92                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: 54                 
Correct output: -64                 | Program output: 89                 
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -2                 
Correct output: -72                 | Program output: 73                 
Correct output: -69                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 85                 
Correct output: -52                 | Program output: 71                 
Correct output: -81                 | Program output: -41                
Correct output: -65                 | Program output: -25                
Correct output: -25                 | Program output: -4                 
Correct output: -88                 | Program output: -3                 
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: -37                
Correct output: -16                 | Program output: 66                 
Correct output: -78                 | Program output: -32                
Correct output: -92                 | Program output: -27                
Correct output: -44                 | Program output: 24                 
Correct output: -70                 | Program output: 85                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div})
Lexicase best program: (exec_eq print_integer integer_dup_items boolean_yank in2 in4 print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank in2 exec_noop integer_gt integer_dec exec_do*count () exec_yank boolean_and exec_noop integer_dup_times integer_gte boolean_dup integer_min exec_dup_items boolean_or exec_y_when_autoconstructing (exec_dup_items exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq integer_rot boolean_stackdepth exec_if () () exec_k_when_autoconstructing (in1 exec_if (exec_empty boolean_and) (boolean_eq boolean_swap integer_div)) ())))
Lexicase best errors: [1 1 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 64
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div})
Zero cases best program: (exec_eq print_integer integer_dup_items boolean_yank in2 in4 print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank in2 exec_noop integer_gt integer_dec exec_do*count () exec_yank boolean_and exec_noop integer_dup_times integer_gte boolean_dup integer_min exec_dup_items boolean_or exec_y_when_autoconstructing (exec_dup_items exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq integer_rot boolean_stackdepth exec_if () () exec_k_when_autoconstructing (in1 exec_if (exec_empty boolean_and) (boolean_eq boolean_swap integer_div)) ())))
Zero cases best errors: [1 1 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 64
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 913 1000 219 822 1000 592 226)
Population mean number of elite cases: 7.77
Count of perfect (error zero) individuals by case: (0 0 0 913 0 219 822 0 592 226)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div})
Best program: (exec_eq print_integer integer_dup_items boolean_yank in2 in4 print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank in2 exec_noop integer_gt integer_dec exec_do*count () exec_yank exec_y_when_autoconstructing (exec_noop integer_dup_times integer_gte boolean_dup integer_min exec_dup_items boolean_or) exec_y_when_autoconstructing (exec_dup_items exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq integer_rot boolean_stackdepth exec_if () () exec_k_when_autoconstructing (in1 exec_if (exec_empty boolean_and) (boolean_eq boolean_swap integer_div)) ())))
Errors: [1 1 1 0 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 50
Size: 65
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.228
Median total errors in population: 7
Error averages by case: (1.0 1.0 1.0 0.087 1.0 0.781 0.178 1.0 0.408 0.774)
Error minima by case: (1 1 1 0 1 0 0 1 0 0)
Average genome size in population (length): 37.633
Average program size in population (points): 48.782
Average percent parens in population: 0.229
Minimum age in population: 6.0
Maximum age in population: 10.875
Average age in population: 9.03665625
Median age in population: 9.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3666561
--- Timings ---
Current time: 1559583083945 milliseconds
Total Time:          21.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.4 seconds, 59.3%
Fitness Testing:      5.2 seconds, 25.0%
Report:               3.2 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_dup_items boolean_yankdup exec_do*count () integer_div integer_div integer_div exec_swap (boolean_rot boolean_eq exec_y_when_autoconstructing (boolean_invert_second_then_and exec_k (integer_div in2 integer_gte print_integer) (exec_stackdepth exec_k_when_autoconstructing (boolean_swap print_boolean) (print_exec (boolean_dup))))) ())
Lexicase best errors: [0 1 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_dup_items boolean_yankdup exec_do*count () integer_div integer_div integer_div exec_swap (boolean_rot boolean_eq exec_y_when_autoconstructing (boolean_invert_second_then_and exec_k (integer_div in2 integer_gte print_integer) (exec_stackdepth exec_k_when_autoconstructing (boolean_swap print_boolean) (print_exec (boolean_dup))))) ())
Zero cases best errors: [0 1 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (293 1000 1000 293 1000 293 1000 293 293 1000)
Population mean number of elite cases: 6.47
Count of perfect (error zero) individuals by case: (293 0 0 293 0 293 0 293 293 0)
Population mean number of perfect (error zero) cases: 1.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup})
Best program: (integer_pop boolean_yank exec_dup_items integer_lte integer_swap integer_pop exec_swap (boolean_rot boolean_eq exec_s (boolean_invert_second_then_and exec_k (integer_div in2 integer_gte print_integer) (exec_stackdepth exec_k_when_autoconstructing (boolean_swap exec_pop () print_exec (boolean_dup)) ())) () ()) ())
Errors: [0 1 1 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 8.535
Median total errors in population: 10
Error averages by case: (0.707 1.0 1.0 0.707 1.0 0.707 1.0 0.707 0.707 1.0)
Error minima by case: (0 1 1 0 1 0 1 0 0 1)
Average genome size in population (length): 42.625
Average program size in population (points): 54.366
Average percent parens in population: 0.215
Minimum age in population: 7.8125
Maximum age in population: 12.875
Average age in population: 11.012078125
Median age in population: 11.046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 174
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4242724
--- Timings ---
Current time: 1559583086364 milliseconds
Total Time:          23.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.2 seconds, 59.9%
Fitness Testing:      5.7 seconds, 24.1%
Report:               3.7 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_761} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq})
Lexicase best program: (exec_eq print_integer integer_dup_items boolean_yank in2 integer_sub print_integer exec_k_when_autoconstructing (exec_do*times () in4) (boolean_xor integer_lt integer_sub) integer_gte boolean_dup integer_mod boolean_shove integer_max boolean_yank integer_max exec_if (exec_shove (boolean_yankdup exec_dup_times (in4 exec_yankdup integer_dup_items exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items exec_y_when_autoconstructing (print_exec (integer_eq integer_rot boolean_stackdepth exec_if () () integer_rot boolean_stackdepth exec_if () () exec_k_when_autoconstructing (in1 exec_if (exec_empty boolean_and) (boolean_eq boolean_swap integer_div) print_boolean tagged_761 in3 integer_eq boolean_invert_second_then_and exec_flush boolean_dup) (exec_eq)))))) ())
Lexicase best errors: [0 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 77
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_761} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq})
Zero cases best program: (exec_eq print_integer integer_dup_items boolean_yank in2 integer_sub print_integer exec_k_when_autoconstructing (exec_do*times () in4) (boolean_xor integer_lt integer_sub) integer_gte boolean_dup integer_mod boolean_shove integer_max boolean_yank integer_max exec_if (exec_shove (boolean_yankdup exec_dup_times (in4 exec_yankdup integer_dup_items exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items exec_y_when_autoconstructing (print_exec (integer_eq integer_rot boolean_stackdepth exec_if () () integer_rot boolean_stackdepth exec_if () () exec_k_when_autoconstructing (in1 exec_if (exec_empty boolean_and) (boolean_eq boolean_swap integer_div) print_boolean tagged_761 in3 integer_eq boolean_invert_second_then_and exec_flush boolean_dup) (exec_eq)))))) ())
Zero cases best errors: [0 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 77
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (914 914 914 914 1 913 1000 1000 1000 1000)
Population mean number of elite cases: 8.57
Count of perfect (error zero) individuals by case: (914 914 914 914 1 913 0 0 0 0)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_761} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_s} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_when})
Best program: (exec_eq print_integer integer_dup_items boolean_yank in2 integer_sub print_integer exec_k_when_autoconstructing (exec_s () (in4 integer_add integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_while (exec_y (exec_s_when_autoconstructing () (boolean_or in1 integer_empty boolean_eq) (exec_flush) exec_empty integer_max boolean_yank) integer_mod exec_if (exec_shove (integer_inc exec_dup_times (in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq integer_rot boolean_stackdepth exec_if () () exec_k_when_autoconstructing (in1 exec_if (exec_empty boolean_and) (boolean_eq boolean_swap integer_div) print_boolean tagged_761 in3 integer_div boolean_invert_second_then_and exec_flush boolean_dup) (exec_eq exec_s_when_autoconstructing (integer_empty integer_yankdup boolean_shove boolean_invert_second_then_and exec_s () () (integer_lt) exec_when ()) () ()))))) ())) ())
Errors: [0 0 0 0 1 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 72
Size: 102
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 5.43
Median total errors in population: 5
Error averages by case: (0.086 0.086 0.086 0.086 0.999 0.087 1.0 1.0 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 1 1 1 1)
Average genome size in population (length): 31.311
Average program size in population (points): 40.444
Average percent parens in population: 0.228
Minimum age in population: 9.0
Maximum age in population: 14.546875
Average age in population: 12.043296875
Median age in population: 12.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4575122
--- Timings ---
Current time: 1559583088403 milliseconds
Total Time:          25.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.7 seconds, 61.1%
Fitness Testing:      6.0 seconds, 23.4%
Report:               3.9 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction print_exec})
Lexicase best program: (exec_eq integer_pop boolean_yank exec_dup_items integer_lte in2 integer_pop exec_swap (boolean_rot boolean_eq exec_s (boolean_invert_second_then_and exec_k (integer_div in2 integer_gte print_integer) (exec_stackdepth exec_k_when_autoconstructing (boolean_swap) (print_boolean) print_exec ())) () ()) ())
Lexicase best errors: [1 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction print_exec})
Zero cases best program: (exec_eq integer_pop boolean_yank exec_dup_items integer_lte in2 integer_pop exec_swap (boolean_rot boolean_eq exec_s (boolean_invert_second_then_and exec_k (integer_div in2 integer_gte print_integer) (exec_stackdepth exec_k_when_autoconstructing (boolean_swap) (print_boolean) print_exec ())) () ()) ())
Zero cases best errors: [1 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 884 612 1000 1000 1000 1000 612 884)
Population mean number of elite cases: 8.99
Count of perfect (error zero) individuals by case: (0 0 884 612 0 0 0 0 612 884)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_s})
Best program: (exec_dup_items boolean_yankdup exec_do*count () integer_div integer_div integer_div integer_mult exec_stackdepth integer_min integer_mult in2 in2 exec_dup_times () print_integer boolean_swap integer_lte exec_s () () ())
Errors: [1 1 0 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 17
Size: 23
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 7.008
Median total errors in population: 6
Error averages by case: (1.0 1.0 0.116 0.388 1.0 1.0 1.0 1.0 0.388 0.116)
Error minima by case: (1 1 0 0 1 1 1 1 0 0)
Average genome size in population (length): 30.502
Average program size in population (points): 39.188
Average percent parens in population: 0.222
Minimum age in population: 10.4375
Maximum age in population: 16.08984375
Average age in population: 14.09812109375
Median age in population: 14.248046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 203
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4895653
--- Timings ---
Current time: 1559583090325 milliseconds
Total Time:          27.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.1 seconds, 61.9%
Fitness Testing:      6.3 seconds, 22.9%
Report:               4.1 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 91                 
Correct output: 9                   | Program output: 90                 
Correct output: 7                   | Program output: 81                 
Correct output: 49                  | Program output: 64                 
Correct output: 8                   | Program output: 67                 
Correct output: 19                  | Program output: 29                 
Correct output: 2                   | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 35                 
Correct output: 11                  | Program output: 100                
Correct output: 32                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 94                 
Correct output: 1                   | Program output: 91                 
Correct output: 54                  | Program output: 54                 
Correct output: 12                  | Program output: 37                 
Correct output: -93                 | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: 31                 
Correct output: -77                 | Program output: 72                 
Correct output: -63                 | Program output: 96                 
Correct output: -14                 | Program output: 91                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: 90                 
Correct output: -96                 | Program output: -47                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 86                 
Correct output: -26                 | Program output: -9                 
Correct output: -65                 | Program output: -23                
Correct output: -4                  | Program output: 6                  
Correct output: -73                 | Program output: -27                
Correct output: 26                  | Program output: 39                 
Correct output: -63                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -28                 | Program output: 76                 
Correct output: -42                 | Program output: 88                 
Correct output: -88                 | Program output: -20                
Correct output: -9                  | Program output: -9                 
Correct output: 21                  | Program output: 73                 
Correct output: -85                 | Program output: 33                 
Correct output: -94                 | Program output: -12                
Correct output: -70                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: 93                 
Correct output: -85                 | Program output: 33                 
Correct output: -89                 | Program output: 58                 
Correct output: -41                 | Program output: -21                
Correct output: -25                 | Program output: 26                 
Correct output: -98                 | Program output: -61                
Correct output: -3                  | Program output: 37                 
Correct output: -92                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: 54                 
Correct output: -64                 | Program output: 89                 
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -2                 
Correct output: -72                 | Program output: 73                 
Correct output: -69                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 85                 
Correct output: -52                 | Program output: 71                 
Correct output: -81                 | Program output: -41                
Correct output: -65                 | Program output: -25                
Correct output: -25                 | Program output: -4                 
Correct output: -88                 | Program output: -3                 
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: -37                
Correct output: -16                 | Program output: 66                 
Correct output: -78                 | Program output: -32                
Correct output: -92                 | Program output: -27                
Correct output: -44                 | Program output: 24                 
Correct output: -70                 | Program output: 85                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq})
Lexicase best program: (exec_eq print_integer integer_dup_items boolean_yank in2 in4 print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank boolean_stackdepth boolean_dup integer_mod boolean_yankdup boolean_yankdup exec_yank exec_if (exec_noop) () integer_gt integer_dec exec_flush exec_empty integer_max boolean_yank integer_max exec_k_when_autoconstructing (exec_shove (boolean_yankdup boolean_eq in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq))) ())
Lexicase best errors: [1 1 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 60
Percent parens: 0.183
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq})
Zero cases best program: (exec_eq print_integer integer_dup_items boolean_yank in2 in4 print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank boolean_stackdepth boolean_dup integer_mod boolean_yankdup boolean_yankdup exec_yank exec_if (exec_noop) () integer_gt integer_dec exec_flush exec_empty integer_max boolean_yank integer_max exec_k_when_autoconstructing (exec_shove (boolean_yankdup boolean_eq in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq))) ())
Zero cases best errors: [1 1 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 60
Percent parens: 0.183
--- Lexicase Population Statistics ---
Count of elite individuals by case: (902 1000 1000 1 903 1000 1 1000 903 1)
Population mean number of elite cases: 6.71
Count of perfect (error zero) individuals by case: (902 0 0 1 903 0 1 0 903 1)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq})
Best program: (exec_eq print_integer integer_dup_items boolean_yank in2 in4 print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank boolean_stackdepth boolean_dup integer_mod boolean_yankdup boolean_yankdup exec_yank exec_if (exec_noop) () integer_gt integer_dec exec_flush exec_empty integer_max boolean_yank integer_max exec_k_when_autoconstructing (exec_shove (boolean_yankdup boolean_eq in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq))) ())
Errors: [1 1 1 0 0 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 49
Size: 60
Percent parens: 0.183
--- Population Statistics ---
Average total errors in population: 7.289
Median total errors in population: 7
Error averages by case: (0.098 1.0 1.0 0.999 0.097 1.0 0.999 1.0 0.097 0.999)
Error minima by case: (0 1 1 0 0 1 0 1 0 0)
Average genome size in population (length): 29.639
Average program size in population (points): 38.202
Average percent parens in population: 0.224
Minimum age in population: 11.4375
Maximum age in population: 17.39453125
Average age in population: 15.26990625
Median age in population: 15.34375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5209337
--- Timings ---
Current time: 1559583093168 milliseconds
Total Time:          30.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.2 seconds, 63.6%
Fitness Testing:      6.6 seconds, 21.8%
Report:               4.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq})
Lexicase best program: (exec_eq print_integer integer_dup_items boolean_yank in2 integer_yankdup print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank boolean_stackdepth boolean_dup integer_mod boolean_yankdup boolean_yankdup exec_yank exec_if (exec_noop) () integer_gt integer_dec exec_flush exec_empty integer_max boolean_yank integer_max exec_k_when_autoconstructing (exec_shove (boolean_yankdup boolean_eq in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq))) ())
Lexicase best errors: [0 1 0 1 1 1 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 60
Percent parens: 0.183
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq})
Zero cases best program: (exec_eq print_integer integer_dup_items boolean_yank in2 integer_yankdup print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank boolean_stackdepth boolean_dup integer_mod boolean_yankdup boolean_yankdup exec_yank exec_if (exec_noop) () integer_gt integer_dec exec_flush exec_empty integer_max boolean_yank integer_max exec_k_when_autoconstructing (exec_shove (boolean_yankdup boolean_eq in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq))) ())
Zero cases best errors: [0 1 0 1 1 1 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 60
Percent parens: 0.183
--- Lexicase Population Statistics ---
Count of elite individuals by case: (378 1000 377 1000 566 566 1000 378 1000 1000)
Population mean number of elite cases: 7.26
Count of perfect (error zero) individuals by case: (378 0 377 0 566 566 0 378 0 0)
Population mean number of perfect (error zero) cases: 2.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Best program: (exec_eq print_integer integer_min integer_mult in2 in2 exec_dup_times () print_integer boolean_swap integer_lte boolean_or)
Errors: [0 1 0 1 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 11
Size: 13
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 7.735
Median total errors in population: 8
Error averages by case: (0.622 1.0 0.623 1.0 0.434 0.434 1.0 0.622 1.0 1.0)
Error minima by case: (0 1 0 1 0 0 1 0 1 1)
Average genome size in population (length): 40.301
Average program size in population (points): 50.222
Average percent parens in population: 0.201
Minimum age in population: 13.0
Maximum age in population: 18.9609375
Average age in population: 16.9328994140625
Median age in population: 16.82861328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 286
Genome diversity (% unique genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 306
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5897616
--- Timings ---
Current time: 1559583095317 milliseconds
Total Time:          32.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.6 seconds, 63.3%
Fitness Testing:      7.2 seconds, 21.9%
Report:               4.7 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq})
Lexicase best program: (exec_eq print_integer integer_dup_items boolean_yank in2 integer_sub print_integer exec_k_when_autoconstructing (boolean_stackdepth) (boolean_dup integer_mod) boolean_yankdup boolean_yankdup exec_yank exec_if (exec_noop) () integer_gt integer_dec exec_flush exec_empty integer_max boolean_yank integer_max exec_k_when_autoconstructing (exec_shove (boolean_yankdup boolean_eq in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq))) ())
Lexicase best errors: [0 1 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 48
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq})
Zero cases best program: (exec_eq print_integer integer_dup_items boolean_yank in2 integer_sub print_integer exec_k_when_autoconstructing (boolean_stackdepth) (boolean_dup integer_mod) boolean_yankdup boolean_yankdup exec_yank exec_if (exec_noop) () integer_gt integer_dec exec_flush exec_empty integer_max boolean_yank integer_max exec_k_when_autoconstructing (exec_shove (boolean_yankdup boolean_eq in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq))) ())
Zero cases best errors: [0 1 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 48
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (558 1000 1000 1000 1000 558 558 380 914 380)
Population mean number of elite cases: 7.35
Count of perfect (error zero) individuals by case: (558 0 0 0 0 558 558 380 914 380)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq})
Best program: (exec_eq print_integer integer_dup_items boolean_yank in2 integer_sub print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt integer_sub integer_gte boolean_dup exec_dup_times () exec_yank boolean_stackdepth) (boolean_dup boolean_yankdup) boolean_yankdup boolean_yankdup exec_yank exec_if (exec_noop) () integer_gt integer_dec exec_flush exec_empty integer_max boolean_yank integer_max exec_k_when_autoconstructing (exec_shove (boolean_yankdup boolean_eq in4 exec_yankdup integer_dup_items integer_rot in1 boolean_flush integer_max exec_dup_items) exec_y_when_autoconstructing (exec_do*while (integer_eq))) ())
Errors: [0 1 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 47
Size: 59
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 6.652
Median total errors in population: 6
Error averages by case: (0.442 1.0 1.0 1.0 1.0 0.442 0.442 0.62 0.086 0.62)
Error minima by case: (0 1 1 1 1 0 0 0 0 0)
Average genome size in population (length): 35.826
Average program size in population (points): 45.165
Average percent parens in population: 0.210
Minimum age in population: 15.5546875
Maximum age in population: 20.2666015625
Average age in population: 18.4004990234375
Median age in population: 18.5126953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6360407
--- Timings ---
Current time: 1559583097607 milliseconds
Total Time:          34.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.3 seconds, 64.0%
Fitness Testing:      7.5 seconds, 21.7%
Report:               4.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction integer_div} {:close 2, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_rot})
Lexicase best program: (exec_dup_items boolean_yankdup exec_do*count () integer_div integer_div integer_div integer_mult exec_stackdepth integer_min integer_mult in2 in2 exec_dup_times () print_integer boolean_swap integer_lte boolean_rot)
Lexicase best errors: [0 0 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction integer_div} {:close 2, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_rot})
Zero cases best program: (exec_dup_items boolean_yankdup exec_do*count () integer_div integer_div integer_div integer_mult exec_stackdepth integer_min integer_mult in2 in2 exec_dup_times () print_integer boolean_swap integer_lte boolean_rot)
Zero cases best errors: [0 0 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (920 549 385 1000 548 1000 1000 919 1000 1000)
Population mean number of elite cases: 8.32
Count of perfect (error zero) individuals by case: (920 549 385 0 548 0 0 919 0 0)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction in2} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup})
Best program: (integer_pop boolean_yank exec_dup_items integer_lte integer_swap boolean_invert_second_then_and integer_yank boolean_rot boolean_eq exec_s (boolean_invert_second_then_and exec_k (integer_swap in2 integer_add print_integer) (exec_stackdepth exec_k_when_autoconstructing (boolean_swap print_boolean) (in2 exec_noop)) integer_gt integer_dec exec_do*count () exec_yank boolean_and exec_noop integer_dup_times integer_gte boolean_dup) () ())
Errors: [0 0 1 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 6.679
Median total errors in population: 6
Error averages by case: (0.08 0.451 0.615 1.0 0.452 1.0 1.0 0.081 1.0 1.0)
Error minima by case: (0 0 0 1 0 1 1 0 1 1)
Average genome size in population (length): 35.739
Average program size in population (points): 45.013
Average percent parens in population: 0.209
Minimum age in population: 16.611328125
Maximum age in population: 21.9482421875
Average age in population: 19.89839672851562
Median age in population: 19.9632568359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6824629
--- Timings ---
Current time: 1559583100863 milliseconds
Total Time:          38.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.9 seconds, 65.4%
Fitness Testing:      7.9 seconds, 20.8%
Report:               5.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yank})
Lexicase best program: (exec_eq print_integer integer_dup_items boolean_yank in2 integer_min print_integer exec_k_when_autoconstructing (exec_pop () in4 boolean_xor boolean_xor integer_lt integer_sub) (integer_gte boolean_flush integer_mod) boolean_shove boolean_yankdup integer_gt integer_dec exec_do*count () exec_yank)
Lexicase best errors: [0 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yank})
Zero cases best program: (exec_eq print_integer integer_dup_items boolean_yank in2 integer_min print_integer exec_k_when_autoconstructing (exec_pop () in4 boolean_xor boolean_xor integer_lt integer_sub) (integer_gte boolean_flush integer_mod) boolean_shove boolean_yankdup integer_gt integer_dec exec_do*count () exec_yank)
Zero cases best errors: [0 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (914 927 590 590 590 1000 1000 917 590 1000)
Population mean number of elite cases: 8.12
Count of perfect (error zero) individuals by case: (914 927 590 590 590 0 0 917 590 0)
Population mean number of perfect (error zero) cases: 5.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Best program: (exec_dup_items boolean_yankdup exec_do*count () integer_div integer_div integer_div integer_mult exec_stackdepth integer_min integer_mult in2 in2 exec_dup_times () print_integer exec_dup_times (integer_lte) boolean_or)
Errors: [0 0 0 0 0 1 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 17
Size: 21
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 4.882
Median total errors in population: 3
Error averages by case: (0.086 0.073 0.41 0.41 0.41 1.0 1.0 0.083 0.41 1.0)
Error minima by case: (0 0 0 0 0 1 1 0 0 1)
Average genome size in population (length): 34.225
Average program size in population (points): 43.243
Average percent parens in population: 0.211
Minimum age in population: 17.9921875
Maximum age in population: 23.3663330078125
Average age in population: 21.41475415039062
Median age in population: 21.45220947265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7256421
--- Timings ---
Current time: 1559583103172 milliseconds
Total Time:          40.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.6 seconds, 65.9%
Fitness Testing:      8.3 seconds, 20.5%
Report:               5.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_eq print_integer integer_dup_items boolean_yank in1 integer_sub print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank exec_dup_times (print_integer exec_s_when_autoconstructing (integer_lte) (boolean_or) ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_eq print_integer integer_dup_items boolean_yank in1 integer_sub print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank exec_dup_times (print_integer exec_s_when_autoconstructing (integer_lte) (boolean_or) ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 917 2 2 2 2 1000 2 914 915)
Population mean number of elite cases: 3.76
Count of perfect (error zero) individuals by case: (2 917 2 2 2 2 0 2 914 915)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Best program: (exec_eq print_integer integer_dup_items exec_do*count () integer_div integer_div integer_div integer_mult integer_dup integer_min integer_mult in2 in2 in1 print_integer boolean_swap integer_lte boolean_or)
Errors: [0 0 0 0 0 0 1 0 1 1]
Total: 3
Mean: 0.3
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 7.242
Median total errors in population: 7
Error averages by case: (0.998 0.083 0.998 0.998 0.998 0.998 1.0 0.998 0.086 0.085)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 27.907
Average program size in population (points): 36.172
Average percent parens in population: 0.226
Minimum age in population: 19.9912109375
Maximum age in population: 24.95843505859375
Average age in population: 22.94925476074219
Median age in population: 22.98129272460938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7543045
--- Timings ---
Current time: 1559583105437 milliseconds
Total Time:          42.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.4 seconds, 66.5%
Fitness Testing:      8.6 seconds, 20.1%
Report:               5.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_eq print_integer integer_dup_items boolean_yank in1 integer_sub print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank exec_dup_times (print_integer exec_s_when_autoconstructing (integer_lte) (boolean_or) ()))
Lexicase best errors: [0 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_eq print_integer integer_dup_items boolean_yank in1 integer_sub print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank exec_dup_times (print_integer exec_s_when_autoconstructing (integer_lte) (boolean_or) ()))
Zero cases best errors: [0 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (709 231 1000 708 709 707 709 232 232 1000)
Population mean number of elite cases: 6.24
Count of perfect (error zero) individuals by case: (709 231 0 708 709 707 709 232 232 0)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_or})
Best program: (exec_eq print_integer integer_dup_items boolean_yank in1 integer_sub print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank exec_dup_times (print_integer exec_s_when_autoconstructing (integer_lte) (boolean_or) ()))
Errors: [0 1 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 34
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 5.763
Median total errors in population: 5
Error averages by case: (0.291 0.769 1.0 0.292 0.291 0.293 0.291 0.768 0.768 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 22.785
Average program size in population (points): 28.318
Average percent parens in population: 0.179
Minimum age in population: 20.9912109375
Maximum age in population: 26.15640258789062
Average age in population: 24.46717596435547
Median age in population: 24.4713134765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 276
Genome diversity (% unique genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 298
Syntactic diversity (% unique Push programs):	 0.41
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7759454
--- Timings ---
Current time: 1559583107234 milliseconds
Total Time:          44.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.8 seconds, 67.0%
Fitness Testing:      8.8 seconds, 19.8%
Report:               5.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_eq print_integer integer_dup_items exec_do*count () integer_div integer_div integer_div integer_mult integer_dup integer_min integer_mult in2 in2 in1 print_integer boolean_swap integer_lte boolean_or)
Lexicase best errors: [1 0 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_eq print_integer integer_dup_items exec_do*count () integer_div integer_div integer_div integer_mult integer_dup integer_min integer_mult in2 in2 in1 print_integer boolean_swap integer_lte boolean_or)
Zero cases best errors: [1 0 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 582 583 582 1000 346 582 928 1000 1000)
Population mean number of elite cases: 7.60
Count of perfect (error zero) individuals by case: (0 582 583 582 0 346 582 928 0 0)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_643} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_or})
Best program: (exec_eq print_integer integer_dup_items boolean_yank in1 tagged_643 print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup boolean_yankdup exec_dup_times (print_integer exec_s_when_autoconstructing (integer_lte) (boolean_or) ()))
Errors: [1 0 0 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 34
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.397
Median total errors in population: 5
Error averages by case: (1.0 0.418 0.417 0.418 1.0 0.654 0.418 0.072 1.0 1.0)
Error minima by case: (1 0 0 0 1 0 0 0 1 1)
Average genome size in population (length): 23.554
Average program size in population (points): 29.339
Average percent parens in population: 0.183
Minimum age in population: 21.9912109375
Maximum age in population: 27.81820678710938
Average age in population: 25.91561010742188
Median age in population: 25.96685791015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 172
Genome diversity (% unique genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7993341
--- Timings ---
Current time: 1559583109337 milliseconds
Total Time:          46.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.5 seconds, 67.5%
Fitness Testing:      9.0 seconds, 19.4%
Report:               6.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_eq print_integer integer_dup_items boolean_or in2 integer_sub print_integer integer_eq exec_do*times () in4 exec_s (boolean_invert_second_then_and) () ())
Lexicase best errors: [1 1 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_eq print_integer integer_dup_items boolean_or in2 integer_sub print_integer integer_eq exec_do*times () in4 exec_s (boolean_invert_second_then_and) () ())
Zero cases best errors: [1 1 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (739 739 200 739 200 1000 200 200 1 200)
Population mean number of elite cases: 4.22
Count of perfect (error zero) individuals by case: (739 739 200 739 200 0 200 200 1 200)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_if} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max})
Best program: (integer_pop boolean_yank exec_dup_items integer_lte integer_swap integer_pop exec_swap (integer_shove boolean_eq integer_div) (integer_div) integer_mult exec_k (integer_div in2 integer_gte print_integer) (exec_stackdepth exec_k_when_autoconstructing (boolean_dup integer_mod) (boolean_shove boolean_yankdup exec_yank in2 exec_s_when_autoconstructing () (integer_gt boolean_shove boolean_yankdup) (exec_if (exec_noop) () integer_gt integer_dec exec_flush) exec_empty integer_max)))
Errors: [1 1 0 1 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 48
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.782
Median total errors in population: 7
Error averages by case: (0.261 0.261 0.8 0.261 0.8 1.0 0.8 0.8 0.999 0.8)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 22.397
Average program size in population (points): 27.608
Average percent parens in population: 0.173
Minimum age in population: 24.224609375
Maximum age in population: 29.29252624511719
Average age in population: 27.41740098571777
Median age in population: 27.4713134765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 161
Genome diversity (% unique genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 8213935
--- Timings ---
Current time: 1559583111479 milliseconds
Total Time:          48.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.2 seconds, 68.1%
Fitness Testing:      9.2 seconds, 18.9%
Report:               6.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_eq print_integer integer_dup_items exec_do*count () integer_div exec_empty integer_div integer_mult integer_dup integer_min integer_mult in2 in2 in1 print_integer boolean_swap integer_lte boolean_or)
Lexicase best errors: [0 1 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_eq print_integer integer_dup_items exec_do*count () integer_div exec_empty integer_div integer_mult integer_dup integer_min integer_mult in2 in2 in1 print_integer boolean_swap integer_lte boolean_or)
Zero cases best errors: [0 1 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (293 524 1000 1000 293 111 293 526 293 1000)
Population mean number of elite cases: 5.33
Count of perfect (error zero) individuals by case: (293 524 0 0 293 111 293 526 293 0)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Best program: (exec_eq print_integer integer_dup_items exec_do*count () integer_div integer_div exec_yank integer_mult integer_dup integer_min integer_mult in2 in2 in1 print_integer boolean_frominteger integer_lte boolean_or)
Errors: [0 1 1 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 7.667
Median total errors in population: 8
Error averages by case: (0.707 0.476 1.0 1.0 0.707 0.889 0.707 0.474 0.707 1.0)
Error minima by case: (0 0 1 1 0 0 0 0 0 1)
Average genome size in population (length): 23.043
Average program size in population (points): 28.665
Average percent parens in population: 0.183
Minimum age in population: 26.38427734375
Maximum age in population: 30.83810806274414
Average age in population: 28.83194039535522
Median age in population: 28.88832092285156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8456221
--- Timings ---
Current time: 1559583114146 milliseconds
Total Time:          51.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.5 seconds, 69.0%
Fitness Testing:      9.5 seconds, 18.4%
Report:               6.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_dup_items boolean_yankdup exec_do*count () integer_div integer_pop integer_div integer_mult exec_stackdepth integer_min integer_mult in2 in2 exec_dup_times () print_integer boolean_swap integer_dup_times boolean_or)
Lexicase best errors: [1 0 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_dup_items boolean_yankdup exec_do*count () integer_div integer_pop integer_div integer_mult exec_stackdepth integer_min integer_mult in2 in2 exec_dup_times () print_integer boolean_swap integer_dup_times boolean_or)
Zero cases best errors: [1 0 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (533 266 266 266 1000 1000 799 139 139 534)
Population mean number of elite cases: 4.94
Count of perfect (error zero) individuals by case: (533 266 266 266 0 0 799 139 139 534)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup})
Best program: (exec_eq boolean_and integer_pop boolean_yank exec_dup_items integer_lte integer_swap integer_pop exec_swap (exec_eq boolean_eq boolean_rot boolean_eq exec_s (boolean_invert_second_then_and exec_k (integer_div in2 integer_gte print_integer) (exec_when (exec_k_when_autoconstructing (boolean_swap) (print_boolean) integer_flush boolean_dup))) () ()) ())
Errors: [1 0 0 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 37
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 7.058
Median total errors in population: 7
Error averages by case: (0.467 0.734 0.734 0.734 1.0 1.0 0.201 0.861 0.861 0.466)
Error minima by case: (0 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 22.317
Average program size in population (points): 27.301
Average percent parens in population: 0.168
Minimum age in population: 27.54524230957031
Maximum age in population: 32.61848258972168
Average age in population: 30.34307061195374
Median age in population: 30.412034034729
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.581
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8693976
--- Timings ---
Current time: 1559583116361 milliseconds
Total Time:          53.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.3 seconds, 69.5%
Fitness Testing:      9.7 seconds, 18.1%
Report:               6.5 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_dup_items boolean_yankdup exec_do*count () integer_div integer_pop integer_div integer_mult exec_stackdepth integer_min integer_mult in2 in2 exec_dup_times () print_integer boolean_swap integer_dup_times boolean_or)
Lexicase best errors: [0 1 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_dup_items boolean_yankdup exec_do*count () integer_div integer_pop integer_div integer_mult exec_stackdepth integer_min integer_mult in2 in2 exec_dup_times () print_integer boolean_swap integer_dup_times boolean_or)
Zero cases best errors: [0 1 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (417 275 418 1000 418 1000 1000 942 1000 249)
Population mean number of elite cases: 6.72
Count of perfect (error zero) individuals by case: (417 275 418 0 418 0 0 942 0 249)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Best program: (exec_eq exec_eq print_integer integer_dup_items exec_do*count () integer_div integer_div integer_div integer_mult integer_dup integer_min integer_mult in2 in2 integer_div integer_mult integer_dup integer_min integer_mult in2 in2 exec_dup_times () print_integer boolean_swap integer_lte boolean_or)
Errors: [0 1 0 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 29
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 7.281
Median total errors in population: 8
Error averages by case: (0.583 0.725 0.582 1.0 0.582 1.0 1.0 0.058 1.0 0.751)
Error minima by case: (0 0 0 1 0 1 1 0 1 0)
Average genome size in population (length): 22.34
Average program size in population (points): 27.222
Average percent parens in population: 0.165
Minimum age in population: 29.13618469238281
Maximum age in population: 33.64524841308594
Average age in population: 31.79896078777313
Median age in population: 31.91798973083496
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8918948
--- Timings ---
Current time: 1559583118763 milliseconds
Total Time:          56.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.3 seconds, 70.1%
Fitness Testing:      9.9 seconds, 17.7%
Report:               6.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_eq print_integer integer_dup_items exec_do*count () integer_div integer_div integer_div integer_mult integer_dup integer_min integer_mult in2 in2 in1 print_integer boolean_swap integer_lte boolean_or)
Lexicase best errors: [0 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_eq print_integer integer_dup_items exec_do*count () integer_div integer_div integer_div integer_mult integer_dup integer_min integer_mult in2 in2 in1 print_integer boolean_swap integer_lte boolean_or)
Zero cases best errors: [0 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (195 195 195 551 180 195 197 551 550 181)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (195 195 195 551 180 195 197 551 550 181)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank})
Best program: (exec_eq print_integer integer_dup_items boolean_yank in1 integer_sub print_integer exec_k_when_autoconstructing (exec_do*times () in4 boolean_xor integer_lt boolean_xor integer_lt integer_sub) (integer_gte boolean_dup integer_mod) boolean_shove boolean_yankdup exec_yank)
Errors: [0 0 0 1 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 25
Percent parens: 0.160
--- Population Statistics ---
Average total errors in population: 7.01
Median total errors in population: 7
Error averages by case: (0.805 0.805 0.805 0.449 0.82 0.805 0.803 0.449 0.45 0.819)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.111
Average program size in population (points): 28.44
Average percent parens in population: 0.174
Minimum age in population: 30.26608276367188
Maximum age in population: 35.13209342956543
Average age in population: 33.28489096498489
Median age in population: 33.35075187683105
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9175370
--- Timings ---
Current time: 1559583121080 milliseconds
Total Time:          58.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.2 seconds, 70.5%
Fitness Testing:     10.2 seconds, 17.5%
Report:               6.9 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 2, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_eq print_integer integer_dup_items boolean_yank in1 integer_sub print_integer exec_k_when_autoconstructing (exec_do*times () exec_flush boolean_xor integer_dup_items exec_do*count () integer_div) (integer_div) integer_div integer_mult integer_dup integer_min exec_eq in2 in2 in4 print_integer boolean_swap integer_lte boolean_or)
Lexicase best errors: [1 1 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 32
Percent parens: 0.156
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 2, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_eq print_integer integer_dup_items boolean_yank in1 integer_sub print_integer exec_k_when_autoconstructing (exec_do*times () exec_flush boolean_xor integer_dup_items exec_do*count () integer_div) (integer_div) integer_div integer_mult integer_dup integer_min exec_eq in2 in2 in4 print_integer boolean_swap integer_lte boolean_or)
Zero cases best errors: [1 1 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 32
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (195 315 428 428 428 315 428 1000 14 315)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (195 315 428 428 428 315 428 0 14 315)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 3, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_or})
Best program: (exec_noop boolean_yank exec_rot (integer_lte integer_swap integer_pop exec_swap () (boolean_rot boolean_eq exec_s (in2 in2 in1) () () print_integer boolean_swap integer_lte) boolean_or) () ())
Errors: [1 1 0 0 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 17
Size: 26
Percent parens: 0.346
--- Population Statistics ---
Average total errors in population: 7.134
Median total errors in population: 7
Error averages by case: (0.805 0.685 0.572 0.572 0.572 0.685 0.572 1.0 0.986 0.685)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 18.978
Average program size in population (points): 22.176
Average percent parens in population: 0.125
Minimum age in population: 31.46240234375
Maximum age in population: 36.64152550697327
Average age in population: 34.86977343940735
Median age in population: 34.84622955322266
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 254
Genome diversity (% unique genomes):	 0.443
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 267
Syntactic diversity (% unique Push programs):	 0.388
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 9363133
--- Timings ---
Current time: 1559583123840 milliseconds
Total Time:          61.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.6 seconds, 71.2%
Fitness Testing:     10.4 seconds, 17.0%
Report:               7.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 91                 
Correct output: 9                   | Program output: 90                 
Correct output: 7                   | Program output: 81                 
Correct output: 49                  | Program output: 64                 
Correct output: 8                   | Program output: 67                 
Correct output: 19                  | Program output: 29                 
Correct output: 2                   | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 35                 
Correct output: 11                  | Program output: 100                
Correct output: 32                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 94                 
Correct output: 1                   | Program output: 91                 
Correct output: 54                  | Program output: 54                 
Correct output: 12                  | Program output: 37                 
Correct output: -93                 | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 96                 
Correct output: -14                 | Program output: 91                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -23                
Correct output: -4                  | Program output: 6                  
Correct output: -73                 | Program output: -27                
Correct output: 26                  | Program output: 39                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: -80                
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -20                
Correct output: -9                  | Program output: -9                 
Correct output: 21                  | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: 93                 
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 58                 
Correct output: -41                 | Program output: -21                
Correct output: -25                 | Program output: 26                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 89                 
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -2                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 85                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: -41                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: -37                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 24                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 2, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_rot})
Lexicase best program: (boolean_shove print_integer integer_dup_items exec_do*count () integer_div integer_div integer_div integer_mult integer_dup integer_min exec_eq in2 in2 in4 integer_mult in2 in2 integer_yankdup print_integer boolean_swap integer_lte boolean_rot)
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 24
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 2, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_rot})
Zero cases best program: (boolean_shove print_integer integer_dup_items exec_do*count () integer_div integer_div integer_div integer_mult integer_dup integer_min exec_eq in2 in2 in4 integer_mult in2 in2 integer_yankdup print_integer boolean_swap integer_lte boolean_rot)
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 24
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (943 420 98 423 423 98 940 98 423 424)
Population mean number of elite cases: 4.29
Count of perfect (error zero) individuals by case: (943 420 98 423 423 98 940 98 423 424)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 2, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_rot})
Best program: (boolean_shove print_integer integer_dup_items exec_do*count () integer_div integer_div integer_div integer_mult integer_dup integer_min exec_eq in2 in2 in4 integer_mult in2 in2 integer_yankdup print_integer boolean_swap integer_lte boolean_rot)
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 22
Size: 24
Percent parens: 0.083
--- Population Statistics ---
Average total errors in population: 5.71
Median total errors in population: 5
Error averages by case: (0.057 0.58 0.902 0.577 0.577 0.902 0.06 0.902 0.577 0.576)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.591
Average program size in population (points): 21.84
Average percent parens in population: 0.133
Minimum age in population: 32.66600036621094
Maximum age in population: 38.21902477741241
Average age in population: 36.41863650083542
Median age in population: 36.49580389261246
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.394
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9560934
--- Timings ---
Current time: 1559583126289 milliseconds
Total Time:          63.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.7 seconds, 71.8%
Fitness Testing:     10.6 seconds, 16.6%
Report:               7.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 8                  
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 8                  
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 8                  
Correct output: 50                  | Program output: 8                  
Correct output: 13                  | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 8                  
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 8                  
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 8                  
Correct output: 49                  | Program output: 8                  
Correct output: 12                  | Program output: 8                  
Correct output: 11                  | Program output: 8                  
Correct output: 32                  | Program output: 8                  
Correct output: 22                  | Program output: 8                  
Correct output: 7                   | Program output: 8                  
Correct output: 14                  | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 8                  
Correct output: 12                  | Program output: 8                  
Correct output: -93                 | Program output: 8                  
Correct output: -85                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 8                  
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 8                  
Correct output: 21                  | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 8                  
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_pop boolean_yank integer_div in1 exec_stackdepth integer_min integer_mult in2 in2 integer_yankdup print_integer boolean_swap integer_lte)
Lexicase best errors: [0 1 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 14
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_pop boolean_yank integer_div in1 exec_stackdepth integer_min integer_mult in2 in2 integer_yankdup print_integer boolean_swap integer_lte)
Zero cases best errors: [0 1 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 14
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (927 13 3 233 23 927 253 926 230 661)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (927 13 3 233 23 927 253 926 230 661)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Best program: (integer_pop boolean_yank integer_div in1 exec_stackdepth integer_min integer_mult in2 in2 integer_yankdup print_integer boolean_swap integer_lte)
Errors: [0 1 1 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 13
Size: 14
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 5.804
Median total errors in population: 6
Error averages by case: (0.073 0.987 0.997 0.767 0.977 0.073 0.747 0.074 0.77 0.339)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.697
Average program size in population (points): 21.507
Average percent parens in population: 0.083
Minimum age in population: 37.44491398334503
Maximum age in population: 39.55919647216797
Average age in population: 38.234156029284
Median age in population: 38.44491398334503
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 503
Genome diversity (% unique genomes):	 0.269
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 548
Syntactic diversity (% unique Push programs):	 0.219
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9746487
--- Timings ---
Current time: 1559583128418 milliseconds
Total Time:          65.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.5 seconds, 72.2%
Fitness Testing:     10.8 seconds, 16.4%
Report:               7.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_pop boolean_yank integer_div in1 exec_if (integer_min integer_mult) (in2 in2 integer_yankdup) print_integer boolean_swap integer_lte)
Lexicase best errors: [0 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 16
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_pop boolean_yank integer_div in1 exec_if (integer_min integer_mult) (in2 in2 integer_yankdup) print_integer boolean_swap integer_lte)
Zero cases best errors: [0 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 16
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (826 212 225 1000 3 948 826 825 503 576)
Population mean number of elite cases: 5.94
Count of perfect (error zero) individuals by case: (826 212 225 0 3 948 826 825 503 576)
Population mean number of perfect (error zero) cases: 4.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_rot})
Best program: (boolean_shove print_integer integer_dup_items exec_do*count () integer_div integer_div integer_div integer_mult integer_dup integer_min exec_eq integer_mult in2 in2 integer_yankdup print_integer boolean_swap integer_lte boolean_rot)
Errors: [0 0 1 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 21
Percent parens: 0.095
--- Population Statistics ---
Average total errors in population: 5.056
Median total errors in population: 5
Error averages by case: (0.174 0.788 0.775 1.0 0.997 0.052 0.174 0.175 0.497 0.424)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 17.421
Average program size in population (points): 19.287
Average percent parens in population: 0.098
Minimum age in population: 38.44491398334503
Maximum age in population: 41.55919647216797
Average age in population: 40.1113627358973
Median age in population: 40.0020552277565
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.319
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.262
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 9915955
--- Timings ---
Current time: 1559583130455 milliseconds
Total Time:          67.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.2 seconds, 72.6%
Fitness Testing:     10.9 seconds, 16.1%
Report:               7.5 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 538
Test mean error for best: 0.53800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_pop boolean_yank integer_div in1 exec_if (integer_min integer_mult) (in2 in2 integer_yankdup) print_integer boolean_swap integer_lte)
Lexicase best errors: [0 1 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 16
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_pop boolean_yank integer_div in1 exec_if (integer_min integer_mult) (in2 in2 integer_yankdup) print_integer boolean_swap integer_lte)
Zero cases best errors: [0 1 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 16
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (383 1000 163 383 951 1000 936 267 383 779)
Population mean number of elite cases: 6.24
Count of perfect (error zero) individuals by case: (383 0 163 383 951 0 936 267 383 779)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Best program: (integer_pop boolean_yank integer_div in1 exec_if (integer_min integer_mult) (in2 in2 integer_yankdup) print_integer boolean_swap integer_lte)
Errors: [0 1 1 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 13
Size: 16
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 5.755
Median total errors in population: 6
Error averages by case: (0.617 1.0 0.837 0.617 0.049 1.0 0.064 0.733 0.617 0.221)
Error minima by case: (0 1 0 0 0 1 0 0 0 0)
Average genome size in population (length): 17.32
Average program size in population (points): 20.022
Average percent parens in population: 0.143
Minimum age in population: 39.44491398334503
Maximum age in population: 43.0020552277565
Average age in population: 41.49411652947962
Median age in population: 41.61276991665363
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 176
Genome diversity (% unique genomes):	 0.35
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.298
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 10083064
--- Timings ---
Current time: 1559583133022 milliseconds
Total Time:          70.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.5 seconds, 73.1%
Fitness Testing:     11.1 seconds, 15.8%
Report:               7.7 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 538
Test mean error for best: 0.53800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_pop boolean_yank integer_div in1 exec_if (integer_min integer_mult) (in2 exec_when (integer_yankdup) print_integer boolean_swap integer_lte))
Lexicase best errors: [1 1 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_pop boolean_yank integer_div in1 exec_if (integer_min integer_mult) (in2 exec_when (integer_yankdup) print_integer boolean_swap integer_lte))
Zero cases best errors: [1 1 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 562 560 180 381 944 731 381 1000 731)
Population mean number of elite cases: 6.47
Count of perfect (error zero) individuals by case: (0 562 560 180 381 944 731 381 0 731)
Population mean number of perfect (error zero) cases: 4.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 2, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Best program: (integer_pop boolean_yank integer_div in1 exec_if (integer_min integer_mult) (in2 in2 integer_yankdup) print_integer boolean_swap integer_lte)
Errors: [1 0 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 13
Size: 16
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 5.53
Median total errors in population: 5
Error averages by case: (1.0 0.438 0.44 0.82 0.619 0.056 0.269 0.619 1.0 0.269)
Error minima by case: (1 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 14.765
Average program size in population (points): 18.012
Average percent parens in population: 0.187
Minimum age in population: 40.44491398334503
Maximum age in population: 44.61276991665363
Average age in population: 42.98574485738575
Median age in population: 43.0020552277565
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 266
Genome diversity (% unique genomes):	 0.317
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 272
Syntactic diversity (% unique Push programs):	 0.274
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10231210
--- Timings ---
Current time: 1559583135533 milliseconds
Total Time:          72.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        53.7 seconds, 73.6%
Fitness Testing:     11.3 seconds, 15.5%
Report:               7.8 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 383
Test mean error for best: 0.38300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 73                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 36                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 93                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 in2 integer_yankdup print_integer boolean_swap integer_lte)
Lexicase best errors: [0 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 14
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 in2 integer_yankdup print_integer boolean_swap integer_lte)
Zero cases best errors: [0 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 14
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (532 1000 199 731 1 1 732 732 200 532)
Population mean number of elite cases: 4.66
Count of perfect (error zero) individuals by case: (532 0 199 731 1 1 732 732 200 532)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 in2 integer_yankdup print_integer boolean_swap integer_lte)
Errors: [0 1 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 13
Size: 14
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 6.34
Median total errors in population: 6
Error averages by case: (0.468 1.0 0.801 0.269 0.999 0.999 0.268 0.268 0.8 0.468)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.989
Average program size in population (points): 18.287
Average percent parens in population: 0.187
Minimum age in population: 41.44491398334503
Maximum age in population: 46.33509124442935
Average age in population: 44.45538145979121
Median age in population: 44.55741257220507
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 259
Genome diversity (% unique genomes):	 0.332
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 263
Syntactic diversity (% unique Push programs):	 0.284
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 10380442
--- Timings ---
Current time: 1559583137760 milliseconds
Total Time:          75.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.6 seconds, 74.0%
Fitness Testing:     11.4 seconds, 15.2%
Report:               8.0 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 383
Test mean error for best: 0.38300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 73                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 36                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 93                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 in2 integer_yankdup print_integer boolean_swap integer_lte)
Lexicase best errors: [0 0 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 14
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 in2 integer_yankdup print_integer boolean_swap integer_lte)
Zero cases best errors: [0 0 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 14
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (937 937 949 937 691 24 222 24 687 691)
Population mean number of elite cases: 6.10
Count of perfect (error zero) individuals by case: (937 937 949 937 691 24 222 24 687 691)
Population mean number of perfect (error zero) cases: 6.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 in2 integer_yankdup print_integer boolean_swap integer_lte)
Errors: [0 0 0 0 0 1 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 13
Size: 14
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 3.901
Median total errors in population: 3
Error averages by case: (0.063 0.063 0.051 0.063 0.309 0.976 0.778 0.976 0.313 0.309)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.19
Average program size in population (points): 16.522
Average percent parens in population: 0.079
Minimum age in population: 42.94491398334503
Maximum age in population: 47.33509124442935
Average age in population: 45.71471937330998
Median age in population: 45.75183224026114
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 596
Genome diversity (% unique genomes):	 0.263
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 632
Syntactic diversity (% unique Push programs):	 0.217
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 10531937
--- Timings ---
Current time: 1559583140200 milliseconds
Total Time:          77.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.8 seconds, 74.5%
Fitness Testing:     11.6 seconds, 15.0%
Report:               8.1 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 214
Test mean error for best: 0.21400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 14
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 14
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (142 395 3 773 396 396 951 396 142 396)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (142 395 3 773 396 396 951 396 142 396)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 13
Size: 14
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 6.01
Median total errors in population: 7
Error averages by case: (0.858 0.605 0.997 0.227 0.604 0.604 0.049 0.604 0.858 0.604)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.45
Average program size in population (points): 15.69
Average percent parens in population: 0.077
Minimum age in population: 43.94491398334503
Maximum age in population: 48.75875190831721
Average age in population: 47.37522468973137
Median age in population: 47.18241257220507
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 326
Genome diversity (% unique genomes):	 0.28
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 346
Syntactic diversity (% unique Push programs):	 0.229
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 10680044
--- Timings ---
Current time: 1559583142192 milliseconds
Total Time:          79.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.5 seconds, 74.7%
Fitness Testing:     11.8 seconds, 14.8%
Report:               8.2 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 214
Test mean error for best: 0.21400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 14
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 14
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (749 935 739 933 749 943 749 177 932 737)
Population mean number of elite cases: 7.64
Count of perfect (error zero) individuals by case: (749 935 739 933 749 943 749 177 932 737)
Population mean number of perfect (error zero) cases: 7.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 13
Size: 14
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 2.357
Median total errors in population: 1
Error averages by case: (0.251 0.065 0.261 0.067 0.251 0.057 0.251 0.823 0.068 0.263)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.593
Average program size in population (points): 15.893
Average percent parens in population: 0.080
Minimum age in population: 46.45250261388719
Maximum age in population: 50.28218940831721
Average age in population: 48.70288236798299
Median age in population: 48.79904216248542
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 642
Genome diversity (% unique genomes):	 0.264
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 672
Syntactic diversity (% unique Push programs):	 0.208
Total error diversity:				 0.01
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 10826099
--- Timings ---
Current time: 1559583144251 milliseconds
Total Time:          81.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.2 seconds, 75.0%
Fitness Testing:     11.9 seconds, 14.6%
Report:               8.3 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 214
Test mean error for best: 0.21400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 integer_min integer_min integer_yankdup print_integer boolean_swap integer_lte)
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 15
Percent parens: 0.067
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 integer_min integer_min integer_yankdup print_integer boolean_swap integer_lte)
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 15
Percent parens: 0.067
--- Lexicase Population Statistics ---
Count of elite individuals by case: (753 759 753 764 767 932 755 162 955 753)
Population mean number of elite cases: 7.35
Count of perfect (error zero) individuals by case: (753 759 753 764 767 932 755 162 955 753)
Population mean number of perfect (error zero) cases: 7.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 13
Size: 14
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 2.647
Median total errors in population: 1
Error averages by case: (0.247 0.241 0.247 0.236 0.233 0.068 0.245 0.838 0.045 0.247)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.505
Average program size in population (points): 15.79
Average percent parens in population: 0.080
Minimum age in population: 47.45250261388719
Maximum age in population: 51.70054882741533
Average age in population: 50.16961651426274
Median age in population: 50.18241257220507
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 579
Genome diversity (% unique genomes):	 0.278
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 634
Syntactic diversity (% unique Push programs):	 0.231
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 10969869
--- Timings ---
Current time: 1559583146253 milliseconds
Total Time:          83.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.9 seconds, 75.3%
Fitness Testing:     12.1 seconds, 14.5%
Report:               8.5 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 214
Test mean error for best: 0.21400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
Lexicase best errors: [0 1 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 14
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
Zero cases best errors: [0 1 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 14
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (819 111 819 818 112 942 945 112 819 828)
Population mean number of elite cases: 6.32
Count of perfect (error zero) individuals by case: (819 111 819 818 112 942 945 112 819 828)
Population mean number of perfect (error zero) cases: 6.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
Errors: [0 1 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 13
Size: 14
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 3.675
Median total errors in population: 3
Error averages by case: (0.181 0.889 0.181 0.182 0.888 0.058 0.055 0.888 0.181 0.172)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.166
Average program size in population (points): 15.383
Average percent parens in population: 0.077
Minimum age in population: 49.80026991665363
Maximum age in population: 53.3460286562331
Average age in population: 51.66207928699977
Median age in population: 51.68241257220507
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 544
Genome diversity (% unique genomes):	 0.287
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 629
Syntactic diversity (% unique Push programs):	 0.225
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 11110934
--- Timings ---
Current time: 1559583148227 milliseconds
Total Time:          85.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.6 seconds, 75.5%
Fitness Testing:     12.3 seconds, 14.3%
Report:               8.6 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 214
Test mean error for best: 0.21400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 14
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_pop boolean_yank integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 14
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (600 938 603 602 937 602 599 601 599 602)
Population mean number of elite cases: 6.68
Count of perfect (error zero) individuals by case: (600 938 603 602 937 602 599 601 599 602)
Population mean number of perfect (error zero) cases: 6.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte})
Best program: (integer_pop integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 12
Size: 13
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 3.317
Median total errors in population: 0
Error averages by case: (0.4 0.062 0.397 0.398 0.063 0.398 0.401 0.399 0.401 0.398)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.818
Average program size in population (points): 17.314
Average percent parens in population: 0.084
Minimum age in population: 50.80026991665363
Maximum age in population: 55.07676253461977
Average age in population: 53.12846307447302
Median age in population: 53.2263858683873
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 377
Genome diversity (% unique genomes):	 0.347
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 441
Syntactic diversity (% unique Push programs):	 0.281
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 11265708
--- Timings ---
Current time: 1559583150189 milliseconds
Total Time:          87.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.3 seconds, 75.7%
Fitness Testing:     12.4 seconds, 14.2%
Report:               8.7 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 35
Successful program: (integer_pop integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 13


Auto-simplifying with starting size: 13
step: 0
program: (integer_pop integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 500
program: (integer_pop integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 1000
program: (integer_pop integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 1500
program: (integer_pop integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 2000
program: (integer_pop integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 2500
program: (integer_pop integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 3000
program: (integer_pop integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 3500
program: (integer_pop integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 4000
program: (integer_pop integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 4500
program: (integer_pop integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 5000
program: (integer_pop integer_div in1 in3 integer_min integer_mult in2 integer_min integer_yankdup print_integer boolean_swap integer_lte)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 214
Test mean error for best: 0.21400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -70                
;;******************************
