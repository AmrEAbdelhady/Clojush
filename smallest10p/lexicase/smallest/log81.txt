Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[46 31 31 31] 31] [[-13 -13 -62 -13] -62] [[-5 -5 41 -5] -5] [[-49 -19 -49 -49] -49] [[-90 -90 -90 -12] -90] [[8 8 8 58] 8] [[80 80 15 80] 15] [[-9 -9 -9 -46] -46] [[-80 -37 -37 -37] -80] [[-9 -9 -90 -9] -90] [(-35 -35 -35 -35) -35] [(88 88 88 88) 88] [(21 21 21 21) 21] [(34 34 34 34) 34] [(44 44 44 44) 44] [(65 84 8 16) 8] [(20 50 100 56) 20] [(28 87 41 67) 28] [(100 7 22 54) 7] [(79 88 85 4) 4] [(35 91 55 16) 16] [(82 12 77 56) 12] [(63 37 39 50) 37] [(24 35 52 11) 11] [(88 33 56 72) 33] [(12 52 44 47) 12] [(59 1 25 8) 1] [(5 72 3 99) 3] [(27 90 48 46) 27] [(79 95 17 82) 17] [(81 74 83 93) 74] [(8 38 76 80) 8] [(50 3 18 22) 3] [(9 7 44 3) 3] [(18 31 93 96) 18] [(88 -8 -28 -98) -98] [(-42 68 -70 85) -70] [(90 -6 60 -92) -92] [(-68 56 -86 23) -86] [(-20 64 -21 -85) -85] [(5 -64 -68 -59) -68] [(6 44 -15 -61) -61] [(-91 40 -70 5) -91] [(51 -68 88 43) -68] [(-92 2 -74 99) -92] [(-88 -44 -37 -88) -88] [(26 -34 -40 80) -40] [(-25 -2 43 79) -25] [(48 82 -68 -74) -74] [(59 -43 78 -17) -43] [(31 31 47 62) 31] [(60 5 -35 -38) -38] [(-53 -43 44 47) -53] [(-80 -74 8 -80) -80] [(80 -3 46 16) -3] [(86 14 20 -5) -5] [(-100 52 -74 -45) -100] [(-83 -55 8 10) -83] [(-35 88 64 41) -35] [(-6 17 -7 -99) -99] [(88 -62 -82 19) -82] [(-46 73 22 32) -46] [(3 44 -33 70) -33] [(85 85 75 -52) -52] [(100 87 96 -41) -41] [(7 -32 -95 36) -95] [(-65 84 -64 10) -65] [(-69 12 10 20) -69] [(-68 17 -52 -94) -94] [(-42 10 58 -33) -42] [(6 8 20 -7) -7] [(99 -1 -10 96) -10] [(43 -78 -78 72) -78] [(34 -19 100 91) -19] [(-67 51 45 -4) -67] [(96 58 21 100) 21] [(-52 -79 35 17) -79] [(76 -55 90 -61) -61] [(86 -83 -2 -4) -83] [(79 81 21 91) 21] [(35 19 83 83) 19] [(-39 -88 -20 69) -88] [(-32 72 -83 -80) -83] [(54 15 -52 81) -52] [(-14 22 -86 -2) -86] [(-98 -47 -13 -87) -98] [(-50 -18 -5 -17) -50] [(81 56 47 98) 47] [(73 -3 20 -33) -33] [(-54 69 -100 42) -100] [(18 32 -80 -41) -80] [(40 37 84 30) 30] [(90 7 3 -4) -4] [(-78 -99 -34 -100) -100] [(-96 -88 81 100) -96])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[46 31 31 31] 31]
Train Case:   6 | Input/Output: [[-13 -13 -62 -13] -62]
Train Case:   7 | Input/Output: [[-5 -5 41 -5] -5]
Train Case:   8 | Input/Output: [[-49 -19 -49 -49] -49]
Train Case:   9 | Input/Output: [[-90 -90 -90 -12] -90]
Train Case:  10 | Input/Output: [[8 8 8 58] 8]
Train Case:  11 | Input/Output: [[80 80 15 80] 15]
Train Case:  12 | Input/Output: [[-9 -9 -9 -46] -46]
Train Case:  13 | Input/Output: [[-80 -37 -37 -37] -80]
Train Case:  14 | Input/Output: [[-9 -9 -90 -9] -90]
Train Case:  15 | Input/Output: [(-35 -35 -35 -35) -35]
Train Case:  16 | Input/Output: [(88 88 88 88) 88]
Train Case:  17 | Input/Output: [(21 21 21 21) 21]
Train Case:  18 | Input/Output: [(34 34 34 34) 34]
Train Case:  19 | Input/Output: [(44 44 44 44) 44]
Train Case:  20 | Input/Output: [(65 84 8 16) 8]
Train Case:  21 | Input/Output: [(20 50 100 56) 20]
Train Case:  22 | Input/Output: [(28 87 41 67) 28]
Train Case:  23 | Input/Output: [(100 7 22 54) 7]
Train Case:  24 | Input/Output: [(79 88 85 4) 4]
Train Case:  25 | Input/Output: [(35 91 55 16) 16]
Train Case:  26 | Input/Output: [(82 12 77 56) 12]
Train Case:  27 | Input/Output: [(63 37 39 50) 37]
Train Case:  28 | Input/Output: [(24 35 52 11) 11]
Train Case:  29 | Input/Output: [(88 33 56 72) 33]
Train Case:  30 | Input/Output: [(12 52 44 47) 12]
Train Case:  31 | Input/Output: [(59 1 25 8) 1]
Train Case:  32 | Input/Output: [(5 72 3 99) 3]
Train Case:  33 | Input/Output: [(27 90 48 46) 27]
Train Case:  34 | Input/Output: [(79 95 17 82) 17]
Train Case:  35 | Input/Output: [(81 74 83 93) 74]
Train Case:  36 | Input/Output: [(8 38 76 80) 8]
Train Case:  37 | Input/Output: [(50 3 18 22) 3]
Train Case:  38 | Input/Output: [(9 7 44 3) 3]
Train Case:  39 | Input/Output: [(18 31 93 96) 18]
Train Case:  40 | Input/Output: [(88 -8 -28 -98) -98]
Train Case:  41 | Input/Output: [(-42 68 -70 85) -70]
Train Case:  42 | Input/Output: [(90 -6 60 -92) -92]
Train Case:  43 | Input/Output: [(-68 56 -86 23) -86]
Train Case:  44 | Input/Output: [(-20 64 -21 -85) -85]
Train Case:  45 | Input/Output: [(5 -64 -68 -59) -68]
Train Case:  46 | Input/Output: [(6 44 -15 -61) -61]
Train Case:  47 | Input/Output: [(-91 40 -70 5) -91]
Train Case:  48 | Input/Output: [(51 -68 88 43) -68]
Train Case:  49 | Input/Output: [(-92 2 -74 99) -92]
Train Case:  50 | Input/Output: [(-88 -44 -37 -88) -88]
Train Case:  51 | Input/Output: [(26 -34 -40 80) -40]
Train Case:  52 | Input/Output: [(-25 -2 43 79) -25]
Train Case:  53 | Input/Output: [(48 82 -68 -74) -74]
Train Case:  54 | Input/Output: [(59 -43 78 -17) -43]
Train Case:  55 | Input/Output: [(31 31 47 62) 31]
Train Case:  56 | Input/Output: [(60 5 -35 -38) -38]
Train Case:  57 | Input/Output: [(-53 -43 44 47) -53]
Train Case:  58 | Input/Output: [(-80 -74 8 -80) -80]
Train Case:  59 | Input/Output: [(80 -3 46 16) -3]
Train Case:  60 | Input/Output: [(86 14 20 -5) -5]
Train Case:  61 | Input/Output: [(-100 52 -74 -45) -100]
Train Case:  62 | Input/Output: [(-83 -55 8 10) -83]
Train Case:  63 | Input/Output: [(-35 88 64 41) -35]
Train Case:  64 | Input/Output: [(-6 17 -7 -99) -99]
Train Case:  65 | Input/Output: [(88 -62 -82 19) -82]
Train Case:  66 | Input/Output: [(-46 73 22 32) -46]
Train Case:  67 | Input/Output: [(3 44 -33 70) -33]
Train Case:  68 | Input/Output: [(85 85 75 -52) -52]
Train Case:  69 | Input/Output: [(100 87 96 -41) -41]
Train Case:  70 | Input/Output: [(7 -32 -95 36) -95]
Train Case:  71 | Input/Output: [(-65 84 -64 10) -65]
Train Case:  72 | Input/Output: [(-69 12 10 20) -69]
Train Case:  73 | Input/Output: [(-68 17 -52 -94) -94]
Train Case:  74 | Input/Output: [(-42 10 58 -33) -42]
Train Case:  75 | Input/Output: [(6 8 20 -7) -7]
Train Case:  76 | Input/Output: [(99 -1 -10 96) -10]
Train Case:  77 | Input/Output: [(43 -78 -78 72) -78]
Train Case:  78 | Input/Output: [(34 -19 100 91) -19]
Train Case:  79 | Input/Output: [(-67 51 45 -4) -67]
Train Case:  80 | Input/Output: [(96 58 21 100) 21]
Train Case:  81 | Input/Output: [(-52 -79 35 17) -79]
Train Case:  82 | Input/Output: [(76 -55 90 -61) -61]
Train Case:  83 | Input/Output: [(86 -83 -2 -4) -83]
Train Case:  84 | Input/Output: [(79 81 21 91) 21]
Train Case:  85 | Input/Output: [(35 19 83 83) 19]
Train Case:  86 | Input/Output: [(-39 -88 -20 69) -88]
Train Case:  87 | Input/Output: [(-32 72 -83 -80) -83]
Train Case:  88 | Input/Output: [(54 15 -52 81) -52]
Train Case:  89 | Input/Output: [(-14 22 -86 -2) -86]
Train Case:  90 | Input/Output: [(-98 -47 -13 -87) -98]
Train Case:  91 | Input/Output: [(-50 -18 -5 -17) -50]
Train Case:  92 | Input/Output: [(81 56 47 98) 47]
Train Case:  93 | Input/Output: [(73 -3 20 -33) -33]
Train Case:  94 | Input/Output: [(-54 69 -100 42) -100]
Train Case:  95 | Input/Output: [(18 32 -80 -41) -80]
Train Case:  96 | Input/Output: [(40 37 84 30) 30]
Train Case:  97 | Input/Output: [(90 7 3 -4) -4]
Train Case:  98 | Input/Output: [(-78 -99 -34 -100) -100]
Train Case:  99 | Input/Output: [(-96 -88 81 100) -96]
Test Case:   0 | Input/Output: [[-49 -49 -49 71] -49]
Test Case:   1 | Input/Output: [[92 92 92 -44] -44]
Test Case:   2 | Input/Output: [[-90 -90 -90 -2] -90]
Test Case:   3 | Input/Output: [[44 68 68 68] 44]
Test Case:   4 | Input/Output: [[95 95 -37 95] -37]
Test Case:   5 | Input/Output: [[65 80 65 65] 65]
Test Case:   6 | Input/Output: [[71 71 60 71] 60]
Test Case:   7 | Input/Output: [[-22 -55 -22 -22] -55]
Test Case:   8 | Input/Output: [[-90 -90 -10 -90] -90]
Test Case:   9 | Input/Output: [[14 -20 14 14] -20]
Test Case:  10 | Input/Output: [[73 -37 -37 -37] -37]
Test Case:  11 | Input/Output: [[21 21 21 89] 21]
Test Case:  12 | Input/Output: [[-58 -58 -58 -94] -94]
Test Case:  13 | Input/Output: [[99 99 -88 99] -88]
Test Case:  14 | Input/Output: [[8 8 8 51] 8]
Test Case:  15 | Input/Output: [[91 91 17 91] 17]
Test Case:  16 | Input/Output: [[65 55 55 55] 55]
Test Case:  17 | Input/Output: [[-93 36 36 36] -93]
Test Case:  18 | Input/Output: [[20 20 20 16] 16]
Test Case:  19 | Input/Output: [[-44 24 -44 -44] -44]
Test Case:  20 | Input/Output: [[48 48 -9 48] -9]
Test Case:  21 | Input/Output: [[-51 -51 -51 -66] -66]
Test Case:  22 | Input/Output: [[8 8 -8 8] -8]
Test Case:  23 | Input/Output: [[83 -40 83 83] -40]
Test Case:  24 | Input/Output: [[-89 47 47 47] -89]
Test Case:  25 | Input/Output: [[-48 -48 -48 -19] -48]
Test Case:  26 | Input/Output: [[-78 -78 70 -78] -78]
Test Case:  27 | Input/Output: [[90 -66 -66 -66] -66]
Test Case:  28 | Input/Output: [[17 17 17 60] 17]
Test Case:  29 | Input/Output: [[-8 -8 47 -8] -8]
Test Case:  30 | Input/Output: [[29 29 29 95] 29]
Test Case:  31 | Input/Output: [[-98 -76 -98 -98] -98]
Test Case:  32 | Input/Output: [[52 52 52 -99] -99]
Test Case:  33 | Input/Output: [[17 43 17 17] 17]
Test Case:  34 | Input/Output: [[45 45 -65 45] -65]
Test Case:  35 | Input/Output: [[-73 -16 -73 -73] -73]
Test Case:  36 | Input/Output: [[92 42 42 42] 42]
Test Case:  37 | Input/Output: [[-34 -80 -34 -34] -80]
Test Case:  38 | Input/Output: [[-79 -76 -79 -79] -79]
Test Case:  39 | Input/Output: [[27 -1 -1 -1] -1]
Test Case:  40 | Input/Output: [[-82 -82 10 -82] -82]
Test Case:  41 | Input/Output: [[46 46 46 75] 46]
Test Case:  42 | Input/Output: [[-87 -87 -87 -28] -87]
Test Case:  43 | Input/Output: [[-95 -95 -15 -95] -95]
Test Case:  44 | Input/Output: [[73 4 4 4] 4]
Test Case:  45 | Input/Output: [[-80 26 -80 -80] -80]
Test Case:  46 | Input/Output: [[-68 -68 -68 -39] -68]
Test Case:  47 | Input/Output: [[-19 -19 -19 99] -19]
Test Case:  48 | Input/Output: [[20 64 20 20] 20]
Test Case:  49 | Input/Output: [[93 93 87 93] 87]
Test Case:  50 | Input/Output: [[-93 -93 -93 -19] -93]
Test Case:  51 | Input/Output: [[56 56 56 55] 55]
Test Case:  52 | Input/Output: [[-50 51 51 51] -50]
Test Case:  53 | Input/Output: [[81 -61 -61 -61] -61]
Test Case:  54 | Input/Output: [[-68 -68 -68 85] -68]
Test Case:  55 | Input/Output: [[1 39 1 1] 1]
Test Case:  56 | Input/Output: [[-83 56 56 56] -83]
Test Case:  57 | Input/Output: [[61 75 61 61] 61]
Test Case:  58 | Input/Output: [[90 -1 90 90] -1]
Test Case:  59 | Input/Output: [[-64 100 100 100] -64]
Test Case:  60 | Input/Output: [[26 -5 -5 -5] -5]
Test Case:  61 | Input/Output: [[37 93 93 93] 37]
Test Case:  62 | Input/Output: [[-26 -26 -26 57] -26]
Test Case:  63 | Input/Output: [[-75 -75 -45 -75] -75]
Test Case:  64 | Input/Output: [[-56 -56 -53 -56] -56]
Test Case:  65 | Input/Output: [[64 -54 -54 -54] -54]
Test Case:  66 | Input/Output: [[15 57 57 57] 15]
Test Case:  67 | Input/Output: [[-72 49 -72 -72] -72]
Test Case:  68 | Input/Output: [[-36 -36 -36 2] -36]
Test Case:  69 | Input/Output: [[62 62 62 66] 62]
Test Case:  70 | Input/Output: [[1 45 1 1] 1]
Test Case:  71 | Input/Output: [[78 78 78 -17] -17]
Test Case:  72 | Input/Output: [[90 5 90 90] 5]
Test Case:  73 | Input/Output: [[58 10 10 10] 10]
Test Case:  74 | Input/Output: [[88 -44 88 88] -44]
Test Case:  75 | Input/Output: [[-74 -71 -74 -74] -74]
Test Case:  76 | Input/Output: [[7 7 52 7] 7]
Test Case:  77 | Input/Output: [[-68 -68 -68 84] -68]
Test Case:  78 | Input/Output: [[-19 57 57 57] -19]
Test Case:  79 | Input/Output: [[80 21 21 21] 21]
Test Case:  80 | Input/Output: [[21 21 42 21] 21]
Test Case:  81 | Input/Output: [[-11 -26 -11 -11] -26]
Test Case:  82 | Input/Output: [[45 45 76 45] 45]
Test Case:  83 | Input/Output: [[-39 88 88 88] -39]
Test Case:  84 | Input/Output: [[-87 87 87 87] -87]
Test Case:  85 | Input/Output: [[-78 -78 -78 36] -78]
Test Case:  86 | Input/Output: [[57 -15 57 57] -15]
Test Case:  87 | Input/Output: [[22 98 98 98] 22]
Test Case:  88 | Input/Output: [[97 97 97 81] 81]
Test Case:  89 | Input/Output: [[-53 -53 26 -53] -53]
Test Case:  90 | Input/Output: [[-34 -34 -34 -2] -34]
Test Case:  91 | Input/Output: [[38 38 38 -44] -44]
Test Case:  92 | Input/Output: [[95 -68 95 95] -68]
Test Case:  93 | Input/Output: [[-15 -49 -49 -49] -49]
Test Case:  94 | Input/Output: [[44 44 44 -25] -25]
Test Case:  95 | Input/Output: [[-14 47 -14 -14] -14]
Test Case:  96 | Input/Output: [[-18 89 89 89] -18]
Test Case:  97 | Input/Output: [[42 70 70 70] 42]
Test Case:  98 | Input/Output: [[-6 75 -6 -6] -6]
Test Case:  99 | Input/Output: [[61 -23 -23 -23] -23]
Test Case: 100 | Input/Output: [(19 19 19 19) 19]
Test Case: 101 | Input/Output: [(1 1 1 1) 1]
Test Case: 102 | Input/Output: [(16 16 16 16) 16]
Test Case: 103 | Input/Output: [(35 35 35 35) 35]
Test Case: 104 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 105 | Input/Output: [(10 10 10 10) 10]
Test Case: 106 | Input/Output: [(86 86 86 86) 86]
Test Case: 107 | Input/Output: [(87 87 87 87) 87]
Test Case: 108 | Input/Output: [(42 42 42 42) 42]
Test Case: 109 | Input/Output: [(96 96 96 96) 96]
Test Case: 110 | Input/Output: [(92 92 92 92) 92]
Test Case: 111 | Input/Output: [(51 51 51 51) 51]
Test Case: 112 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 113 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 114 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 115 | Input/Output: [(30 30 30 30) 30]
Test Case: 116 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 117 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 118 | Input/Output: [(42 42 42 42) 42]
Test Case: 119 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 120 | Input/Output: [(58 58 58 58) 58]
Test Case: 121 | Input/Output: [(52 52 52 52) 52]
Test Case: 122 | Input/Output: [(99 99 99 99) 99]
Test Case: 123 | Input/Output: [(72 72 72 72) 72]
Test Case: 124 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 125 | Input/Output: [(27 27 27 27) 27]
Test Case: 126 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 127 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 128 | Input/Output: [(98 98 98 98) 98]
Test Case: 129 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 130 | Input/Output: [(48 48 48 48) 48]
Test Case: 131 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 132 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 133 | Input/Output: [(68 68 68 68) 68]
Test Case: 134 | Input/Output: [(48 48 48 48) 48]
Test Case: 135 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 136 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 137 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 138 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 139 | Input/Output: [(14 14 14 14) 14]
Test Case: 140 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 141 | Input/Output: [(31 31 31 31) 31]
Test Case: 142 | Input/Output: [(14 14 14 14) 14]
Test Case: 143 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 144 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 145 | Input/Output: [(71 71 71 71) 71]
Test Case: 146 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 147 | Input/Output: [(2 2 2 2) 2]
Test Case: 148 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 149 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 150 | Input/Output: [(100 100 100 100) 100]
Test Case: 151 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 152 | Input/Output: [(90 90 90 90) 90]
Test Case: 153 | Input/Output: [(58 58 58 58) 58]
Test Case: 154 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 155 | Input/Output: [(81 81 81 81) 81]
Test Case: 156 | Input/Output: [(91 91 91 91) 91]
Test Case: 157 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 158 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 159 | Input/Output: [(20 20 20 20) 20]
Test Case: 160 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 161 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 162 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 163 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 164 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 165 | Input/Output: [(40 40 40 40) 40]
Test Case: 166 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 167 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 168 | Input/Output: [(16 16 16 16) 16]
Test Case: 169 | Input/Output: [(76 76 76 76) 76]
Test Case: 170 | Input/Output: [(54 54 54 54) 54]
Test Case: 171 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 172 | Input/Output: [(55 55 55 55) 55]
Test Case: 173 | Input/Output: [(64 64 64 64) 64]
Test Case: 174 | Input/Output: [(43 43 43 43) 43]
Test Case: 175 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 176 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 177 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 178 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 179 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 180 | Input/Output: [(8 8 8 8) 8]
Test Case: 181 | Input/Output: [(52 52 52 52) 52]
Test Case: 182 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 183 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 184 | Input/Output: [(67 67 67 67) 67]
Test Case: 185 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 186 | Input/Output: [(76 76 76 76) 76]
Test Case: 187 | Input/Output: [(43 43 43 43) 43]
Test Case: 188 | Input/Output: [(31 31 31 31) 31]
Test Case: 189 | Input/Output: [(17 17 17 17) 17]
Test Case: 190 | Input/Output: [(97 97 97 97) 97]
Test Case: 191 | Input/Output: [(42 42 42 42) 42]
Test Case: 192 | Input/Output: [(0 0 0 0) 0]
Test Case: 193 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 194 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 195 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 196 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 197 | Input/Output: [(14 14 14 14) 14]
Test Case: 198 | Input/Output: [(80 80 80 80) 80]
Test Case: 199 | Input/Output: [(35 35 35 35) 35]
Test Case: 200 | Input/Output: [(11 45 71 84) 11]
Test Case: 201 | Input/Output: [(93 9 76 15) 9]
Test Case: 202 | Input/Output: [(39 1 8 94) 1]
Test Case: 203 | Input/Output: [(32 5 29 6) 5]
Test Case: 204 | Input/Output: [(81 93 37 41) 37]
Test Case: 205 | Input/Output: [(98 47 70 86) 47]
Test Case: 206 | Input/Output: [(80 16 90 40) 16]
Test Case: 207 | Input/Output: [(88 89 9 3) 3]
Test Case: 208 | Input/Output: [(0 67 4 5) 0]
Test Case: 209 | Input/Output: [(71 23 96 43) 23]
Test Case: 210 | Input/Output: [(83 3 1 21) 1]
Test Case: 211 | Input/Output: [(93 57 64 67) 57]
Test Case: 212 | Input/Output: [(38 73 66 46) 38]
Test Case: 213 | Input/Output: [(38 64 64 61) 38]
Test Case: 214 | Input/Output: [(90 15 61 55) 15]
Test Case: 215 | Input/Output: [(57 49 59 64) 49]
Test Case: 216 | Input/Output: [(63 43 30 77) 30]
Test Case: 217 | Input/Output: [(73 18 23 14) 14]
Test Case: 218 | Input/Output: [(7 6 58 52) 6]
Test Case: 219 | Input/Output: [(64 61 57 54) 54]
Test Case: 220 | Input/Output: [(59 2 95 12) 2]
Test Case: 221 | Input/Output: [(97 19 37 29) 19]
Test Case: 222 | Input/Output: [(18 57 27 45) 18]
Test Case: 223 | Input/Output: [(65 1 54 52) 1]
Test Case: 224 | Input/Output: [(98 89 14 1) 1]
Test Case: 225 | Input/Output: [(98 10 75 35) 10]
Test Case: 226 | Input/Output: [(83 65 84 63) 63]
Test Case: 227 | Input/Output: [(1 35 0 8) 0]
Test Case: 228 | Input/Output: [(33 12 9 49) 9]
Test Case: 229 | Input/Output: [(78 96 83 58) 58]
Test Case: 230 | Input/Output: [(41 77 73 63) 41]
Test Case: 231 | Input/Output: [(84 44 20 72) 20]
Test Case: 232 | Input/Output: [(92 54 56 59) 54]
Test Case: 233 | Input/Output: [(12 41 11 40) 11]
Test Case: 234 | Input/Output: [(18 41 38 55) 18]
Test Case: 235 | Input/Output: [(75 20 4 77) 4]
Test Case: 236 | Input/Output: [(81 68 26 59) 26]
Test Case: 237 | Input/Output: [(26 14 55 18) 14]
Test Case: 238 | Input/Output: [(75 35 25 86) 25]
Test Case: 239 | Input/Output: [(72 0 81 84) 0]
Test Case: 240 | Input/Output: [(24 20 11 79) 11]
Test Case: 241 | Input/Output: [(19 86 1 25) 1]
Test Case: 242 | Input/Output: [(88 41 89 10) 10]
Test Case: 243 | Input/Output: [(14 27 34 55) 14]
Test Case: 244 | Input/Output: [(97 37 68 8) 8]
Test Case: 245 | Input/Output: [(15 19 16 46) 15]
Test Case: 246 | Input/Output: [(78 83 89 87) 78]
Test Case: 247 | Input/Output: [(38 33 69 16) 16]
Test Case: 248 | Input/Output: [(62 44 98 80) 44]
Test Case: 249 | Input/Output: [(67 44 16 77) 16]
Test Case: 250 | Input/Output: [(67 8 33 48) 8]
Test Case: 251 | Input/Output: [(74 75 95 100) 74]
Test Case: 252 | Input/Output: [(29 87 61 7) 7]
Test Case: 253 | Input/Output: [(30 97 23 85) 23]
Test Case: 254 | Input/Output: [(40 81 70 94) 40]
Test Case: 255 | Input/Output: [(20 38 92 49) 20]
Test Case: 256 | Input/Output: [(62 29 46 95) 29]
Test Case: 257 | Input/Output: [(92 44 26 7) 7]
Test Case: 258 | Input/Output: [(94 85 33 78) 33]
Test Case: 259 | Input/Output: [(47 23 74 84) 23]
Test Case: 260 | Input/Output: [(43 37 99 46) 37]
Test Case: 261 | Input/Output: [(38 28 28 96) 28]
Test Case: 262 | Input/Output: [(58 78 85 43) 43]
Test Case: 263 | Input/Output: [(70 37 54 59) 37]
Test Case: 264 | Input/Output: [(94 5 41 38) 5]
Test Case: 265 | Input/Output: [(42 30 53 60) 30]
Test Case: 266 | Input/Output: [(23 48 0 71) 0]
Test Case: 267 | Input/Output: [(27 32 80 48) 27]
Test Case: 268 | Input/Output: [(90 48 51 39) 39]
Test Case: 269 | Input/Output: [(23 6 33 75) 6]
Test Case: 270 | Input/Output: [(2 69 88 78) 2]
Test Case: 271 | Input/Output: [(86 64 89 59) 59]
Test Case: 272 | Input/Output: [(70 1 41 97) 1]
Test Case: 273 | Input/Output: [(37 17 99 17) 17]
Test Case: 274 | Input/Output: [(68 17 5 54) 5]
Test Case: 275 | Input/Output: [(96 45 94 5) 5]
Test Case: 276 | Input/Output: [(30 2 53 16) 2]
Test Case: 277 | Input/Output: [(27 67 69 76) 27]
Test Case: 278 | Input/Output: [(59 41 11 89) 11]
Test Case: 279 | Input/Output: [(74 71 0 79) 0]
Test Case: 280 | Input/Output: [(67 52 20 25) 20]
Test Case: 281 | Input/Output: [(42 80 26 28) 26]
Test Case: 282 | Input/Output: [(59 51 14 85) 14]
Test Case: 283 | Input/Output: [(63 23 65 32) 23]
Test Case: 284 | Input/Output: [(15 4 54 2) 2]
Test Case: 285 | Input/Output: [(60 36 61 93) 36]
Test Case: 286 | Input/Output: [(16 7 32 43) 7]
Test Case: 287 | Input/Output: [(57 92 46 33) 33]
Test Case: 288 | Input/Output: [(5 19 69 28) 5]
Test Case: 289 | Input/Output: [(61 15 91 6) 6]
Test Case: 290 | Input/Output: [(14 47 29 14) 14]
Test Case: 291 | Input/Output: [(76 88 95 38) 38]
Test Case: 292 | Input/Output: [(37 63 92 73) 37]
Test Case: 293 | Input/Output: [(66 61 59 38) 38]
Test Case: 294 | Input/Output: [(91 30 12 1) 1]
Test Case: 295 | Input/Output: [(90 49 42 1) 1]
Test Case: 296 | Input/Output: [(60 38 24 17) 17]
Test Case: 297 | Input/Output: [(80 42 90 15) 15]
Test Case: 298 | Input/Output: [(74 19 24 10) 10]
Test Case: 299 | Input/Output: [(14 0 21 20) 0]
Test Case: 300 | Input/Output: [(80 18 48 72) 18]
Test Case: 301 | Input/Output: [(49 98 40 23) 23]
Test Case: 302 | Input/Output: [(83 52 13 90) 13]
Test Case: 303 | Input/Output: [(13 75 21 41) 13]
Test Case: 304 | Input/Output: [(84 21 87 83) 21]
Test Case: 305 | Input/Output: [(23 92 30 95) 23]
Test Case: 306 | Input/Output: [(43 44 35 83) 35]
Test Case: 307 | Input/Output: [(33 4 49 57) 4]
Test Case: 308 | Input/Output: [(52 82 0 69) 0]
Test Case: 309 | Input/Output: [(24 88 4 67) 4]
Test Case: 310 | Input/Output: [(35 42 16 23) 16]
Test Case: 311 | Input/Output: [(59 46 94 84) 46]
Test Case: 312 | Input/Output: [(10 83 46 64) 10]
Test Case: 313 | Input/Output: [(25 0 50 24) 0]
Test Case: 314 | Input/Output: [(7 82 9 55) 7]
Test Case: 315 | Input/Output: [(41 38 75 9) 9]
Test Case: 316 | Input/Output: [(66 16 76 46) 16]
Test Case: 317 | Input/Output: [(30 92 31 51) 30]
Test Case: 318 | Input/Output: [(37 23 100 9) 9]
Test Case: 319 | Input/Output: [(2 41 38 63) 2]
Test Case: 320 | Input/Output: [(85 14 92 54) 14]
Test Case: 321 | Input/Output: [(61 14 83 39) 14]
Test Case: 322 | Input/Output: [(27 61 58 85) 27]
Test Case: 323 | Input/Output: [(10 29 39 81) 10]
Test Case: 324 | Input/Output: [(70 32 32 39) 32]
Test Case: 325 | Input/Output: [(10 11 83 26) 10]
Test Case: 326 | Input/Output: [(76 72 76 4) 4]
Test Case: 327 | Input/Output: [(11 93 33 22) 11]
Test Case: 328 | Input/Output: [(18 52 10 37) 10]
Test Case: 329 | Input/Output: [(57 67 30 32) 30]
Test Case: 330 | Input/Output: [(65 78 93 15) 15]
Test Case: 331 | Input/Output: [(62 6 31 66) 6]
Test Case: 332 | Input/Output: [(45 3 30 13) 3]
Test Case: 333 | Input/Output: [(80 51 16 58) 16]
Test Case: 334 | Input/Output: [(35 10 20 86) 10]
Test Case: 335 | Input/Output: [(46 5 1 24) 1]
Test Case: 336 | Input/Output: [(9 63 58 72) 9]
Test Case: 337 | Input/Output: [(35 16 24 55) 16]
Test Case: 338 | Input/Output: [(66 100 88 54) 54]
Test Case: 339 | Input/Output: [(73 57 4 35) 4]
Test Case: 340 | Input/Output: [(84 90 91 41) 41]
Test Case: 341 | Input/Output: [(64 73 68 5) 5]
Test Case: 342 | Input/Output: [(58 41 63 100) 41]
Test Case: 343 | Input/Output: [(66 50 13 84) 13]
Test Case: 344 | Input/Output: [(53 8 63 7) 7]
Test Case: 345 | Input/Output: [(64 3 16 42) 3]
Test Case: 346 | Input/Output: [(56 53 5 26) 5]
Test Case: 347 | Input/Output: [(61 61 65 79) 61]
Test Case: 348 | Input/Output: [(49 48 85 50) 48]
Test Case: 349 | Input/Output: [(24 15 96 53) 15]
Test Case: 350 | Input/Output: [(45 84 96 15) 15]
Test Case: 351 | Input/Output: [(74 17 60 32) 17]
Test Case: 352 | Input/Output: [(96 92 17 72) 17]
Test Case: 353 | Input/Output: [(28 48 83 44) 28]
Test Case: 354 | Input/Output: [(52 89 72 53) 52]
Test Case: 355 | Input/Output: [(73 50 27 20) 20]
Test Case: 356 | Input/Output: [(65 85 30 69) 30]
Test Case: 357 | Input/Output: [(0 30 24 6) 0]
Test Case: 358 | Input/Output: [(14 56 79 82) 14]
Test Case: 359 | Input/Output: [(67 19 74 40) 19]
Test Case: 360 | Input/Output: [(21 10 63 74) 10]
Test Case: 361 | Input/Output: [(71 97 75 34) 34]
Test Case: 362 | Input/Output: [(3 98 14 14) 3]
Test Case: 363 | Input/Output: [(5 45 42 19) 5]
Test Case: 364 | Input/Output: [(31 9 42 32) 9]
Test Case: 365 | Input/Output: [(32 38 65 81) 32]
Test Case: 366 | Input/Output: [(54 100 43 38) 38]
Test Case: 367 | Input/Output: [(32 80 4 19) 4]
Test Case: 368 | Input/Output: [(41 66 27 46) 27]
Test Case: 369 | Input/Output: [(39 35 56 57) 35]
Test Case: 370 | Input/Output: [(40 32 22 91) 22]
Test Case: 371 | Input/Output: [(51 86 96 96) 51]
Test Case: 372 | Input/Output: [(21 59 48 19) 19]
Test Case: 373 | Input/Output: [(13 90 40 65) 13]
Test Case: 374 | Input/Output: [(18 3 43 32) 3]
Test Case: 375 | Input/Output: [(76 33 28 31) 28]
Test Case: 376 | Input/Output: [(14 29 12 87) 12]
Test Case: 377 | Input/Output: [(85 54 93 35) 35]
Test Case: 378 | Input/Output: [(8 40 100 95) 8]
Test Case: 379 | Input/Output: [(78 80 40 86) 40]
Test Case: 380 | Input/Output: [(97 24 16 82) 16]
Test Case: 381 | Input/Output: [(19 63 56 22) 19]
Test Case: 382 | Input/Output: [(82 63 58 67) 58]
Test Case: 383 | Input/Output: [(44 52 2 86) 2]
Test Case: 384 | Input/Output: [(80 82 83 82) 80]
Test Case: 385 | Input/Output: [(18 2 67 19) 2]
Test Case: 386 | Input/Output: [(30 72 27 94) 27]
Test Case: 387 | Input/Output: [(7 70 66 23) 7]
Test Case: 388 | Input/Output: [(86 11 22 29) 11]
Test Case: 389 | Input/Output: [(10 14 63 66) 10]
Test Case: 390 | Input/Output: [(67 42 4 12) 4]
Test Case: 391 | Input/Output: [(29 0 31 81) 0]
Test Case: 392 | Input/Output: [(71 76 70 88) 70]
Test Case: 393 | Input/Output: [(26 10 68 30) 10]
Test Case: 394 | Input/Output: [(71 20 91 68) 20]
Test Case: 395 | Input/Output: [(72 20 12 48) 12]
Test Case: 396 | Input/Output: [(23 67 42 20) 20]
Test Case: 397 | Input/Output: [(43 99 16 48) 16]
Test Case: 398 | Input/Output: [(75 65 80 71) 65]
Test Case: 399 | Input/Output: [(20 26 2 48) 2]
Test Case: 400 | Input/Output: [(13 -36 79 67) -36]
Test Case: 401 | Input/Output: [(57 -67 75 -78) -78]
Test Case: 402 | Input/Output: [(-46 52 -72 49) -72]
Test Case: 403 | Input/Output: [(22 100 -38 96) -38]
Test Case: 404 | Input/Output: [(99 99 -74 -97) -97]
Test Case: 405 | Input/Output: [(-59 48 -41 96) -59]
Test Case: 406 | Input/Output: [(-39 -94 87 -25) -94]
Test Case: 407 | Input/Output: [(70 35 -36 -83) -83]
Test Case: 408 | Input/Output: [(18 -54 93 -99) -99]
Test Case: 409 | Input/Output: [(-34 88 76 33) -34]
Test Case: 410 | Input/Output: [(-80 8 79 -8) -80]
Test Case: 411 | Input/Output: [(-25 95 -54 -88) -88]
Test Case: 412 | Input/Output: [(68 -11 -29 45) -29]
Test Case: 413 | Input/Output: [(-25 87 43 -1) -25]
Test Case: 414 | Input/Output: [(30 70 -14 74) -14]
Test Case: 415 | Input/Output: [(-41 -7 76 -25) -41]
Test Case: 416 | Input/Output: [(67 -63 44 -76) -76]
Test Case: 417 | Input/Output: [(-99 -87 54 16) -99]
Test Case: 418 | Input/Output: [(-44 -79 -56 -2) -79]
Test Case: 419 | Input/Output: [(-90 -58 40 90) -90]
Test Case: 420 | Input/Output: [(100 -18 -38 -25) -38]
Test Case: 421 | Input/Output: [(29 85 98 -32) -32]
Test Case: 422 | Input/Output: [(-23 -88 -1 50) -88]
Test Case: 423 | Input/Output: [(-18 -43 96 -24) -43]
Test Case: 424 | Input/Output: [(15 -68 -34 -43) -68]
Test Case: 425 | Input/Output: [(26 100 21 -3) -3]
Test Case: 426 | Input/Output: [(91 -37 24 30) -37]
Test Case: 427 | Input/Output: [(-63 2 -88 -8) -88]
Test Case: 428 | Input/Output: [(77 69 -7 38) -7]
Test Case: 429 | Input/Output: [(22 12 -35 80) -35]
Test Case: 430 | Input/Output: [(-36 59 20 -77) -77]
Test Case: 431 | Input/Output: [(-45 68 -4 -44) -45]
Test Case: 432 | Input/Output: [(-60 48 20 14) -60]
Test Case: 433 | Input/Output: [(-16 -52 -20 64) -52]
Test Case: 434 | Input/Output: [(-17 6 41 78) -17]
Test Case: 435 | Input/Output: [(60 -6 78 36) -6]
Test Case: 436 | Input/Output: [(52 -25 -65 -59) -65]
Test Case: 437 | Input/Output: [(89 -46 -79 16) -79]
Test Case: 438 | Input/Output: [(-77 -69 -63 10) -77]
Test Case: 439 | Input/Output: [(-33 -59 74 68) -59]
Test Case: 440 | Input/Output: [(-88 68 -73 -21) -88]
Test Case: 441 | Input/Output: [(24 -25 -55 -81) -81]
Test Case: 442 | Input/Output: [(-43 -88 -62 94) -88]
Test Case: 443 | Input/Output: [(66 -25 -14 -49) -49]
Test Case: 444 | Input/Output: [(-1 -31 -6 24) -31]
Test Case: 445 | Input/Output: [(-60 -57 -27 -92) -92]
Test Case: 446 | Input/Output: [(-87 -12 9 14) -87]
Test Case: 447 | Input/Output: [(36 -6 -55 53) -55]
Test Case: 448 | Input/Output: [(-60 -2 7 81) -60]
Test Case: 449 | Input/Output: [(42 -75 41 -20) -75]
Test Case: 450 | Input/Output: [(16 62 9 -43) -43]
Test Case: 451 | Input/Output: [(72 -28 -36 89) -36]
Test Case: 452 | Input/Output: [(-87 -42 21 44) -87]
Test Case: 453 | Input/Output: [(-62 -9 14 -30) -62]
Test Case: 454 | Input/Output: [(-79 -36 54 -95) -95]
Test Case: 455 | Input/Output: [(85 9 94 16) 9]
Test Case: 456 | Input/Output: [(-12 40 33 0) -12]
Test Case: 457 | Input/Output: [(-24 34 38 -34) -34]
Test Case: 458 | Input/Output: [(-69 83 -23 33) -69]
Test Case: 459 | Input/Output: [(-43 -19 -68 -96) -96]
Test Case: 460 | Input/Output: [(23 -26 -14 -61) -61]
Test Case: 461 | Input/Output: [(77 57 -79 -58) -79]
Test Case: 462 | Input/Output: [(-81 90 -58 -17) -81]
Test Case: 463 | Input/Output: [(27 35 65 -21) -21]
Test Case: 464 | Input/Output: [(12 -72 58 13) -72]
Test Case: 465 | Input/Output: [(-22 -2 23 -17) -22]
Test Case: 466 | Input/Output: [(-19 29 36 -48) -48]
Test Case: 467 | Input/Output: [(-63 -84 -44 36) -84]
Test Case: 468 | Input/Output: [(40 -70 28 48) -70]
Test Case: 469 | Input/Output: [(10 -27 21 -81) -81]
Test Case: 470 | Input/Output: [(43 -28 -93 30) -93]
Test Case: 471 | Input/Output: [(-82 -93 60 -15) -93]
Test Case: 472 | Input/Output: [(61 -85 -23 -26) -85]
Test Case: 473 | Input/Output: [(-5 -3 -8 85) -8]
Test Case: 474 | Input/Output: [(-49 -76 -71 39) -76]
Test Case: 475 | Input/Output: [(-13 69 -88 96) -88]
Test Case: 476 | Input/Output: [(81 -87 43 38) -87]
Test Case: 477 | Input/Output: [(1 95 71 -32) -32]
Test Case: 478 | Input/Output: [(-26 100 -76 7) -76]
Test Case: 479 | Input/Output: [(-82 89 91 38) -82]
Test Case: 480 | Input/Output: [(22 11 -37 53) -37]
Test Case: 481 | Input/Output: [(1 49 -24 -37) -37]
Test Case: 482 | Input/Output: [(3 -52 -7 -22) -52]
Test Case: 483 | Input/Output: [(90 71 76 27) 27]
Test Case: 484 | Input/Output: [(-71 -81 91 19) -81]
Test Case: 485 | Input/Output: [(-76 -70 1 -58) -76]
Test Case: 486 | Input/Output: [(32 -95 -30 -8) -95]
Test Case: 487 | Input/Output: [(-32 91 78 -52) -52]
Test Case: 488 | Input/Output: [(-6 -12 39 42) -12]
Test Case: 489 | Input/Output: [(10 -41 -35 -9) -41]
Test Case: 490 | Input/Output: [(95 -69 -27 52) -69]
Test Case: 491 | Input/Output: [(62 90 -14 -36) -36]
Test Case: 492 | Input/Output: [(-58 -98 -7 78) -98]
Test Case: 493 | Input/Output: [(19 -96 -3 -11) -96]
Test Case: 494 | Input/Output: [(-57 -41 57 20) -57]
Test Case: 495 | Input/Output: [(-87 -20 -81 58) -87]
Test Case: 496 | Input/Output: [(77 -34 71 50) -34]
Test Case: 497 | Input/Output: [(41 96 -98 52) -98]
Test Case: 498 | Input/Output: [(-40 -2 -59 -33) -59]
Test Case: 499 | Input/Output: [(41 -20 -57 35) -57]
Test Case: 500 | Input/Output: [(-51 52 -29 99) -51]
Test Case: 501 | Input/Output: [(94 76 -2 12) -2]
Test Case: 502 | Input/Output: [(95 91 -94 -77) -94]
Test Case: 503 | Input/Output: [(-42 -7 -9 13) -42]
Test Case: 504 | Input/Output: [(76 -61 -6 87) -61]
Test Case: 505 | Input/Output: [(-5 -79 -95 89) -95]
Test Case: 506 | Input/Output: [(4 -36 -30 -80) -80]
Test Case: 507 | Input/Output: [(-61 -73 -9 -47) -73]
Test Case: 508 | Input/Output: [(81 -42 56 27) -42]
Test Case: 509 | Input/Output: [(2 41 -16 -19) -19]
Test Case: 510 | Input/Output: [(79 27 31 58) 27]
Test Case: 511 | Input/Output: [(50 6 -39 -10) -39]
Test Case: 512 | Input/Output: [(84 -15 47 14) -15]
Test Case: 513 | Input/Output: [(38 -99 -36 2) -99]
Test Case: 514 | Input/Output: [(1 3 -56 19) -56]
Test Case: 515 | Input/Output: [(-2 33 3 46) -2]
Test Case: 516 | Input/Output: [(-25 -60 -63 -57) -63]
Test Case: 517 | Input/Output: [(44 -19 -97 -97) -97]
Test Case: 518 | Input/Output: [(21 43 71 0) 0]
Test Case: 519 | Input/Output: [(-64 -83 -28 -87) -87]
Test Case: 520 | Input/Output: [(99 -84 -55 61) -84]
Test Case: 521 | Input/Output: [(-57 19 -81 -73) -81]
Test Case: 522 | Input/Output: [(-91 7 -35 -91) -91]
Test Case: 523 | Input/Output: [(7 51 21 -41) -41]
Test Case: 524 | Input/Output: [(-89 54 90 68) -89]
Test Case: 525 | Input/Output: [(59 -30 -89 -6) -89]
Test Case: 526 | Input/Output: [(68 -53 77 -71) -71]
Test Case: 527 | Input/Output: [(-24 12 -73 70) -73]
Test Case: 528 | Input/Output: [(50 -46 10 -56) -56]
Test Case: 529 | Input/Output: [(-40 67 41 -7) -40]
Test Case: 530 | Input/Output: [(-97 -82 -83 -62) -97]
Test Case: 531 | Input/Output: [(-50 10 -15 -36) -50]
Test Case: 532 | Input/Output: [(-20 12 -78 -17) -78]
Test Case: 533 | Input/Output: [(1 -89 -46 -66) -89]
Test Case: 534 | Input/Output: [(-16 -25 22 16) -25]
Test Case: 535 | Input/Output: [(2 -24 -23 -42) -42]
Test Case: 536 | Input/Output: [(3 55 57 77) 3]
Test Case: 537 | Input/Output: [(-45 17 19 -22) -45]
Test Case: 538 | Input/Output: [(-51 97 37 3) -51]
Test Case: 539 | Input/Output: [(-95 -41 54 -37) -95]
Test Case: 540 | Input/Output: [(-99 13 -80 -70) -99]
Test Case: 541 | Input/Output: [(53 94 -39 -5) -39]
Test Case: 542 | Input/Output: [(48 1 55 -100) -100]
Test Case: 543 | Input/Output: [(48 -73 82 -9) -73]
Test Case: 544 | Input/Output: [(41 -24 -11 -55) -55]
Test Case: 545 | Input/Output: [(-95 -59 -14 -7) -95]
Test Case: 546 | Input/Output: [(-26 48 39 -12) -26]
Test Case: 547 | Input/Output: [(-49 73 36 82) -49]
Test Case: 548 | Input/Output: [(-36 98 -57 12) -57]
Test Case: 549 | Input/Output: [(83 -83 -48 95) -83]
Test Case: 550 | Input/Output: [(46 -12 -10 93) -12]
Test Case: 551 | Input/Output: [(-85 -32 -73 -61) -85]
Test Case: 552 | Input/Output: [(-70 -89 54 52) -89]
Test Case: 553 | Input/Output: [(-6 21 52 61) -6]
Test Case: 554 | Input/Output: [(66 85 -85 -25) -85]
Test Case: 555 | Input/Output: [(42 85 -57 58) -57]
Test Case: 556 | Input/Output: [(94 -96 50 -50) -96]
Test Case: 557 | Input/Output: [(33 -54 -42 -94) -94]
Test Case: 558 | Input/Output: [(-6 -99 -56 5) -99]
Test Case: 559 | Input/Output: [(-94 -27 -73 88) -94]
Test Case: 560 | Input/Output: [(70 25 -63 -18) -63]
Test Case: 561 | Input/Output: [(-30 51 92 -88) -88]
Test Case: 562 | Input/Output: [(67 -53 -61 -24) -61]
Test Case: 563 | Input/Output: [(-93 15 -45 -53) -93]
Test Case: 564 | Input/Output: [(86 -40 -38 -97) -97]
Test Case: 565 | Input/Output: [(53 -15 -10 -65) -65]
Test Case: 566 | Input/Output: [(-54 80 -42 -62) -62]
Test Case: 567 | Input/Output: [(-17 64 17 -48) -48]
Test Case: 568 | Input/Output: [(-16 91 51 -98) -98]
Test Case: 569 | Input/Output: [(100 -46 -14 93) -46]
Test Case: 570 | Input/Output: [(-45 86 -36 47) -45]
Test Case: 571 | Input/Output: [(65 -96 -100 -82) -100]
Test Case: 572 | Input/Output: [(-99 -33 -55 -33) -99]
Test Case: 573 | Input/Output: [(100 -32 19 73) -32]
Test Case: 574 | Input/Output: [(39 -15 -47 -2) -47]
Test Case: 575 | Input/Output: [(-65 60 39 38) -65]
Test Case: 576 | Input/Output: [(30 -62 -91 -28) -91]
Test Case: 577 | Input/Output: [(-75 15 3 9) -75]
Test Case: 578 | Input/Output: [(45 84 58 -69) -69]
Test Case: 579 | Input/Output: [(-38 41 45 80) -38]
Test Case: 580 | Input/Output: [(90 22 -38 31) -38]
Test Case: 581 | Input/Output: [(-57 16 35 -33) -57]
Test Case: 582 | Input/Output: [(53 -100 85 -20) -100]
Test Case: 583 | Input/Output: [(-85 22 83 -15) -85]
Test Case: 584 | Input/Output: [(-95 -92 -44 26) -95]
Test Case: 585 | Input/Output: [(92 9 -12 -68) -68]
Test Case: 586 | Input/Output: [(88 69 92 12) 12]
Test Case: 587 | Input/Output: [(-54 6 -92 5) -92]
Test Case: 588 | Input/Output: [(-22 -78 -13 82) -78]
Test Case: 589 | Input/Output: [(-43 28 21 73) -43]
Test Case: 590 | Input/Output: [(-24 59 -42 -6) -42]
Test Case: 591 | Input/Output: [(-80 -38 -84 -75) -84]
Test Case: 592 | Input/Output: [(-34 13 23 -46) -46]
Test Case: 593 | Input/Output: [(99 87 -48 44) -48]
Test Case: 594 | Input/Output: [(92 28 24 -17) -17]
Test Case: 595 | Input/Output: [(-70 44 79 75) -70]
Test Case: 596 | Input/Output: [(-7 5 42 10) -7]
Test Case: 597 | Input/Output: [(34 -30 -13 -39) -39]
Test Case: 598 | Input/Output: [(-82 -32 82 47) -82]
Test Case: 599 | Input/Output: [(57 -61 -49 40) -61]
Test Case: 600 | Input/Output: [(-38 -33 -37 71) -38]
Test Case: 601 | Input/Output: [(-7 -45 18 18) -45]
Test Case: 602 | Input/Output: [(6 -35 24 -42) -42]
Test Case: 603 | Input/Output: [(-41 -21 -1 17) -41]
Test Case: 604 | Input/Output: [(-76 -86 -67 55) -86]
Test Case: 605 | Input/Output: [(34 -25 39 4) -25]
Test Case: 606 | Input/Output: [(5 21 -36 32) -36]
Test Case: 607 | Input/Output: [(57 17 39 100) 17]
Test Case: 608 | Input/Output: [(-10 -36 -45 -4) -45]
Test Case: 609 | Input/Output: [(-65 30 34 3) -65]
Test Case: 610 | Input/Output: [(63 -73 34 -34) -73]
Test Case: 611 | Input/Output: [(14 -20 -46 -57) -57]
Test Case: 612 | Input/Output: [(6 -86 67 90) -86]
Test Case: 613 | Input/Output: [(67 64 -91 70) -91]
Test Case: 614 | Input/Output: [(-42 18 79 -50) -50]
Test Case: 615 | Input/Output: [(33 -64 49 63) -64]
Test Case: 616 | Input/Output: [(-81 66 98 29) -81]
Test Case: 617 | Input/Output: [(-14 73 85 52) -14]
Test Case: 618 | Input/Output: [(-25 -50 51 83) -50]
Test Case: 619 | Input/Output: [(21 52 64 -48) -48]
Test Case: 620 | Input/Output: [(-33 -58 -87 48) -87]
Test Case: 621 | Input/Output: [(-68 89 88 -57) -68]
Test Case: 622 | Input/Output: [(61 -22 -33 -93) -93]
Test Case: 623 | Input/Output: [(-9 -76 70 75) -76]
Test Case: 624 | Input/Output: [(-39 64 -49 -25) -49]
Test Case: 625 | Input/Output: [(57 9 87 25) 9]
Test Case: 626 | Input/Output: [(4 87 -83 -26) -83]
Test Case: 627 | Input/Output: [(82 14 46 -58) -58]
Test Case: 628 | Input/Output: [(59 -67 74 52) -67]
Test Case: 629 | Input/Output: [(-63 41 -99 -53) -99]
Test Case: 630 | Input/Output: [(-61 68 60 -12) -61]
Test Case: 631 | Input/Output: [(-15 17 14 66) -15]
Test Case: 632 | Input/Output: [(29 -99 73 -17) -99]
Test Case: 633 | Input/Output: [(18 -75 -24 -24) -75]
Test Case: 634 | Input/Output: [(-82 45 81 -36) -82]
Test Case: 635 | Input/Output: [(-60 45 -9 40) -60]
Test Case: 636 | Input/Output: [(-72 55 53 6) -72]
Test Case: 637 | Input/Output: [(87 -74 80 -30) -74]
Test Case: 638 | Input/Output: [(15 96 -43 -21) -43]
Test Case: 639 | Input/Output: [(-26 35 74 11) -26]
Test Case: 640 | Input/Output: [(29 -9 19 -24) -24]
Test Case: 641 | Input/Output: [(1 70 -16 88) -16]
Test Case: 642 | Input/Output: [(-52 10 10 65) -52]
Test Case: 643 | Input/Output: [(61 -39 8 90) -39]
Test Case: 644 | Input/Output: [(-93 33 32 16) -93]
Test Case: 645 | Input/Output: [(39 -18 -100 -16) -100]
Test Case: 646 | Input/Output: [(-92 55 -39 56) -92]
Test Case: 647 | Input/Output: [(50 -83 -34 21) -83]
Test Case: 648 | Input/Output: [(-29 82 -48 57) -48]
Test Case: 649 | Input/Output: [(83 46 -66 56) -66]
Test Case: 650 | Input/Output: [(-43 91 -99 -91) -99]
Test Case: 651 | Input/Output: [(57 15 61 -72) -72]
Test Case: 652 | Input/Output: [(65 38 46 -56) -56]
Test Case: 653 | Input/Output: [(18 -73 14 66) -73]
Test Case: 654 | Input/Output: [(85 -69 85 61) -69]
Test Case: 655 | Input/Output: [(-45 -98 -19 71) -98]
Test Case: 656 | Input/Output: [(-57 -55 24 36) -57]
Test Case: 657 | Input/Output: [(49 10 48 71) 10]
Test Case: 658 | Input/Output: [(-16 65 -11 21) -16]
Test Case: 659 | Input/Output: [(-48 48 87 -40) -48]
Test Case: 660 | Input/Output: [(-64 -55 -98 -19) -98]
Test Case: 661 | Input/Output: [(-89 -72 -54 76) -89]
Test Case: 662 | Input/Output: [(-79 60 50 -20) -79]
Test Case: 663 | Input/Output: [(-12 -27 -91 93) -91]
Test Case: 664 | Input/Output: [(-90 -2 26 77) -90]
Test Case: 665 | Input/Output: [(60 -75 11 -30) -75]
Test Case: 666 | Input/Output: [(-31 -9 91 42) -31]
Test Case: 667 | Input/Output: [(87 -78 98 14) -78]
Test Case: 668 | Input/Output: [(-32 7 68 -8) -32]
Test Case: 669 | Input/Output: [(-15 -67 19 -16) -67]
Test Case: 670 | Input/Output: [(32 22 50 -84) -84]
Test Case: 671 | Input/Output: [(-74 73 4 46) -74]
Test Case: 672 | Input/Output: [(-69 -55 29 -67) -69]
Test Case: 673 | Input/Output: [(33 -32 -84 -24) -84]
Test Case: 674 | Input/Output: [(61 76 29 -22) -22]
Test Case: 675 | Input/Output: [(25 89 -87 95) -87]
Test Case: 676 | Input/Output: [(27 59 -97 33) -97]
Test Case: 677 | Input/Output: [(-62 -41 47 66) -62]
Test Case: 678 | Input/Output: [(75 -12 76 8) -12]
Test Case: 679 | Input/Output: [(-79 -54 -1 -4) -79]
Test Case: 680 | Input/Output: [(47 61 -27 -75) -75]
Test Case: 681 | Input/Output: [(-70 -11 -14 74) -70]
Test Case: 682 | Input/Output: [(38 -37 95 -87) -87]
Test Case: 683 | Input/Output: [(85 -92 -68 37) -92]
Test Case: 684 | Input/Output: [(47 17 44 57) 17]
Test Case: 685 | Input/Output: [(18 5 39 78) 5]
Test Case: 686 | Input/Output: [(-33 3 28 -84) -84]
Test Case: 687 | Input/Output: [(28 85 0 28) 0]
Test Case: 688 | Input/Output: [(-31 -98 -63 0) -98]
Test Case: 689 | Input/Output: [(-44 32 13 -71) -71]
Test Case: 690 | Input/Output: [(48 -1 -49 74) -49]
Test Case: 691 | Input/Output: [(29 -9 1 -26) -26]
Test Case: 692 | Input/Output: [(87 92 55 72) 55]
Test Case: 693 | Input/Output: [(29 -48 -58 59) -58]
Test Case: 694 | Input/Output: [(65 98 72 59) 59]
Test Case: 695 | Input/Output: [(88 -56 90 11) -56]
Test Case: 696 | Input/Output: [(49 8 19 77) 8]
Test Case: 697 | Input/Output: [(-4 -98 -26 -34) -98]
Test Case: 698 | Input/Output: [(-48 12 -64 60) -64]
Test Case: 699 | Input/Output: [(99 23 -52 -83) -83]
Test Case: 700 | Input/Output: [(-41 18 59 51) -41]
Test Case: 701 | Input/Output: [(-62 -34 -80 96) -80]
Test Case: 702 | Input/Output: [(-1 21 42 72) -1]
Test Case: 703 | Input/Output: [(-50 -49 76 -91) -91]
Test Case: 704 | Input/Output: [(98 -83 -13 -42) -83]
Test Case: 705 | Input/Output: [(33 -5 -20 -31) -31]
Test Case: 706 | Input/Output: [(-6 14 80 2) -6]
Test Case: 707 | Input/Output: [(70 34 29 -89) -89]
Test Case: 708 | Input/Output: [(17 57 -93 61) -93]
Test Case: 709 | Input/Output: [(-93 -53 -48 -1) -93]
Test Case: 710 | Input/Output: [(77 18 -70 -50) -70]
Test Case: 711 | Input/Output: [(18 98 65 -15) -15]
Test Case: 712 | Input/Output: [(77 -21 -27 -9) -27]
Test Case: 713 | Input/Output: [(79 42 57 -99) -99]
Test Case: 714 | Input/Output: [(13 72 69 -71) -71]
Test Case: 715 | Input/Output: [(-25 10 -48 22) -48]
Test Case: 716 | Input/Output: [(-83 -38 -21 -87) -87]
Test Case: 717 | Input/Output: [(-5 -15 -15 15) -15]
Test Case: 718 | Input/Output: [(-66 -18 48 82) -66]
Test Case: 719 | Input/Output: [(-51 -25 -90 66) -90]
Test Case: 720 | Input/Output: [(58 61 10 89) 10]
Test Case: 721 | Input/Output: [(28 -6 46 38) -6]
Test Case: 722 | Input/Output: [(-5 48 46 -27) -27]
Test Case: 723 | Input/Output: [(-64 94 -21 69) -64]
Test Case: 724 | Input/Output: [(57 42 -87 52) -87]
Test Case: 725 | Input/Output: [(-57 46 72 -35) -57]
Test Case: 726 | Input/Output: [(25 47 89 -60) -60]
Test Case: 727 | Input/Output: [(-42 57 -90 -7) -90]
Test Case: 728 | Input/Output: [(-78 -61 -47 92) -78]
Test Case: 729 | Input/Output: [(-52 -72 14 76) -72]
Test Case: 730 | Input/Output: [(35 -18 31 15) -18]
Test Case: 731 | Input/Output: [(-74 63 -70 -11) -74]
Test Case: 732 | Input/Output: [(-74 40 74 -49) -74]
Test Case: 733 | Input/Output: [(95 -26 -21 53) -26]
Test Case: 734 | Input/Output: [(70 -88 -43 -57) -88]
Test Case: 735 | Input/Output: [(34 -9 2 41) -9]
Test Case: 736 | Input/Output: [(-88 95 -27 98) -88]
Test Case: 737 | Input/Output: [(-11 63 7 53) -11]
Test Case: 738 | Input/Output: [(83 81 93 76) 76]
Test Case: 739 | Input/Output: [(-67 -30 -31 -6) -67]
Test Case: 740 | Input/Output: [(81 26 -30 36) -30]
Test Case: 741 | Input/Output: [(44 29 -3 -49) -49]
Test Case: 742 | Input/Output: [(38 28 17 85) 17]
Test Case: 743 | Input/Output: [(65 -88 47 46) -88]
Test Case: 744 | Input/Output: [(65 76 13 97) 13]
Test Case: 745 | Input/Output: [(82 5 58 43) 5]
Test Case: 746 | Input/Output: [(87 49 -11 -29) -29]
Test Case: 747 | Input/Output: [(-81 -51 -92 35) -92]
Test Case: 748 | Input/Output: [(-99 -16 67 -13) -99]
Test Case: 749 | Input/Output: [(11 -89 0 -61) -89]
Test Case: 750 | Input/Output: [(13 1 80 79) 1]
Test Case: 751 | Input/Output: [(-20 74 66 58) -20]
Test Case: 752 | Input/Output: [(12 48 84 -84) -84]
Test Case: 753 | Input/Output: [(31 -18 -97 -71) -97]
Test Case: 754 | Input/Output: [(-99 6 92 91) -99]
Test Case: 755 | Input/Output: [(29 -10 -10 75) -10]
Test Case: 756 | Input/Output: [(33 79 -16 -64) -64]
Test Case: 757 | Input/Output: [(-61 14 -47 44) -61]
Test Case: 758 | Input/Output: [(56 -92 54 3) -92]
Test Case: 759 | Input/Output: [(93 22 -73 -25) -73]
Test Case: 760 | Input/Output: [(-51 -91 -1 50) -91]
Test Case: 761 | Input/Output: [(-61 -64 -72 28) -72]
Test Case: 762 | Input/Output: [(53 54 -2 -4) -4]
Test Case: 763 | Input/Output: [(-48 -63 -55 61) -63]
Test Case: 764 | Input/Output: [(-90 -63 98 -86) -90]
Test Case: 765 | Input/Output: [(-19 0 -72 -26) -72]
Test Case: 766 | Input/Output: [(-88 3 54 -44) -88]
Test Case: 767 | Input/Output: [(-72 -37 -10 -95) -95]
Test Case: 768 | Input/Output: [(-61 -70 -58 51) -70]
Test Case: 769 | Input/Output: [(-72 14 72 96) -72]
Test Case: 770 | Input/Output: [(-78 -55 75 29) -78]
Test Case: 771 | Input/Output: [(-78 -46 -49 -73) -78]
Test Case: 772 | Input/Output: [(-38 -66 94 36) -66]
Test Case: 773 | Input/Output: [(73 -53 -54 -33) -54]
Test Case: 774 | Input/Output: [(-100 5 12 -44) -100]
Test Case: 775 | Input/Output: [(-54 25 17 -91) -91]
Test Case: 776 | Input/Output: [(97 -52 -1 -9) -52]
Test Case: 777 | Input/Output: [(7 -28 -71 -83) -83]
Test Case: 778 | Input/Output: [(66 -96 -50 -88) -96]
Test Case: 779 | Input/Output: [(100 -92 -98 -68) -98]
Test Case: 780 | Input/Output: [(-49 12 -86 58) -86]
Test Case: 781 | Input/Output: [(90 -25 39 -10) -25]
Test Case: 782 | Input/Output: [(2 -55 -49 75) -55]
Test Case: 783 | Input/Output: [(61 -68 -62 62) -68]
Test Case: 784 | Input/Output: [(-70 -31 -95 89) -95]
Test Case: 785 | Input/Output: [(-66 -82 -93 94) -93]
Test Case: 786 | Input/Output: [(-51 -17 -67 46) -67]
Test Case: 787 | Input/Output: [(-20 -64 -15 -76) -76]
Test Case: 788 | Input/Output: [(-5 15 16 91) -5]
Test Case: 789 | Input/Output: [(-84 41 72 93) -84]
Test Case: 790 | Input/Output: [(-13 -83 -45 98) -83]
Test Case: 791 | Input/Output: [(7 -39 -23 94) -39]
Test Case: 792 | Input/Output: [(22 75 71 83) 22]
Test Case: 793 | Input/Output: [(67 52 76 -88) -88]
Test Case: 794 | Input/Output: [(-15 51 -59 29) -59]
Test Case: 795 | Input/Output: [(43 -21 68 47) -21]
Test Case: 796 | Input/Output: [(63 16 -39 -40) -40]
Test Case: 797 | Input/Output: [(-53 91 -96 15) -96]
Test Case: 798 | Input/Output: [(-95 82 56 -48) -95]
Test Case: 799 | Input/Output: [(39 -63 -12 -76) -76]
Test Case: 800 | Input/Output: [(62 -39 -97 -30) -97]
Test Case: 801 | Input/Output: [(-80 84 57 -90) -90]
Test Case: 802 | Input/Output: [(-70 -12 -33 6) -70]
Test Case: 803 | Input/Output: [(-31 -27 -8 44) -31]
Test Case: 804 | Input/Output: [(24 94 -32 -25) -32]
Test Case: 805 | Input/Output: [(93 -49 0 51) -49]
Test Case: 806 | Input/Output: [(-60 -77 38 58) -77]
Test Case: 807 | Input/Output: [(-20 6 64 -100) -100]
Test Case: 808 | Input/Output: [(-81 -28 42 10) -81]
Test Case: 809 | Input/Output: [(-34 -38 29 93) -38]
Test Case: 810 | Input/Output: [(-46 -49 -76 -82) -82]
Test Case: 811 | Input/Output: [(81 -82 -25 0) -82]
Test Case: 812 | Input/Output: [(18 84 56 -20) -20]
Test Case: 813 | Input/Output: [(-15 -43 -68 68) -68]
Test Case: 814 | Input/Output: [(2 5 -40 45) -40]
Test Case: 815 | Input/Output: [(94 -50 52 -95) -95]
Test Case: 816 | Input/Output: [(77 7 58 -23) -23]
Test Case: 817 | Input/Output: [(-35 -89 -81 1) -89]
Test Case: 818 | Input/Output: [(77 -1 -49 39) -49]
Test Case: 819 | Input/Output: [(-89 -18 -61 -96) -96]
Test Case: 820 | Input/Output: [(-45 -94 95 -70) -94]
Test Case: 821 | Input/Output: [(-48 -41 83 -33) -48]
Test Case: 822 | Input/Output: [(-41 -27 59 3) -41]
Test Case: 823 | Input/Output: [(-94 -67 -26 43) -94]
Test Case: 824 | Input/Output: [(-51 -29 -92 11) -92]
Test Case: 825 | Input/Output: [(80 0 79 -47) -47]
Test Case: 826 | Input/Output: [(-68 -25 26 21) -68]
Test Case: 827 | Input/Output: [(-15 0 10 25) -15]
Test Case: 828 | Input/Output: [(82 -4 84 -46) -46]
Test Case: 829 | Input/Output: [(-94 -31 89 71) -94]
Test Case: 830 | Input/Output: [(-17 14 53 -27) -27]
Test Case: 831 | Input/Output: [(75 -34 53 36) -34]
Test Case: 832 | Input/Output: [(87 -72 -54 59) -72]
Test Case: 833 | Input/Output: [(67 -32 -42 -90) -90]
Test Case: 834 | Input/Output: [(-5 28 -39 -88) -88]
Test Case: 835 | Input/Output: [(-86 -11 -1 -85) -86]
Test Case: 836 | Input/Output: [(-10 -27 89 -66) -66]
Test Case: 837 | Input/Output: [(38 17 -47 -47) -47]
Test Case: 838 | Input/Output: [(-23 -67 -77 -86) -86]
Test Case: 839 | Input/Output: [(81 -94 -84 97) -94]
Test Case: 840 | Input/Output: [(13 52 43 63) 13]
Test Case: 841 | Input/Output: [(8 -25 -59 -11) -59]
Test Case: 842 | Input/Output: [(34 46 8 61) 8]
Test Case: 843 | Input/Output: [(-60 -9 -51 -66) -66]
Test Case: 844 | Input/Output: [(18 -18 45 49) -18]
Test Case: 845 | Input/Output: [(-62 -34 74 5) -62]
Test Case: 846 | Input/Output: [(2 5 -67 5) -67]
Test Case: 847 | Input/Output: [(-100 20 76 -49) -100]
Test Case: 848 | Input/Output: [(98 6 81 99) 6]
Test Case: 849 | Input/Output: [(-53 52 43 17) -53]
Test Case: 850 | Input/Output: [(-75 85 -51 -90) -90]
Test Case: 851 | Input/Output: [(97 -37 78 -24) -37]
Test Case: 852 | Input/Output: [(-77 80 82 -43) -77]
Test Case: 853 | Input/Output: [(-89 73 62 -78) -89]
Test Case: 854 | Input/Output: [(-94 -69 -35 -49) -94]
Test Case: 855 | Input/Output: [(86 35 25 -81) -81]
Test Case: 856 | Input/Output: [(12 -55 43 27) -55]
Test Case: 857 | Input/Output: [(-2 -80 11 -10) -80]
Test Case: 858 | Input/Output: [(10 -62 -46 -11) -62]
Test Case: 859 | Input/Output: [(4 44 -79 17) -79]
Test Case: 860 | Input/Output: [(4 -25 28 -42) -42]
Test Case: 861 | Input/Output: [(-50 62 14 8) -50]
Test Case: 862 | Input/Output: [(28 -30 -91 -65) -91]
Test Case: 863 | Input/Output: [(-41 -14 28 96) -41]
Test Case: 864 | Input/Output: [(-39 -63 -92 20) -92]
Test Case: 865 | Input/Output: [(-43 80 2 -2) -43]
Test Case: 866 | Input/Output: [(9 14 15 -25) -25]
Test Case: 867 | Input/Output: [(-37 91 -60 -47) -60]
Test Case: 868 | Input/Output: [(77 73 80 20) 20]
Test Case: 869 | Input/Output: [(-28 -95 -76 50) -95]
Test Case: 870 | Input/Output: [(92 9 -10 -22) -22]
Test Case: 871 | Input/Output: [(89 -55 -97 -51) -97]
Test Case: 872 | Input/Output: [(68 14 -94 64) -94]
Test Case: 873 | Input/Output: [(-57 -85 -15 -67) -85]
Test Case: 874 | Input/Output: [(-28 -48 -95 72) -95]
Test Case: 875 | Input/Output: [(56 -75 -24 -100) -100]
Test Case: 876 | Input/Output: [(6 -8 0 -74) -74]
Test Case: 877 | Input/Output: [(-94 54 47 5) -94]
Test Case: 878 | Input/Output: [(96 -56 -34 -82) -82]
Test Case: 879 | Input/Output: [(22 9 42 -75) -75]
Test Case: 880 | Input/Output: [(-5 76 85 33) -5]
Test Case: 881 | Input/Output: [(-37 -78 -9 25) -78]
Test Case: 882 | Input/Output: [(50 -17 73 8) -17]
Test Case: 883 | Input/Output: [(-32 -80 -7 -87) -87]
Test Case: 884 | Input/Output: [(-18 -3 -74 25) -74]
Test Case: 885 | Input/Output: [(-92 -13 -66 81) -92]
Test Case: 886 | Input/Output: [(50 -10 -63 76) -63]
Test Case: 887 | Input/Output: [(33 -38 18 -96) -96]
Test Case: 888 | Input/Output: [(46 28 -92 -84) -92]
Test Case: 889 | Input/Output: [(-89 -38 33 70) -89]
Test Case: 890 | Input/Output: [(-12 -86 -12 24) -86]
Test Case: 891 | Input/Output: [(-11 -16 0 -2) -16]
Test Case: 892 | Input/Output: [(71 -94 96 -71) -94]
Test Case: 893 | Input/Output: [(-22 -48 81 17) -48]
Test Case: 894 | Input/Output: [(-62 -47 100 22) -62]
Test Case: 895 | Input/Output: [(71 31 89 -89) -89]
Test Case: 896 | Input/Output: [(17 -19 -25 80) -25]
Test Case: 897 | Input/Output: [(83 -6 15 -54) -54]
Test Case: 898 | Input/Output: [(-18 -9 -24 -36) -36]
Test Case: 899 | Input/Output: [(-100 -56 80 30) -100]
Test Case: 900 | Input/Output: [(1 17 -41 59) -41]
Test Case: 901 | Input/Output: [(-74 80 76 -8) -74]
Test Case: 902 | Input/Output: [(28 43 35 25) 25]
Test Case: 903 | Input/Output: [(-96 64 -78 -46) -96]
Test Case: 904 | Input/Output: [(-89 30 -92 -100) -100]
Test Case: 905 | Input/Output: [(46 75 -15 -28) -28]
Test Case: 906 | Input/Output: [(60 41 79 72) 41]
Test Case: 907 | Input/Output: [(7 -22 57 90) -22]
Test Case: 908 | Input/Output: [(22 97 -74 -34) -74]
Test Case: 909 | Input/Output: [(-7 28 -85 -16) -85]
Test Case: 910 | Input/Output: [(4 -97 54 45) -97]
Test Case: 911 | Input/Output: [(-74 7 51 -40) -74]
Test Case: 912 | Input/Output: [(78 -74 14 -22) -74]
Test Case: 913 | Input/Output: [(70 64 -48 9) -48]
Test Case: 914 | Input/Output: [(1 -96 -81 -91) -96]
Test Case: 915 | Input/Output: [(-55 55 54 2) -55]
Test Case: 916 | Input/Output: [(19 32 20 53) 19]
Test Case: 917 | Input/Output: [(-89 54 -29 43) -89]
Test Case: 918 | Input/Output: [(47 10 -78 0) -78]
Test Case: 919 | Input/Output: [(55 58 88 44) 44]
Test Case: 920 | Input/Output: [(68 -1 -68 61) -68]
Test Case: 921 | Input/Output: [(-18 -6 79 32) -18]
Test Case: 922 | Input/Output: [(8 -68 -28 71) -68]
Test Case: 923 | Input/Output: [(67 -99 -28 -77) -99]
Test Case: 924 | Input/Output: [(90 -25 63 -4) -25]
Test Case: 925 | Input/Output: [(-75 -91 -99 10) -99]
Test Case: 926 | Input/Output: [(-31 14 77 -96) -96]
Test Case: 927 | Input/Output: [(-67 -29 -32 97) -67]
Test Case: 928 | Input/Output: [(-48 54 61 35) -48]
Test Case: 929 | Input/Output: [(17 18 42 53) 17]
Test Case: 930 | Input/Output: [(-26 4 55 85) -26]
Test Case: 931 | Input/Output: [(2 49 27 -40) -40]
Test Case: 932 | Input/Output: [(85 -25 -86 -31) -86]
Test Case: 933 | Input/Output: [(25 -9 -4 1) -9]
Test Case: 934 | Input/Output: [(-62 -71 68 9) -71]
Test Case: 935 | Input/Output: [(83 -25 -36 -12) -36]
Test Case: 936 | Input/Output: [(-5 9 -62 -64) -64]
Test Case: 937 | Input/Output: [(-65 -17 -68 85) -68]
Test Case: 938 | Input/Output: [(24 -73 -93 76) -93]
Test Case: 939 | Input/Output: [(-36 -92 63 63) -92]
Test Case: 940 | Input/Output: [(-66 -67 -81 69) -81]
Test Case: 941 | Input/Output: [(19 95 3 -10) -10]
Test Case: 942 | Input/Output: [(-20 -65 -42 -9) -65]
Test Case: 943 | Input/Output: [(66 -70 -73 51) -73]
Test Case: 944 | Input/Output: [(-92 -98 13 93) -98]
Test Case: 945 | Input/Output: [(-69 23 10 -38) -69]
Test Case: 946 | Input/Output: [(41 -61 -36 -29) -61]
Test Case: 947 | Input/Output: [(4 -43 38 -74) -74]
Test Case: 948 | Input/Output: [(17 46 -8 6) -8]
Test Case: 949 | Input/Output: [(62 25 46 85) 25]
Test Case: 950 | Input/Output: [(92 48 -100 63) -100]
Test Case: 951 | Input/Output: [(40 -79 86 -17) -79]
Test Case: 952 | Input/Output: [(-84 -70 -26 -22) -84]
Test Case: 953 | Input/Output: [(40 -92 24 60) -92]
Test Case: 954 | Input/Output: [(65 -94 54 -95) -95]
Test Case: 955 | Input/Output: [(84 83 84 24) 24]
Test Case: 956 | Input/Output: [(-9 -69 97 41) -69]
Test Case: 957 | Input/Output: [(-92 96 -99 -58) -99]
Test Case: 958 | Input/Output: [(-6 77 53 95) -6]
Test Case: 959 | Input/Output: [(3 79 29 59) 3]
Test Case: 960 | Input/Output: [(-19 -1 -34 90) -34]
Test Case: 961 | Input/Output: [(-69 -81 -24 -77) -81]
Test Case: 962 | Input/Output: [(-35 -28 78 76) -35]
Test Case: 963 | Input/Output: [(52 -24 -81 9) -81]
Test Case: 964 | Input/Output: [(73 -79 54 -18) -79]
Test Case: 965 | Input/Output: [(76 -65 69 65) -65]
Test Case: 966 | Input/Output: [(-20 1 -44 34) -44]
Test Case: 967 | Input/Output: [(-38 95 -68 -15) -68]
Test Case: 968 | Input/Output: [(-13 -7 -48 -96) -96]
Test Case: 969 | Input/Output: [(-18 -79 81 -8) -79]
Test Case: 970 | Input/Output: [(8 95 -79 -37) -79]
Test Case: 971 | Input/Output: [(-74 -3 -66 20) -74]
Test Case: 972 | Input/Output: [(-3 30 -46 72) -46]
Test Case: 973 | Input/Output: [(-57 -77 -9 -48) -77]
Test Case: 974 | Input/Output: [(92 -15 20 71) -15]
Test Case: 975 | Input/Output: [(-12 45 20 -63) -63]
Test Case: 976 | Input/Output: [(74 79 36 -80) -80]
Test Case: 977 | Input/Output: [(-92 3 68 -54) -92]
Test Case: 978 | Input/Output: [(-35 -8 -81 14) -81]
Test Case: 979 | Input/Output: [(-17 42 77 79) -17]
Test Case: 980 | Input/Output: [(-52 -70 -83 -47) -83]
Test Case: 981 | Input/Output: [(24 36 40 -3) -3]
Test Case: 982 | Input/Output: [(-33 79 -26 -58) -58]
Test Case: 983 | Input/Output: [(39 82 -27 20) -27]
Test Case: 984 | Input/Output: [(-3 64 5 92) -3]
Test Case: 985 | Input/Output: [(-47 59 77 31) -47]
Test Case: 986 | Input/Output: [(-86 -2 60 -25) -86]
Test Case: 987 | Input/Output: [(60 100 13 49) 13]
Test Case: 988 | Input/Output: [(-76 -20 53 -6) -76]
Test Case: 989 | Input/Output: [(-14 -93 87 -86) -93]
Test Case: 990 | Input/Output: [(96 -27 -77 23) -77]
Test Case: 991 | Input/Output: [(-38 48 44 14) -38]
Test Case: 992 | Input/Output: [(-81 -98 -11 -39) -98]
Test Case: 993 | Input/Output: [(7 22 75 13) 7]
Test Case: 994 | Input/Output: [(-87 80 11 -97) -97]
Test Case: 995 | Input/Output: [(45 60 -6 94) -6]
Test Case: 996 | Input/Output: [(-56 -36 -85 30) -85]
Test Case: 997 | Input/Output: [(-100 -82 -86 82) -100]
Test Case: 998 | Input/Output: [(-21 21 -77 -20) -77]
Test Case: 999 | Input/Output: [(35 88 -64 28) -64]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -44 -107 70 -5 108 -1 80 -112 21 -12 -27 42 -123 24 -124 7
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[46 31 31 31] 31] [[-13 -13 -62 -13] -62] [[-5 -5 41 -5] -5] [[-49 -19 -49 -49] -49] [[-90 -90 -90 -12] -90] [[8 8 8 58] 8] [[80 80 15 80] 15] [[-9 -9 -9 -46] -46] [[-80 -37 -37 -37] -80] [[-9 -9 -90 -9] -90] [(-35 -35 -35 -35) -35] [(88 88 88 88) 88] [(21 21 21 21) 21] [(34 34 34 34) 34] [(44 44 44 44) 44] [(65 84 8 16) 8] [(20 50 100 56) 20] [(28 87 41 67) 28] [(100 7 22 54) 7] [(79 88 85 4) 4] [(35 91 55 16) 16] [(82 12 77 56) 12] [(63 37 39 50) 37] [(24 35 52 11) 11] [(88 33 56 72) 33] [(12 52 44 47) 12] [(59 1 25 8) 1] [(5 72 3 99) 3] [(27 90 48 46) 27] [(79 95 17 82) 17] [(81 74 83 93) 74] [(8 38 76 80) 8] [(50 3 18 22) 3] [(9 7 44 3) 3] [(18 31 93 96) 18] [(88 -8 -28 -98) -98] [(-42 68 -70 85) -70] [(90 -6 60 -92) -92] [(-68 56 -86 23) -86] [(-20 64 -21 -85) -85] [(5 -64 -68 -59) -68] [(6 44 -15 -61) -61] [(-91 40 -70 5) -91] [(51 -68 88 43) -68] [(-92 2 -74 99) -92] [(-88 -44 -37 -88) -88] [(26 -34 -40 80) -40] [(-25 -2 43 79) -25] [(48 82 -68 -74) -74] [(59 -43 78 -17) -43] [(31 31 47 62) 31] [(60 5 -35 -38) -38] [(-53 -43 44 47) -53] [(-80 -74 8 -80) -80] [(80 -3 46 16) -3] [(86 14 20 -5) -5] [(-100 52 -74 -45) -100] [(-83 -55 8 10) -83] [(-35 88 64 41) -35] [(-6 17 -7 -99) -99] [(88 -62 -82 19) -82] [(-46 73 22 32) -46] [(3 44 -33 70) -33] [(85 85 75 -52) -52] [(100 87 96 -41) -41] [(7 -32 -95 36) -95] [(-65 84 -64 10) -65] [(-69 12 10 20) -69] [(-68 17 -52 -94) -94] [(-42 10 58 -33) -42] [(6 8 20 -7) -7] [(99 -1 -10 96) -10] [(43 -78 -78 72) -78] [(34 -19 100 91) -19] [(-67 51 45 -4) -67] [(96 58 21 100) 21] [(-52 -79 35 17) -79] [(76 -55 90 -61) -61] [(86 -83 -2 -4) -83] [(79 81 21 91) 21] [(35 19 83 83) 19] [(-39 -88 -20 69) -88] [(-32 72 -83 -80) -83] [(54 15 -52 81) -52] [(-14 22 -86 -2) -86] [(-98 -47 -13 -87) -98] [(-50 -18 -5 -17) -50] [(81 56 47 98) 47] [(73 -3 20 -33) -33] [(-54 69 -100 42) -100] [(18 32 -80 -41) -80] [(40 37 84 30) 30] [(90 7 3 -4) -4] [(-78 -99 -34 -100) -100] [(-96 -88 81 100) -96])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -12                
Correct output: 8                   | Program output: 58                 
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 16                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 67                 
Correct output: 7                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 56                 
Correct output: 37                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 72                 
Correct output: 12                  | Program output: 47                 
Correct output: 1                   | Program output: 8                  
Correct output: 3                   | Program output: 99                 
Correct output: 27                  | Program output: 46                 
Correct output: 17                  | Program output: 82                 
Correct output: 74                  | Program output: 93                 
Correct output: 8                   | Program output: 80                 
Correct output: 3                   | Program output: 22                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 96                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 85                 
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 23                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: 5                  
Correct output: -68                 | Program output: 43                 
Correct output: -92                 | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: 80                 
Correct output: -25                 | Program output: 79                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -17                
Correct output: 31                  | Program output: 62                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: 47                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 16                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -45                
Correct output: -83                 | Program output: 10                 
Correct output: -35                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: 19                 
Correct output: -46                 | Program output: 32                 
Correct output: -33                 | Program output: 70                 
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: 36                 
Correct output: -65                 | Program output: 10                 
Correct output: -69                 | Program output: 20                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 96                 
Correct output: -78                 | Program output: 72                 
Correct output: -19                 | Program output: 91                 
Correct output: -67                 | Program output: -4                 
Correct output: 21                  | Program output: 100                
Correct output: -79                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -4                 
Correct output: 21                  | Program output: 91                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: 69                 
Correct output: -83                 | Program output: -80                
Correct output: -52                 | Program output: 81                 
Correct output: -86                 | Program output: -2                 
Correct output: -98                 | Program output: -87                
Correct output: -50                 | Program output: -17                
Correct output: 47                  | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: 42                 
Correct output: -80                 | Program output: -41                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_98} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction 61} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction tag_exec_823} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction 56} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 2, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 19} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop})
Lexicase best program: (exec_k_when_autoconstructing (in4 integer_max) (integer_yankdup) tagged_98 print_integer integer_gt boolean_xor exec_flush exec_rot () (integer_inc integer_swap exec_dup_times (integer_mult exec_pop (integer_inc boolean_invert_second_then_and boolean_rot exec_s_when_autoconstructing (integer_min exec_eq boolean_not exec_if (integer_add integer_stackdepth integer_min integer_rot exec_if (in2 boolean_dup_times boolean_invert_first_then_and) (boolean_invert_first_then_and) boolean_invert_first_then_and exec_noop boolean_invert_first_then_and integer_dup 61 in1 integer_lt exec_do*while (integer_div tag_exec_823 (integer_flush exec_while (exec_stackdepth integer_eq boolean_shove exec_y (print_boolean integer_yankdup boolean_shove boolean_shove) boolean_xor boolean_swap) print_boolean exec_pop () boolean_swap exec_noop in4 in1 exec_dup_times () exec_do*count (integer_stackdepth boolean_shove exec_noop) 56 integer_swap exec_rot (print_newline integer_div exec_noop in3) () (boolean_dup_items integer_lte exec_dup (exec_rot (integer_lt) (boolean_and) (integer_eq exec_pop (exec_if (exec_flush exec_stackdepth 19 in4 boolean_invert_second_then_and exec_pop (exec_do*count () boolean_shove boolean_swap) exec_pop ()) ()))))))) ()) () ()))) ())
Lexicase best errors: [0 0 1 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 126
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_98} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction 61} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction tag_exec_823} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction 56} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 2, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 19} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop})
Zero cases best program: (exec_k_when_autoconstructing (in4 integer_max) (integer_yankdup) tagged_98 print_integer integer_gt boolean_xor exec_flush exec_rot () (integer_inc integer_swap exec_dup_times (integer_mult exec_pop (integer_inc boolean_invert_second_then_and boolean_rot exec_s_when_autoconstructing (integer_min exec_eq boolean_not exec_if (integer_add integer_stackdepth integer_min integer_rot exec_if (in2 boolean_dup_times boolean_invert_first_then_and) (boolean_invert_first_then_and) boolean_invert_first_then_and exec_noop boolean_invert_first_then_and integer_dup 61 in1 integer_lt exec_do*while (integer_div tag_exec_823 (integer_flush exec_while (exec_stackdepth integer_eq boolean_shove exec_y (print_boolean integer_yankdup boolean_shove boolean_shove) boolean_xor boolean_swap) print_boolean exec_pop () boolean_swap exec_noop in4 in1 exec_dup_times () exec_do*count (integer_stackdepth boolean_shove exec_noop) 56 integer_swap exec_rot (print_newline integer_div exec_noop in3) () (boolean_dup_items integer_lte exec_dup (exec_rot (integer_lt) (boolean_and) (integer_eq exec_pop (exec_if (exec_flush exec_stackdepth 19 in4 boolean_invert_second_then_and exec_pop (exec_do*count () boolean_shove boolean_swap) exec_pop ()) ()))))))) ()) () ()))) ())
Zero cases best errors: [0 0 1 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 126
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 5 2 4 2 5 2 1 1)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (2 2 5 2 4 2 5 2 1 1)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction tag_integer_389} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_integer_337} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_519} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction tagged_624} {:close 0, :instruction tag_exec_565} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_exec_629})
Best program: (exec_do*while (boolean_yankdup in4) boolean_dup print_integer exec_eq exec_shove (integer_flush exec_noop) boolean_empty integer_fromboolean exec_dup (exec_k_when_autoconstructing (exec_while (exec_if (boolean_swap) (print_newline boolean_frominteger integer_min) boolean_invert_first_then_and boolean_swap integer_yank) boolean_empty boolean_empty integer_yank exec_yank) (integer_mod in1 in2 integer_add exec_do*count (tag_integer_389) exec_pop (exec_while () integer_yank exec_s_when_autoconstructing () (boolean_frominteger) (exec_rot () (in4) (integer_shove boolean_not) integer_dec exec_eq integer_div exec_empty boolean_frominteger integer_gte exec_k_when_autoconstructing (integer_mod in3 integer_lte boolean_yankdup integer_lt tag_integer_337 boolean_dup_times) (boolean_pop) exec_s (integer_yank boolean_xor) (integer_inc boolean_dup_times boolean_dup print_exec (boolean_flush exec_do*count (exec_y () integer_yank tag_integer_519 boolean_empty boolean_dup_items) integer_dec boolean_flush boolean_or exec_s_when_autoconstructing (exec_dup_items integer_stackdepth integer_mod in1 tagged_624 tag_exec_565 (integer_swap exec_s_when_autoconstructing (exec_y_when_autoconstructing (tag_exec_629 ())) () ())) () ())) ())))))
Errors: [0 0 1 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 84
Size: 119
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 9.974
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.995 0.998 0.996 0.998 0.995 0.998 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.82
Average program size in population (points): 68.801
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 496710
--- Timings ---
Current time: 1559584336017 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 32.7%
Fitness Testing:      1.6 seconds, 63.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -12                
Correct output: 8                   | Program output: 58                 
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 16                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 67                 
Correct output: 7                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 56                 
Correct output: 37                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 72                 
Correct output: 12                  | Program output: 47                 
Correct output: 1                   | Program output: 8                  
Correct output: 3                   | Program output: 99                 
Correct output: 27                  | Program output: 46                 
Correct output: 17                  | Program output: 82                 
Correct output: 74                  | Program output: 93                 
Correct output: 8                   | Program output: 80                 
Correct output: 3                   | Program output: 22                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 96                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 85                 
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 23                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: 5                  
Correct output: -68                 | Program output: 43                 
Correct output: -92                 | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: 80                 
Correct output: -25                 | Program output: 79                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -17                
Correct output: 31                  | Program output: 62                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: 47                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 16                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -45                
Correct output: -83                 | Program output: 10                 
Correct output: -35                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: 19                 
Correct output: -46                 | Program output: 32                 
Correct output: -33                 | Program output: 70                 
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: 36                 
Correct output: -65                 | Program output: 10                 
Correct output: -69                 | Program output: 20                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 96                 
Correct output: -78                 | Program output: 72                 
Correct output: -19                 | Program output: 91                 
Correct output: -67                 | Program output: -4                 
Correct output: 21                  | Program output: 100                
Correct output: -79                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -4                 
Correct output: 21                  | Program output: 91                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: 69                 
Correct output: -83                 | Program output: -80                
Correct output: -52                 | Program output: 81                 
Correct output: -86                 | Program output: -2                 
Correct output: -98                 | Program output: -87                
Correct output: -50                 | Program output: -17                
Correct output: 47                  | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: 42                 
Correct output: -80                 | Program output: -41                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_98} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction 61} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction tag_exec_823} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction 56} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 2, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 19} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop})
Lexicase best program: (exec_k_when_autoconstructing (in4 integer_max) (integer_yankdup) tagged_98 print_integer integer_gt boolean_xor exec_flush exec_rot () (integer_inc integer_swap exec_dup_times (integer_mult exec_pop (integer_inc boolean_invert_second_then_and boolean_rot exec_s_when_autoconstructing (integer_min exec_eq boolean_not exec_if (integer_add integer_stackdepth integer_min integer_rot exec_if (in2 boolean_dup_times boolean_invert_first_then_and) (boolean_invert_first_then_and) boolean_invert_first_then_and exec_noop boolean_invert_first_then_and integer_dup 61 in1 integer_lt exec_do*while (integer_div tag_exec_823 (integer_flush exec_while (exec_stackdepth integer_eq boolean_shove exec_y (print_boolean integer_yankdup boolean_shove) boolean_shove) boolean_xor boolean_swap print_boolean exec_pop () boolean_swap exec_noop in4 in1 exec_dup_times () exec_do*count (integer_stackdepth boolean_shove exec_noop 56 integer_swap exec_rot (print_newline integer_div exec_noop in3) () (boolean_dup_items integer_lte exec_dup (exec_rot (integer_lt) (boolean_and) (integer_eq exec_pop () exec_if (exec_flush exec_stackdepth 19 in4 boolean_invert_second_then_and exec_pop (exec_do*count () boolean_shove boolean_swap) exec_pop ()) ()))))))) ()) () ()))) ())
Lexicase best errors: [0 1 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 126
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_98} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction 61} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction tag_exec_823} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction 56} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 2, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 19} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop})
Zero cases best program: (exec_k_when_autoconstructing (in4 integer_max) (integer_yankdup) tagged_98 print_integer integer_gt boolean_xor exec_flush exec_rot () (integer_inc integer_swap exec_dup_times (integer_mult exec_pop (integer_inc boolean_invert_second_then_and boolean_rot exec_s_when_autoconstructing (integer_min exec_eq boolean_not exec_if (integer_add integer_stackdepth integer_min integer_rot exec_if (in2 boolean_dup_times boolean_invert_first_then_and) (boolean_invert_first_then_and) boolean_invert_first_then_and exec_noop boolean_invert_first_then_and integer_dup 61 in1 integer_lt exec_do*while (integer_div tag_exec_823 (integer_flush exec_while (exec_stackdepth integer_eq boolean_shove exec_y (print_boolean integer_yankdup boolean_shove) boolean_shove) boolean_xor boolean_swap print_boolean exec_pop () boolean_swap exec_noop in4 in1 exec_dup_times () exec_do*count (integer_stackdepth boolean_shove exec_noop 56 integer_swap exec_rot (print_newline integer_div exec_noop in3) () (boolean_dup_items integer_lte exec_dup (exec_rot (integer_lt) (boolean_and) (integer_eq exec_pop () exec_if (exec_flush exec_stackdepth 19 in4 boolean_invert_second_then_and exec_pop (exec_do*count () boolean_shove boolean_swap) exec_pop ()) ()))))))) ()) () ()))) ())
Zero cases best errors: [0 1 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 126
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (652 66 481 481 874 480 185 175 65 47)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (652 66 481 481 874 480 185 175 65 47)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_98} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction 61} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction tag_exec_823} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction 56} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 2, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 19} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop})
Best program: (exec_k_when_autoconstructing (in4 integer_max) (integer_yankdup) tagged_98 print_integer integer_gt boolean_xor exec_flush exec_rot () (integer_inc integer_swap exec_dup_times (integer_mult exec_pop (integer_inc boolean_invert_second_then_and boolean_rot exec_s_when_autoconstructing (integer_min exec_eq boolean_not exec_if (integer_add integer_stackdepth integer_min integer_rot exec_if (in2 boolean_dup_times boolean_invert_first_then_and) (boolean_invert_first_then_and) boolean_invert_first_then_and exec_noop boolean_invert_first_then_and integer_dup 61 in1 integer_lt exec_do*while (integer_div tag_exec_823 (integer_flush exec_while (exec_stackdepth integer_eq boolean_shove exec_y (print_boolean integer_yankdup boolean_shove boolean_shove) boolean_xor boolean_swap) print_boolean exec_pop () boolean_swap print_exec (in4 in1 exec_dup_times () exec_do*count (integer_stackdepth boolean_shove exec_noop) 56 integer_swap exec_rot (print_newline integer_div exec_noop in3) () (boolean_dup_items integer_lte exec_dup (exec_rot (integer_lt) (boolean_and) (integer_eq exec_pop (exec_if (exec_flush exec_stackdepth 19 in4 boolean_invert_second_then_and exec_pop (exec_do*count () boolean_shove boolean_swap) exec_pop ()) ())))))))) ()) () ()))) ())
Errors: [0 1 0 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 91
Size: 127
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 6.494
Median total errors in population: 6
Error averages by case: (0.348 0.934 0.519 0.519 0.126 0.52 0.815 0.825 0.935 0.953)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.922
Average program size in population (points): 84.517
Average percent parens in population: 0.321
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.474
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 172
Genome diversity (% unique genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 903956
--- Timings ---
Current time: 1559584338447 milliseconds
Total Time:           5.4 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 45.0%
Fitness Testing:      2.1 seconds, 39.5%
Report:               0.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: 41                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 100                
Correct output: 28                  | Program output: 41                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 85                 
Correct output: 16                  | Program output: 55                 
Correct output: 12                  | Program output: 77                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 52                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 44                 
Correct output: 1                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 48                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 83                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 44                 
Correct output: 18                  | Program output: 93                 
Correct output: -98                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: 60                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -15                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: 88                 
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -37                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: 43                 
Correct output: -74                 | Program output: -68                
Correct output: -43                 | Program output: 78                 
Correct output: 31                  | Program output: 47                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: 44                 
Correct output: -80                 | Program output: 8                  
Correct output: -3                  | Program output: 46                 
Correct output: -5                  | Program output: 20                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: 8                  
Correct output: -35                 | Program output: 64                 
Correct output: -99                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 22                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: 75                 
Correct output: -41                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: -52                
Correct output: -42                 | Program output: 58                 
Correct output: -7                  | Program output: 20                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 100                
Correct output: -67                 | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: 35                 
Correct output: -61                 | Program output: 90                 
Correct output: -83                 | Program output: -2                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -13                
Correct output: -50                 | Program output: -5                 
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 84                 
Correct output: -4                  | Program output: 3                  
Correct output: -100                | Program output: -34                
Correct output: -96                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_98} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction 61} {:close 0, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction tag_exec_823} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_k_when_autoconstructing (in4 integer_max) (integer_yankdup tagged_98 print_integer) integer_gt boolean_xor exec_flush exec_rot () (integer_inc integer_swap exec_dup_times (integer_mult exec_pop (integer_inc boolean_invert_second_then_and boolean_rot exec_s_when_autoconstructing (integer_min exec_eq boolean_not exec_if (integer_add integer_stackdepth integer_min integer_rot exec_if (in2 boolean_dup_times boolean_invert_first_then_and) (integer_min) boolean_invert_first_then_and exec_noop boolean_invert_first_then_and integer_dup 61 in1 integer_lt) (exec_do*while (integer_div tag_exec_823 (integer_flush exec_while (exec_stackdepth integer_eq boolean_shove exec_y (print_boolean integer_yankdup boolean_shove boolean_shove)))))) () ()))) ())
Lexicase best errors: [0 1 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_98} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction 61} {:close 0, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction tag_exec_823} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_k_when_autoconstructing (in4 integer_max) (integer_yankdup tagged_98 print_integer) integer_gt boolean_xor exec_flush exec_rot () (integer_inc integer_swap exec_dup_times (integer_mult exec_pop (integer_inc boolean_invert_second_then_and boolean_rot exec_s_when_autoconstructing (integer_min exec_eq boolean_not exec_if (integer_add integer_stackdepth integer_min integer_rot exec_if (in2 boolean_dup_times boolean_invert_first_then_and) (integer_min) boolean_invert_first_then_and exec_noop boolean_invert_first_then_and integer_dup 61 in1 integer_lt) (exec_do*while (integer_div tag_exec_823 (integer_flush exec_while (exec_stackdepth integer_eq boolean_shove exec_y (print_boolean integer_yankdup boolean_shove boolean_shove)))))) () ()))) ())
Zero cases best errors: [0 1 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (388 137 233 798 388 617 449 388 96 96)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (388 137 233 798 388 617 449 388 96 96)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq})
Best program: (exec_do*range (integer_dup exec_stackdepth print_boolean) integer_dec exec_yank exec_shove () integer_dup_items exec_do*count (exec_if () (boolean_and in3 integer_add print_integer exec_pop (exec_k () (print_integer)) exec_do*while (boolean_dup_times exec_rot () (boolean_or) (exec_k () (exec_dup_times () exec_pop () boolean_eq))))))
Errors: [1 1 0 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 25
Size: 42
Percent parens: 0.405
--- Population Statistics ---
Average total errors in population: 6.41
Median total errors in population: 6
Error averages by case: (0.612 0.863 0.767 0.202 0.612 0.383 0.551 0.612 0.904 0.904)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.754
Average program size in population (points): 80.386
Average percent parens in population: 0.316
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9755
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1218435
--- Timings ---
Current time: 1559584341309 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.6 seconds, 55.5%
Fitness Testing:      2.6 seconds, 31.0%
Report:               1.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -19                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 84                 
Correct output: 20                  | Program output: 50                 
Correct output: 28                  | Program output: 87                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 88                 
Correct output: 16                  | Program output: 91                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 35                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 52                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 72                 
Correct output: 27                  | Program output: 90                 
Correct output: 17                  | Program output: 95                 
Correct output: 74                  | Program output: 74                 
Correct output: 8                   | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 7                  
Correct output: 18                  | Program output: 31                 
Correct output: -98                 | Program output: -8                 
Correct output: -70                 | Program output: 68                 
Correct output: -92                 | Program output: -6                 
Correct output: -86                 | Program output: 56                 
Correct output: -85                 | Program output: 64                 
Correct output: -68                 | Program output: -64                
Correct output: -61                 | Program output: 44                 
Correct output: -91                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: 2                  
Correct output: -88                 | Program output: -44                
Correct output: -40                 | Program output: -34                
Correct output: -25                 | Program output: -2                 
Correct output: -74                 | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: 5                  
Correct output: -53                 | Program output: -43                
Correct output: -80                 | Program output: -74                
Correct output: -3                  | Program output: -3                 
Correct output: -5                  | Program output: 14                 
Correct output: -100                | Program output: 52                 
Correct output: -83                 | Program output: -55                
Correct output: -35                 | Program output: 88                 
Correct output: -99                 | Program output: 17                 
Correct output: -82                 | Program output: -62                
Correct output: -46                 | Program output: 73                 
Correct output: -33                 | Program output: 44                 
Correct output: -52                 | Program output: 85                 
Correct output: -41                 | Program output: 87                 
Correct output: -95                 | Program output: -32                
Correct output: -65                 | Program output: 84                 
Correct output: -69                 | Program output: 12                 
Correct output: -94                 | Program output: 17                 
Correct output: -42                 | Program output: 10                 
Correct output: -7                  | Program output: 8                  
Correct output: -10                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -67                 | Program output: 51                 
Correct output: 21                  | Program output: 58                 
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 21                  | Program output: 81                 
Correct output: 19                  | Program output: 19                 
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: 72                 
Correct output: -52                 | Program output: 15                 
Correct output: -86                 | Program output: 22                 
Correct output: -98                 | Program output: -47                
Correct output: -50                 | Program output: -18                
Correct output: 47                  | Program output: 56                 
Correct output: -33                 | Program output: -3                 
Correct output: -100                | Program output: 69                 
Correct output: -80                 | Program output: 32                 
Correct output: 30                  | Program output: 37                 
Correct output: -4                  | Program output: 7                  
Correct output: -100                | Program output: -99                
Correct output: -96                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max})
Lexicase best program: (exec_k_when_autoconstructing (exec_k (in4 boolean_or integer_empty in2) (boolean_invert_second_then_and) print_integer integer_rot integer_dec exec_k (boolean_frominteger) (integer_dup exec_dup_items integer_mult integer_dec exec_empty boolean_frominteger integer_yank boolean_empty) exec_rot (integer_shove exec_noop integer_dup_times boolean_stackdepth) (boolean_swap exec_rot (integer_dup_times) (integer_add integer_shove exec_dup (integer_gt integer_inc integer_max)) ()) ()) ())
Lexicase best errors: [1 0 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max})
Zero cases best program: (exec_k_when_autoconstructing (exec_k (in4 boolean_or integer_empty in2) (boolean_invert_second_then_and) print_integer integer_rot integer_dec exec_k (boolean_frominteger) (integer_dup exec_dup_items integer_mult integer_dec exec_empty boolean_frominteger integer_yank boolean_empty) exec_rot (integer_shove exec_noop integer_dup_times boolean_stackdepth) (boolean_swap exec_rot (integer_dup_times) (integer_add integer_shove exec_dup (integer_gt integer_inc integer_max)) ()) ()) ())
Zero cases best errors: [1 0 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (311 23 317 337 23 251 23 274 251 585)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (311 23 317 337 23 251 23 274 251 585)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while})
Best program: (exec_k_when_autoconstructing (exec_k (in4 boolean_or integer_empty in2) (boolean_invert_second_then_and) print_integer integer_rot integer_dec exec_k (boolean_frominteger) (integer_dup exec_dup_items integer_mult integer_dec exec_empty in3 integer_yank boolean_empty) exec_rot (integer_shove exec_noop integer_dup_times boolean_stackdepth) (boolean_swap exec_rot (integer_dup_times) (integer_add boolean_swap exec_dup (integer_gt integer_inc exec_do*while ())) ()) ()) ())
Errors: [1 0 1 1 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 49
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 7.605
Median total errors in population: 7
Error averages by case: (0.689 0.977 0.683 0.663 0.977 0.749 0.977 0.726 0.749 0.415)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.646
Average program size in population (points): 62.347
Average percent parens in population: 0.336
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.43675
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 218
Genome diversity (% unique genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 227
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1557920
--- Timings ---
Current time: 1559584344439 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.0 seconds, 61.4%
Fitness Testing:      3.0 seconds, 26.2%
Report:               1.3 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: 41                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 100                
Correct output: 28                  | Program output: 41                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 85                 
Correct output: 16                  | Program output: 55                 
Correct output: 12                  | Program output: 77                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 52                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 44                 
Correct output: 1                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 48                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 83                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 44                 
Correct output: 18                  | Program output: 93                 
Correct output: -98                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: 60                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -15                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: 88                 
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -37                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: 43                 
Correct output: -74                 | Program output: -68                
Correct output: -43                 | Program output: 78                 
Correct output: 31                  | Program output: 47                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: 44                 
Correct output: -80                 | Program output: 8                  
Correct output: -3                  | Program output: 46                 
Correct output: -5                  | Program output: 20                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: 8                  
Correct output: -35                 | Program output: 64                 
Correct output: -99                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 22                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: 75                 
Correct output: -41                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: -52                
Correct output: -42                 | Program output: 58                 
Correct output: -7                  | Program output: 20                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 100                
Correct output: -67                 | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: 35                 
Correct output: -61                 | Program output: 90                 
Correct output: -83                 | Program output: -2                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -13                
Correct output: -50                 | Program output: -5                 
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 84                 
Correct output: -4                  | Program output: 3                  
Correct output: -100                | Program output: -34                
Correct output: -96                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_do*range (integer_dup exec_stackdepth print_boolean) integer_dec exec_yank exec_shove () integer_dup_items exec_do*count (exec_if () (boolean_and in3 integer_add print_integer exec_pop (exec_k () (print_integer)) exec_do*while (boolean_dup_times exec_rot () (boolean_or) (exec_k () (exec_dup_times () exec_pop () boolean_eq))))))
Lexicase best errors: [1 0 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.405
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_do*range (integer_dup exec_stackdepth print_boolean) integer_dec exec_yank exec_shove () integer_dup_items exec_do*count (exec_if () (boolean_and in3 integer_add print_integer exec_pop (exec_k () (print_integer)) exec_do*while (boolean_dup_times exec_rot () (boolean_or) (exec_k () (exec_dup_times () exec_pop () boolean_eq))))))
Zero cases best errors: [1 0 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.405
--- Lexicase Population Statistics ---
Count of elite individuals by case: (266 99 99 266 188 266 99 266 188 99)
Population mean number of elite cases: 1.84
Count of perfect (error zero) individuals by case: (266 99 99 266 188 266 99 266 188 99)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction 38} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction 11} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_pop})
Best program: (in3 integer_fromboolean print_integer exec_k_when_autoconstructing () (boolean_flush) integer_flush integer_dec boolean_dup_times integer_empty boolean_eq exec_k_when_autoconstructing (integer_mod integer_add boolean_yank integer_dec exec_swap (boolean_flush) (exec_eq 38 exec_pop () integer_max integer_inc exec_dup_items exec_flush integer_stackdepth) exec_do*times (exec_if (boolean_or exec_yank exec_rot (integer_pop exec_dup () exec_swap () (boolean_invert_second_then_and in4 exec_while () boolean_dup_times) boolean_yankdup exec_do*times () integer_lt integer_dec integer_flush) (exec_when (11 exec_while () boolean_shove boolean_yankdup exec_do*while () exec_pop ())) ()) ())) ())
Errors: [1 0 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 49
Size: 72
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 8.164
Median total errors in population: 8
Error averages by case: (0.734 0.901 0.901 0.734 0.812 0.734 0.901 0.734 0.812 0.901)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.029
Average program size in population (points): 53.26
Average percent parens in population: 0.338
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.0855
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 212
Genome diversity (% unique genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.547
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1786924
--- Timings ---
Current time: 1559584347198 milliseconds
Total Time:          14.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.3 seconds, 65.1%
Fitness Testing:      3.3 seconds, 23.0%
Report:               1.6 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: 41                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 100                
Correct output: 28                  | Program output: 41                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 85                 
Correct output: 16                  | Program output: 55                 
Correct output: 12                  | Program output: 77                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 52                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 44                 
Correct output: 1                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 48                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 83                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 44                 
Correct output: 18                  | Program output: 93                 
Correct output: -98                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: 60                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -15                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: 88                 
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -37                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: 43                 
Correct output: -74                 | Program output: -68                
Correct output: -43                 | Program output: 78                 
Correct output: 31                  | Program output: 47                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: 44                 
Correct output: -80                 | Program output: 8                  
Correct output: -3                  | Program output: 46                 
Correct output: -5                  | Program output: 20                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: 8                  
Correct output: -35                 | Program output: 64                 
Correct output: -99                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 22                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: 75                 
Correct output: -41                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: -52                
Correct output: -42                 | Program output: 58                 
Correct output: -7                  | Program output: 20                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 100                
Correct output: -67                 | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: 35                 
Correct output: -61                 | Program output: 90                 
Correct output: -83                 | Program output: -2                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -13                
Correct output: -50                 | Program output: -5                 
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 84                 
Correct output: -4                  | Program output: 3                  
Correct output: -100                | Program output: -34                
Correct output: -96                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_sub} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_690} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank})
Lexicase best program: (exec_k (integer_gte) (boolean_eq boolean_yank) integer_div boolean_invert_second_then_and boolean_eq exec_while (boolean_swap boolean_dup_times integer_dup_times integer_inc integer_empty) integer_gte exec_yankdup integer_sub exec_noop in3 exec_rot (print_integer boolean_shove exec_swap () (integer_rot exec_y_when_autoconstructing (exec_y () integer_sub) print_newline integer_div exec_dup_items integer_stackdepth exec_when (tagged_690) integer_lte integer_dup_times exec_swap (integer_dup integer_flush boolean_invert_first_then_and boolean_eq exec_flush integer_yank) ())) () ())
Lexicase best errors: [0 1 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_sub} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_690} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank})
Zero cases best program: (exec_k (integer_gte) (boolean_eq boolean_yank) integer_div boolean_invert_second_then_and boolean_eq exec_while (boolean_swap boolean_dup_times integer_dup_times integer_inc integer_empty) integer_gte exec_yankdup integer_sub exec_noop in3 exec_rot (print_integer boolean_shove exec_swap () (integer_rot exec_y_when_autoconstructing (exec_y () integer_sub) print_newline integer_div exec_dup_items integer_stackdepth exec_when (tagged_690) integer_lte integer_dup_times exec_swap (integer_dup integer_flush boolean_invert_first_then_and boolean_eq exec_flush integer_yank) ())) () ())
Zero cases best errors: [0 1 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (375 379 194 1000 755 1000 376 194 194 376)
Population mean number of elite cases: 4.84
Count of perfect (error zero) individuals by case: (375 379 194 0 755 0 376 194 194 376)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 2, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1})
Best program: (in3 integer_fromboolean print_integer exec_k_when_autoconstructing () (boolean_flush) integer_flush integer_max exec_empty boolean_flush print_integer exec_do*count (exec_while (exec_while (print_integer exec_eq exec_y (boolean_not integer_empty integer_empty exec_do*range (boolean_flush exec_dup_times (exec_y (integer_dup_times exec_k_when_autoconstructing (boolean_pop exec_do*times () integer_div boolean_pop exec_noop boolean_shove) (integer_min boolean_pop boolean_eq) integer_mod integer_eq) boolean_invert_second_then_and boolean_invert_second_then_and boolean_swap in2) exec_do*range () exec_flush boolean_and boolean_dup_times integer_lte integer_shove integer_div integer_pop boolean_not) boolean_yank exec_swap (boolean_eq print_integer exec_noop integer_dec boolean_dup_times in1) ())))))
Errors: [0 1 1 1 0 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 57
Size: 73
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 7.157
Median total errors in population: 7
Error averages by case: (0.625 0.621 0.806 1.0 0.245 1.0 0.624 0.806 0.806 0.624)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 31.796
Average program size in population (points): 45.888
Average percent parens in population: 0.354
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.4640625
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 288
Genome diversity (% unique genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 301
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2047889
--- Timings ---
Current time: 1559584349990 milliseconds
Total Time:          17.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.6 seconds, 67.9%
Fitness Testing:      3.6 seconds, 20.9%
Report:               1.8 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 46                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 65                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 100                
Correct output: 4                   | Program output: 79                 
Correct output: 16                  | Program output: 35                 
Correct output: 12                  | Program output: 82                 
Correct output: 37                  | Program output: 63                 
Correct output: 11                  | Program output: 24                 
Correct output: 33                  | Program output: 88                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 59                 
Correct output: 3                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 79                 
Correct output: 74                  | Program output: 81                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 50                 
Correct output: 3                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: 88                 
Correct output: -70                 | Program output: -42                
Correct output: -92                 | Program output: 90                 
Correct output: -86                 | Program output: -68                
Correct output: -85                 | Program output: -20                
Correct output: -68                 | Program output: 5                  
Correct output: -61                 | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: 51                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: 48                 
Correct output: -43                 | Program output: 59                 
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 80                 
Correct output: -5                  | Program output: 86                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -6                 
Correct output: -82                 | Program output: 88                 
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 3                  
Correct output: -52                 | Program output: 85                 
Correct output: -41                 | Program output: 100                
Correct output: -95                 | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 6                  
Correct output: -10                 | Program output: 99                 
Correct output: -78                 | Program output: 43                 
Correct output: -19                 | Program output: 34                 
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 96                 
Correct output: -79                 | Program output: -52                
Correct output: -61                 | Program output: 76                 
Correct output: -83                 | Program output: 86                 
Correct output: 21                  | Program output: 79                 
Correct output: 19                  | Program output: 35                 
Correct output: -88                 | Program output: -39                
Correct output: -83                 | Program output: -32                
Correct output: -52                 | Program output: 54                 
Correct output: -86                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 81                 
Correct output: -33                 | Program output: 73                 
Correct output: -100                | Program output: -54                
Correct output: -80                 | Program output: 18                 
Correct output: 30                  | Program output: 40                 
Correct output: -4                  | Program output: 90                 
Correct output: -100                | Program output: -78                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Lexicase best program: (in1 print_integer boolean_stackdepth exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Lexicase best errors: [0 1 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 11
Percent parens: 0.455
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Zero cases best program: (in1 print_integer boolean_stackdepth exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Zero cases best errors: [0 1 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 11
Percent parens: 0.455
--- Lexicase Population Statistics ---
Count of elite individuals by case: (938 358 427 360 150 508 150 150 150 428)
Population mean number of elite cases: 3.62
Count of perfect (error zero) individuals by case: (938 358 427 360 150 508 150 150 150 428)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Best program: (in1 print_integer integer_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Errors: [0 1 1 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 6
Size: 11
Percent parens: 0.455
--- Population Statistics ---
Average total errors in population: 6.381
Median total errors in population: 6
Error averages by case: (0.062 0.642 0.573 0.64 0.85 0.492 0.85 0.85 0.85 0.572)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.103
Average program size in population (points): 55.876
Average percent parens in population: 0.321
Minimum age in population: 6.0
Maximum age in population: 10.9375
Average age in population: 8.95334375
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.673
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2318221
--- Timings ---
Current time: 1559584352460 milliseconds
Total Time:          19.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.6 seconds, 69.6%
Fitness Testing:      3.9 seconds, 19.8%
Report:               2.0 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 46                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 65                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 100                
Correct output: 4                   | Program output: 79                 
Correct output: 16                  | Program output: 35                 
Correct output: 12                  | Program output: 82                 
Correct output: 37                  | Program output: 63                 
Correct output: 11                  | Program output: 24                 
Correct output: 33                  | Program output: 88                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 59                 
Correct output: 3                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 79                 
Correct output: 74                  | Program output: 81                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 50                 
Correct output: 3                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: 88                 
Correct output: -70                 | Program output: -42                
Correct output: -92                 | Program output: 90                 
Correct output: -86                 | Program output: -68                
Correct output: -85                 | Program output: -20                
Correct output: -68                 | Program output: 5                  
Correct output: -61                 | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: 51                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: 48                 
Correct output: -43                 | Program output: 59                 
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 80                 
Correct output: -5                  | Program output: 86                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -6                 
Correct output: -82                 | Program output: 88                 
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 3                  
Correct output: -52                 | Program output: 85                 
Correct output: -41                 | Program output: 100                
Correct output: -95                 | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 6                  
Correct output: -10                 | Program output: 99                 
Correct output: -78                 | Program output: 43                 
Correct output: -19                 | Program output: 34                 
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 96                 
Correct output: -79                 | Program output: -52                
Correct output: -61                 | Program output: 76                 
Correct output: -83                 | Program output: 86                 
Correct output: 21                  | Program output: 79                 
Correct output: 19                  | Program output: 35                 
Correct output: -88                 | Program output: -39                
Correct output: -83                 | Program output: -32                
Correct output: -52                 | Program output: 54                 
Correct output: -86                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 81                 
Correct output: -33                 | Program output: 73                 
Correct output: -100                | Program output: -54                
Correct output: -80                 | Program output: 18                 
Correct output: 30                  | Program output: 40                 
Correct output: -4                  | Program output: 90                 
Correct output: -100                | Program output: -78                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Lexicase best program: (in1 print_integer boolean_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Lexicase best errors: [1 1 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 11
Percent parens: 0.455
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Zero cases best program: (in1 print_integer boolean_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Zero cases best errors: [1 1 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 11
Percent parens: 0.455
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 484 204 484 484 484 203 1000 1000)
Population mean number of elite cases: 6.34
Count of perfect (error zero) individuals by case: (0 0 484 204 484 484 484 203 0 0)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Best program: (in1 print_integer integer_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Errors: [1 1 0 1 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 6
Size: 11
Percent parens: 0.455
--- Population Statistics ---
Average total errors in population: 7.657
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.516 0.796 0.516 0.516 0.516 0.797 1.0 1.0)
Error minima by case: (1 1 0 0 0 0 0 0 1 1)
Average genome size in population (length): 24.117
Average program size in population (points): 35.54
Average percent parens in population: 0.374
Minimum age in population: 7.0
Maximum age in population: 12.34375
Average age in population: 10.490171875
Median age in population: 10.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 313
Genome diversity (% unique genomes):	 0.483
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 342
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2495331
--- Timings ---
Current time: 1559584354787 milliseconds
Total Time:          21.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.6 seconds, 71.1%
Fitness Testing:      4.1 seconds, 18.7%
Report:               2.1 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: 41                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 100                
Correct output: 28                  | Program output: 41                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 85                 
Correct output: 16                  | Program output: 55                 
Correct output: 12                  | Program output: 77                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 52                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 44                 
Correct output: 1                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 48                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 83                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 44                 
Correct output: 18                  | Program output: 93                 
Correct output: -98                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: 60                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -15                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: 88                 
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -37                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: 43                 
Correct output: -74                 | Program output: -68                
Correct output: -43                 | Program output: 78                 
Correct output: 31                  | Program output: 47                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: 44                 
Correct output: -80                 | Program output: 8                  
Correct output: -3                  | Program output: 46                 
Correct output: -5                  | Program output: 20                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: 8                  
Correct output: -35                 | Program output: 64                 
Correct output: -99                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 22                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: 75                 
Correct output: -41                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: -52                
Correct output: -42                 | Program output: 58                 
Correct output: -7                  | Program output: 20                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 100                
Correct output: -67                 | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: 35                 
Correct output: -61                 | Program output: 90                 
Correct output: -83                 | Program output: -2                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -13                
Correct output: -50                 | Program output: -5                 
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 84                 
Correct output: -4                  | Program output: 3                  
Correct output: -100                | Program output: -34                
Correct output: -96                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Lexicase best program: (in1 print_integer integer_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Lexicase best errors: [1 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 11
Percent parens: 0.455
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Zero cases best program: (in1 print_integer integer_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Zero cases best errors: [1 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 11
Percent parens: 0.455
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 632 320 1000 632 952 320 1000 320 632)
Population mean number of elite cases: 6.81
Count of perfect (error zero) individuals by case: (0 632 320 0 632 952 320 0 320 632)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while})
Best program: (exec_do*range (integer_yankdup exec_stackdepth print_boolean) integer_dec exec_yank exec_shove () integer_dup_items exec_do*count (exec_if () (boolean_and in3 integer_add print_integer exec_pop (exec_k () (print_integer)) exec_do*while (boolean_dup_times exec_rot () (boolean_or) (exec_noop integer_dup_times integer_gte) boolean_swap exec_rot (integer_dup_times) (integer_add boolean_swap exec_dup (integer_gt integer_inc exec_do*while ())) ()))))
Errors: [1 1 0 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 33
Size: 51
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.192
Median total errors in population: 6
Error averages by case: (1.0 0.368 0.68 1.0 0.368 0.048 0.68 1.0 0.68 0.368)
Error minima by case: (1 0 0 1 0 0 0 1 0 0)
Average genome size in population (length): 17.832
Average program size in population (points): 27.136
Average percent parens in population: 0.396
Minimum age in population: 8.4375
Maximum age in population: 13.953125
Average age in population: 11.9935625
Median age in population: 12.03515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 370
Genome diversity (% unique genomes):	 0.355
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 410
Syntactic diversity (% unique Push programs):	 0.345
Total error diversity:				 0.002
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2662601
--- Timings ---
Current time: 1559584357076 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.4 seconds, 72.3%
Fitness Testing:      4.3 seconds, 17.9%
Report:               2.3 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 46                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 65                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 100                
Correct output: 4                   | Program output: 79                 
Correct output: 16                  | Program output: 35                 
Correct output: 12                  | Program output: 82                 
Correct output: 37                  | Program output: 63                 
Correct output: 11                  | Program output: 24                 
Correct output: 33                  | Program output: 88                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 59                 
Correct output: 3                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 79                 
Correct output: 74                  | Program output: 81                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 50                 
Correct output: 3                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: 88                 
Correct output: -70                 | Program output: -42                
Correct output: -92                 | Program output: 90                 
Correct output: -86                 | Program output: -68                
Correct output: -85                 | Program output: -20                
Correct output: -68                 | Program output: 5                  
Correct output: -61                 | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: 51                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: 48                 
Correct output: -43                 | Program output: 59                 
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 80                 
Correct output: -5                  | Program output: 86                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -6                 
Correct output: -82                 | Program output: 88                 
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 3                  
Correct output: -52                 | Program output: 85                 
Correct output: -41                 | Program output: 100                
Correct output: -95                 | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 6                  
Correct output: -10                 | Program output: 99                 
Correct output: -78                 | Program output: 43                 
Correct output: -19                 | Program output: 34                 
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 96                 
Correct output: -79                 | Program output: -52                
Correct output: -61                 | Program output: 76                 
Correct output: -83                 | Program output: 86                 
Correct output: 21                  | Program output: 79                 
Correct output: 19                  | Program output: 35                 
Correct output: -88                 | Program output: -39                
Correct output: -83                 | Program output: -32                
Correct output: -52                 | Program output: 54                 
Correct output: -86                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 81                 
Correct output: -33                 | Program output: 73                 
Correct output: -100                | Program output: -54                
Correct output: -80                 | Program output: 18                 
Correct output: 30                  | Program output: 40                 
Correct output: -4                  | Program output: 90                 
Correct output: -100                | Program output: -78                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Lexicase best program: (in1 print_integer integer_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Lexicase best errors: [1 0 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 11
Percent parens: 0.455
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Zero cases best program: (in1 print_integer integer_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Zero cases best errors: [1 0 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 11
Percent parens: 0.455
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 467 467 1000 467 475 1000 1000 475 942)
Population mean number of elite cases: 7.29
Count of perfect (error zero) individuals by case: (0 467 467 0 467 475 0 0 475 942)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Best program: (in1 print_integer integer_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Errors: [1 0 0 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 6
Size: 11
Percent parens: 0.455
--- Population Statistics ---
Average total errors in population: 6.707
Median total errors in population: 7
Error averages by case: (1.0 0.533 0.533 1.0 0.533 0.525 1.0 1.0 0.525 0.058)
Error minima by case: (1 0 0 1 0 0 1 1 0 0)
Average genome size in population (length): 22.19
Average program size in population (points): 33.131
Average percent parens in population: 0.373
Minimum age in population: 10.09375
Maximum age in population: 15.6640625
Average age in population: 13.47602734375
Median age in population: 13.533203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 255
Genome diversity (% unique genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 282
Syntactic diversity (% unique Push programs):	 0.456
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 2874647
--- Timings ---
Current time: 1559584359537 milliseconds
Total Time:          26.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.5 seconds, 73.2%
Fitness Testing:      4.6 seconds, 17.1%
Report:               2.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: 41                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 100                
Correct output: 28                  | Program output: 41                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 85                 
Correct output: 16                  | Program output: 55                 
Correct output: 12                  | Program output: 77                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 52                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 44                 
Correct output: 1                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 48                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 83                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 44                 
Correct output: 18                  | Program output: 93                 
Correct output: -98                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: 60                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -15                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: 88                 
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -37                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: 43                 
Correct output: -74                 | Program output: -68                
Correct output: -43                 | Program output: 78                 
Correct output: 31                  | Program output: 47                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: 44                 
Correct output: -80                 | Program output: 8                  
Correct output: -3                  | Program output: 46                 
Correct output: -5                  | Program output: 20                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: 8                  
Correct output: -35                 | Program output: 64                 
Correct output: -99                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 22                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: 75                 
Correct output: -41                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: -52                
Correct output: -42                 | Program output: 58                 
Correct output: -7                  | Program output: 20                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 100                
Correct output: -67                 | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: 35                 
Correct output: -61                 | Program output: 90                 
Correct output: -83                 | Program output: -2                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -13                
Correct output: -50                 | Program output: -5                 
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 84                 
Correct output: -4                  | Program output: 3                  
Correct output: -100                | Program output: -34                
Correct output: -96                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Lexicase best program: (in1 print_integer integer_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Lexicase best errors: [1 0 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 11
Percent parens: 0.455
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Zero cases best program: (in1 print_integer integer_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Zero cases best errors: [1 0 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 11
Percent parens: 0.455
--- Lexicase Population Statistics ---
Count of elite individuals by case: (382 565 565 947 1000 1000 1000 565 382 382)
Population mean number of elite cases: 6.79
Count of perfect (error zero) individuals by case: (382 565 565 947 0 0 0 565 382 382)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction tag_boolean_526} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_when} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction tagged_418} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tagged_813} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction tag_integer_389} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_integer_337} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_519} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction tagged_624} {:close 0, :instruction tag_exec_565} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_exec_629})
Best program: (exec_yank tag_boolean_526 exec_k_when_autoconstructing (integer_yankdup in3) (exec_while () print_integer) exec_swap (boolean_dup_items integer_sub exec_do*count (boolean_frominteger print_boolean exec_eq exec_do*count (integer_flush exec_when () exec_while () boolean_shove integer_lt) tagged_418) boolean_dup) (boolean_rot integer_dup_times tagged_813) integer_fromboolean integer_yank exec_do*while (integer_dup_times integer_dec) exec_do*count (integer_div) exec_pop (boolean_swap in2) integer_div exec_dup (exec_swap () (in2 integer_add exec_do*count (tag_integer_389) exec_pop (exec_while () integer_yank exec_s_when_autoconstructing () (boolean_frominteger) (exec_rot () (in4) (integer_shove boolean_not) integer_dec exec_eq integer_div exec_empty boolean_frominteger integer_gte exec_k_when_autoconstructing (integer_mod in3 integer_lte boolean_yankdup integer_lt tag_integer_337 boolean_dup_times) (integer_pop) exec_s (integer_yank boolean_xor) (boolean_empty boolean_dup_times boolean_dup print_exec (boolean_flush exec_do*count (exec_y () integer_yank tag_integer_519 boolean_empty boolean_dup_items) integer_dec boolean_flush boolean_or exec_s_when_autoconstructing (exec_dup_items integer_stackdepth integer_mod in1 tagged_624 tag_exec_565 (integer_swap boolean_and exec_y_when_autoconstructing (tag_exec_629 ()))) () ())) ())))))
Errors: [0 1 1 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 94
Size: 133
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 6.212
Median total errors in population: 6
Error averages by case: (0.618 0.435 0.435 0.053 1.0 1.0 1.0 0.435 0.618 0.618)
Error minima by case: (0 0 0 0 1 1 1 0 0 0)
Average genome size in population (length): 18.105
Average program size in population (points): 27.413
Average percent parens in population: 0.385
Minimum age in population: 11.5625
Maximum age in population: 16.904296875
Average age in population: 14.988134765625
Median age in population: 15.0478515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 296
Genome diversity (% unique genomes):	 0.44
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 327
Syntactic diversity (% unique Push programs):	 0.431
Total error diversity:				 0.002
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.009
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3052107
--- Timings ---
Current time: 1559584361915 milliseconds
Total Time:          28.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.2 seconds, 73.8%
Fitness Testing:      4.8 seconds, 16.7%
Report:               2.6 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: 41                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 100                
Correct output: 28                  | Program output: 41                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 85                 
Correct output: 16                  | Program output: 55                 
Correct output: 12                  | Program output: 77                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 52                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 44                 
Correct output: 1                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 48                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 83                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 44                 
Correct output: 18                  | Program output: 93                 
Correct output: -98                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: 60                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -15                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: 88                 
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -37                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: 43                 
Correct output: -74                 | Program output: -68                
Correct output: -43                 | Program output: 78                 
Correct output: 31                  | Program output: 47                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: 44                 
Correct output: -80                 | Program output: 8                  
Correct output: -3                  | Program output: 46                 
Correct output: -5                  | Program output: 20                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: 8                  
Correct output: -35                 | Program output: 64                 
Correct output: -99                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 22                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: 75                 
Correct output: -41                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: -52                
Correct output: -42                 | Program output: 58                 
Correct output: -7                  | Program output: 20                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 100                
Correct output: -67                 | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: 35                 
Correct output: -61                 | Program output: 90                 
Correct output: -83                 | Program output: -2                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -13                
Correct output: -50                 | Program output: -5                 
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 84                 
Correct output: -4                  | Program output: 3                  
Correct output: -100                | Program output: -34                
Correct output: -96                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_do*range (integer_dup exec_stackdepth print_boolean) integer_dup_items exec_do*count (exec_if () (boolean_and) in3 integer_add print_integer exec_pop (exec_k () (print_integer)) exec_do*while (boolean_dup_times exec_rot () (print_integer) (exec_k (exec_s () (exec_pop () boolean_eq) ()) ()))))
Lexicase best errors: [1 1 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 40
Percent parens: 0.450
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_do*range (integer_dup exec_stackdepth print_boolean) integer_dup_items exec_do*count (exec_if () (boolean_and) in3 integer_add print_integer exec_pop (exec_k () (print_integer)) exec_do*while (boolean_dup_times exec_rot () (print_integer) (exec_k (exec_s () (exec_pop () boolean_eq) ()) ()))))
Zero cases best errors: [1 1 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 40
Percent parens: 0.450
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 475 464 475 464 464 464 475 1000)
Population mean number of elite cases: 6.28
Count of perfect (error zero) individuals by case: (0 0 475 464 475 464 464 464 475 0)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 2, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction 38} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_rot})
Best program: (in3 integer_fromboolean print_integer exec_k_when_autoconstructing () (boolean_flush) integer_flush integer_max exec_empty boolean_flush print_integer exec_do*count (exec_while (exec_while (print_integer exec_eq exec_y (boolean_not integer_empty exec_eq 38 exec_pop () integer_max integer_inc exec_dup_items exec_flush integer_stackdepth) exec_do*while (exec_if (boolean_or integer_eq exec_rot () () ()) ())))))
Errors: [1 1 1 0 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 45
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 6.719
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.525 0.536 0.525 0.536 0.536 0.536 0.525 1.0)
Error minima by case: (1 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 19.604
Average program size in population (points): 29.487
Average percent parens in population: 0.376
Minimum age in population: 13.125
Maximum age in population: 18.388671875
Average age in population: 16.4618681640625
Median age in population: 16.52783203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 249
Genome diversity (% unique genomes):	 0.489
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 275
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3241204
--- Timings ---
Current time: 1559584364045 milliseconds
Total Time:          31.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.9 seconds, 73.6%
Fitness Testing:      5.0 seconds, 16.1%
Report:               3.1 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 46                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 65                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 100                
Correct output: 4                   | Program output: 79                 
Correct output: 16                  | Program output: 35                 
Correct output: 12                  | Program output: 82                 
Correct output: 37                  | Program output: 63                 
Correct output: 11                  | Program output: 24                 
Correct output: 33                  | Program output: 88                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 59                 
Correct output: 3                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 79                 
Correct output: 74                  | Program output: 81                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 50                 
Correct output: 3                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: 88                 
Correct output: -70                 | Program output: -42                
Correct output: -92                 | Program output: 90                 
Correct output: -86                 | Program output: -68                
Correct output: -85                 | Program output: -20                
Correct output: -68                 | Program output: 5                  
Correct output: -61                 | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: 51                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: 48                 
Correct output: -43                 | Program output: 59                 
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 80                 
Correct output: -5                  | Program output: 86                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -6                 
Correct output: -82                 | Program output: 88                 
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 3                  
Correct output: -52                 | Program output: 85                 
Correct output: -41                 | Program output: 100                
Correct output: -95                 | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 6                  
Correct output: -10                 | Program output: 99                 
Correct output: -78                 | Program output: 43                 
Correct output: -19                 | Program output: 34                 
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 96                 
Correct output: -79                 | Program output: -52                
Correct output: -61                 | Program output: 76                 
Correct output: -83                 | Program output: 86                 
Correct output: 21                  | Program output: 79                 
Correct output: 19                  | Program output: 35                 
Correct output: -88                 | Program output: -39                
Correct output: -83                 | Program output: -32                
Correct output: -52                 | Program output: 54                 
Correct output: -86                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 81                 
Correct output: -33                 | Program output: 73                 
Correct output: -100                | Program output: -54                
Correct output: -80                 | Program output: 18                 
Correct output: 30                  | Program output: 40                 
Correct output: -4                  | Program output: 90                 
Correct output: -100                | Program output: -78                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Lexicase best program: (in1 print_integer integer_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Lexicase best errors: [0 1 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 11
Percent parens: 0.455
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Zero cases best program: (in1 print_integer integer_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Zero cases best errors: [0 1 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 11
Percent parens: 0.455
--- Lexicase Population Statistics ---
Count of elite individuals by case: (435 1000 435 512 1000 1000 1000 435 435 1000)
Population mean number of elite cases: 7.25
Count of perfect (error zero) individuals by case: (435 0 435 512 0 0 0 435 435 0)
Population mean number of perfect (error zero) cases: 2.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Best program: (in1 print_integer integer_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Errors: [0 1 0 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 6
Size: 11
Percent parens: 0.455
--- Population Statistics ---
Average total errors in population: 7.748
Median total errors in population: 9
Error averages by case: (0.565 1.0 0.565 0.488 1.0 1.0 1.0 0.565 0.565 1.0)
Error minima by case: (0 1 0 0 1 1 1 0 0 1)
Average genome size in population (length): 20.64
Average program size in population (points): 30.931
Average percent parens in population: 0.370
Minimum age in population: 14.87109375
Maximum age in population: 19.8662109375
Average age in population: 17.9726015625
Median age in population: 18.049560546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 235
Genome diversity (% unique genomes):	 0.507
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 255
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3449606
--- Timings ---
Current time: 1559584366108 milliseconds
Total Time:          33.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.6 seconds, 74.1%
Fitness Testing:      5.3 seconds, 15.8%
Report:               3.3 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: 41                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 100                
Correct output: 28                  | Program output: 41                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 85                 
Correct output: 16                  | Program output: 55                 
Correct output: 12                  | Program output: 77                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 52                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 44                 
Correct output: 1                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 48                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 83                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 44                 
Correct output: 18                  | Program output: 93                 
Correct output: -98                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: 60                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -15                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: 88                 
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -37                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: 43                 
Correct output: -74                 | Program output: -68                
Correct output: -43                 | Program output: 78                 
Correct output: 31                  | Program output: 47                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: 44                 
Correct output: -80                 | Program output: 8                  
Correct output: -3                  | Program output: 46                 
Correct output: -5                  | Program output: 20                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: 8                  
Correct output: -35                 | Program output: 64                 
Correct output: -99                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 22                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: 75                 
Correct output: -41                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: -52                
Correct output: -42                 | Program output: 58                 
Correct output: -7                  | Program output: 20                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 100                
Correct output: -67                 | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: 35                 
Correct output: -61                 | Program output: 90                 
Correct output: -83                 | Program output: -2                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -13                
Correct output: -50                 | Program output: -5                 
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 84                 
Correct output: -4                  | Program output: 3                  
Correct output: -100                | Program output: -34                
Correct output: -96                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction 38} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction 61} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq})
Lexicase best program: (in3 integer_fromboolean print_integer exec_k_when_autoconstructing () (exec_s () () (integer_flush integer_dec) boolean_dup_times integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (integer_mod integer_add boolean_yank integer_dec exec_swap (boolean_flush) (exec_eq 38 exec_pop () in4 integer_inc exec_dup_items exec_flush integer_stackdepth) exec_do*times (exec_if (boolean_or exec_yank exec_rot (integer_pop exec_dup (exec_dup () boolean_invert_second_then_and in4 integer_yankdup) boolean_shove boolean_yankdup exec_do*times (integer_lt integer_dup 61 in3 exec_do*range (exec_flush boolean_dup_items exec_noop integer_add integer_lte integer_eq))) () ()) ())) ()))
Lexicase best errors: [0 1 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction 38} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction 61} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq})
Zero cases best program: (in3 integer_fromboolean print_integer exec_k_when_autoconstructing () (exec_s () () (integer_flush integer_dec) boolean_dup_times integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (integer_mod integer_add boolean_yank integer_dec exec_swap (boolean_flush) (exec_eq 38 exec_pop () in4 integer_inc exec_dup_items exec_flush integer_stackdepth) exec_do*times (exec_if (boolean_or exec_yank exec_rot (integer_pop exec_dup (exec_dup () boolean_invert_second_then_and in4 integer_yankdup) boolean_shove boolean_yankdup exec_do*times (integer_lt integer_dup 61 in3 exec_do*range (exec_flush boolean_dup_items exec_noop integer_add integer_lte integer_eq))) () ()) ())) ()))
Zero cases best errors: [0 1 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 2 1000 188 767 767 765 188 955 188)
Population mean number of elite cases: 5.01
Count of perfect (error zero) individuals by case: (188 2 0 188 767 767 765 188 955 188)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq})
Best program: (exec_k_when_autoconstructing (exec_if () (boolean_and in3 integer_add print_integer exec_pop (exec_k () (print_integer)) exec_do*while (boolean_dup_times exec_rot () (boolean_or) (exec_k (exec_dup_times () exec_pop () boolean_eq) ())))) ())
Errors: [0 1 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 17
Size: 33
Percent parens: 0.485
--- Population Statistics ---
Average total errors in population: 5.992
Median total errors in population: 6
Error averages by case: (0.812 0.998 1.0 0.812 0.233 0.233 0.235 0.812 0.045 0.812)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 10.704
Average program size in population (points): 17.177
Average percent parens in population: 0.412
Minimum age in population: 16.1640625
Maximum age in population: 21.607177734375
Average age in population: 19.50708325195312
Median age in population: 19.564208984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 395
Genome diversity (% unique genomes):	 0.312
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 428
Syntactic diversity (% unique Push programs):	 0.297
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.009
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 3551965
--- Timings ---
Current time: 1559584368329 milliseconds
Total Time:          35.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.6 seconds, 74.9%
Fitness Testing:      5.4 seconds, 15.3%
Report:               3.4 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: 41                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 100                
Correct output: 28                  | Program output: 41                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 85                 
Correct output: 16                  | Program output: 55                 
Correct output: 12                  | Program output: 77                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 52                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 44                 
Correct output: 1                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 48                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 83                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 44                 
Correct output: 18                  | Program output: 93                 
Correct output: -98                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: 60                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -15                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: 88                 
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -37                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: 43                 
Correct output: -74                 | Program output: -68                
Correct output: -43                 | Program output: 78                 
Correct output: 31                  | Program output: 47                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: 44                 
Correct output: -80                 | Program output: 8                  
Correct output: -3                  | Program output: 46                 
Correct output: -5                  | Program output: 20                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: 8                  
Correct output: -35                 | Program output: 64                 
Correct output: -99                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 22                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: 75                 
Correct output: -41                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: -52                
Correct output: -42                 | Program output: 58                 
Correct output: -7                  | Program output: 20                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 100                
Correct output: -67                 | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: 35                 
Correct output: -61                 | Program output: 90                 
Correct output: -83                 | Program output: -2                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -13                
Correct output: -50                 | Program output: -5                 
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 84                 
Correct output: -4                  | Program output: 3                  
Correct output: -100                | Program output: -34                
Correct output: -96                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (in3 integer_fromboolean print_integer exec_k_when_autoconstructing () (boolean_flush) integer_flush integer_dec boolean_dup_times integer_empty boolean_invert_first_then_and boolean_stackdepth integer_mod exec_do*count (exec_if () (boolean_and exec_dup_items integer_add print_integer) exec_pop (exec_k () (print_integer)) exec_do*while (boolean_dup_times exec_rot () (boolean_or) (exec_k () (exec_dup_times ())))))
Lexicase best errors: [0 1 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.372
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (in3 integer_fromboolean print_integer exec_k_when_autoconstructing () (boolean_flush) integer_flush integer_dec boolean_dup_times integer_empty boolean_invert_first_then_and boolean_stackdepth integer_mod exec_do*count (exec_if () (boolean_and exec_dup_items integer_add print_integer) exec_pop (exec_k () (print_integer)) exec_do*while (boolean_dup_times exec_rot () (boolean_or) (exec_k () (exec_dup_times ())))))
Zero cases best errors: [0 1 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.372
--- Lexicase Population Statistics ---
Count of elite individuals by case: (893 201 434 259 1 902 434 895 1 434)
Population mean number of elite cases: 4.45
Count of perfect (error zero) individuals by case: (893 201 434 259 1 902 434 895 1 434)
Population mean number of perfect (error zero) cases: 4.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte})
Best program: (in3 integer_fromboolean print_integer integer_shove exec_k_when_autoconstructing (exec_if (integer_gte) ()) ())
Errors: [0 1 0 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 7
Size: 12
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 5.546
Median total errors in population: 6
Error averages by case: (0.107 0.799 0.566 0.741 0.999 0.098 0.566 0.105 0.999 0.566)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.378
Average program size in population (points): 33.241
Average percent parens in population: 0.346
Minimum age in population: 17.375
Maximum age in population: 22.74365234375
Average age in population: 21.11060632324219
Median age in population: 21.2060546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 151
Genome diversity (% unique genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 153
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 3764428
--- Timings ---
Current time: 1559584370235 milliseconds
Total Time:          37.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.1 seconds, 75.2%
Fitness Testing:      5.7 seconds, 15.2%
Report:               3.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 447
Test mean error for best: 0.44700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 41                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 56                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 44                 
Correct output: 1                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 83                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: 43                 
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: 43                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -17                
Correct output: 31                  | Program output: 47                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 16                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: 8                  
Correct output: -35                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 22                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 91                 
Correct output: -67                 | Program output: -4                 
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -4                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -87                
Correct output: -50                 | Program output: -17                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot})
Lexicase best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and boolean_dup exec_while (boolean_swap boolean_dup_times boolean_yankdup integer_inc exec_y () integer_gte exec_empty) exec_shove () exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min integer_rot)))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 32
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot})
Zero cases best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and boolean_dup exec_while (boolean_swap boolean_dup_times boolean_yankdup integer_inc exec_y () integer_gte exec_empty) exec_shove () exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min integer_rot)))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 32
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (332 438 441 438 123 560 438 125 115 897)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (332 438 441 438 123 560 438 125 115 897)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot})
Best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and boolean_dup exec_while (boolean_swap boolean_dup_times boolean_yankdup integer_inc exec_y () integer_gte exec_empty) exec_shove () exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min integer_rot)))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 32
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.093
Median total errors in population: 5
Error averages by case: (0.668 0.562 0.559 0.562 0.877 0.44 0.562 0.875 0.885 0.103)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.672
Average program size in population (points): 42.492
Average percent parens in population: 0.323
Minimum age in population: 19.5396728515625
Maximum age in population: 24.1551513671875
Average age in population: 22.63241253662109
Median age in population: 22.60205078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 151
Genome diversity (% unique genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.521
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 4022792
--- Timings ---
Current time: 1559584372846 milliseconds
Total Time:          39.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        30.2 seconds, 75.7%
Fitness Testing:      6.0 seconds, 14.9%
Report:               3.6 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 447
Test mean error for best: 0.44700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 41                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 56                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 44                 
Correct output: 1                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 83                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: 43                 
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: 43                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -17                
Correct output: 31                  | Program output: 47                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 16                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: 8                  
Correct output: -35                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 22                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 91                 
Correct output: -67                 | Program output: -4                 
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -4                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -87                
Correct output: -50                 | Program output: -17                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot})
Lexicase best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and boolean_dup exec_while (boolean_swap boolean_dup_times boolean_yankdup integer_inc exec_y () integer_gte exec_empty) exec_shove () exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min integer_rot)))
Lexicase best errors: [0 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot})
Zero cases best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and boolean_dup exec_while (boolean_swap boolean_dup_times boolean_yankdup integer_inc exec_y () integer_gte exec_empty) exec_shove () exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min integer_rot)))
Zero cases best errors: [0 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (778 778 3 779 768 798 111 4 4 111)
Population mean number of elite cases: 4.13
Count of perfect (error zero) individuals by case: (778 778 3 779 768 798 111 4 4 111)
Population mean number of perfect (error zero) cases: 4.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot})
Best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and boolean_dup exec_while (boolean_swap boolean_dup_times boolean_yankdup integer_inc exec_y () integer_gte exec_empty) exec_shove () exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min integer_rot)))
Errors: [0 0 1 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 24
Size: 32
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.866
Median total errors in population: 5
Error averages by case: (0.222 0.222 0.997 0.221 0.232 0.202 0.889 0.996 0.996 0.889)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.088
Average program size in population (points): 34.2
Average percent parens in population: 0.262
Minimum age in population: 24.2493896484375
Maximum age in population: 25.292724609375
Average age in population: 24.78298272705078
Median age in population: 24.292724609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 589
Genome diversity (% unique genomes):	 0.299
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 607
Syntactic diversity (% unique Push programs):	 0.28
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 4237317
--- Timings ---
Current time: 1559584375140 milliseconds
Total Time:          42.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.1 seconds, 76.0%
Fitness Testing:      6.2 seconds, 14.7%
Report:               3.8 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 79                 
Correct output: 16                  | Program output: 35                 
Correct output: 12                  | Program output: 77                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 24                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 81                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: 60                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: 51                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -68                
Correct output: -43                 | Program output: 59                 
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 46                 
Correct output: -5                  | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: 75                 
Correct output: -41                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 6                  
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 34                 
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: -52                
Correct output: -61                 | Program output: 76                 
Correct output: -83                 | Program output: -2                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 35                 
Correct output: -88                 | Program output: -39                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 40                 
Correct output: -4                  | Program output: 3                  
Correct output: -100                | Program output: -78                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush})
Lexicase best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and boolean_dup integer_fromboolean exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_flush)))
Lexicase best errors: [1 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 19
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush})
Zero cases best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and boolean_dup integer_fromboolean exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_flush)))
Zero cases best errors: [1 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 19
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (170 506 355 381 360 245 688 381 601 335)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (170 506 355 381 360 245 688 381 601 335)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot})
Best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and boolean_dup exec_while (boolean_invert_second_then_and boolean_dup exec_while (boolean_swap boolean_dup_times boolean_yankdup integer_inc exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (exec_empty integer_min integer_rot)))
Errors: [1 0 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.978
Median total errors in population: 5
Error averages by case: (0.83 0.494 0.645 0.619 0.64 0.755 0.312 0.619 0.399 0.665)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.199
Average program size in population (points): 34.883
Average percent parens in population: 0.260
Minimum age in population: 25.2493896484375
Maximum age in population: 27.292724609375
Average age in population: 26.36452676391602
Median age in population: 26.292724609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 227
Genome diversity (% unique genomes):	 0.384
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 242
Syntactic diversity (% unique Push programs):	 0.358
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 4513083
--- Timings ---
Current time: 1559584377385 milliseconds
Total Time:          44.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.8 seconds, 76.1%
Fitness Testing:      6.5 seconds, 14.7%
Report:               4.0 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 459
Test mean error for best: 0.45900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 65                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 56                 
Correct output: 37                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 72                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 59                 
Correct output: 3                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 79                 
Correct output: 74                  | Program output: 81                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -42                
Correct output: -92                 | Program output: 90                 
Correct output: -86                 | Program output: -68                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: 51                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: 59                 
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 80                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: 19                 
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 3                  
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 96                 
Correct output: -78                 | Program output: 43                 
Correct output: -19                 | Program output: 34                 
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 96                 
Correct output: -79                 | Program output: -52                
Correct output: -61                 | Program output: 76                 
Correct output: -83                 | Program output: -4                 
Correct output: 21                  | Program output: 79                 
Correct output: 19                  | Program output: 35                 
Correct output: -88                 | Program output: -39                
Correct output: -83                 | Program output: -80                
Correct output: -52                 | Program output: 54                 
Correct output: -86                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 81                 
Correct output: -33                 | Program output: 73                 
Correct output: -100                | Program output: -54                
Correct output: -80                 | Program output: -41                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Lexicase best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_while (boolean_swap boolean_dup_times integer_inc integer_inc exec_y () integer_gte exec_empty) exec_shove () exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (exec_if (boolean_or exec_yank exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)) ())))
Lexicase best errors: [1 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Zero cases best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_while (boolean_swap boolean_dup_times integer_inc integer_inc exec_y () integer_gte exec_empty) exec_shove () exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (exec_if (boolean_or exec_yank exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)) ())))
Zero cases best errors: [1 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (114 597 901 666 4 666 484 485 561 485)
Population mean number of elite cases: 4.96
Count of perfect (error zero) individuals by case: (114 597 901 666 4 666 484 485 561 485)
Population mean number of perfect (error zero) cases: 4.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_while (boolean_swap boolean_dup_times integer_inc integer_inc exec_y () integer_gte exec_empty) exec_shove () exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (exec_if (boolean_or exec_yank exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)) ())))
Errors: [1 0 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 46
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 5.037
Median total errors in population: 4
Error averages by case: (0.886 0.403 0.099 0.334 0.996 0.334 0.516 0.515 0.439 0.515)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.601
Average program size in population (points): 30.913
Average percent parens in population: 0.264
Minimum age in population: 26.27105712890625
Maximum age in population: 29.28189086914062
Average age in population: 27.94316725158691
Median age in population: 28.27105712890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 271
Genome diversity (% unique genomes):	 0.32
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 274
Syntactic diversity (% unique Push programs):	 0.302
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 4693666
--- Timings ---
Current time: 1559584379673 milliseconds
Total Time:          46.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.7 seconds, 76.4%
Fitness Testing:      6.7 seconds, 14.4%
Report:               4.2 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 560
Test mean error for best: 0.56000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 46                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 65                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 54                 
Correct output: 4                   | Program output: 79                 
Correct output: 16                  | Program output: 35                 
Correct output: 12                  | Program output: 82                 
Correct output: 37                  | Program output: 63                 
Correct output: 11                  | Program output: 24                 
Correct output: 33                  | Program output: 88                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 79                 
Correct output: 74                  | Program output: 81                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 22                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -68                
Correct output: -85                 | Program output: -20                
Correct output: -68                 | Program output: -59                
Correct output: -61                 | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: 43                 
Correct output: -92                 | Program output: 2                  
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: 48                 
Correct output: -43                 | Program output: -17                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 16                 
Correct output: -5                  | Program output: 86                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -6                 
Correct output: -82                 | Program output: 19                 
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 3                  
Correct output: -52                 | Program output: 85                 
Correct output: -41                 | Program output: 100                
Correct output: -95                 | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 6                  
Correct output: -10                 | Program output: 96                 
Correct output: -78                 | Program output: 43                 
Correct output: -19                 | Program output: 34                 
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 96                 
Correct output: -79                 | Program output: -52                
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -4                 
Correct output: 21                  | Program output: 79                 
Correct output: 19                  | Program output: 35                 
Correct output: -88                 | Program output: -39                
Correct output: -83                 | Program output: -32                
Correct output: -52                 | Program output: 54                 
Correct output: -86                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 81                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: -54                
Correct output: -80                 | Program output: 18                 
Correct output: 30                  | Program output: 40                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Lexicase best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (print_integer integer_stackdepth) (exec_do*while (exec_if (boolean_or exec_yank exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)) ())))
Lexicase best errors: [0 1 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Zero cases best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (print_integer integer_stackdepth) (exec_do*while (exec_if (boolean_or exec_yank exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)) ())))
Zero cases best errors: [0 1 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (94 174 177 409 556 391 424 717 188 404)
Population mean number of elite cases: 3.53
Count of perfect (error zero) individuals by case: (94 174 177 409 556 391 424 717 188 404)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (print_integer integer_stackdepth) (exec_do*while (exec_if (boolean_or exec_yank exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)) ())))
Errors: [0 1 1 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 21
Size: 32
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 6.466
Median total errors in population: 6
Error averages by case: (0.906 0.826 0.823 0.591 0.444 0.609 0.576 0.283 0.812 0.596)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.033
Average program size in population (points): 41.872
Average percent parens in population: 0.278
Minimum age in population: 27.292724609375
Maximum age in population: 31.27376556396484
Average age in population: 30.17829441833496
Median age in population: 30.27105712890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 239
Genome diversity (% unique genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 245
Syntactic diversity (% unique Push programs):	 0.427
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 4931014
--- Timings ---
Current time: 1559584381947 milliseconds
Total Time:          49.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.5 seconds, 76.5%
Fitness Testing:      7.0 seconds, 14.3%
Report:               4.4 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 16                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 56                 
Correct output: 37                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 72                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 8                  
Correct output: 3                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 79                 
Correct output: 74                  | Program output: 81                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 22                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -68                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: 43                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -17                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 16                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: 19                 
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 3                  
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 96                 
Correct output: -78                 | Program output: 43                 
Correct output: -19                 | Program output: 34                 
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 96                 
Correct output: -79                 | Program output: -52                
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -4                 
Correct output: 21                  | Program output: 79                 
Correct output: 19                  | Program output: 35                 
Correct output: -88                 | Program output: -39                
Correct output: -83                 | Program output: -80                
Correct output: -52                 | Program output: 54                 
Correct output: -86                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 81                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: -54                
Correct output: -80                 | Program output: -41                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Lexicase best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (print_integer integer_stackdepth) (exec_do*while (exec_if (boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)) ())))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 32
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Zero cases best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (print_integer integer_stackdepth) (exec_do*while (exec_if (boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)) ())))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 32
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (287 343 423 470 699 241 241 409 454 420)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (287 343 423 470 699 241 241 409 454 420)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot})
Best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_while (boolean_swap boolean_dup_times integer_inc integer_inc exec_y () integer_gte exec_empty) in3 exec_rot () (print_integer integer_stackdepth) (integer_gte in4 integer_min integer_rot))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 22
Size: 28
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.013
Median total errors in population: 7
Error averages by case: (0.713 0.657 0.577 0.53 0.301 0.759 0.759 0.591 0.546 0.58)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.621
Average program size in population (points): 40.325
Average percent parens in population: 0.290
Minimum age in population: 29.28189086914062
Maximum age in population: 33.27241134643555
Average age in population: 32.10875738143921
Median age in population: 32.27105712890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 194
Genome diversity (% unique genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 197
Syntactic diversity (% unique Push programs):	 0.432
Total error diversity:				 0.01
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 5164972
--- Timings ---
Current time: 1559584384201 milliseconds
Total Time:          51.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.3 seconds, 76.6%
Fitness Testing:      7.3 seconds, 14.2%
Report:               4.6 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 447
Test mean error for best: 0.44700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 41                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 56                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 44                 
Correct output: 1                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 83                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: 43                 
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: 43                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -17                
Correct output: 31                  | Program output: 47                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 16                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: 8                  
Correct output: -35                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 22                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 91                 
Correct output: -67                 | Program output: -4                 
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -4                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -87                
Correct output: -50                 | Program output: -17                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Lexicase best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (print_integer integer_stackdepth) (exec_do*while (exec_if (boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)) ())))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 32
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Zero cases best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (print_integer integer_stackdepth) (exec_do*while (exec_if (boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)) ())))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 32
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (879 681 696 695 253 307 254 821 696 657)
Population mean number of elite cases: 5.94
Count of perfect (error zero) individuals by case: (879 681 696 695 253 307 254 821 696 657)
Population mean number of perfect (error zero) cases: 5.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot})
Best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and boolean_dup exec_while (boolean_swap boolean_dup_times boolean_yankdup integer_inc exec_y () integer_gte exec_empty) exec_shove () exec_noop in3 exec_rot () (print_integer integer_stackdepth) (integer_shove in4 integer_min integer_rot))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 24
Size: 31
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 4.061
Median total errors in population: 3
Error averages by case: (0.121 0.319 0.304 0.305 0.747 0.693 0.746 0.179 0.304 0.343)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.531
Average program size in population (points): 30.951
Average percent parens in population: 0.269
Minimum age in population: 30.28189086914062
Maximum age in population: 35.20991134643555
Average age in population: 33.68021379852295
Median age in population: 33.84032821655273
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 234
Genome diversity (% unique genomes):	 0.385
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 241
Syntactic diversity (% unique Push programs):	 0.361
Total error diversity:				 0.009
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 5363223
--- Timings ---
Current time: 1559584386415 milliseconds
Total Time:          53.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.1 seconds, 76.8%
Fitness Testing:      7.5 seconds, 14.1%
Report:               4.8 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 16                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 79                 
Correct output: 74                  | Program output: 74                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -68                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -62                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 3                  
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 58                 
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -83                
Correct output: 21                  | Program output: 79                 
Correct output: 19                  | Program output: 19                 
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: -80                
Correct output: -52                 | Program output: 15                 
Correct output: -86                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 56                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: -54                
Correct output: -80                 | Program output: -41                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Lexicase best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (print_integer integer_stackdepth) (exec_do*while (exec_if (boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)) ())))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 32
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Zero cases best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (print_integer integer_stackdepth) (exec_do*while (exec_if (boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)) ())))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 32
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (891 883 506 881 838 878 471 722 414 779)
Population mean number of elite cases: 7.26
Count of perfect (error zero) individuals by case: (891 883 506 881 838 878 471 722 414 779)
Population mean number of perfect (error zero) cases: 7.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Best program: (in1 boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (print_integer integer_stackdepth) (exec_do*while (exec_if (boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)) ())))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 21
Size: 32
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 2.737
Median total errors in population: 2
Error averages by case: (0.109 0.117 0.494 0.119 0.162 0.122 0.529 0.278 0.586 0.221)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.988
Average program size in population (points): 32.608
Average percent parens in population: 0.294
Minimum age in population: 31.28189086914062
Maximum age in population: 37.14741134643555
Average age in population: 35.15398291301727
Median age in population: 35.18170833587646
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 277
Genome diversity (% unique genomes):	 0.4
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 286
Syntactic diversity (% unique Push programs):	 0.375
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 5588018
--- Timings ---
Current time: 1559584388707 milliseconds
Total Time:          55.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.9 seconds, 77.0%
Fitness Testing:      7.8 seconds, 14.0%
Report:               4.9 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 219
Test mean error for best: 0.21900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 50                 
Correct output: 28                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 74                 
Correct output: 8                   | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 31                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: -2                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: -55                
Correct output: -35                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 22                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -67                 | Program output: -4                 
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -83                
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 19                 
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -87                
Correct output: -50                 | Program output: -18                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Lexicase best program: (exec_s_when_autoconstructing (boolean_eq boolean_yank) (integer_div) (boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times boolean_yank) integer_div) (boolean_invert_second_then_and boolean_dup exec_while (boolean_swap boolean_dup_times boolean_yankdup exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2))))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 62
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Zero cases best program: (exec_s_when_autoconstructing (boolean_eq boolean_yank) (integer_div) (boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times boolean_yank) integer_div) (boolean_invert_second_then_and boolean_dup exec_while (boolean_swap boolean_dup_times boolean_yankdup exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2))))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 62
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (662 661 662 525 526 431 436 874 843 431)
Population mean number of elite cases: 6.05
Count of perfect (error zero) individuals by case: (662 661 662 525 526 431 436 874 843 431)
Population mean number of perfect (error zero) cases: 6.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2})
Best program: (boolean_dup_times boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 34
Size: 50
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 3.949
Median total errors in population: 3
Error averages by case: (0.338 0.339 0.338 0.475 0.474 0.569 0.564 0.126 0.157 0.569)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.738
Average program size in population (points): 40.048
Average percent parens in population: 0.312
Minimum age in population: 34.96397399902344
Maximum age in population: 38.75712490081787
Average age in population: 36.80478081178665
Median age in population: 36.93238544464111
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 251
Genome diversity (% unique genomes):	 0.39
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 262
Syntactic diversity (% unique Push programs):	 0.374
Total error diversity:				 0.01
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 5846497
--- Timings ---
Current time: 1559584391087 milliseconds
Total Time:          58.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.8 seconds, 77.1%
Fitness Testing:      8.1 seconds, 13.9%
Report:               5.1 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 23
Successful program: (boolean_dup_times boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 50


Auto-simplifying with starting size: 50
step: 0
program: (boolean_dup_times boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 500
program: (boolean_dup_times boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 1000
program: (boolean_dup_times boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 1500
program: (boolean_dup_times boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 2000
program: (boolean_dup_times boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 2500
program: (boolean_dup_times boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 3000
program: (boolean_dup_times boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 3500
program: (boolean_dup_times boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 4000
program: (boolean_dup_times boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 4500
program: (boolean_dup_times boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 5000
program: (boolean_dup_times boolean_eq boolean_yank integer_div boolean_invert_second_then_and in2 exec_rot () (boolean_dup exec_while (boolean_swap boolean_dup_times exec_dup_times (exec_y () integer_gte exec_empty) exec_shove ()) exec_noop in3 exec_rot () (print_integer integer_stackdepth) (exec_do*while (in4 integer_min boolean_or integer_min exec_rot () (integer_pop exec_dup () boolean_not) (boolean_invert_second_then_and in4 integer_min in2)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 219
Test mean error for best: 0.21900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 50                 
Correct output: 28                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 74                 
Correct output: 8                   | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 31                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: -2                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: -55                
Correct output: -35                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 22                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -67                 | Program output: -4                 
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -83                
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 19                 
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -87                
Correct output: -50                 | Program output: -18                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -88                
;;******************************
