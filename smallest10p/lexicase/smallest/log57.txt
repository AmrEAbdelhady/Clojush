Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[39 39 16 39] 16] [[58 -13 58 58] -13] [[-6 -22 -22 -22] -22] [[51 44 51 51] 44] [[-53 -15 -53 -53] -53] [[-62 -77 -77 -77] -77] [[23 23 23 67] 23] [[91 14 91 91] 14] [[45 45 45 27] 27] [[80 80 80 -59] -59] [(46 46 46 46) 46] [(-50 -50 -50 -50) -50] [(25 25 25 25) 25] [(82 82 82 82) 82] [(37 37 37 37) 37] [(59 83 86 34) 34] [(78 13 38 56) 13] [(49 53 89 7) 7] [(93 40 18 67) 18] [(87 74 35 65) 35] [(66 79 30 66) 30] [(7 32 78 20) 7] [(50 62 57 89) 50] [(62 77 8 76) 8] [(19 64 14 10) 10] [(61 34 87 2) 2] [(95 22 11 2) 2] [(8 4 1 6) 1] [(61 10 5 55) 5] [(64 71 52 23) 23] [(87 25 28 67) 25] [(7 33 73 30) 7] [(96 69 88 30) 30] [(90 53 67 73) 53] [(8 46 15 9) 8] [(85 71 -64 -69) -69] [(-88 46 71 -29) -88] [(-21 -80 75 41) -80] [(-29 -36 -99 -82) -99] [(-81 69 56 45) -81] [(-14 -93 -73 90) -93] [(47 84 -84 -23) -84] [(31 98 73 -38) -38] [(69 -33 -77 6) -77] [(69 66 -71 71) -71] [(-61 -87 8 -23) -87] [(-31 -15 47 69) -31] [(-19 -29 95 20) -29] [(-66 -60 -35 15) -66] [(67 75 -10 45) -10] [(-32 -57 -4 26) -57] [(66 -54 -9 81) -54] [(54 -35 -8 1) -35] [(-29 45 -100 -86) -100] [(-11 -78 4 -10) -78] [(89 -40 -93 -21) -93] [(4 -58 -47 -51) -58] [(84 -32 66 80) -32] [(85 14 79 45) 14] [(7 79 -28 77) -28] [(-70 -49 -81 5) -81] [(-86 25 21 -31) -86] [(25 -8 -55 67) -55] [(-4 72 -91 -40) -91] [(29 62 6 6) 6] [(-79 -46 49 -82) -82] [(92 -15 -76 44) -76] [(52 -86 -59 79) -86] [(-58 -17 -100 -27) -100] [(32 -57 28 -100) -100] [(-16 -58 31 -97) -97] [(52 56 -68 87) -68] [(-66 -10 65 80) -66] [(54 -71 -27 49) -71] [(-25 38 86 24) -25] [(-78 -2 -94 -79) -94] [(-78 -5 -52 -53) -78] [(-57 12 74 -33) -57] [(-7 99 97 -94) -94] [(34 13 -87 -13) -87] [(64 91 -78 -19) -78] [(-8 -3 -64 21) -64] [(-78 50 -81 -48) -81] [(40 43 -52 21) -52] [(-11 96 -30 -82) -82] [(-81 -57 -75 -17) -81] [(-2 77 35 60) -2] [(3 97 13 95) 3] [(-93 55 -53 -63) -93] [(-47 61 69 -81) -81] [(100 49 -65 50) -65] [(57 -47 69 16) -47] [(-40 -33 38 61) -40] [(-75 53 49 89) -75] [(86 -27 68 -90) -90])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[39 39 16 39] 16]
Train Case:   6 | Input/Output: [[58 -13 58 58] -13]
Train Case:   7 | Input/Output: [[-6 -22 -22 -22] -22]
Train Case:   8 | Input/Output: [[51 44 51 51] 44]
Train Case:   9 | Input/Output: [[-53 -15 -53 -53] -53]
Train Case:  10 | Input/Output: [[-62 -77 -77 -77] -77]
Train Case:  11 | Input/Output: [[23 23 23 67] 23]
Train Case:  12 | Input/Output: [[91 14 91 91] 14]
Train Case:  13 | Input/Output: [[45 45 45 27] 27]
Train Case:  14 | Input/Output: [[80 80 80 -59] -59]
Train Case:  15 | Input/Output: [(46 46 46 46) 46]
Train Case:  16 | Input/Output: [(-50 -50 -50 -50) -50]
Train Case:  17 | Input/Output: [(25 25 25 25) 25]
Train Case:  18 | Input/Output: [(82 82 82 82) 82]
Train Case:  19 | Input/Output: [(37 37 37 37) 37]
Train Case:  20 | Input/Output: [(59 83 86 34) 34]
Train Case:  21 | Input/Output: [(78 13 38 56) 13]
Train Case:  22 | Input/Output: [(49 53 89 7) 7]
Train Case:  23 | Input/Output: [(93 40 18 67) 18]
Train Case:  24 | Input/Output: [(87 74 35 65) 35]
Train Case:  25 | Input/Output: [(66 79 30 66) 30]
Train Case:  26 | Input/Output: [(7 32 78 20) 7]
Train Case:  27 | Input/Output: [(50 62 57 89) 50]
Train Case:  28 | Input/Output: [(62 77 8 76) 8]
Train Case:  29 | Input/Output: [(19 64 14 10) 10]
Train Case:  30 | Input/Output: [(61 34 87 2) 2]
Train Case:  31 | Input/Output: [(95 22 11 2) 2]
Train Case:  32 | Input/Output: [(8 4 1 6) 1]
Train Case:  33 | Input/Output: [(61 10 5 55) 5]
Train Case:  34 | Input/Output: [(64 71 52 23) 23]
Train Case:  35 | Input/Output: [(87 25 28 67) 25]
Train Case:  36 | Input/Output: [(7 33 73 30) 7]
Train Case:  37 | Input/Output: [(96 69 88 30) 30]
Train Case:  38 | Input/Output: [(90 53 67 73) 53]
Train Case:  39 | Input/Output: [(8 46 15 9) 8]
Train Case:  40 | Input/Output: [(85 71 -64 -69) -69]
Train Case:  41 | Input/Output: [(-88 46 71 -29) -88]
Train Case:  42 | Input/Output: [(-21 -80 75 41) -80]
Train Case:  43 | Input/Output: [(-29 -36 -99 -82) -99]
Train Case:  44 | Input/Output: [(-81 69 56 45) -81]
Train Case:  45 | Input/Output: [(-14 -93 -73 90) -93]
Train Case:  46 | Input/Output: [(47 84 -84 -23) -84]
Train Case:  47 | Input/Output: [(31 98 73 -38) -38]
Train Case:  48 | Input/Output: [(69 -33 -77 6) -77]
Train Case:  49 | Input/Output: [(69 66 -71 71) -71]
Train Case:  50 | Input/Output: [(-61 -87 8 -23) -87]
Train Case:  51 | Input/Output: [(-31 -15 47 69) -31]
Train Case:  52 | Input/Output: [(-19 -29 95 20) -29]
Train Case:  53 | Input/Output: [(-66 -60 -35 15) -66]
Train Case:  54 | Input/Output: [(67 75 -10 45) -10]
Train Case:  55 | Input/Output: [(-32 -57 -4 26) -57]
Train Case:  56 | Input/Output: [(66 -54 -9 81) -54]
Train Case:  57 | Input/Output: [(54 -35 -8 1) -35]
Train Case:  58 | Input/Output: [(-29 45 -100 -86) -100]
Train Case:  59 | Input/Output: [(-11 -78 4 -10) -78]
Train Case:  60 | Input/Output: [(89 -40 -93 -21) -93]
Train Case:  61 | Input/Output: [(4 -58 -47 -51) -58]
Train Case:  62 | Input/Output: [(84 -32 66 80) -32]
Train Case:  63 | Input/Output: [(85 14 79 45) 14]
Train Case:  64 | Input/Output: [(7 79 -28 77) -28]
Train Case:  65 | Input/Output: [(-70 -49 -81 5) -81]
Train Case:  66 | Input/Output: [(-86 25 21 -31) -86]
Train Case:  67 | Input/Output: [(25 -8 -55 67) -55]
Train Case:  68 | Input/Output: [(-4 72 -91 -40) -91]
Train Case:  69 | Input/Output: [(29 62 6 6) 6]
Train Case:  70 | Input/Output: [(-79 -46 49 -82) -82]
Train Case:  71 | Input/Output: [(92 -15 -76 44) -76]
Train Case:  72 | Input/Output: [(52 -86 -59 79) -86]
Train Case:  73 | Input/Output: [(-58 -17 -100 -27) -100]
Train Case:  74 | Input/Output: [(32 -57 28 -100) -100]
Train Case:  75 | Input/Output: [(-16 -58 31 -97) -97]
Train Case:  76 | Input/Output: [(52 56 -68 87) -68]
Train Case:  77 | Input/Output: [(-66 -10 65 80) -66]
Train Case:  78 | Input/Output: [(54 -71 -27 49) -71]
Train Case:  79 | Input/Output: [(-25 38 86 24) -25]
Train Case:  80 | Input/Output: [(-78 -2 -94 -79) -94]
Train Case:  81 | Input/Output: [(-78 -5 -52 -53) -78]
Train Case:  82 | Input/Output: [(-57 12 74 -33) -57]
Train Case:  83 | Input/Output: [(-7 99 97 -94) -94]
Train Case:  84 | Input/Output: [(34 13 -87 -13) -87]
Train Case:  85 | Input/Output: [(64 91 -78 -19) -78]
Train Case:  86 | Input/Output: [(-8 -3 -64 21) -64]
Train Case:  87 | Input/Output: [(-78 50 -81 -48) -81]
Train Case:  88 | Input/Output: [(40 43 -52 21) -52]
Train Case:  89 | Input/Output: [(-11 96 -30 -82) -82]
Train Case:  90 | Input/Output: [(-81 -57 -75 -17) -81]
Train Case:  91 | Input/Output: [(-2 77 35 60) -2]
Train Case:  92 | Input/Output: [(3 97 13 95) 3]
Train Case:  93 | Input/Output: [(-93 55 -53 -63) -93]
Train Case:  94 | Input/Output: [(-47 61 69 -81) -81]
Train Case:  95 | Input/Output: [(100 49 -65 50) -65]
Train Case:  96 | Input/Output: [(57 -47 69 16) -47]
Train Case:  97 | Input/Output: [(-40 -33 38 61) -40]
Train Case:  98 | Input/Output: [(-75 53 49 89) -75]
Train Case:  99 | Input/Output: [(86 -27 68 -90) -90]
Test Case:   0 | Input/Output: [[90 -17 -17 -17] -17]
Test Case:   1 | Input/Output: [[33 33 33 -36] -36]
Test Case:   2 | Input/Output: [[36 49 49 49] 36]
Test Case:   3 | Input/Output: [[95 95 57 95] 57]
Test Case:   4 | Input/Output: [[-9 -9 -62 -9] -62]
Test Case:   5 | Input/Output: [[93 -15 -15 -15] -15]
Test Case:   6 | Input/Output: [[-8 -14 -8 -8] -14]
Test Case:   7 | Input/Output: [[89 89 -12 89] -12]
Test Case:   8 | Input/Output: [[82 82 -87 82] -87]
Test Case:   9 | Input/Output: [[-45 -45 84 -45] -45]
Test Case:  10 | Input/Output: [[-88 -66 -88 -88] -88]
Test Case:  11 | Input/Output: [[91 91 8 91] 8]
Test Case:  12 | Input/Output: [[54 39 39 39] 39]
Test Case:  13 | Input/Output: [[53 52 53 53] 52]
Test Case:  14 | Input/Output: [[-83 -83 -83 -68] -83]
Test Case:  15 | Input/Output: [[-46 -46 -46 -65] -65]
Test Case:  16 | Input/Output: [[23 96 23 23] 23]
Test Case:  17 | Input/Output: [[96 96 96 68] 68]
Test Case:  18 | Input/Output: [[17 -14 -14 -14] -14]
Test Case:  19 | Input/Output: [[48 48 12 48] 12]
Test Case:  20 | Input/Output: [[-33 -39 -33 -33] -39]
Test Case:  21 | Input/Output: [[-67 -20 -20 -20] -67]
Test Case:  22 | Input/Output: [[28 61 61 61] 28]
Test Case:  23 | Input/Output: [[83 -24 83 83] -24]
Test Case:  24 | Input/Output: [[-86 -5 -86 -86] -86]
Test Case:  25 | Input/Output: [[82 25 25 25] 25]
Test Case:  26 | Input/Output: [[41 41 -61 41] -61]
Test Case:  27 | Input/Output: [[-93 -93 -93 -48] -93]
Test Case:  28 | Input/Output: [[-32 75 -32 -32] -32]
Test Case:  29 | Input/Output: [[-97 -97 -43 -97] -97]
Test Case:  30 | Input/Output: [[75 75 75 77] 75]
Test Case:  31 | Input/Output: [[-87 -87 51 -87] -87]
Test Case:  32 | Input/Output: [[-7 90 90 90] -7]
Test Case:  33 | Input/Output: [[-29 -29 -29 59] -29]
Test Case:  34 | Input/Output: [[41 -4 -4 -4] -4]
Test Case:  35 | Input/Output: [[-42 -42 -42 27] -42]
Test Case:  36 | Input/Output: [[-32 -72 -72 -72] -72]
Test Case:  37 | Input/Output: [[12 12 12 -80] -80]
Test Case:  38 | Input/Output: [[-27 -27 86 -27] -27]
Test Case:  39 | Input/Output: [[-59 51 51 51] -59]
Test Case:  40 | Input/Output: [[-45 -45 -8 -45] -45]
Test Case:  41 | Input/Output: [[-25 -45 -25 -25] -45]
Test Case:  42 | Input/Output: [[34 -80 -80 -80] -80]
Test Case:  43 | Input/Output: [[23 46 46 46] 23]
Test Case:  44 | Input/Output: [[72 99 99 99] 72]
Test Case:  45 | Input/Output: [[-2 76 -2 -2] -2]
Test Case:  46 | Input/Output: [[-45 -74 -45 -45] -74]
Test Case:  47 | Input/Output: [[66 66 66 -77] -77]
Test Case:  48 | Input/Output: [[91 91 -8 91] -8]
Test Case:  49 | Input/Output: [[-55 -55 -2 -55] -55]
Test Case:  50 | Input/Output: [[-5 -5 -5 28] -5]
Test Case:  51 | Input/Output: [[-82 -82 -82 -68] -82]
Test Case:  52 | Input/Output: [[74 74 74 -21] -21]
Test Case:  53 | Input/Output: [[98 3 3 3] 3]
Test Case:  54 | Input/Output: [[37 -55 -55 -55] -55]
Test Case:  55 | Input/Output: [[50 85 85 85] 50]
Test Case:  56 | Input/Output: [[52 -62 52 52] -62]
Test Case:  57 | Input/Output: [[50 10 10 10] 10]
Test Case:  58 | Input/Output: [[50 24 24 24] 24]
Test Case:  59 | Input/Output: [[40 22 40 40] 22]
Test Case:  60 | Input/Output: [[-14 -43 -14 -14] -43]
Test Case:  61 | Input/Output: [[86 86 -79 86] -79]
Test Case:  62 | Input/Output: [[7 7 73 7] 7]
Test Case:  63 | Input/Output: [[-16 -16 -87 -16] -87]
Test Case:  64 | Input/Output: [[-47 46 46 46] -47]
Test Case:  65 | Input/Output: [[-50 -50 18 -50] -50]
Test Case:  66 | Input/Output: [[-42 49 49 49] -42]
Test Case:  67 | Input/Output: [[70 70 70 88] 70]
Test Case:  68 | Input/Output: [[68 68 4 68] 4]
Test Case:  69 | Input/Output: [[-23 83 -23 -23] -23]
Test Case:  70 | Input/Output: [[79 -61 79 79] -61]
Test Case:  71 | Input/Output: [[47 -69 -69 -69] -69]
Test Case:  72 | Input/Output: [[40 -30 40 40] -30]
Test Case:  73 | Input/Output: [[-99 -99 -99 -57] -99]
Test Case:  74 | Input/Output: [[41 41 71 41] 41]
Test Case:  75 | Input/Output: [[54 -11 54 54] -11]
Test Case:  76 | Input/Output: [[53 53 53 71] 53]
Test Case:  77 | Input/Output: [[31 31 31 -84] -84]
Test Case:  78 | Input/Output: [[-57 -57 64 -57] -57]
Test Case:  79 | Input/Output: [[69 1 1 1] 1]
Test Case:  80 | Input/Output: [[13 13 -64 13] -64]
Test Case:  81 | Input/Output: [[80 80 49 80] 49]
Test Case:  82 | Input/Output: [[-65 -65 -63 -65] -65]
Test Case:  83 | Input/Output: [[11 -13 -13 -13] -13]
Test Case:  84 | Input/Output: [[57 61 57 57] 57]
Test Case:  85 | Input/Output: [[19 19 19 1] 1]
Test Case:  86 | Input/Output: [[-81 98 -81 -81] -81]
Test Case:  87 | Input/Output: [[22 22 22 -14] -14]
Test Case:  88 | Input/Output: [[88 33 33 33] 33]
Test Case:  89 | Input/Output: [[79 79 -38 79] -38]
Test Case:  90 | Input/Output: [[21 21 31 21] 21]
Test Case:  91 | Input/Output: [[0 22 0 0] 0]
Test Case:  92 | Input/Output: [[-95 -95 -95 -17] -95]
Test Case:  93 | Input/Output: [[-95 -94 -94 -94] -95]
Test Case:  94 | Input/Output: [[-3 -34 -34 -34] -34]
Test Case:  95 | Input/Output: [[-53 11 -53 -53] -53]
Test Case:  96 | Input/Output: [[60 60 43 60] 43]
Test Case:  97 | Input/Output: [[-18 -18 46 -18] -18]
Test Case:  98 | Input/Output: [[-13 -13 -97 -13] -97]
Test Case:  99 | Input/Output: [[53 99 53 53] 53]
Test Case: 100 | Input/Output: [(2 2 2 2) 2]
Test Case: 101 | Input/Output: [(91 91 91 91) 91]
Test Case: 102 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 103 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 104 | Input/Output: [(10 10 10 10) 10]
Test Case: 105 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 106 | Input/Output: [(1 1 1 1) 1]
Test Case: 107 | Input/Output: [(7 7 7 7) 7]
Test Case: 108 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 109 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 110 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 111 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 112 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 113 | Input/Output: [(61 61 61 61) 61]
Test Case: 114 | Input/Output: [(5 5 5 5) 5]
Test Case: 115 | Input/Output: [(16 16 16 16) 16]
Test Case: 116 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 117 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 118 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 119 | Input/Output: [(22 22 22 22) 22]
Test Case: 120 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 121 | Input/Output: [(75 75 75 75) 75]
Test Case: 122 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 123 | Input/Output: [(89 89 89 89) 89]
Test Case: 124 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 125 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 126 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 127 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 128 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 129 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 130 | Input/Output: [(53 53 53 53) 53]
Test Case: 131 | Input/Output: [(94 94 94 94) 94]
Test Case: 132 | Input/Output: [(74 74 74 74) 74]
Test Case: 133 | Input/Output: [(12 12 12 12) 12]
Test Case: 134 | Input/Output: [(95 95 95 95) 95]
Test Case: 135 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 136 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 137 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 138 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 139 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 140 | Input/Output: [(72 72 72 72) 72]
Test Case: 141 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 142 | Input/Output: [(80 80 80 80) 80]
Test Case: 143 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 144 | Input/Output: [(93 93 93 93) 93]
Test Case: 145 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 146 | Input/Output: [(24 24 24 24) 24]
Test Case: 147 | Input/Output: [(90 90 90 90) 90]
Test Case: 148 | Input/Output: [(20 20 20 20) 20]
Test Case: 149 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 150 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 151 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 152 | Input/Output: [(21 21 21 21) 21]
Test Case: 153 | Input/Output: [(22 22 22 22) 22]
Test Case: 154 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 155 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 156 | Input/Output: [(42 42 42 42) 42]
Test Case: 157 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 158 | Input/Output: [(15 15 15 15) 15]
Test Case: 159 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 160 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 161 | Input/Output: [(95 95 95 95) 95]
Test Case: 162 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 163 | Input/Output: [(5 5 5 5) 5]
Test Case: 164 | Input/Output: [(49 49 49 49) 49]
Test Case: 165 | Input/Output: [(8 8 8 8) 8]
Test Case: 166 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 167 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 168 | Input/Output: [(75 75 75 75) 75]
Test Case: 169 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 170 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 171 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 172 | Input/Output: [(55 55 55 55) 55]
Test Case: 173 | Input/Output: [(17 17 17 17) 17]
Test Case: 174 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 175 | Input/Output: [(76 76 76 76) 76]
Test Case: 176 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 177 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 178 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 179 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 180 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 181 | Input/Output: [(44 44 44 44) 44]
Test Case: 182 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 183 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 184 | Input/Output: [(98 98 98 98) 98]
Test Case: 185 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 186 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 187 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 188 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 189 | Input/Output: [(69 69 69 69) 69]
Test Case: 190 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 191 | Input/Output: [(61 61 61 61) 61]
Test Case: 192 | Input/Output: [(22 22 22 22) 22]
Test Case: 193 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 194 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 195 | Input/Output: [(46 46 46 46) 46]
Test Case: 196 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 197 | Input/Output: [(69 69 69 69) 69]
Test Case: 198 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 199 | Input/Output: [(96 96 96 96) 96]
Test Case: 200 | Input/Output: [(35 54 80 35) 35]
Test Case: 201 | Input/Output: [(10 13 90 74) 10]
Test Case: 202 | Input/Output: [(4 53 2 16) 2]
Test Case: 203 | Input/Output: [(66 57 86 63) 57]
Test Case: 204 | Input/Output: [(65 3 21 24) 3]
Test Case: 205 | Input/Output: [(67 90 76 91) 67]
Test Case: 206 | Input/Output: [(56 23 41 90) 23]
Test Case: 207 | Input/Output: [(6 98 29 99) 6]
Test Case: 208 | Input/Output: [(91 72 15 55) 15]
Test Case: 209 | Input/Output: [(84 9 46 19) 9]
Test Case: 210 | Input/Output: [(11 42 50 22) 11]
Test Case: 211 | Input/Output: [(64 32 68 72) 32]
Test Case: 212 | Input/Output: [(66 44 58 7) 7]
Test Case: 213 | Input/Output: [(58 34 40 94) 34]
Test Case: 214 | Input/Output: [(22 25 55 33) 22]
Test Case: 215 | Input/Output: [(67 96 89 88) 67]
Test Case: 216 | Input/Output: [(74 13 44 68) 13]
Test Case: 217 | Input/Output: [(0 66 42 57) 0]
Test Case: 218 | Input/Output: [(99 62 24 70) 24]
Test Case: 219 | Input/Output: [(58 86 56 25) 25]
Test Case: 220 | Input/Output: [(60 20 21 64) 20]
Test Case: 221 | Input/Output: [(100 43 67 38) 38]
Test Case: 222 | Input/Output: [(26 71 99 37) 26]
Test Case: 223 | Input/Output: [(97 8 34 72) 8]
Test Case: 224 | Input/Output: [(5 24 54 7) 5]
Test Case: 225 | Input/Output: [(68 58 33 34) 33]
Test Case: 226 | Input/Output: [(56 100 84 75) 56]
Test Case: 227 | Input/Output: [(19 79 75 66) 19]
Test Case: 228 | Input/Output: [(33 65 87 12) 12]
Test Case: 229 | Input/Output: [(25 76 59 52) 25]
Test Case: 230 | Input/Output: [(11 20 36 71) 11]
Test Case: 231 | Input/Output: [(4 72 61 73) 4]
Test Case: 232 | Input/Output: [(78 67 5 62) 5]
Test Case: 233 | Input/Output: [(79 23 12 52) 12]
Test Case: 234 | Input/Output: [(56 38 8 74) 8]
Test Case: 235 | Input/Output: [(52 98 32 52) 32]
Test Case: 236 | Input/Output: [(49 86 78 22) 22]
Test Case: 237 | Input/Output: [(44 60 18 34) 18]
Test Case: 238 | Input/Output: [(53 4 9 82) 4]
Test Case: 239 | Input/Output: [(58 20 45 3) 3]
Test Case: 240 | Input/Output: [(32 35 4 60) 4]
Test Case: 241 | Input/Output: [(18 16 73 62) 16]
Test Case: 242 | Input/Output: [(40 90 49 81) 40]
Test Case: 243 | Input/Output: [(53 1 83 81) 1]
Test Case: 244 | Input/Output: [(75 50 2 64) 2]
Test Case: 245 | Input/Output: [(75 47 5 1) 1]
Test Case: 246 | Input/Output: [(1 55 25 57) 1]
Test Case: 247 | Input/Output: [(85 82 6 35) 6]
Test Case: 248 | Input/Output: [(45 74 33 10) 10]
Test Case: 249 | Input/Output: [(86 43 73 78) 43]
Test Case: 250 | Input/Output: [(94 69 74 100) 69]
Test Case: 251 | Input/Output: [(35 67 96 27) 27]
Test Case: 252 | Input/Output: [(19 61 89 27) 19]
Test Case: 253 | Input/Output: [(89 58 37 36) 36]
Test Case: 254 | Input/Output: [(30 22 50 70) 22]
Test Case: 255 | Input/Output: [(66 79 47 98) 47]
Test Case: 256 | Input/Output: [(30 84 5 88) 5]
Test Case: 257 | Input/Output: [(36 33 16 5) 5]
Test Case: 258 | Input/Output: [(72 93 56 91) 56]
Test Case: 259 | Input/Output: [(40 40 45 19) 19]
Test Case: 260 | Input/Output: [(78 74 23 10) 10]
Test Case: 261 | Input/Output: [(77 32 33 78) 32]
Test Case: 262 | Input/Output: [(0 90 57 2) 0]
Test Case: 263 | Input/Output: [(87 80 7 28) 7]
Test Case: 264 | Input/Output: [(96 82 9 79) 9]
Test Case: 265 | Input/Output: [(90 64 33 4) 4]
Test Case: 266 | Input/Output: [(10 75 42 77) 10]
Test Case: 267 | Input/Output: [(24 99 28 86) 24]
Test Case: 268 | Input/Output: [(38 32 87 100) 32]
Test Case: 269 | Input/Output: [(12 28 49 89) 12]
Test Case: 270 | Input/Output: [(43 69 8 20) 8]
Test Case: 271 | Input/Output: [(66 16 88 98) 16]
Test Case: 272 | Input/Output: [(21 93 85 17) 17]
Test Case: 273 | Input/Output: [(90 1 28 72) 1]
Test Case: 274 | Input/Output: [(16 62 78 57) 16]
Test Case: 275 | Input/Output: [(22 26 60 22) 22]
Test Case: 276 | Input/Output: [(33 7 92 15) 7]
Test Case: 277 | Input/Output: [(80 35 25 88) 25]
Test Case: 278 | Input/Output: [(25 85 30 87) 25]
Test Case: 279 | Input/Output: [(29 2 21 48) 2]
Test Case: 280 | Input/Output: [(64 12 28 77) 12]
Test Case: 281 | Input/Output: [(59 90 42 73) 42]
Test Case: 282 | Input/Output: [(58 23 87 13) 13]
Test Case: 283 | Input/Output: [(100 40 7 78) 7]
Test Case: 284 | Input/Output: [(37 83 56 26) 26]
Test Case: 285 | Input/Output: [(9 48 68 72) 9]
Test Case: 286 | Input/Output: [(78 82 38 1) 1]
Test Case: 287 | Input/Output: [(13 33 63 83) 13]
Test Case: 288 | Input/Output: [(98 19 93 50) 19]
Test Case: 289 | Input/Output: [(48 40 54 59) 40]
Test Case: 290 | Input/Output: [(51 15 90 15) 15]
Test Case: 291 | Input/Output: [(64 96 28 15) 15]
Test Case: 292 | Input/Output: [(27 30 100 16) 16]
Test Case: 293 | Input/Output: [(51 13 42 26) 13]
Test Case: 294 | Input/Output: [(36 25 70 95) 25]
Test Case: 295 | Input/Output: [(89 49 87 30) 30]
Test Case: 296 | Input/Output: [(23 49 0 10) 0]
Test Case: 297 | Input/Output: [(62 93 3 4) 3]
Test Case: 298 | Input/Output: [(30 34 63 51) 30]
Test Case: 299 | Input/Output: [(6 35 8 25) 6]
Test Case: 300 | Input/Output: [(94 66 69 30) 30]
Test Case: 301 | Input/Output: [(81 28 20 31) 20]
Test Case: 302 | Input/Output: [(50 84 57 12) 12]
Test Case: 303 | Input/Output: [(81 56 18 43) 18]
Test Case: 304 | Input/Output: [(24 51 2 41) 2]
Test Case: 305 | Input/Output: [(29 41 43 58) 29]
Test Case: 306 | Input/Output: [(98 83 78 40) 40]
Test Case: 307 | Input/Output: [(6 67 59 66) 6]
Test Case: 308 | Input/Output: [(48 14 46 26) 14]
Test Case: 309 | Input/Output: [(49 84 61 46) 46]
Test Case: 310 | Input/Output: [(90 99 27 30) 27]
Test Case: 311 | Input/Output: [(32 94 95 57) 32]
Test Case: 312 | Input/Output: [(69 86 50 50) 50]
Test Case: 313 | Input/Output: [(22 12 86 64) 12]
Test Case: 314 | Input/Output: [(24 63 70 89) 24]
Test Case: 315 | Input/Output: [(4 32 85 18) 4]
Test Case: 316 | Input/Output: [(95 59 3 10) 3]
Test Case: 317 | Input/Output: [(38 84 73 47) 38]
Test Case: 318 | Input/Output: [(85 17 32 84) 17]
Test Case: 319 | Input/Output: [(78 13 35 29) 13]
Test Case: 320 | Input/Output: [(88 60 96 84) 60]
Test Case: 321 | Input/Output: [(98 75 10 69) 10]
Test Case: 322 | Input/Output: [(23 78 89 100) 23]
Test Case: 323 | Input/Output: [(4 22 4 64) 4]
Test Case: 324 | Input/Output: [(42 27 33 62) 27]
Test Case: 325 | Input/Output: [(31 87 54 13) 13]
Test Case: 326 | Input/Output: [(21 22 79 92) 21]
Test Case: 327 | Input/Output: [(56 5 63 22) 5]
Test Case: 328 | Input/Output: [(100 23 62 11) 11]
Test Case: 329 | Input/Output: [(81 47 21 94) 21]
Test Case: 330 | Input/Output: [(56 89 12 61) 12]
Test Case: 331 | Input/Output: [(94 94 55 4) 4]
Test Case: 332 | Input/Output: [(14 10 78 40) 10]
Test Case: 333 | Input/Output: [(75 18 71 35) 18]
Test Case: 334 | Input/Output: [(74 50 43 35) 35]
Test Case: 335 | Input/Output: [(47 59 50 45) 45]
Test Case: 336 | Input/Output: [(41 53 69 16) 16]
Test Case: 337 | Input/Output: [(23 51 18 75) 18]
Test Case: 338 | Input/Output: [(45 99 62 55) 45]
Test Case: 339 | Input/Output: [(33 91 66 90) 33]
Test Case: 340 | Input/Output: [(34 0 93 84) 0]
Test Case: 341 | Input/Output: [(9 54 89 82) 9]
Test Case: 342 | Input/Output: [(30 44 90 76) 30]
Test Case: 343 | Input/Output: [(6 67 96 15) 6]
Test Case: 344 | Input/Output: [(14 42 59 84) 14]
Test Case: 345 | Input/Output: [(37 60 13 94) 13]
Test Case: 346 | Input/Output: [(74 28 1 82) 1]
Test Case: 347 | Input/Output: [(46 3 11 85) 3]
Test Case: 348 | Input/Output: [(76 83 14 32) 14]
Test Case: 349 | Input/Output: [(47 7 8 71) 7]
Test Case: 350 | Input/Output: [(39 42 94 98) 39]
Test Case: 351 | Input/Output: [(33 43 24 12) 12]
Test Case: 352 | Input/Output: [(34 0 92 74) 0]
Test Case: 353 | Input/Output: [(73 89 32 83) 32]
Test Case: 354 | Input/Output: [(52 63 86 31) 31]
Test Case: 355 | Input/Output: [(19 88 73 62) 19]
Test Case: 356 | Input/Output: [(63 38 32 45) 32]
Test Case: 357 | Input/Output: [(48 77 64 80) 48]
Test Case: 358 | Input/Output: [(56 83 69 77) 56]
Test Case: 359 | Input/Output: [(21 47 4 10) 4]
Test Case: 360 | Input/Output: [(74 32 12 22) 12]
Test Case: 361 | Input/Output: [(69 59 34 69) 34]
Test Case: 362 | Input/Output: [(89 73 67 2) 2]
Test Case: 363 | Input/Output: [(66 22 47 89) 22]
Test Case: 364 | Input/Output: [(99 60 14 14) 14]
Test Case: 365 | Input/Output: [(87 78 97 89) 78]
Test Case: 366 | Input/Output: [(96 4 19 19) 4]
Test Case: 367 | Input/Output: [(38 6 57 88) 6]
Test Case: 368 | Input/Output: [(85 4 78 93) 4]
Test Case: 369 | Input/Output: [(44 83 38 90) 38]
Test Case: 370 | Input/Output: [(85 32 52 89) 32]
Test Case: 371 | Input/Output: [(74 13 52 69) 13]
Test Case: 372 | Input/Output: [(55 5 75 29) 5]
Test Case: 373 | Input/Output: [(75 99 53 6) 6]
Test Case: 374 | Input/Output: [(56 22 81 52) 22]
Test Case: 375 | Input/Output: [(29 21 10 40) 10]
Test Case: 376 | Input/Output: [(86 68 72 5) 5]
Test Case: 377 | Input/Output: [(99 77 96 23) 23]
Test Case: 378 | Input/Output: [(48 46 58 94) 46]
Test Case: 379 | Input/Output: [(41 45 67 2) 2]
Test Case: 380 | Input/Output: [(7 74 34 83) 7]
Test Case: 381 | Input/Output: [(26 89 58 12) 12]
Test Case: 382 | Input/Output: [(67 23 81 46) 23]
Test Case: 383 | Input/Output: [(99 68 43 86) 43]
Test Case: 384 | Input/Output: [(77 23 93 62) 23]
Test Case: 385 | Input/Output: [(3 71 43 100) 3]
Test Case: 386 | Input/Output: [(17 53 20 10) 10]
Test Case: 387 | Input/Output: [(63 77 52 16) 16]
Test Case: 388 | Input/Output: [(18 21 54 52) 18]
Test Case: 389 | Input/Output: [(79 94 46 28) 28]
Test Case: 390 | Input/Output: [(24 30 47 40) 24]
Test Case: 391 | Input/Output: [(67 81 79 89) 67]
Test Case: 392 | Input/Output: [(4 49 85 32) 4]
Test Case: 393 | Input/Output: [(15 69 87 95) 15]
Test Case: 394 | Input/Output: [(71 4 43 12) 4]
Test Case: 395 | Input/Output: [(2 75 85 66) 2]
Test Case: 396 | Input/Output: [(34 73 47 30) 30]
Test Case: 397 | Input/Output: [(39 99 62 57) 39]
Test Case: 398 | Input/Output: [(29 94 38 2) 2]
Test Case: 399 | Input/Output: [(7 81 34 35) 7]
Test Case: 400 | Input/Output: [(-79 13 93 -38) -79]
Test Case: 401 | Input/Output: [(100 -8 -56 29) -56]
Test Case: 402 | Input/Output: [(-80 -10 82 26) -80]
Test Case: 403 | Input/Output: [(-86 -47 33 -26) -86]
Test Case: 404 | Input/Output: [(53 28 77 26) 26]
Test Case: 405 | Input/Output: [(-31 58 48 -51) -51]
Test Case: 406 | Input/Output: [(19 -14 -41 87) -41]
Test Case: 407 | Input/Output: [(24 70 42 13) 13]
Test Case: 408 | Input/Output: [(20 30 -9 98) -9]
Test Case: 409 | Input/Output: [(-14 41 -45 -36) -45]
Test Case: 410 | Input/Output: [(28 8 -56 -96) -96]
Test Case: 411 | Input/Output: [(0 -31 -84 -3) -84]
Test Case: 412 | Input/Output: [(31 -6 -30 -22) -30]
Test Case: 413 | Input/Output: [(25 94 71 -26) -26]
Test Case: 414 | Input/Output: [(87 -29 -73 8) -73]
Test Case: 415 | Input/Output: [(97 -43 -42 81) -43]
Test Case: 416 | Input/Output: [(-82 -63 23 -40) -82]
Test Case: 417 | Input/Output: [(84 48 -83 33) -83]
Test Case: 418 | Input/Output: [(-63 -22 -87 61) -87]
Test Case: 419 | Input/Output: [(-60 -7 -62 -70) -70]
Test Case: 420 | Input/Output: [(9 -4 -30 -36) -36]
Test Case: 421 | Input/Output: [(33 -67 -90 -19) -90]
Test Case: 422 | Input/Output: [(38 22 -5 34) -5]
Test Case: 423 | Input/Output: [(20 -33 -99 34) -99]
Test Case: 424 | Input/Output: [(61 63 -26 -55) -55]
Test Case: 425 | Input/Output: [(68 -41 28 16) -41]
Test Case: 426 | Input/Output: [(60 -43 -78 31) -78]
Test Case: 427 | Input/Output: [(97 -28 -17 -71) -71]
Test Case: 428 | Input/Output: [(-9 86 85 -30) -30]
Test Case: 429 | Input/Output: [(87 67 -16 37) -16]
Test Case: 430 | Input/Output: [(20 7 35 91) 7]
Test Case: 431 | Input/Output: [(-42 92 -94 34) -94]
Test Case: 432 | Input/Output: [(-49 85 -43 5) -49]
Test Case: 433 | Input/Output: [(44 -72 -72 81) -72]
Test Case: 434 | Input/Output: [(-30 10 -27 1) -30]
Test Case: 435 | Input/Output: [(-98 -81 63 -29) -98]
Test Case: 436 | Input/Output: [(-83 -18 -85 -29) -85]
Test Case: 437 | Input/Output: [(46 -97 71 75) -97]
Test Case: 438 | Input/Output: [(-49 -29 16 -6) -49]
Test Case: 439 | Input/Output: [(-54 57 -7 65) -54]
Test Case: 440 | Input/Output: [(-98 -5 29 91) -98]
Test Case: 441 | Input/Output: [(8 -71 82 -65) -71]
Test Case: 442 | Input/Output: [(36 -88 -94 -91) -94]
Test Case: 443 | Input/Output: [(-64 -66 95 -62) -66]
Test Case: 444 | Input/Output: [(49 58 -81 61) -81]
Test Case: 445 | Input/Output: [(-76 12 -43 36) -76]
Test Case: 446 | Input/Output: [(34 86 59 79) 34]
Test Case: 447 | Input/Output: [(42 62 30 81) 30]
Test Case: 448 | Input/Output: [(-88 73 88 -78) -88]
Test Case: 449 | Input/Output: [(44 34 -22 -61) -61]
Test Case: 450 | Input/Output: [(37 97 37 29) 29]
Test Case: 451 | Input/Output: [(88 -29 91 -50) -50]
Test Case: 452 | Input/Output: [(-36 -41 -74 -78) -78]
Test Case: 453 | Input/Output: [(-38 38 39 -2) -38]
Test Case: 454 | Input/Output: [(93 -97 9 -98) -98]
Test Case: 455 | Input/Output: [(-82 -36 25 -53) -82]
Test Case: 456 | Input/Output: [(-55 -85 -18 -38) -85]
Test Case: 457 | Input/Output: [(3 90 9 0) 0]
Test Case: 458 | Input/Output: [(0 87 75 -41) -41]
Test Case: 459 | Input/Output: [(49 -14 94 -63) -63]
Test Case: 460 | Input/Output: [(53 -61 -37 -18) -61]
Test Case: 461 | Input/Output: [(-42 -69 -26 93) -69]
Test Case: 462 | Input/Output: [(39 87 46 -96) -96]
Test Case: 463 | Input/Output: [(-7 -24 -24 -4) -24]
Test Case: 464 | Input/Output: [(-100 68 -76 14) -100]
Test Case: 465 | Input/Output: [(53 32 63 55) 32]
Test Case: 466 | Input/Output: [(-42 30 -98 -48) -98]
Test Case: 467 | Input/Output: [(-66 94 61 34) -66]
Test Case: 468 | Input/Output: [(79 86 20 -60) -60]
Test Case: 469 | Input/Output: [(93 35 -83 -87) -87]
Test Case: 470 | Input/Output: [(-53 -35 67 88) -53]
Test Case: 471 | Input/Output: [(-11 -100 -21 80) -100]
Test Case: 472 | Input/Output: [(-78 80 17 80) -78]
Test Case: 473 | Input/Output: [(64 25 76 36) 25]
Test Case: 474 | Input/Output: [(-40 63 48 32) -40]
Test Case: 475 | Input/Output: [(-33 19 -52 -90) -90]
Test Case: 476 | Input/Output: [(-15 -97 -43 50) -97]
Test Case: 477 | Input/Output: [(89 41 -69 -87) -87]
Test Case: 478 | Input/Output: [(90 91 -81 20) -81]
Test Case: 479 | Input/Output: [(95 44 70 45) 44]
Test Case: 480 | Input/Output: [(22 65 -67 50) -67]
Test Case: 481 | Input/Output: [(28 36 -57 -3) -57]
Test Case: 482 | Input/Output: [(-86 33 41 74) -86]
Test Case: 483 | Input/Output: [(-84 -14 40 18) -84]
Test Case: 484 | Input/Output: [(-55 -34 28 -3) -55]
Test Case: 485 | Input/Output: [(-23 65 -20 -33) -33]
Test Case: 486 | Input/Output: [(14 -91 25 -76) -91]
Test Case: 487 | Input/Output: [(46 85 80 -93) -93]
Test Case: 488 | Input/Output: [(66 -24 -46 7) -46]
Test Case: 489 | Input/Output: [(3 81 -39 -88) -88]
Test Case: 490 | Input/Output: [(34 -91 -86 -17) -91]
Test Case: 491 | Input/Output: [(5 6 -84 75) -84]
Test Case: 492 | Input/Output: [(-51 11 33 -50) -51]
Test Case: 493 | Input/Output: [(51 -26 -98 -20) -98]
Test Case: 494 | Input/Output: [(100 47 -41 46) -41]
Test Case: 495 | Input/Output: [(49 30 75 33) 30]
Test Case: 496 | Input/Output: [(90 35 11 -30) -30]
Test Case: 497 | Input/Output: [(-82 56 -62 100) -82]
Test Case: 498 | Input/Output: [(-79 27 70 72) -79]
Test Case: 499 | Input/Output: [(-70 87 10 -47) -70]
Test Case: 500 | Input/Output: [(-43 -57 37 -47) -57]
Test Case: 501 | Input/Output: [(-11 -28 39 94) -28]
Test Case: 502 | Input/Output: [(-1 17 -53 -41) -53]
Test Case: 503 | Input/Output: [(40 -77 -34 -18) -77]
Test Case: 504 | Input/Output: [(-99 97 -88 97) -99]
Test Case: 505 | Input/Output: [(5 -21 21 -93) -93]
Test Case: 506 | Input/Output: [(-15 -92 -9 60) -92]
Test Case: 507 | Input/Output: [(-33 58 86 55) -33]
Test Case: 508 | Input/Output: [(-84 -10 13 95) -84]
Test Case: 509 | Input/Output: [(-64 99 -94 53) -94]
Test Case: 510 | Input/Output: [(-47 1 -100 9) -100]
Test Case: 511 | Input/Output: [(65 60 49 67) 49]
Test Case: 512 | Input/Output: [(-13 -32 -31 -93) -93]
Test Case: 513 | Input/Output: [(-85 62 -97 80) -97]
Test Case: 514 | Input/Output: [(77 40 -38 52) -38]
Test Case: 515 | Input/Output: [(54 -13 78 85) -13]
Test Case: 516 | Input/Output: [(-5 37 52 -10) -10]
Test Case: 517 | Input/Output: [(0 41 -71 -71) -71]
Test Case: 518 | Input/Output: [(53 93 94 61) 53]
Test Case: 519 | Input/Output: [(22 -59 -75 -12) -75]
Test Case: 520 | Input/Output: [(-70 -62 90 -8) -70]
Test Case: 521 | Input/Output: [(22 -90 53 12) -90]
Test Case: 522 | Input/Output: [(90 56 19 -36) -36]
Test Case: 523 | Input/Output: [(70 41 2 84) 2]
Test Case: 524 | Input/Output: [(-94 65 28 -2) -94]
Test Case: 525 | Input/Output: [(-92 94 77 -56) -92]
Test Case: 526 | Input/Output: [(73 -33 67 -43) -43]
Test Case: 527 | Input/Output: [(-68 83 26 -81) -81]
Test Case: 528 | Input/Output: [(-67 -24 57 -99) -99]
Test Case: 529 | Input/Output: [(21 23 4 40) 4]
Test Case: 530 | Input/Output: [(-50 41 -73 -90) -90]
Test Case: 531 | Input/Output: [(17 -64 -15 7) -64]
Test Case: 532 | Input/Output: [(47 -94 -73 31) -94]
Test Case: 533 | Input/Output: [(76 -76 -28 27) -76]
Test Case: 534 | Input/Output: [(-69 72 -20 -80) -80]
Test Case: 535 | Input/Output: [(94 -38 -14 3) -38]
Test Case: 536 | Input/Output: [(77 18 1 39) 1]
Test Case: 537 | Input/Output: [(87 -10 -9 -97) -97]
Test Case: 538 | Input/Output: [(-52 63 -60 26) -60]
Test Case: 539 | Input/Output: [(65 -79 67 -28) -79]
Test Case: 540 | Input/Output: [(20 -68 56 -39) -68]
Test Case: 541 | Input/Output: [(62 29 76 93) 29]
Test Case: 542 | Input/Output: [(3 55 4 -89) -89]
Test Case: 543 | Input/Output: [(-17 90 35 -58) -58]
Test Case: 544 | Input/Output: [(59 4 34 12) 4]
Test Case: 545 | Input/Output: [(35 21 12 99) 12]
Test Case: 546 | Input/Output: [(-45 84 63 -46) -46]
Test Case: 547 | Input/Output: [(-40 89 -45 71) -45]
Test Case: 548 | Input/Output: [(93 18 36 -89) -89]
Test Case: 549 | Input/Output: [(-18 77 -39 -80) -80]
Test Case: 550 | Input/Output: [(45 -5 -12 41) -12]
Test Case: 551 | Input/Output: [(31 -41 -96 11) -96]
Test Case: 552 | Input/Output: [(43 -66 -88 -53) -88]
Test Case: 553 | Input/Output: [(56 22 -22 -52) -52]
Test Case: 554 | Input/Output: [(41 -61 15 98) -61]
Test Case: 555 | Input/Output: [(87 73 -20 -40) -40]
Test Case: 556 | Input/Output: [(-13 44 -48 -49) -49]
Test Case: 557 | Input/Output: [(-33 -1 31 -31) -33]
Test Case: 558 | Input/Output: [(28 -17 -11 -21) -21]
Test Case: 559 | Input/Output: [(-75 99 -95 -82) -95]
Test Case: 560 | Input/Output: [(22 45 -28 -93) -93]
Test Case: 561 | Input/Output: [(-62 -10 -96 -54) -96]
Test Case: 562 | Input/Output: [(87 -51 -12 29) -51]
Test Case: 563 | Input/Output: [(93 -45 23 -65) -65]
Test Case: 564 | Input/Output: [(-80 -92 52 26) -92]
Test Case: 565 | Input/Output: [(-54 -1 -86 46) -86]
Test Case: 566 | Input/Output: [(52 31 -30 -46) -46]
Test Case: 567 | Input/Output: [(88 70 -26 -21) -26]
Test Case: 568 | Input/Output: [(30 -37 65 -83) -83]
Test Case: 569 | Input/Output: [(-16 -86 17 -77) -86]
Test Case: 570 | Input/Output: [(12 5 -25 29) -25]
Test Case: 571 | Input/Output: [(-61 -33 37 67) -61]
Test Case: 572 | Input/Output: [(14 -92 24 58) -92]
Test Case: 573 | Input/Output: [(67 77 -28 24) -28]
Test Case: 574 | Input/Output: [(8 -21 -70 -55) -70]
Test Case: 575 | Input/Output: [(-83 -91 87 -74) -91]
Test Case: 576 | Input/Output: [(9 59 16 79) 9]
Test Case: 577 | Input/Output: [(-54 -26 -94 -99) -99]
Test Case: 578 | Input/Output: [(45 -87 -22 -27) -87]
Test Case: 579 | Input/Output: [(92 60 -26 95) -26]
Test Case: 580 | Input/Output: [(-75 13 -84 -88) -88]
Test Case: 581 | Input/Output: [(8 58 -59 14) -59]
Test Case: 582 | Input/Output: [(-50 -69 13 -31) -69]
Test Case: 583 | Input/Output: [(57 -37 45 -33) -37]
Test Case: 584 | Input/Output: [(24 15 10 -44) -44]
Test Case: 585 | Input/Output: [(26 -86 -39 -43) -86]
Test Case: 586 | Input/Output: [(-90 -99 -29 96) -99]
Test Case: 587 | Input/Output: [(84 49 25 86) 25]
Test Case: 588 | Input/Output: [(-70 -20 21 29) -70]
Test Case: 589 | Input/Output: [(80 85 51 64) 51]
Test Case: 590 | Input/Output: [(78 69 -91 93) -91]
Test Case: 591 | Input/Output: [(-76 -11 -52 13) -76]
Test Case: 592 | Input/Output: [(-12 67 -84 5) -84]
Test Case: 593 | Input/Output: [(-6 24 53 84) -6]
Test Case: 594 | Input/Output: [(30 96 38 -11) -11]
Test Case: 595 | Input/Output: [(72 1 -8 42) -8]
Test Case: 596 | Input/Output: [(-42 29 93 27) -42]
Test Case: 597 | Input/Output: [(-28 1 -10 20) -28]
Test Case: 598 | Input/Output: [(42 23 -27 -95) -95]
Test Case: 599 | Input/Output: [(-27 64 22 51) -27]
Test Case: 600 | Input/Output: [(-13 -14 90 89) -14]
Test Case: 601 | Input/Output: [(-66 19 39 34) -66]
Test Case: 602 | Input/Output: [(99 -89 19 8) -89]
Test Case: 603 | Input/Output: [(-2 -67 -78 76) -78]
Test Case: 604 | Input/Output: [(18 -52 25 46) -52]
Test Case: 605 | Input/Output: [(-71 82 -15 -53) -71]
Test Case: 606 | Input/Output: [(-4 33 -42 -68) -68]
Test Case: 607 | Input/Output: [(54 14 12 70) 12]
Test Case: 608 | Input/Output: [(23 57 9 -51) -51]
Test Case: 609 | Input/Output: [(-35 67 -30 88) -35]
Test Case: 610 | Input/Output: [(11 24 -24 87) -24]
Test Case: 611 | Input/Output: [(-45 53 19 68) -45]
Test Case: 612 | Input/Output: [(-80 -35 93 62) -80]
Test Case: 613 | Input/Output: [(38 96 20 45) 20]
Test Case: 614 | Input/Output: [(-31 63 23 -6) -31]
Test Case: 615 | Input/Output: [(-56 -68 -28 -98) -98]
Test Case: 616 | Input/Output: [(32 -37 -14 99) -37]
Test Case: 617 | Input/Output: [(86 -79 -25 92) -79]
Test Case: 618 | Input/Output: [(-19 -75 0 91) -75]
Test Case: 619 | Input/Output: [(-7 82 32 18) -7]
Test Case: 620 | Input/Output: [(-58 67 -37 -9) -58]
Test Case: 621 | Input/Output: [(32 48 -59 50) -59]
Test Case: 622 | Input/Output: [(-100 25 22 90) -100]
Test Case: 623 | Input/Output: [(-73 -36 -11 -8) -73]
Test Case: 624 | Input/Output: [(-21 85 -81 58) -81]
Test Case: 625 | Input/Output: [(64 9 72 41) 9]
Test Case: 626 | Input/Output: [(-50 -71 6 62) -71]
Test Case: 627 | Input/Output: [(-37 81 5 5) -37]
Test Case: 628 | Input/Output: [(11 -96 23 82) -96]
Test Case: 629 | Input/Output: [(52 -64 81 -24) -64]
Test Case: 630 | Input/Output: [(-19 -77 38 -31) -77]
Test Case: 631 | Input/Output: [(67 57 -88 -57) -88]
Test Case: 632 | Input/Output: [(96 92 -72 63) -72]
Test Case: 633 | Input/Output: [(45 92 83 64) 45]
Test Case: 634 | Input/Output: [(-64 -29 4 75) -64]
Test Case: 635 | Input/Output: [(27 -59 -99 44) -99]
Test Case: 636 | Input/Output: [(-67 -45 -33 12) -67]
Test Case: 637 | Input/Output: [(-22 49 49 -53) -53]
Test Case: 638 | Input/Output: [(-62 51 42 21) -62]
Test Case: 639 | Input/Output: [(62 -89 -32 -71) -89]
Test Case: 640 | Input/Output: [(-19 23 88 52) -19]
Test Case: 641 | Input/Output: [(76 45 -26 75) -26]
Test Case: 642 | Input/Output: [(-82 6 84 -66) -82]
Test Case: 643 | Input/Output: [(45 4 -13 53) -13]
Test Case: 644 | Input/Output: [(55 -3 9 -75) -75]
Test Case: 645 | Input/Output: [(30 24 -2 48) -2]
Test Case: 646 | Input/Output: [(-50 24 65 55) -50]
Test Case: 647 | Input/Output: [(-89 8 -78 96) -89]
Test Case: 648 | Input/Output: [(69 -3 -33 -73) -73]
Test Case: 649 | Input/Output: [(51 5 93 23) 5]
Test Case: 650 | Input/Output: [(-98 -87 83 -24) -98]
Test Case: 651 | Input/Output: [(79 -74 33 -67) -74]
Test Case: 652 | Input/Output: [(-75 -76 -79 -26) -79]
Test Case: 653 | Input/Output: [(-58 34 84 83) -58]
Test Case: 654 | Input/Output: [(18 -86 -69 -20) -86]
Test Case: 655 | Input/Output: [(7 -70 -37 -32) -70]
Test Case: 656 | Input/Output: [(15 -64 -32 -84) -84]
Test Case: 657 | Input/Output: [(-27 -27 75 -57) -57]
Test Case: 658 | Input/Output: [(68 63 82 10) 10]
Test Case: 659 | Input/Output: [(-6 -100 -79 -19) -100]
Test Case: 660 | Input/Output: [(73 -91 85 33) -91]
Test Case: 661 | Input/Output: [(89 6 -90 49) -90]
Test Case: 662 | Input/Output: [(-40 17 -33 -29) -40]
Test Case: 663 | Input/Output: [(96 -65 -95 26) -95]
Test Case: 664 | Input/Output: [(-28 66 -45 -64) -64]
Test Case: 665 | Input/Output: [(-95 0 -9 -41) -95]
Test Case: 666 | Input/Output: [(-84 77 -1 64) -84]
Test Case: 667 | Input/Output: [(-3 59 100 69) -3]
Test Case: 668 | Input/Output: [(52 -52 14 64) -52]
Test Case: 669 | Input/Output: [(-59 -81 26 -32) -81]
Test Case: 670 | Input/Output: [(-68 0 5 11) -68]
Test Case: 671 | Input/Output: [(35 14 -24 20) -24]
Test Case: 672 | Input/Output: [(43 29 31 43) 29]
Test Case: 673 | Input/Output: [(32 -62 -83 8) -83]
Test Case: 674 | Input/Output: [(99 48 -17 -90) -90]
Test Case: 675 | Input/Output: [(96 6 35 54) 6]
Test Case: 676 | Input/Output: [(47 96 -82 86) -82]
Test Case: 677 | Input/Output: [(96 -68 -82 71) -82]
Test Case: 678 | Input/Output: [(29 -38 -78 -92) -92]
Test Case: 679 | Input/Output: [(66 -59 67 -33) -59]
Test Case: 680 | Input/Output: [(32 23 18 -82) -82]
Test Case: 681 | Input/Output: [(88 -58 -19 34) -58]
Test Case: 682 | Input/Output: [(-83 -4 -83 -79) -83]
Test Case: 683 | Input/Output: [(92 57 85 14) 14]
Test Case: 684 | Input/Output: [(12 -2 32 -14) -14]
Test Case: 685 | Input/Output: [(60 -59 31 8) -59]
Test Case: 686 | Input/Output: [(52 -8 -10 -28) -28]
Test Case: 687 | Input/Output: [(16 68 82 75) 16]
Test Case: 688 | Input/Output: [(-74 -21 48 -24) -74]
Test Case: 689 | Input/Output: [(-52 -51 79 17) -52]
Test Case: 690 | Input/Output: [(4 -76 -9 -37) -76]
Test Case: 691 | Input/Output: [(38 -67 49 -43) -67]
Test Case: 692 | Input/Output: [(-27 -27 2 -46) -46]
Test Case: 693 | Input/Output: [(65 83 -13 88) -13]
Test Case: 694 | Input/Output: [(90 80 -80 14) -80]
Test Case: 695 | Input/Output: [(46 56 45 44) 44]
Test Case: 696 | Input/Output: [(-34 43 80 -38) -38]
Test Case: 697 | Input/Output: [(-6 32 31 -34) -34]
Test Case: 698 | Input/Output: [(65 -98 -98 -42) -98]
Test Case: 699 | Input/Output: [(4 56 67 -57) -57]
Test Case: 700 | Input/Output: [(-89 58 93 -7) -89]
Test Case: 701 | Input/Output: [(4 54 78 -59) -59]
Test Case: 702 | Input/Output: [(88 -66 -11 -50) -66]
Test Case: 703 | Input/Output: [(16 -85 70 33) -85]
Test Case: 704 | Input/Output: [(-4 -99 -96 100) -99]
Test Case: 705 | Input/Output: [(-31 -20 -72 -19) -72]
Test Case: 706 | Input/Output: [(-73 38 67 52) -73]
Test Case: 707 | Input/Output: [(-33 -78 28 50) -78]
Test Case: 708 | Input/Output: [(-68 -27 43 43) -68]
Test Case: 709 | Input/Output: [(-90 -71 63 36) -90]
Test Case: 710 | Input/Output: [(27 57 56 65) 27]
Test Case: 711 | Input/Output: [(90 -49 44 -100) -100]
Test Case: 712 | Input/Output: [(-29 -29 75 -90) -90]
Test Case: 713 | Input/Output: [(51 -78 -31 -93) -93]
Test Case: 714 | Input/Output: [(-45 20 88 -64) -64]
Test Case: 715 | Input/Output: [(97 30 80 -83) -83]
Test Case: 716 | Input/Output: [(16 -18 69 -55) -55]
Test Case: 717 | Input/Output: [(15 -28 89 51) -28]
Test Case: 718 | Input/Output: [(82 39 -42 -36) -42]
Test Case: 719 | Input/Output: [(-72 -95 41 57) -95]
Test Case: 720 | Input/Output: [(-59 70 -95 -36) -95]
Test Case: 721 | Input/Output: [(-96 37 59 45) -96]
Test Case: 722 | Input/Output: [(30 -96 1 -6) -96]
Test Case: 723 | Input/Output: [(19 90 -54 -90) -90]
Test Case: 724 | Input/Output: [(-1 -19 -52 73) -52]
Test Case: 725 | Input/Output: [(95 -41 8 -53) -53]
Test Case: 726 | Input/Output: [(-100 -31 -58 -14) -100]
Test Case: 727 | Input/Output: [(1 63 -23 35) -23]
Test Case: 728 | Input/Output: [(34 40 22 59) 22]
Test Case: 729 | Input/Output: [(-80 -58 -93 -73) -93]
Test Case: 730 | Input/Output: [(-12 -74 -7 91) -74]
Test Case: 731 | Input/Output: [(-45 81 89 30) -45]
Test Case: 732 | Input/Output: [(48 -48 -45 -100) -100]
Test Case: 733 | Input/Output: [(-67 65 -5 84) -67]
Test Case: 734 | Input/Output: [(-95 16 -2 37) -95]
Test Case: 735 | Input/Output: [(3 -64 -83 38) -83]
Test Case: 736 | Input/Output: [(57 1 91 -58) -58]
Test Case: 737 | Input/Output: [(-70 -24 8 -67) -70]
Test Case: 738 | Input/Output: [(65 -42 74 57) -42]
Test Case: 739 | Input/Output: [(63 71 -87 -40) -87]
Test Case: 740 | Input/Output: [(-6 6 69 -88) -88]
Test Case: 741 | Input/Output: [(-79 -36 -99 -34) -99]
Test Case: 742 | Input/Output: [(68 86 36 -71) -71]
Test Case: 743 | Input/Output: [(29 -49 -52 21) -52]
Test Case: 744 | Input/Output: [(-23 -58 27 -97) -97]
Test Case: 745 | Input/Output: [(23 38 -80 -59) -80]
Test Case: 746 | Input/Output: [(69 -21 -66 -100) -100]
Test Case: 747 | Input/Output: [(69 7 71 50) 7]
Test Case: 748 | Input/Output: [(22 66 44 -40) -40]
Test Case: 749 | Input/Output: [(85 -41 -96 15) -96]
Test Case: 750 | Input/Output: [(25 -89 -36 -82) -89]
Test Case: 751 | Input/Output: [(45 43 86 78) 43]
Test Case: 752 | Input/Output: [(-82 98 79 48) -82]
Test Case: 753 | Input/Output: [(96 -15 -70 62) -70]
Test Case: 754 | Input/Output: [(92 96 18 -36) -36]
Test Case: 755 | Input/Output: [(2 8 19 42) 2]
Test Case: 756 | Input/Output: [(-40 -16 -31 78) -40]
Test Case: 757 | Input/Output: [(89 -24 6 -55) -55]
Test Case: 758 | Input/Output: [(74 83 -63 -7) -63]
Test Case: 759 | Input/Output: [(-63 -99 -29 49) -99]
Test Case: 760 | Input/Output: [(-67 -47 -26 58) -67]
Test Case: 761 | Input/Output: [(-23 6 99 68) -23]
Test Case: 762 | Input/Output: [(96 -79 -57 -70) -79]
Test Case: 763 | Input/Output: [(19 44 -80 39) -80]
Test Case: 764 | Input/Output: [(18 5 20 -48) -48]
Test Case: 765 | Input/Output: [(99 -25 57 49) -25]
Test Case: 766 | Input/Output: [(5 82 83 58) 5]
Test Case: 767 | Input/Output: [(36 -17 9 -77) -77]
Test Case: 768 | Input/Output: [(64 69 23 9) 9]
Test Case: 769 | Input/Output: [(74 49 33 69) 33]
Test Case: 770 | Input/Output: [(61 -66 16 23) -66]
Test Case: 771 | Input/Output: [(-86 -27 91 -50) -86]
Test Case: 772 | Input/Output: [(-21 82 52 77) -21]
Test Case: 773 | Input/Output: [(94 39 -24 31) -24]
Test Case: 774 | Input/Output: [(-63 -69 9 -62) -69]
Test Case: 775 | Input/Output: [(47 -93 1 65) -93]
Test Case: 776 | Input/Output: [(7 23 8 -58) -58]
Test Case: 777 | Input/Output: [(-5 35 -61 51) -61]
Test Case: 778 | Input/Output: [(9 -31 64 40) -31]
Test Case: 779 | Input/Output: [(-33 63 84 68) -33]
Test Case: 780 | Input/Output: [(-83 -79 98 -17) -83]
Test Case: 781 | Input/Output: [(48 -91 72 -30) -91]
Test Case: 782 | Input/Output: [(14 93 -44 -65) -65]
Test Case: 783 | Input/Output: [(17 90 -48 -81) -81]
Test Case: 784 | Input/Output: [(-75 3 -48 47) -75]
Test Case: 785 | Input/Output: [(57 42 -89 -51) -89]
Test Case: 786 | Input/Output: [(-29 76 57 14) -29]
Test Case: 787 | Input/Output: [(96 71 61 97) 61]
Test Case: 788 | Input/Output: [(-99 -54 -97 46) -99]
Test Case: 789 | Input/Output: [(32 -54 -30 14) -54]
Test Case: 790 | Input/Output: [(-86 77 99 16) -86]
Test Case: 791 | Input/Output: [(-57 48 -15 -17) -57]
Test Case: 792 | Input/Output: [(-43 -100 -6 -33) -100]
Test Case: 793 | Input/Output: [(-86 -26 42 -96) -96]
Test Case: 794 | Input/Output: [(-10 21 -25 83) -25]
Test Case: 795 | Input/Output: [(39 70 24 8) 8]
Test Case: 796 | Input/Output: [(-13 10 -80 81) -80]
Test Case: 797 | Input/Output: [(-50 93 3 91) -50]
Test Case: 798 | Input/Output: [(33 25 44 -25) -25]
Test Case: 799 | Input/Output: [(-8 88 -24 25) -24]
Test Case: 800 | Input/Output: [(-91 -48 -58 -68) -91]
Test Case: 801 | Input/Output: [(-66 -10 -78 -42) -78]
Test Case: 802 | Input/Output: [(62 -13 40 71) -13]
Test Case: 803 | Input/Output: [(69 9 -15 -77) -77]
Test Case: 804 | Input/Output: [(85 -12 56 -16) -16]
Test Case: 805 | Input/Output: [(-43 -38 22 -100) -100]
Test Case: 806 | Input/Output: [(54 99 -83 -41) -83]
Test Case: 807 | Input/Output: [(93 -13 63 87) -13]
Test Case: 808 | Input/Output: [(77 -96 -82 15) -96]
Test Case: 809 | Input/Output: [(-48 48 39 -39) -48]
Test Case: 810 | Input/Output: [(41 8 -79 24) -79]
Test Case: 811 | Input/Output: [(99 52 -95 -26) -95]
Test Case: 812 | Input/Output: [(-69 56 -99 -91) -99]
Test Case: 813 | Input/Output: [(-76 85 -26 -50) -76]
Test Case: 814 | Input/Output: [(82 -9 -49 -76) -76]
Test Case: 815 | Input/Output: [(60 -50 11 -65) -65]
Test Case: 816 | Input/Output: [(-84 -98 98 -81) -98]
Test Case: 817 | Input/Output: [(7 -57 -70 -15) -70]
Test Case: 818 | Input/Output: [(-21 61 98 12) -21]
Test Case: 819 | Input/Output: [(-91 5 -92 -25) -92]
Test Case: 820 | Input/Output: [(-80 65 33 99) -80]
Test Case: 821 | Input/Output: [(-34 58 38 51) -34]
Test Case: 822 | Input/Output: [(32 -13 56 -43) -43]
Test Case: 823 | Input/Output: [(-27 34 13 69) -27]
Test Case: 824 | Input/Output: [(-47 52 13 -2) -47]
Test Case: 825 | Input/Output: [(-49 18 46 59) -49]
Test Case: 826 | Input/Output: [(96 6 88 -26) -26]
Test Case: 827 | Input/Output: [(33 -71 -27 -49) -71]
Test Case: 828 | Input/Output: [(-22 53 41 -13) -22]
Test Case: 829 | Input/Output: [(57 -1 -85 -80) -85]
Test Case: 830 | Input/Output: [(-58 71 52 -91) -91]
Test Case: 831 | Input/Output: [(-46 -99 73 -83) -99]
Test Case: 832 | Input/Output: [(-26 54 47 -46) -46]
Test Case: 833 | Input/Output: [(92 19 -19 87) -19]
Test Case: 834 | Input/Output: [(-14 -28 33 32) -28]
Test Case: 835 | Input/Output: [(-69 -54 98 77) -69]
Test Case: 836 | Input/Output: [(-86 2 -87 91) -87]
Test Case: 837 | Input/Output: [(62 63 92 -22) -22]
Test Case: 838 | Input/Output: [(16 -64 71 94) -64]
Test Case: 839 | Input/Output: [(80 -27 -24 -88) -88]
Test Case: 840 | Input/Output: [(48 40 -28 -49) -49]
Test Case: 841 | Input/Output: [(-29 87 -36 -92) -92]
Test Case: 842 | Input/Output: [(-91 -23 -19 -32) -91]
Test Case: 843 | Input/Output: [(-66 48 -58 -21) -66]
Test Case: 844 | Input/Output: [(47 42 -61 33) -61]
Test Case: 845 | Input/Output: [(-45 -24 -10 69) -45]
Test Case: 846 | Input/Output: [(35 78 19 37) 19]
Test Case: 847 | Input/Output: [(22 44 22 -17) -17]
Test Case: 848 | Input/Output: [(84 -73 -66 -77) -77]
Test Case: 849 | Input/Output: [(-69 -40 -71 35) -71]
Test Case: 850 | Input/Output: [(76 79 -62 6) -62]
Test Case: 851 | Input/Output: [(-14 44 -6 -46) -46]
Test Case: 852 | Input/Output: [(39 -53 23 17) -53]
Test Case: 853 | Input/Output: [(-39 -21 -36 1) -39]
Test Case: 854 | Input/Output: [(-25 -82 5 -51) -82]
Test Case: 855 | Input/Output: [(-93 -53 65 63) -93]
Test Case: 856 | Input/Output: [(79 -9 -1 40) -9]
Test Case: 857 | Input/Output: [(-67 3 -4 58) -67]
Test Case: 858 | Input/Output: [(-91 46 65 98) -91]
Test Case: 859 | Input/Output: [(-36 13 -63 52) -63]
Test Case: 860 | Input/Output: [(-94 -77 79 -52) -94]
Test Case: 861 | Input/Output: [(-47 -53 70 -4) -53]
Test Case: 862 | Input/Output: [(-39 -60 -56 14) -60]
Test Case: 863 | Input/Output: [(-76 2 81 68) -76]
Test Case: 864 | Input/Output: [(76 -84 -60 56) -84]
Test Case: 865 | Input/Output: [(78 65 -64 38) -64]
Test Case: 866 | Input/Output: [(79 43 56 28) 28]
Test Case: 867 | Input/Output: [(80 -60 92 -69) -69]
Test Case: 868 | Input/Output: [(-58 -28 -44 12) -58]
Test Case: 869 | Input/Output: [(50 1 32 27) 1]
Test Case: 870 | Input/Output: [(-50 62 84 -66) -66]
Test Case: 871 | Input/Output: [(-48 -49 46 18) -49]
Test Case: 872 | Input/Output: [(-63 -38 52 81) -63]
Test Case: 873 | Input/Output: [(18 -7 54 37) -7]
Test Case: 874 | Input/Output: [(-12 65 81 83) -12]
Test Case: 875 | Input/Output: [(-98 -44 -68 18) -98]
Test Case: 876 | Input/Output: [(56 -75 -31 21) -75]
Test Case: 877 | Input/Output: [(-99 -2 -59 51) -99]
Test Case: 878 | Input/Output: [(-94 87 48 22) -94]
Test Case: 879 | Input/Output: [(91 28 39 76) 28]
Test Case: 880 | Input/Output: [(-63 -40 -16 46) -63]
Test Case: 881 | Input/Output: [(14 4 -54 -38) -54]
Test Case: 882 | Input/Output: [(-98 -26 -88 54) -98]
Test Case: 883 | Input/Output: [(-23 -76 95 -83) -83]
Test Case: 884 | Input/Output: [(-58 91 89 -84) -84]
Test Case: 885 | Input/Output: [(-77 5 71 52) -77]
Test Case: 886 | Input/Output: [(-30 88 66 -54) -54]
Test Case: 887 | Input/Output: [(84 -37 17 -93) -93]
Test Case: 888 | Input/Output: [(25 9 37 -64) -64]
Test Case: 889 | Input/Output: [(11 -77 38 37) -77]
Test Case: 890 | Input/Output: [(48 50 -44 15) -44]
Test Case: 891 | Input/Output: [(88 39 -43 -43) -43]
Test Case: 892 | Input/Output: [(-84 41 -38 -72) -84]
Test Case: 893 | Input/Output: [(-16 46 45 -89) -89]
Test Case: 894 | Input/Output: [(-54 94 -88 49) -88]
Test Case: 895 | Input/Output: [(3 88 78 -98) -98]
Test Case: 896 | Input/Output: [(16 -65 77 29) -65]
Test Case: 897 | Input/Output: [(19 -47 -47 -75) -75]
Test Case: 898 | Input/Output: [(-38 -38 34 36) -38]
Test Case: 899 | Input/Output: [(-76 -68 -61 68) -76]
Test Case: 900 | Input/Output: [(62 -27 -76 -16) -76]
Test Case: 901 | Input/Output: [(-39 53 62 89) -39]
Test Case: 902 | Input/Output: [(23 72 95 -34) -34]
Test Case: 903 | Input/Output: [(13 -19 -45 10) -45]
Test Case: 904 | Input/Output: [(-85 -2 51 -43) -85]
Test Case: 905 | Input/Output: [(20 20 74 36) 20]
Test Case: 906 | Input/Output: [(-66 68 -64 -33) -66]
Test Case: 907 | Input/Output: [(-11 84 -13 -85) -85]
Test Case: 908 | Input/Output: [(-39 -28 -24 12) -39]
Test Case: 909 | Input/Output: [(-83 -34 -90 42) -90]
Test Case: 910 | Input/Output: [(-96 7 -60 50) -96]
Test Case: 911 | Input/Output: [(62 -46 -63 -92) -92]
Test Case: 912 | Input/Output: [(68 -53 -97 -62) -97]
Test Case: 913 | Input/Output: [(-36 54 97 -54) -54]
Test Case: 914 | Input/Output: [(-94 -81 63 52) -94]
Test Case: 915 | Input/Output: [(52 24 -55 -62) -62]
Test Case: 916 | Input/Output: [(41 -2 50 2) -2]
Test Case: 917 | Input/Output: [(21 -52 -13 -55) -55]
Test Case: 918 | Input/Output: [(-64 93 -18 -35) -64]
Test Case: 919 | Input/Output: [(-15 49 25 -84) -84]
Test Case: 920 | Input/Output: [(100 -1 -89 54) -89]
Test Case: 921 | Input/Output: [(29 20 49 -58) -58]
Test Case: 922 | Input/Output: [(-18 69 47 -59) -59]
Test Case: 923 | Input/Output: [(-88 -63 61 68) -88]
Test Case: 924 | Input/Output: [(70 -100 28 -46) -100]
Test Case: 925 | Input/Output: [(77 84 -84 96) -84]
Test Case: 926 | Input/Output: [(0 90 24 87) 0]
Test Case: 927 | Input/Output: [(51 -61 61 19) -61]
Test Case: 928 | Input/Output: [(-37 -18 69 -30) -37]
Test Case: 929 | Input/Output: [(-93 -18 55 -78) -93]
Test Case: 930 | Input/Output: [(-53 -51 -93 -92) -93]
Test Case: 931 | Input/Output: [(30 -19 41 -76) -76]
Test Case: 932 | Input/Output: [(94 45 -31 98) -31]
Test Case: 933 | Input/Output: [(-89 -91 -63 0) -91]
Test Case: 934 | Input/Output: [(80 -63 39 53) -63]
Test Case: 935 | Input/Output: [(-1 -28 -34 91) -34]
Test Case: 936 | Input/Output: [(-99 96 38 93) -99]
Test Case: 937 | Input/Output: [(-54 88 36 0) -54]
Test Case: 938 | Input/Output: [(27 -46 18 0) -46]
Test Case: 939 | Input/Output: [(-97 -63 -58 33) -97]
Test Case: 940 | Input/Output: [(-34 96 63 -88) -88]
Test Case: 941 | Input/Output: [(-60 -63 50 64) -63]
Test Case: 942 | Input/Output: [(-30 94 -20 -92) -92]
Test Case: 943 | Input/Output: [(-5 95 -13 25) -13]
Test Case: 944 | Input/Output: [(-99 -29 23 94) -99]
Test Case: 945 | Input/Output: [(-55 64 -10 -79) -79]
Test Case: 946 | Input/Output: [(4 -51 -75 -75) -75]
Test Case: 947 | Input/Output: [(82 77 2 -8) -8]
Test Case: 948 | Input/Output: [(5 16 -50 -45) -50]
Test Case: 949 | Input/Output: [(77 -92 97 -92) -92]
Test Case: 950 | Input/Output: [(63 80 78 85) 63]
Test Case: 951 | Input/Output: [(-50 28 -4 51) -50]
Test Case: 952 | Input/Output: [(73 -99 -22 -8) -99]
Test Case: 953 | Input/Output: [(45 8 -19 -90) -90]
Test Case: 954 | Input/Output: [(85 84 -24 23) -24]
Test Case: 955 | Input/Output: [(-67 -90 4 26) -90]
Test Case: 956 | Input/Output: [(-63 -21 55 -40) -63]
Test Case: 957 | Input/Output: [(83 46 -46 48) -46]
Test Case: 958 | Input/Output: [(54 -83 100 74) -83]
Test Case: 959 | Input/Output: [(-5 77 61 61) -5]
Test Case: 960 | Input/Output: [(9 64 28 -70) -70]
Test Case: 961 | Input/Output: [(95 56 -43 -47) -47]
Test Case: 962 | Input/Output: [(97 -88 -17 91) -88]
Test Case: 963 | Input/Output: [(-93 -68 -99 91) -99]
Test Case: 964 | Input/Output: [(92 72 7 -99) -99]
Test Case: 965 | Input/Output: [(91 -62 -96 -50) -96]
Test Case: 966 | Input/Output: [(87 -71 42 -28) -71]
Test Case: 967 | Input/Output: [(-34 -39 -19 75) -39]
Test Case: 968 | Input/Output: [(93 8 -63 76) -63]
Test Case: 969 | Input/Output: [(52 -85 7 93) -85]
Test Case: 970 | Input/Output: [(-3 -37 -100 69) -100]
Test Case: 971 | Input/Output: [(-77 63 -89 -93) -93]
Test Case: 972 | Input/Output: [(-60 68 -10 -64) -64]
Test Case: 973 | Input/Output: [(-94 -81 21 -20) -94]
Test Case: 974 | Input/Output: [(81 82 -27 -98) -98]
Test Case: 975 | Input/Output: [(72 -99 -72 52) -99]
Test Case: 976 | Input/Output: [(-63 75 85 -10) -63]
Test Case: 977 | Input/Output: [(-46 7 -44 29) -46]
Test Case: 978 | Input/Output: [(64 32 -68 33) -68]
Test Case: 979 | Input/Output: [(5 27 91 -68) -68]
Test Case: 980 | Input/Output: [(55 55 -59 7) -59]
Test Case: 981 | Input/Output: [(54 5 -44 -2) -44]
Test Case: 982 | Input/Output: [(2 55 84 -97) -97]
Test Case: 983 | Input/Output: [(-19 -18 -23 -73) -73]
Test Case: 984 | Input/Output: [(-100 -58 -11 95) -100]
Test Case: 985 | Input/Output: [(71 66 8 -32) -32]
Test Case: 986 | Input/Output: [(81 34 35 -21) -21]
Test Case: 987 | Input/Output: [(7 90 -34 52) -34]
Test Case: 988 | Input/Output: [(92 79 -70 -79) -79]
Test Case: 989 | Input/Output: [(-33 -70 -51 28) -70]
Test Case: 990 | Input/Output: [(-7 -15 32 -60) -60]
Test Case: 991 | Input/Output: [(91 -80 -73 -12) -80]
Test Case: 992 | Input/Output: [(91 83 87 25) 25]
Test Case: 993 | Input/Output: [(66 -57 -59 -70) -70]
Test Case: 994 | Input/Output: [(-37 6 -55 88) -55]
Test Case: 995 | Input/Output: [(-97 -45 75 -29) -97]
Test Case: 996 | Input/Output: [(36 85 -60 -70) -70]
Test Case: 997 | Input/Output: [(74 -68 48 13) -68]
Test Case: 998 | Input/Output: [(54 32 -54 59) -54]
Test Case: 999 | Input/Output: [(-66 92 -69 14) -69]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 120 72 -8 -2 -26 115 11 62 39 57 50 -118 -113 86 -57 -43
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[39 39 16 39] 16] [[58 -13 58 58] -13] [[-6 -22 -22 -22] -22] [[51 44 51 51] 44] [[-53 -15 -53 -53] -53] [[-62 -77 -77 -77] -77] [[23 23 23 67] 23] [[91 14 91 91] 14] [[45 45 45 27] 27] [[80 80 80 -59] -59] [(46 46 46 46) 46] [(-50 -50 -50 -50) -50] [(25 25 25 25) 25] [(82 82 82 82) 82] [(37 37 37 37) 37] [(59 83 86 34) 34] [(78 13 38 56) 13] [(49 53 89 7) 7] [(93 40 18 67) 18] [(87 74 35 65) 35] [(66 79 30 66) 30] [(7 32 78 20) 7] [(50 62 57 89) 50] [(62 77 8 76) 8] [(19 64 14 10) 10] [(61 34 87 2) 2] [(95 22 11 2) 2] [(8 4 1 6) 1] [(61 10 5 55) 5] [(64 71 52 23) 23] [(87 25 28 67) 25] [(7 33 73 30) 7] [(96 69 88 30) 30] [(90 53 67 73) 53] [(8 46 15 9) 8] [(85 71 -64 -69) -69] [(-88 46 71 -29) -88] [(-21 -80 75 41) -80] [(-29 -36 -99 -82) -99] [(-81 69 56 45) -81] [(-14 -93 -73 90) -93] [(47 84 -84 -23) -84] [(31 98 73 -38) -38] [(69 -33 -77 6) -77] [(69 66 -71 71) -71] [(-61 -87 8 -23) -87] [(-31 -15 47 69) -31] [(-19 -29 95 20) -29] [(-66 -60 -35 15) -66] [(67 75 -10 45) -10] [(-32 -57 -4 26) -57] [(66 -54 -9 81) -54] [(54 -35 -8 1) -35] [(-29 45 -100 -86) -100] [(-11 -78 4 -10) -78] [(89 -40 -93 -21) -93] [(4 -58 -47 -51) -58] [(84 -32 66 80) -32] [(85 14 79 45) 14] [(7 79 -28 77) -28] [(-70 -49 -81 5) -81] [(-86 25 21 -31) -86] [(25 -8 -55 67) -55] [(-4 72 -91 -40) -91] [(29 62 6 6) 6] [(-79 -46 49 -82) -82] [(92 -15 -76 44) -76] [(52 -86 -59 79) -86] [(-58 -17 -100 -27) -100] [(32 -57 28 -100) -100] [(-16 -58 31 -97) -97] [(52 56 -68 87) -68] [(-66 -10 65 80) -66] [(54 -71 -27 49) -71] [(-25 38 86 24) -25] [(-78 -2 -94 -79) -94] [(-78 -5 -52 -53) -78] [(-57 12 74 -33) -57] [(-7 99 97 -94) -94] [(34 13 -87 -13) -87] [(64 91 -78 -19) -78] [(-8 -3 -64 21) -64] [(-78 50 -81 -48) -81] [(40 43 -52 21) -52] [(-11 96 -30 -82) -82] [(-81 -57 -75 -17) -81] [(-2 77 35 60) -2] [(3 97 13 95) 3] [(-93 55 -53 -63) -93] [(-47 61 69 -81) -81] [(100 49 -65 50) -65] [(57 -47 69 16) -47] [(-40 -33 38 61) -40] [(-75 53 49 89) -75] [(86 -27 68 -90) -90])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 39                 
Correct output: -13                 | Program output: 58                 
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 51                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 67                 
Correct output: 14                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 34                 
Correct output: 13                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 67                 
Correct output: 35                  | Program output: 65                 
Correct output: 30                  | Program output: 66                 
Correct output: 7                   | Program output: 20                 
Correct output: 50                  | Program output: 89                 
Correct output: 8                   | Program output: 76                 
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 6                  
Correct output: 5                   | Program output: 55                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 67                 
Correct output: 7                   | Program output: 30                 
Correct output: 30                  | Program output: 30                 
Correct output: 53                  | Program output: 73                 
Correct output: 8                   | Program output: 9                  
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -29                
Correct output: -80                 | Program output: 41                 
Correct output: -99                 | Program output: -82                
Correct output: -81                 | Program output: 45                 
Correct output: -93                 | Program output: 90                 
Correct output: -84                 | Program output: -23                
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: 6                  
Correct output: -71                 | Program output: 71                 
Correct output: -87                 | Program output: -23                
Correct output: -31                 | Program output: 69                 
Correct output: -29                 | Program output: 20                 
Correct output: -66                 | Program output: 15                 
Correct output: -10                 | Program output: 45                 
Correct output: -57                 | Program output: 26                 
Correct output: -54                 | Program output: 81                 
Correct output: -35                 | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -78                 | Program output: -10                
Correct output: -93                 | Program output: -21                
Correct output: -58                 | Program output: -51                
Correct output: -32                 | Program output: 80                 
Correct output: 14                  | Program output: 45                 
Correct output: -28                 | Program output: 77                 
Correct output: -81                 | Program output: 5                  
Correct output: -86                 | Program output: -31                
Correct output: -55                 | Program output: 67                 
Correct output: -91                 | Program output: -40                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: 44                 
Correct output: -86                 | Program output: 79                 
Correct output: -100                | Program output: -27                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: 87                 
Correct output: -66                 | Program output: 80                 
Correct output: -71                 | Program output: 49                 
Correct output: -25                 | Program output: 24                 
Correct output: -94                 | Program output: -79                
Correct output: -78                 | Program output: -53                
Correct output: -57                 | Program output: -33                
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: -13                
Correct output: -78                 | Program output: -19                
Correct output: -64                 | Program output: 21                 
Correct output: -81                 | Program output: -48                
Correct output: -52                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -17                
Correct output: -2                  | Program output: 60                 
Correct output: 3                   | Program output: 95                 
Correct output: -93                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 50                 
Correct output: -47                 | Program output: 16                 
Correct output: -40                 | Program output: 61                 
Correct output: -75                 | Program output: 89                 
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_974} {:close 0, :instruction exec_noop} {:close 0, :instruction 6} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 1, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_swap () (exec_yankdup) boolean_not boolean_xor integer_div boolean_shove in3 boolean_eq in4 print_integer exec_do*count (boolean_flush exec_dup_items exec_empty) integer_div exec_y_when_autoconstructing () boolean_shove exec_pop (boolean_and boolean_dup_times print_integer) integer_empty exec_do*range (exec_do*range (exec_stackdepth integer_gt exec_dup (integer_dup_times exec_s (boolean_pop in2 boolean_not exec_noop boolean_dup exec_k_when_autoconstructing (exec_s_when_autoconstructing () (integer_gt integer_mod) (integer_swap) exec_pop (boolean_eq) boolean_frominteger exec_when (exec_dup_times (integer_gte exec_do*times (in2 boolean_xor) exec_dup_items tag_integer_974 exec_noop 6 integer_shove integer_stackdepth exec_s (integer_dec exec_yank exec_do*times ()) (integer_dup exec_swap (integer_dup_items integer_gt in2) (exec_dup (integer_rot boolean_eq exec_do*while (exec_while () boolean_or boolean_swap) exec_k (integer_empty integer_mult boolean_or exec_stackdepth integer_lt) (integer_yankdup exec_do*while () integer_yank integer_fromboolean boolean_eq exec_when (integer_empty boolean_and) exec_do*times (exec_empty integer_mult boolean_swap in4) exec_empty) boolean_swap boolean_invert_first_then_and))) ()))) ()) () ()))))
Lexicase best errors: [1 0 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 127
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_974} {:close 0, :instruction exec_noop} {:close 0, :instruction 6} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 1, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_swap () (exec_yankdup) boolean_not boolean_xor integer_div boolean_shove in3 boolean_eq in4 print_integer exec_do*count (boolean_flush exec_dup_items exec_empty) integer_div exec_y_when_autoconstructing () boolean_shove exec_pop (boolean_and boolean_dup_times print_integer) integer_empty exec_do*range (exec_do*range (exec_stackdepth integer_gt exec_dup (integer_dup_times exec_s (boolean_pop in2 boolean_not exec_noop boolean_dup exec_k_when_autoconstructing (exec_s_when_autoconstructing () (integer_gt integer_mod) (integer_swap) exec_pop (boolean_eq) boolean_frominteger exec_when (exec_dup_times (integer_gte exec_do*times (in2 boolean_xor) exec_dup_items tag_integer_974 exec_noop 6 integer_shove integer_stackdepth exec_s (integer_dec exec_yank exec_do*times ()) (integer_dup exec_swap (integer_dup_items integer_gt in2) (exec_dup (integer_rot boolean_eq exec_do*while (exec_while () boolean_or boolean_swap) exec_k (integer_empty integer_mult boolean_or exec_stackdepth integer_lt) (integer_yankdup exec_do*while () integer_yank integer_fromboolean boolean_eq exec_when (integer_empty boolean_and) exec_do*times (exec_empty integer_mult boolean_swap in4) exec_empty) boolean_swap boolean_invert_first_then_and))) ()))) ()) () ()))))
Zero cases best errors: [1 0 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 127
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 6 1000 1000 4 1 6 6 4 6)
Population mean number of elite cases: 2.03
Count of perfect (error zero) individuals by case: (1 6 0 0 4 1 6 6 4 6)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 1, :instruction tagged_429} {:close 0, :instruction integer_yank} {:close 0, :instruction -13} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank})
Best program: (boolean_dup_times in4 exec_s_when_autoconstructing (exec_empty integer_yank boolean_rot integer_eq exec_y (print_integer exec_empty boolean_frominteger) exec_do*times (integer_mod boolean_dup_times) boolean_yankdup exec_k_when_autoconstructing (exec_yank boolean_shove in3 exec_if (boolean_stackdepth integer_dup_times integer_gte boolean_invert_second_then_and boolean_yank exec_k_when_autoconstructing (exec_do*times (exec_noop boolean_dup tagged_429) integer_yank -13 print_boolean) (exec_yank exec_shove (print_integer print_integer) integer_gte boolean_pop integer_dup_items) integer_flush integer_min integer_mult in2 boolean_dup_items integer_flush exec_flush integer_dup_times) (exec_k_when_autoconstructing (boolean_not) (boolean_frominteger exec_if () (boolean_dup_times exec_yank)))) ()) () ())
Errors: [1 0 1 1 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 54
Size: 72
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 9.966
Median total errors in population: 10
Error averages by case: (0.999 0.994 1.0 1.0 0.996 0.999 0.994 0.994 0.996 0.994)
Error minima by case: (0 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 51.687
Average program size in population (points): 70.981
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.276
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 497668
--- Timings ---
Current time: 1559583656405 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.5%
Reproduction:         0.8 seconds, 30.7%
Fitness Testing:      1.7 seconds, 65.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: 58                 
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 51                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 34                 
Correct output: 13                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 20                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 30                 
Correct output: 30                  | Program output: 30                 
Correct output: 53                  | Program output: 67                 
Correct output: 8                   | Program output: 9                  
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -29                
Correct output: -80                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 45                 
Correct output: -93                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -23                
Correct output: -31                 | Program output: 47                 
Correct output: -29                 | Program output: 20                 
Correct output: -66                 | Program output: -35                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -4                 
Correct output: -54                 | Program output: -9                 
Correct output: -35                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -10                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -51                
Correct output: -32                 | Program output: 66                 
Correct output: 14                  | Program output: 45                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 65                 
Correct output: -71                 | Program output: -27                
Correct output: -25                 | Program output: 24                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -53                
Correct output: -57                 | Program output: -33                
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -75                
Correct output: -2                  | Program output: 35                 
Correct output: 3                   | Program output: 13                 
Correct output: -93                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: 16                 
Correct output: -40                 | Program output: 38                 
Correct output: -75                 | Program output: 49                 
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_591} {:close 1, :instruction integer_pop})
Lexicase best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 integer_lte boolean_invert_first_then_and in3 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (tagged_268) integer_fromboolean exec_do*count ()) (exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_stackdepth) (boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ()))))) () ())
Lexicase best errors: [0 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 99
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_591} {:close 1, :instruction integer_pop})
Zero cases best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 integer_lte boolean_invert_first_then_and in3 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (tagged_268) integer_fromboolean exec_do*count ()) (exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_stackdepth) (boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ()))))) () ())
Zero cases best errors: [0 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 99
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (446 1000 448 163 219 184 614 219 848 614)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (446 0 448 163 219 184 614 219 848 614)
Population mean number of perfect (error zero) cases: 3.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_591} {:close 1, :instruction integer_pop})
Best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 integer_lte boolean_invert_first_then_and in3 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (tagged_268) integer_fromboolean exec_do*count ()) (exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_stackdepth) (boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ()))))) () ())
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 74
Size: 99
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 6.245
Median total errors in population: 5
Error averages by case: (0.554 1.0 0.552 0.837 0.781 0.816 0.386 0.781 0.152 0.386)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.036
Average program size in population (points): 65.578
Average percent parens in population: 0.224
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.529
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.549
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 161
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1286999
--- Timings ---
Current time: 1559583659427 milliseconds
Total Time:           6.1 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.6 seconds, 41.8%
Fitness Testing:      2.6 seconds, 42.4%
Report:               0.9 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: 58                 
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 51                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 34                 
Correct output: 13                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 20                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 30                 
Correct output: 30                  | Program output: 30                 
Correct output: 53                  | Program output: 67                 
Correct output: 8                   | Program output: 9                  
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -29                
Correct output: -80                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 45                 
Correct output: -93                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -23                
Correct output: -31                 | Program output: 47                 
Correct output: -29                 | Program output: 20                 
Correct output: -66                 | Program output: -35                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -4                 
Correct output: -54                 | Program output: -9                 
Correct output: -35                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -10                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -51                
Correct output: -32                 | Program output: 66                 
Correct output: 14                  | Program output: 45                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 65                 
Correct output: -71                 | Program output: -27                
Correct output: -25                 | Program output: 24                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -53                
Correct output: -57                 | Program output: -33                
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -75                
Correct output: -2                  | Program output: 35                 
Correct output: 3                   | Program output: 13                 
Correct output: -93                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: 16                 
Correct output: -40                 | Program output: 38                 
Correct output: -75                 | Program output: 49                 
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 integer_lte boolean_invert_first_then_and in3 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and exec_yank exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing () () ())
Lexicase best errors: [1 0 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 integer_lte boolean_invert_first_then_and in3 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and exec_yank exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing () () ())
Zero cases best errors: [1 0 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (152 743 1000 1000 152 1000 749 745 744 910)
Population mean number of elite cases: 7.20
Count of perfect (error zero) individuals by case: (152 743 0 0 152 0 749 745 744 910)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_591} {:close 1, :instruction integer_pop})
Best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_gte integer_dup integer_eq integer_sub tagged_560 in4 integer_lte boolean_invert_first_then_and in3 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (tagged_268) integer_fromboolean exec_do*count ()) (exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_stackdepth) (boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ()))))) () ())
Errors: [1 0 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 69
Size: 93
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 5.805
Median total errors in population: 5
Error averages by case: (0.848 0.257 1.0 1.0 0.848 1.0 0.251 0.255 0.256 0.09)
Error minima by case: (0 0 1 1 0 1 0 0 0 0)
Average genome size in population (length): 64.947
Average program size in population (points): 86.032
Average percent parens in population: 0.229
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.4925
Median age in population: 3.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 242
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 254
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1742742
--- Timings ---
Current time: 1559583662396 milliseconds
Total Time:           9.2 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.7 seconds, 51.2%
Fitness Testing:      3.1 seconds, 33.9%
Report:               1.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 194
Test mean error for best: 0.19400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: 58                 
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 51                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 34                 
Correct output: 13                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 30                  | Program output: 30                 
Correct output: 53                  | Program output: 67                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -29                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -32                
Correct output: -54                 | Program output: -9                 
Correct output: -35                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -51                
Correct output: -32                 | Program output: 66                 
Correct output: 14                  | Program output: 45                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: -71                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -2                  | Program output: -2                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: 16                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_591} {:close 1, :instruction integer_pop})
Lexicase best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min boolean_yankdup integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (tagged_268) integer_fromboolean exec_do*count ()) (exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) boolean_eq integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ()))) () ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 106
Percent parens: 0.236
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_591} {:close 1, :instruction integer_pop})
Zero cases best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min boolean_yankdup integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (tagged_268) integer_fromboolean exec_do*count ()) (exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) boolean_eq integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ()))) () ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 106
Percent parens: 0.236
--- Lexicase Population Statistics ---
Count of elite individuals by case: (906 1000 533 356 357 905 533 907 889 892)
Population mean number of elite cases: 7.28
Count of perfect (error zero) individuals by case: (906 0 533 356 357 905 533 907 889 892)
Population mean number of perfect (error zero) cases: 6.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_591} {:close 1, :instruction integer_pop})
Best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min boolean_yankdup integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (tagged_268) integer_fromboolean exec_do*count ()) (exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) boolean_eq integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ()))) () ())
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 81
Size: 106
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 3.722
Median total errors in population: 3
Error averages by case: (0.094 1.0 0.467 0.644 0.643 0.095 0.467 0.093 0.111 0.108)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.405
Average program size in population (points): 98.172
Average percent parens in population: 0.251
Minimum age in population: 4.0
Maximum age in population: 6.0
Average age in population: 5.048
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2245151
--- Timings ---
Current time: 1559583665131 milliseconds
Total Time:          11.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.6 seconds, 55.4%
Fitness Testing:      3.6 seconds, 30.1%
Report:               1.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 220
Test mean error for best: 0.22000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: -13                
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 44                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 34                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 20                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 30                 
Correct output: 30                  | Program output: 30                 
Correct output: 53                  | Program output: 53                 
Correct output: 8                   | Program output: 9                  
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -29                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 45                 
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -15                
Correct output: -29                 | Program output: -29                
Correct output: -66                 | Program output: -60                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: -32                
Correct output: 14                  | Program output: 14                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -10                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: 24                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -53                
Correct output: -57                 | Program output: -33                
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -75                
Correct output: -2                  | Program output: 35                 
Correct output: 3                   | Program output: 13                 
Correct output: -93                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -40                 | Program output: -33                
Correct output: -75                 | Program output: 49                 
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_591} {:close 1, :instruction integer_pop})
Lexicase best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in2 boolean_invert_first_then_and in3 integer_min boolean_yankdup integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_gte boolean_empty integer_yank integer_dec integer_fromboolean) (tagged_268) integer_fromboolean exec_do*count ()) (exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ()))) () ())
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 106
Percent parens: 0.236
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_591} {:close 1, :instruction integer_pop})
Zero cases best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in2 boolean_invert_first_then_and in3 integer_min boolean_yankdup integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_gte boolean_empty integer_yank integer_dec integer_fromboolean) (tagged_268) integer_fromboolean exec_do*count ()) (exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ()))) () ())
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 106
Percent parens: 0.236
--- Lexicase Population Statistics ---
Count of elite individuals by case: (891 897 912 899 876 3 900 878 3 3)
Population mean number of elite cases: 6.26
Count of perfect (error zero) individuals by case: (891 897 912 899 876 3 900 878 3 3)
Population mean number of perfect (error zero) cases: 6.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_591} {:close 1, :instruction integer_pop})
Best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in2 boolean_invert_first_then_and in3 integer_min boolean_yankdup integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_gte boolean_empty integer_yank integer_dec integer_fromboolean) (tagged_268) integer_fromboolean exec_do*count ()) (exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ()))) () ())
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 81
Size: 106
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 3.738
Median total errors in population: 3
Error averages by case: (0.109 0.103 0.088 0.101 0.124 0.997 0.1 0.122 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 80.933
Average program size in population (points): 105.985
Average percent parens in population: 0.236
Minimum age in population: 6.5
Maximum age in population: 7.5
Average age in population: 7.017
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 288
Genome diversity (% unique genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 298
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.01
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2771705
--- Timings ---
Current time: 1559583668019 milliseconds
Total Time:          14.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.6 seconds, 58.2%
Fitness Testing:      4.1 seconds, 27.5%
Report:               2.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 214
Test mean error for best: 0.21400
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: -13                
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 44                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 45                 
Correct output: -59                 | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 14                 
Correct output: 2                   | Program output: 34                 
Correct output: 2                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 52                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 7                  
Correct output: 30                  | Program output: 69                 
Correct output: 53                  | Program output: 53                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: 31                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -29                 | Program output: -29                
Correct output: -66                 | Program output: -66                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: -32                
Correct output: 14                  | Program output: 14                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: -57                
Correct output: -97                 | Program output: -58                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -94                 | Program output: -7                 
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -30                
Correct output: -81                 | Program output: -81                
Correct output: -2                  | Program output: -2                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -27                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_591} {:close 1, :instruction integer_pop})
Lexicase best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while (integer_lt boolean_and integer_gt) boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (tagged_268 integer_fromboolean tagged_268) integer_fromboolean exec_do*count ()) (exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and boolean_yank) boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) () integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ()))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 108
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_591} {:close 1, :instruction integer_pop})
Zero cases best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while (integer_lt boolean_and integer_gt) boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (tagged_268 integer_fromboolean tagged_268) integer_fromboolean exec_do*count ()) (exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and boolean_yank) boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) () integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ()))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 108
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (371 732 733 372 899 879 878 894 372 372)
Population mean number of elite cases: 6.50
Count of perfect (error zero) individuals by case: (371 732 733 372 899 879 878 894 372 372)
Population mean number of perfect (error zero) cases: 6.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_560} {:close 2, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction tagged_268} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_591} {:close 1, :instruction integer_pop})
Best program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (integer_fromboolean) tagged_268) (integer_fromboolean exec_do*count ()) exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ())) () ())) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 85
Size: 114
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 3.498
Median total errors in population: 4
Error averages by case: (0.629 0.268 0.267 0.628 0.101 0.121 0.122 0.106 0.628 0.628)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 81.358
Average program size in population (points): 106.469
Average percent parens in population: 0.236
Minimum age in population: 7.5
Maximum age in population: 9.5
Average age in population: 8.3445
Median age in population: 8.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3302858
--- Timings ---
Current time: 1559583670789 milliseconds
Total Time:          17.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.5 seconds, 59.9%
Fitness Testing:      4.5 seconds, 25.8%
Report:               2.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 5
Successful program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (integer_fromboolean) tagged_268) (integer_fromboolean exec_do*count ()) exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ())) () ())) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 114


Auto-simplifying with starting size: 114
step: 0
program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (integer_fromboolean) tagged_268) (integer_fromboolean exec_do*count ()) exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ())) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 500
program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (integer_fromboolean) tagged_268) (integer_fromboolean exec_do*count ()) exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ())) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 1000
program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (integer_fromboolean) tagged_268) (integer_fromboolean exec_do*count ()) exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ())) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 1500
program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (integer_fromboolean) tagged_268) (integer_fromboolean exec_do*count ()) exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ())) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 2000
program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (integer_fromboolean) tagged_268) (integer_fromboolean exec_do*count ()) exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ())) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 2500
program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (integer_fromboolean) tagged_268) (integer_fromboolean exec_do*count ()) exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ())) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 3000
program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (integer_fromboolean) tagged_268) (integer_fromboolean exec_do*count ()) exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ())) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 3500
program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (integer_fromboolean) tagged_268) (integer_fromboolean exec_do*count ()) exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ())) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 4000
program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (integer_fromboolean) tagged_268) (integer_fromboolean exec_do*count ()) exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ())) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 4500
program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (integer_fromboolean) tagged_268) (integer_fromboolean exec_do*count ()) exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ())) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 5000
program: (integer_shove integer_shove integer_sub integer_gte integer_dup integer_eq integer_sub tagged_560 in4 in1 boolean_invert_first_then_and in3 integer_min in2 integer_min boolean_yankdup boolean_shove integer_rot print_integer integer_eq integer_flush boolean_stackdepth print_boolean exec_do*while () integer_lt boolean_and integer_gt boolean_and in2 exec_shove (integer_dup_items) integer_mult integer_dup_items exec_s_when_autoconstructing (exec_do*range (exec_do*count (exec_k_when_autoconstructing (boolean_rot exec_s_when_autoconstructing () (integer_stackdepth integer_dup_times boolean_empty integer_yank integer_dec integer_fromboolean) (integer_fromboolean) tagged_268) (integer_fromboolean exec_do*count ()) exec_flush integer_inc exec_noop boolean_rot integer_max exec_if (print_exec (integer_lt exec_shove () exec_dup (integer_min exec_k (exec_eq boolean_rot) (integer_gte) boolean_yankdup boolean_eq integer_rot in3 boolean_invert_second_then_and) boolean_yank) integer_max integer_rot in3 boolean_invert_second_then_and) (boolean_yank) integer_stackdepth) boolean_xor exec_s (boolean_stackdepth exec_y_when_autoconstructing (exec_s (boolean_stackdepth exec_y_when_autoconstructing (tagged_591 integer_pop)) () ())) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 214
Test mean error for best: 0.21400
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: -13                
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 44                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 45                 
Correct output: -59                 | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 14                 
Correct output: 2                   | Program output: 34                 
Correct output: 2                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 52                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 7                  
Correct output: 30                  | Program output: 69                 
Correct output: 53                  | Program output: 53                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: 31                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -29                 | Program output: -29                
Correct output: -66                 | Program output: -66                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: -32                
Correct output: 14                  | Program output: 14                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: -57                
Correct output: -97                 | Program output: -58                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -94                 | Program output: -7                 
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -30                
Correct output: -81                 | Program output: -81                
Correct output: -2                  | Program output: -2                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -27                
;;******************************
