Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-73 -73 -73 16] -73] [[-6 -83 -6 -6] -83] [[-8 8 8 8] -8] [[-24 -24 -24 -45] -45] [[6 -98 6 6] -98] [[19 -94 19 19] -94] [[63 63 0 63] 0] [[44 10 10 10] 10] [[-59 -59 -72 -59] -72] [[-96 -96 88 -96] -96] [(-81 -81 -81 -81) -81] [(-50 -50 -50 -50) -50] [(-74 -74 -74 -74) -74] [(-83 -83 -83 -83) -83] [(65 65 65 65) 65] [(8 84 66 15) 8] [(94 19 24 76) 19] [(70 65 29 2) 2] [(30 48 17 76) 17] [(71 21 20 84) 20] [(63 72 50 4) 4] [(27 95 97 85) 27] [(65 9 64 86) 9] [(79 41 36 74) 36] [(29 10 51 82) 10] [(16 94 94 96) 16] [(42 79 52 75) 42] [(97 93 31 15) 15] [(64 58 30 86) 30] [(66 93 62 78) 62] [(94 66 25 26) 25] [(36 97 1 87) 1] [(32 79 60 43) 32] [(44 97 59 8) 8] [(39 82 31 28) 28] [(56 70 -16 -41) -41] [(-53 -84 -39 -68) -84] [(-25 3 43 44) -25] [(69 90 32 57) 32] [(-45 63 86 8) -45] [(-32 45 14 81) -32] [(-53 24 -75 56) -75] [(-64 -52 -39 86) -64] [(70 -29 -41 55) -41] [(49 -77 -55 30) -77] [(81 81 36 -87) -87] [(5 -37 80 45) -37] [(37 91 -21 25) -21] [(-89 92 96 73) -89] [(-68 53 -71 -66) -71] [(-13 74 92 -7) -13] [(-75 -88 54 -75) -88] [(48 29 -84 6) -84] [(20 14 -23 -71) -71] [(62 36 -96 15) -96] [(-22 36 24 -70) -70] [(72 -41 -60 -31) -60] [(70 51 32 -62) -62] [(2 57 11 42) 2] [(59 -88 22 -46) -88] [(-27 30 -36 -89) -89] [(11 -4 -89 -35) -89] [(3 50 100 -67) -67] [(-60 45 65 -51) -60] [(-75 97 -64 -56) -75] [(-28 -57 -38 70) -57] [(-53 -12 30 68) -53] [(22 -46 45 -19) -46] [(98 74 -6 -77) -77] [(41 -71 47 70) -71] [(-16 -58 26 -96) -96] [(-26 -39 72 -37) -39] [(77 -99 37 -93) -99] [(80 66 34 -58) -58] [(16 -21 -70 45) -70] [(-89 12 -44 76) -89] [(-61 -20 -27 -55) -61] [(27 -11 -30 -4) -30] [(-99 8 71 97) -99] [(-2 -13 52 -3) -13] [(-40 26 8 73) -40] [(-98 -66 74 78) -98] [(-85 73 40 23) -85] [(-25 89 -68 -59) -68] [(-50 -59 63 52) -59] [(-72 -32 63 11) -72] [(-96 -18 -28 14) -96] [(-31 15 -10 -73) -73] [(-44 -27 -62 89) -62] [(41 -78 93 23) -78] [(47 -32 -3 -58) -58] [(78 -44 10 -3) -44] [(31 -31 31 -41) -41] [(53 -70 -35 95) -70] [(62 42 -41 51) -41])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-73 -73 -73 16] -73]
Train Case:   6 | Input/Output: [[-6 -83 -6 -6] -83]
Train Case:   7 | Input/Output: [[-8 8 8 8] -8]
Train Case:   8 | Input/Output: [[-24 -24 -24 -45] -45]
Train Case:   9 | Input/Output: [[6 -98 6 6] -98]
Train Case:  10 | Input/Output: [[19 -94 19 19] -94]
Train Case:  11 | Input/Output: [[63 63 0 63] 0]
Train Case:  12 | Input/Output: [[44 10 10 10] 10]
Train Case:  13 | Input/Output: [[-59 -59 -72 -59] -72]
Train Case:  14 | Input/Output: [[-96 -96 88 -96] -96]
Train Case:  15 | Input/Output: [(-81 -81 -81 -81) -81]
Train Case:  16 | Input/Output: [(-50 -50 -50 -50) -50]
Train Case:  17 | Input/Output: [(-74 -74 -74 -74) -74]
Train Case:  18 | Input/Output: [(-83 -83 -83 -83) -83]
Train Case:  19 | Input/Output: [(65 65 65 65) 65]
Train Case:  20 | Input/Output: [(8 84 66 15) 8]
Train Case:  21 | Input/Output: [(94 19 24 76) 19]
Train Case:  22 | Input/Output: [(70 65 29 2) 2]
Train Case:  23 | Input/Output: [(30 48 17 76) 17]
Train Case:  24 | Input/Output: [(71 21 20 84) 20]
Train Case:  25 | Input/Output: [(63 72 50 4) 4]
Train Case:  26 | Input/Output: [(27 95 97 85) 27]
Train Case:  27 | Input/Output: [(65 9 64 86) 9]
Train Case:  28 | Input/Output: [(79 41 36 74) 36]
Train Case:  29 | Input/Output: [(29 10 51 82) 10]
Train Case:  30 | Input/Output: [(16 94 94 96) 16]
Train Case:  31 | Input/Output: [(42 79 52 75) 42]
Train Case:  32 | Input/Output: [(97 93 31 15) 15]
Train Case:  33 | Input/Output: [(64 58 30 86) 30]
Train Case:  34 | Input/Output: [(66 93 62 78) 62]
Train Case:  35 | Input/Output: [(94 66 25 26) 25]
Train Case:  36 | Input/Output: [(36 97 1 87) 1]
Train Case:  37 | Input/Output: [(32 79 60 43) 32]
Train Case:  38 | Input/Output: [(44 97 59 8) 8]
Train Case:  39 | Input/Output: [(39 82 31 28) 28]
Train Case:  40 | Input/Output: [(56 70 -16 -41) -41]
Train Case:  41 | Input/Output: [(-53 -84 -39 -68) -84]
Train Case:  42 | Input/Output: [(-25 3 43 44) -25]
Train Case:  43 | Input/Output: [(69 90 32 57) 32]
Train Case:  44 | Input/Output: [(-45 63 86 8) -45]
Train Case:  45 | Input/Output: [(-32 45 14 81) -32]
Train Case:  46 | Input/Output: [(-53 24 -75 56) -75]
Train Case:  47 | Input/Output: [(-64 -52 -39 86) -64]
Train Case:  48 | Input/Output: [(70 -29 -41 55) -41]
Train Case:  49 | Input/Output: [(49 -77 -55 30) -77]
Train Case:  50 | Input/Output: [(81 81 36 -87) -87]
Train Case:  51 | Input/Output: [(5 -37 80 45) -37]
Train Case:  52 | Input/Output: [(37 91 -21 25) -21]
Train Case:  53 | Input/Output: [(-89 92 96 73) -89]
Train Case:  54 | Input/Output: [(-68 53 -71 -66) -71]
Train Case:  55 | Input/Output: [(-13 74 92 -7) -13]
Train Case:  56 | Input/Output: [(-75 -88 54 -75) -88]
Train Case:  57 | Input/Output: [(48 29 -84 6) -84]
Train Case:  58 | Input/Output: [(20 14 -23 -71) -71]
Train Case:  59 | Input/Output: [(62 36 -96 15) -96]
Train Case:  60 | Input/Output: [(-22 36 24 -70) -70]
Train Case:  61 | Input/Output: [(72 -41 -60 -31) -60]
Train Case:  62 | Input/Output: [(70 51 32 -62) -62]
Train Case:  63 | Input/Output: [(2 57 11 42) 2]
Train Case:  64 | Input/Output: [(59 -88 22 -46) -88]
Train Case:  65 | Input/Output: [(-27 30 -36 -89) -89]
Train Case:  66 | Input/Output: [(11 -4 -89 -35) -89]
Train Case:  67 | Input/Output: [(3 50 100 -67) -67]
Train Case:  68 | Input/Output: [(-60 45 65 -51) -60]
Train Case:  69 | Input/Output: [(-75 97 -64 -56) -75]
Train Case:  70 | Input/Output: [(-28 -57 -38 70) -57]
Train Case:  71 | Input/Output: [(-53 -12 30 68) -53]
Train Case:  72 | Input/Output: [(22 -46 45 -19) -46]
Train Case:  73 | Input/Output: [(98 74 -6 -77) -77]
Train Case:  74 | Input/Output: [(41 -71 47 70) -71]
Train Case:  75 | Input/Output: [(-16 -58 26 -96) -96]
Train Case:  76 | Input/Output: [(-26 -39 72 -37) -39]
Train Case:  77 | Input/Output: [(77 -99 37 -93) -99]
Train Case:  78 | Input/Output: [(80 66 34 -58) -58]
Train Case:  79 | Input/Output: [(16 -21 -70 45) -70]
Train Case:  80 | Input/Output: [(-89 12 -44 76) -89]
Train Case:  81 | Input/Output: [(-61 -20 -27 -55) -61]
Train Case:  82 | Input/Output: [(27 -11 -30 -4) -30]
Train Case:  83 | Input/Output: [(-99 8 71 97) -99]
Train Case:  84 | Input/Output: [(-2 -13 52 -3) -13]
Train Case:  85 | Input/Output: [(-40 26 8 73) -40]
Train Case:  86 | Input/Output: [(-98 -66 74 78) -98]
Train Case:  87 | Input/Output: [(-85 73 40 23) -85]
Train Case:  88 | Input/Output: [(-25 89 -68 -59) -68]
Train Case:  89 | Input/Output: [(-50 -59 63 52) -59]
Train Case:  90 | Input/Output: [(-72 -32 63 11) -72]
Train Case:  91 | Input/Output: [(-96 -18 -28 14) -96]
Train Case:  92 | Input/Output: [(-31 15 -10 -73) -73]
Train Case:  93 | Input/Output: [(-44 -27 -62 89) -62]
Train Case:  94 | Input/Output: [(41 -78 93 23) -78]
Train Case:  95 | Input/Output: [(47 -32 -3 -58) -58]
Train Case:  96 | Input/Output: [(78 -44 10 -3) -44]
Train Case:  97 | Input/Output: [(31 -31 31 -41) -41]
Train Case:  98 | Input/Output: [(53 -70 -35 95) -70]
Train Case:  99 | Input/Output: [(62 42 -41 51) -41]
Test Case:   0 | Input/Output: [[-71 -71 -52 -71] -71]
Test Case:   1 | Input/Output: [[54 54 40 54] 40]
Test Case:   2 | Input/Output: [[-30 -30 41 -30] -30]
Test Case:   3 | Input/Output: [[-74 -74 -74 -93] -93]
Test Case:   4 | Input/Output: [[-25 -25 -25 82] -25]
Test Case:   5 | Input/Output: [[70 -47 -47 -47] -47]
Test Case:   6 | Input/Output: [[68 28 68 68] 28]
Test Case:   7 | Input/Output: [[-2 -2 -55 -2] -55]
Test Case:   8 | Input/Output: [[-81 -30 -30 -30] -81]
Test Case:   9 | Input/Output: [[82 -37 82 82] -37]
Test Case:  10 | Input/Output: [[72 72 72 -17] -17]
Test Case:  11 | Input/Output: [[88 31 31 31] 31]
Test Case:  12 | Input/Output: [[-43 -43 18 -43] -43]
Test Case:  13 | Input/Output: [[4 39 39 39] 4]
Test Case:  14 | Input/Output: [[-9 -9 -61 -9] -61]
Test Case:  15 | Input/Output: [[20 20 -25 20] -25]
Test Case:  16 | Input/Output: [[89 89 89 4] 4]
Test Case:  17 | Input/Output: [[-46 -46 -46 57] -46]
Test Case:  18 | Input/Output: [[25 16 25 25] 16]
Test Case:  19 | Input/Output: [[-37 -37 -27 -37] -37]
Test Case:  20 | Input/Output: [[93 93 93 43] 43]
Test Case:  21 | Input/Output: [[-89 -89 -89 53] -89]
Test Case:  22 | Input/Output: [[-78 41 -78 -78] -78]
Test Case:  23 | Input/Output: [[-8 19 -8 -8] -8]
Test Case:  24 | Input/Output: [[37 37 -70 37] -70]
Test Case:  25 | Input/Output: [[52 52 -80 52] -80]
Test Case:  26 | Input/Output: [[-47 -34 -34 -34] -47]
Test Case:  27 | Input/Output: [[63 -1 -1 -1] -1]
Test Case:  28 | Input/Output: [[17 54 17 17] 17]
Test Case:  29 | Input/Output: [[-57 -57 -8 -57] -57]
Test Case:  30 | Input/Output: [[-75 -75 -75 1] -75]
Test Case:  31 | Input/Output: [[-61 38 -61 -61] -61]
Test Case:  32 | Input/Output: [[50 50 50 23] 23]
Test Case:  33 | Input/Output: [[-33 -33 -33 -11] -33]
Test Case:  34 | Input/Output: [[77 -75 77 77] -75]
Test Case:  35 | Input/Output: [[1 -97 -97 -97] -97]
Test Case:  36 | Input/Output: [[-66 -54 -54 -54] -66]
Test Case:  37 | Input/Output: [[-41 -65 -65 -65] -65]
Test Case:  38 | Input/Output: [[-18 -14 -14 -14] -18]
Test Case:  39 | Input/Output: [[58 42 58 58] 42]
Test Case:  40 | Input/Output: [[-76 32 -76 -76] -76]
Test Case:  41 | Input/Output: [[-52 -52 58 -52] -52]
Test Case:  42 | Input/Output: [[-86 10 10 10] -86]
Test Case:  43 | Input/Output: [[77 77 39 77] 39]
Test Case:  44 | Input/Output: [[36 36 36 -51] -51]
Test Case:  45 | Input/Output: [[-5 67 67 67] -5]
Test Case:  46 | Input/Output: [[-1 85 -1 -1] -1]
Test Case:  47 | Input/Output: [[42 49 42 42] 42]
Test Case:  48 | Input/Output: [[-4 -4 -4 93] -4]
Test Case:  49 | Input/Output: [[-62 -62 -34 -62] -62]
Test Case:  50 | Input/Output: [[-86 -86 53 -86] -86]
Test Case:  51 | Input/Output: [[89 89 89 78] 78]
Test Case:  52 | Input/Output: [[-15 -15 -15 88] -15]
Test Case:  53 | Input/Output: [[-92 91 -92 -92] -92]
Test Case:  54 | Input/Output: [[51 51 51 53] 51]
Test Case:  55 | Input/Output: [[-81 -81 -31 -81] -81]
Test Case:  56 | Input/Output: [[-81 -6 -6 -6] -81]
Test Case:  57 | Input/Output: [[-76 -56 -76 -76] -76]
Test Case:  58 | Input/Output: [[-74 -85 -74 -74] -85]
Test Case:  59 | Input/Output: [[61 61 92 61] 61]
Test Case:  60 | Input/Output: [[11 -87 11 11] -87]
Test Case:  61 | Input/Output: [[55 30 30 30] 30]
Test Case:  62 | Input/Output: [[-39 -39 -71 -39] -71]
Test Case:  63 | Input/Output: [[60 60 60 -87] -87]
Test Case:  64 | Input/Output: [[73 73 6 73] 6]
Test Case:  65 | Input/Output: [[-4 -83 -4 -4] -83]
Test Case:  66 | Input/Output: [[-81 -81 -81 77] -81]
Test Case:  67 | Input/Output: [[51 -50 51 51] -50]
Test Case:  68 | Input/Output: [[-83 -83 -83 -88] -88]
Test Case:  69 | Input/Output: [[93 93 93 -75] -75]
Test Case:  70 | Input/Output: [[-28 -28 -28 33] -28]
Test Case:  71 | Input/Output: [[-1 -1 -1 -3] -3]
Test Case:  72 | Input/Output: [[52 64 64 64] 52]
Test Case:  73 | Input/Output: [[38 38 -25 38] -25]
Test Case:  74 | Input/Output: [[64 -78 -78 -78] -78]
Test Case:  75 | Input/Output: [[-97 -74 -97 -97] -97]
Test Case:  76 | Input/Output: [[99 99 99 54] 54]
Test Case:  77 | Input/Output: [[46 46 57 46] 46]
Test Case:  78 | Input/Output: [[-45 -45 -33 -45] -45]
Test Case:  79 | Input/Output: [[-36 91 -36 -36] -36]
Test Case:  80 | Input/Output: [[33 52 52 52] 33]
Test Case:  81 | Input/Output: [[60 -10 60 60] -10]
Test Case:  82 | Input/Output: [[17 -11 17 17] -11]
Test Case:  83 | Input/Output: [[-29 61 61 61] -29]
Test Case:  84 | Input/Output: [[-71 -57 -71 -71] -71]
Test Case:  85 | Input/Output: [[-78 -78 -12 -78] -78]
Test Case:  86 | Input/Output: [[74 67 67 67] 67]
Test Case:  87 | Input/Output: [[21 99 99 99] 21]
Test Case:  88 | Input/Output: [[-23 -23 -23 -89] -89]
Test Case:  89 | Input/Output: [[-95 -95 -95 84] -95]
Test Case:  90 | Input/Output: [[-15 -15 -69 -15] -69]
Test Case:  91 | Input/Output: [[66 95 66 66] 66]
Test Case:  92 | Input/Output: [[-17 -21 -21 -21] -21]
Test Case:  93 | Input/Output: [[-81 -82 -81 -81] -82]
Test Case:  94 | Input/Output: [[77 -10 -10 -10] -10]
Test Case:  95 | Input/Output: [[69 -23 69 69] -23]
Test Case:  96 | Input/Output: [[-72 -72 39 -72] -72]
Test Case:  97 | Input/Output: [[15 -44 -44 -44] -44]
Test Case:  98 | Input/Output: [[46 45 46 46] 45]
Test Case:  99 | Input/Output: [[69 15 69 69] 15]
Test Case: 100 | Input/Output: [(76 76 76 76) 76]
Test Case: 101 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 102 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 103 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 104 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 105 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 106 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 107 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 108 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 109 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 110 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 111 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 112 | Input/Output: [(26 26 26 26) 26]
Test Case: 113 | Input/Output: [(88 88 88 88) 88]
Test Case: 114 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 115 | Input/Output: [(28 28 28 28) 28]
Test Case: 116 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 117 | Input/Output: [(38 38 38 38) 38]
Test Case: 118 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 119 | Input/Output: [(3 3 3 3) 3]
Test Case: 120 | Input/Output: [(59 59 59 59) 59]
Test Case: 121 | Input/Output: [(39 39 39 39) 39]
Test Case: 122 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 123 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 124 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 125 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 126 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 127 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 128 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 129 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 130 | Input/Output: [(55 55 55 55) 55]
Test Case: 131 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 132 | Input/Output: [(15 15 15 15) 15]
Test Case: 133 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 134 | Input/Output: [(96 96 96 96) 96]
Test Case: 135 | Input/Output: [(9 9 9 9) 9]
Test Case: 136 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 137 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 138 | Input/Output: [(34 34 34 34) 34]
Test Case: 139 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 140 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 141 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 142 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 143 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 144 | Input/Output: [(89 89 89 89) 89]
Test Case: 145 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 146 | Input/Output: [(4 4 4 4) 4]
Test Case: 147 | Input/Output: [(63 63 63 63) 63]
Test Case: 148 | Input/Output: [(89 89 89 89) 89]
Test Case: 149 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 150 | Input/Output: [(49 49 49 49) 49]
Test Case: 151 | Input/Output: [(16 16 16 16) 16]
Test Case: 152 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 153 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 154 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 155 | Input/Output: [(39 39 39 39) 39]
Test Case: 156 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 157 | Input/Output: [(7 7 7 7) 7]
Test Case: 158 | Input/Output: [(97 97 97 97) 97]
Test Case: 159 | Input/Output: [(35 35 35 35) 35]
Test Case: 160 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 161 | Input/Output: [(89 89 89 89) 89]
Test Case: 162 | Input/Output: [(56 56 56 56) 56]
Test Case: 163 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 164 | Input/Output: [(62 62 62 62) 62]
Test Case: 165 | Input/Output: [(35 35 35 35) 35]
Test Case: 166 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 167 | Input/Output: [(96 96 96 96) 96]
Test Case: 168 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 169 | Input/Output: [(50 50 50 50) 50]
Test Case: 170 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 171 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 172 | Input/Output: [(8 8 8 8) 8]
Test Case: 173 | Input/Output: [(40 40 40 40) 40]
Test Case: 174 | Input/Output: [(50 50 50 50) 50]
Test Case: 175 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 176 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 177 | Input/Output: [(72 72 72 72) 72]
Test Case: 178 | Input/Output: [(22 22 22 22) 22]
Test Case: 179 | Input/Output: [(88 88 88 88) 88]
Test Case: 180 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 181 | Input/Output: [(4 4 4 4) 4]
Test Case: 182 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 183 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 184 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 185 | Input/Output: [(49 49 49 49) 49]
Test Case: 186 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 187 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 188 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 189 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 190 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 191 | Input/Output: [(77 77 77 77) 77]
Test Case: 192 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 193 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 194 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 195 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 196 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 197 | Input/Output: [(13 13 13 13) 13]
Test Case: 198 | Input/Output: [(46 46 46 46) 46]
Test Case: 199 | Input/Output: [(94 94 94 94) 94]
Test Case: 200 | Input/Output: [(71 86 45 51) 45]
Test Case: 201 | Input/Output: [(36 57 20 21) 20]
Test Case: 202 | Input/Output: [(16 55 44 27) 16]
Test Case: 203 | Input/Output: [(92 55 15 65) 15]
Test Case: 204 | Input/Output: [(17 52 45 14) 14]
Test Case: 205 | Input/Output: [(25 87 67 21) 21]
Test Case: 206 | Input/Output: [(78 28 27 87) 27]
Test Case: 207 | Input/Output: [(83 85 78 99) 78]
Test Case: 208 | Input/Output: [(16 37 46 11) 11]
Test Case: 209 | Input/Output: [(57 36 69 64) 36]
Test Case: 210 | Input/Output: [(58 45 87 1) 1]
Test Case: 211 | Input/Output: [(98 20 82 39) 20]
Test Case: 212 | Input/Output: [(15 32 86 47) 15]
Test Case: 213 | Input/Output: [(22 57 78 70) 22]
Test Case: 214 | Input/Output: [(56 36 56 46) 36]
Test Case: 215 | Input/Output: [(8 49 4 95) 4]
Test Case: 216 | Input/Output: [(97 92 31 73) 31]
Test Case: 217 | Input/Output: [(42 87 47 49) 42]
Test Case: 218 | Input/Output: [(13 36 16 5) 5]
Test Case: 219 | Input/Output: [(20 25 96 35) 20]
Test Case: 220 | Input/Output: [(26 18 85 30) 18]
Test Case: 221 | Input/Output: [(79 82 7 76) 7]
Test Case: 222 | Input/Output: [(8 100 91 98) 8]
Test Case: 223 | Input/Output: [(2 26 7 23) 2]
Test Case: 224 | Input/Output: [(26 64 6 97) 6]
Test Case: 225 | Input/Output: [(29 90 9 19) 9]
Test Case: 226 | Input/Output: [(39 12 41 66) 12]
Test Case: 227 | Input/Output: [(88 29 68 42) 29]
Test Case: 228 | Input/Output: [(35 71 26 60) 26]
Test Case: 229 | Input/Output: [(98 19 81 49) 19]
Test Case: 230 | Input/Output: [(10 51 21 29) 10]
Test Case: 231 | Input/Output: [(11 20 10 58) 10]
Test Case: 232 | Input/Output: [(13 28 30 63) 13]
Test Case: 233 | Input/Output: [(83 54 54 67) 54]
Test Case: 234 | Input/Output: [(39 20 69 38) 20]
Test Case: 235 | Input/Output: [(69 62 71 76) 62]
Test Case: 236 | Input/Output: [(28 34 82 84) 28]
Test Case: 237 | Input/Output: [(5 69 50 23) 5]
Test Case: 238 | Input/Output: [(23 6 56 69) 6]
Test Case: 239 | Input/Output: [(69 12 55 86) 12]
Test Case: 240 | Input/Output: [(30 7 67 35) 7]
Test Case: 241 | Input/Output: [(36 78 87 34) 34]
Test Case: 242 | Input/Output: [(17 79 69 76) 17]
Test Case: 243 | Input/Output: [(21 20 28 46) 20]
Test Case: 244 | Input/Output: [(11 65 14 53) 11]
Test Case: 245 | Input/Output: [(94 35 44 85) 35]
Test Case: 246 | Input/Output: [(22 31 45 75) 22]
Test Case: 247 | Input/Output: [(65 5 29 67) 5]
Test Case: 248 | Input/Output: [(68 77 85 66) 66]
Test Case: 249 | Input/Output: [(99 27 5 99) 5]
Test Case: 250 | Input/Output: [(100 9 72 79) 9]
Test Case: 251 | Input/Output: [(44 47 61 75) 44]
Test Case: 252 | Input/Output: [(84 17 84 23) 17]
Test Case: 253 | Input/Output: [(93 87 96 75) 75]
Test Case: 254 | Input/Output: [(41 9 56 47) 9]
Test Case: 255 | Input/Output: [(54 64 90 70) 54]
Test Case: 256 | Input/Output: [(3 29 6 89) 3]
Test Case: 257 | Input/Output: [(38 27 93 35) 27]
Test Case: 258 | Input/Output: [(13 43 41 49) 13]
Test Case: 259 | Input/Output: [(51 90 87 43) 43]
Test Case: 260 | Input/Output: [(90 28 31 24) 24]
Test Case: 261 | Input/Output: [(95 24 98 65) 24]
Test Case: 262 | Input/Output: [(62 24 98 47) 24]
Test Case: 263 | Input/Output: [(31 98 22 38) 22]
Test Case: 264 | Input/Output: [(64 25 39 68) 25]
Test Case: 265 | Input/Output: [(25 27 62 14) 14]
Test Case: 266 | Input/Output: [(69 94 90 97) 69]
Test Case: 267 | Input/Output: [(33 76 42 89) 33]
Test Case: 268 | Input/Output: [(64 29 96 35) 29]
Test Case: 269 | Input/Output: [(63 37 3 11) 3]
Test Case: 270 | Input/Output: [(0 90 40 38) 0]
Test Case: 271 | Input/Output: [(20 54 88 47) 20]
Test Case: 272 | Input/Output: [(74 73 43 35) 35]
Test Case: 273 | Input/Output: [(27 36 38 62) 27]
Test Case: 274 | Input/Output: [(61 14 49 28) 14]
Test Case: 275 | Input/Output: [(24 45 19 72) 19]
Test Case: 276 | Input/Output: [(68 38 16 56) 16]
Test Case: 277 | Input/Output: [(61 21 53 10) 10]
Test Case: 278 | Input/Output: [(2 14 63 86) 2]
Test Case: 279 | Input/Output: [(76 48 83 84) 48]
Test Case: 280 | Input/Output: [(47 33 3 35) 3]
Test Case: 281 | Input/Output: [(96 59 55 70) 55]
Test Case: 282 | Input/Output: [(82 92 23 92) 23]
Test Case: 283 | Input/Output: [(26 13 15 48) 13]
Test Case: 284 | Input/Output: [(12 18 55 0) 0]
Test Case: 285 | Input/Output: [(55 35 31 98) 31]
Test Case: 286 | Input/Output: [(90 80 35 27) 27]
Test Case: 287 | Input/Output: [(52 98 90 83) 52]
Test Case: 288 | Input/Output: [(4 19 50 20) 4]
Test Case: 289 | Input/Output: [(5 66 86 44) 5]
Test Case: 290 | Input/Output: [(75 82 6 23) 6]
Test Case: 291 | Input/Output: [(70 22 14 1) 1]
Test Case: 292 | Input/Output: [(80 77 61 98) 61]
Test Case: 293 | Input/Output: [(26 25 35 4) 4]
Test Case: 294 | Input/Output: [(25 30 81 86) 25]
Test Case: 295 | Input/Output: [(16 81 62 15) 15]
Test Case: 296 | Input/Output: [(39 65 77 62) 39]
Test Case: 297 | Input/Output: [(25 42 67 81) 25]
Test Case: 298 | Input/Output: [(75 84 75 56) 56]
Test Case: 299 | Input/Output: [(92 83 81 60) 60]
Test Case: 300 | Input/Output: [(77 56 71 38) 38]
Test Case: 301 | Input/Output: [(77 38 84 47) 38]
Test Case: 302 | Input/Output: [(41 52 55 15) 15]
Test Case: 303 | Input/Output: [(78 10 58 22) 10]
Test Case: 304 | Input/Output: [(2 83 97 86) 2]
Test Case: 305 | Input/Output: [(64 37 35 97) 35]
Test Case: 306 | Input/Output: [(68 37 49 81) 37]
Test Case: 307 | Input/Output: [(60 45 100 47) 45]
Test Case: 308 | Input/Output: [(33 3 90 82) 3]
Test Case: 309 | Input/Output: [(97 61 80 10) 10]
Test Case: 310 | Input/Output: [(99 100 4 74) 4]
Test Case: 311 | Input/Output: [(12 70 32 21) 12]
Test Case: 312 | Input/Output: [(63 65 46 59) 46]
Test Case: 313 | Input/Output: [(47 40 5 36) 5]
Test Case: 314 | Input/Output: [(54 3 13 10) 3]
Test Case: 315 | Input/Output: [(74 53 88 58) 53]
Test Case: 316 | Input/Output: [(3 62 70 98) 3]
Test Case: 317 | Input/Output: [(89 64 59 82) 59]
Test Case: 318 | Input/Output: [(38 61 94 31) 31]
Test Case: 319 | Input/Output: [(55 8 8 55) 8]
Test Case: 320 | Input/Output: [(36 45 30 76) 30]
Test Case: 321 | Input/Output: [(8 71 64 16) 8]
Test Case: 322 | Input/Output: [(35 46 97 85) 35]
Test Case: 323 | Input/Output: [(44 72 55 24) 24]
Test Case: 324 | Input/Output: [(36 6 85 80) 6]
Test Case: 325 | Input/Output: [(50 35 62 60) 35]
Test Case: 326 | Input/Output: [(79 15 61 1) 1]
Test Case: 327 | Input/Output: [(79 48 17 37) 17]
Test Case: 328 | Input/Output: [(31 5 0 85) 0]
Test Case: 329 | Input/Output: [(3 26 50 52) 3]
Test Case: 330 | Input/Output: [(64 79 74 37) 37]
Test Case: 331 | Input/Output: [(60 61 12 65) 12]
Test Case: 332 | Input/Output: [(85 71 39 10) 10]
Test Case: 333 | Input/Output: [(53 15 76 84) 15]
Test Case: 334 | Input/Output: [(81 21 7 36) 7]
Test Case: 335 | Input/Output: [(65 16 84 76) 16]
Test Case: 336 | Input/Output: [(63 41 76 82) 41]
Test Case: 337 | Input/Output: [(8 24 29 97) 8]
Test Case: 338 | Input/Output: [(88 78 48 30) 30]
Test Case: 339 | Input/Output: [(17 79 97 42) 17]
Test Case: 340 | Input/Output: [(2 99 77 30) 2]
Test Case: 341 | Input/Output: [(33 45 32 74) 32]
Test Case: 342 | Input/Output: [(51 62 14 74) 14]
Test Case: 343 | Input/Output: [(81 23 66 30) 23]
Test Case: 344 | Input/Output: [(7 71 97 52) 7]
Test Case: 345 | Input/Output: [(22 77 87 70) 22]
Test Case: 346 | Input/Output: [(13 47 70 64) 13]
Test Case: 347 | Input/Output: [(77 30 17 73) 17]
Test Case: 348 | Input/Output: [(11 4 81 48) 4]
Test Case: 349 | Input/Output: [(35 32 44 77) 32]
Test Case: 350 | Input/Output: [(7 54 82 17) 7]
Test Case: 351 | Input/Output: [(65 1 17 69) 1]
Test Case: 352 | Input/Output: [(18 25 63 46) 18]
Test Case: 353 | Input/Output: [(97 21 41 69) 21]
Test Case: 354 | Input/Output: [(70 52 59 54) 52]
Test Case: 355 | Input/Output: [(55 86 20 20) 20]
Test Case: 356 | Input/Output: [(88 32 63 23) 23]
Test Case: 357 | Input/Output: [(2 84 72 42) 2]
Test Case: 358 | Input/Output: [(68 67 6 14) 6]
Test Case: 359 | Input/Output: [(81 11 58 89) 11]
Test Case: 360 | Input/Output: [(29 3 45 67) 3]
Test Case: 361 | Input/Output: [(68 71 59 29) 29]
Test Case: 362 | Input/Output: [(50 59 100 70) 50]
Test Case: 363 | Input/Output: [(27 75 29 95) 27]
Test Case: 364 | Input/Output: [(80 13 73 94) 13]
Test Case: 365 | Input/Output: [(53 16 39 48) 16]
Test Case: 366 | Input/Output: [(27 86 62 62) 27]
Test Case: 367 | Input/Output: [(80 39 63 24) 24]
Test Case: 368 | Input/Output: [(36 50 9 39) 9]
Test Case: 369 | Input/Output: [(78 78 17 100) 17]
Test Case: 370 | Input/Output: [(73 11 18 79) 11]
Test Case: 371 | Input/Output: [(84 83 43 26) 26]
Test Case: 372 | Input/Output: [(11 65 70 66) 11]
Test Case: 373 | Input/Output: [(72 59 52 87) 52]
Test Case: 374 | Input/Output: [(90 60 15 14) 14]
Test Case: 375 | Input/Output: [(68 8 65 79) 8]
Test Case: 376 | Input/Output: [(84 18 64 75) 18]
Test Case: 377 | Input/Output: [(0 40 62 36) 0]
Test Case: 378 | Input/Output: [(96 50 69 42) 42]
Test Case: 379 | Input/Output: [(56 25 23 78) 23]
Test Case: 380 | Input/Output: [(87 82 74 53) 53]
Test Case: 381 | Input/Output: [(89 47 97 66) 47]
Test Case: 382 | Input/Output: [(29 40 27 31) 27]
Test Case: 383 | Input/Output: [(51 17 37 42) 17]
Test Case: 384 | Input/Output: [(88 18 69 39) 18]
Test Case: 385 | Input/Output: [(30 28 57 60) 28]
Test Case: 386 | Input/Output: [(51 74 6 51) 6]
Test Case: 387 | Input/Output: [(85 90 42 5) 5]
Test Case: 388 | Input/Output: [(50 53 87 72) 50]
Test Case: 389 | Input/Output: [(18 56 60 86) 18]
Test Case: 390 | Input/Output: [(43 87 82 34) 34]
Test Case: 391 | Input/Output: [(44 33 58 37) 33]
Test Case: 392 | Input/Output: [(14 100 4 6) 4]
Test Case: 393 | Input/Output: [(10 99 17 87) 10]
Test Case: 394 | Input/Output: [(99 84 36 74) 36]
Test Case: 395 | Input/Output: [(23 42 19 24) 19]
Test Case: 396 | Input/Output: [(73 77 18 80) 18]
Test Case: 397 | Input/Output: [(49 39 82 76) 39]
Test Case: 398 | Input/Output: [(71 99 43 65) 43]
Test Case: 399 | Input/Output: [(1 49 75 96) 1]
Test Case: 400 | Input/Output: [(46 -41 53 -77) -77]
Test Case: 401 | Input/Output: [(30 -37 4 63) -37]
Test Case: 402 | Input/Output: [(26 -88 22 20) -88]
Test Case: 403 | Input/Output: [(-59 29 -53 27) -59]
Test Case: 404 | Input/Output: [(-74 -80 -42 87) -80]
Test Case: 405 | Input/Output: [(-85 -74 26 81) -85]
Test Case: 406 | Input/Output: [(39 -94 96 52) -94]
Test Case: 407 | Input/Output: [(-15 -68 10 -13) -68]
Test Case: 408 | Input/Output: [(40 -78 -5 -46) -78]
Test Case: 409 | Input/Output: [(57 -50 83 86) -50]
Test Case: 410 | Input/Output: [(-34 -66 13 -58) -66]
Test Case: 411 | Input/Output: [(-34 -60 1 13) -60]
Test Case: 412 | Input/Output: [(81 -3 85 21) -3]
Test Case: 413 | Input/Output: [(79 -87 -78 -43) -87]
Test Case: 414 | Input/Output: [(66 71 -98 60) -98]
Test Case: 415 | Input/Output: [(-39 -38 93 82) -39]
Test Case: 416 | Input/Output: [(-39 -8 -99 -37) -99]
Test Case: 417 | Input/Output: [(-72 -83 -15 -87) -87]
Test Case: 418 | Input/Output: [(-75 -99 55 -43) -99]
Test Case: 419 | Input/Output: [(-91 24 43 -49) -91]
Test Case: 420 | Input/Output: [(51 26 -85 -80) -85]
Test Case: 421 | Input/Output: [(70 -14 -61 -58) -61]
Test Case: 422 | Input/Output: [(90 77 75 80) 75]
Test Case: 423 | Input/Output: [(5 -50 -56 -79) -79]
Test Case: 424 | Input/Output: [(-49 46 -14 73) -49]
Test Case: 425 | Input/Output: [(-51 1 54 -41) -51]
Test Case: 426 | Input/Output: [(-55 -72 -89 77) -89]
Test Case: 427 | Input/Output: [(97 -15 -9 -37) -37]
Test Case: 428 | Input/Output: [(98 -3 -34 -94) -94]
Test Case: 429 | Input/Output: [(-49 -45 -6 55) -49]
Test Case: 430 | Input/Output: [(98 50 -58 -29) -58]
Test Case: 431 | Input/Output: [(3 -48 -96 -14) -96]
Test Case: 432 | Input/Output: [(-90 16 -21 64) -90]
Test Case: 433 | Input/Output: [(70 -24 -27 -70) -70]
Test Case: 434 | Input/Output: [(20 -7 -58 -72) -72]
Test Case: 435 | Input/Output: [(94 -1 46 -64) -64]
Test Case: 436 | Input/Output: [(-33 36 -22 -47) -47]
Test Case: 437 | Input/Output: [(93 11 -75 -53) -75]
Test Case: 438 | Input/Output: [(52 49 92 -70) -70]
Test Case: 439 | Input/Output: [(2 -9 -70 -55) -70]
Test Case: 440 | Input/Output: [(-52 -10 100 1) -52]
Test Case: 441 | Input/Output: [(-39 27 34 28) -39]
Test Case: 442 | Input/Output: [(-49 72 73 -43) -49]
Test Case: 443 | Input/Output: [(38 -84 69 -32) -84]
Test Case: 444 | Input/Output: [(-60 -96 10 57) -96]
Test Case: 445 | Input/Output: [(-79 49 57 77) -79]
Test Case: 446 | Input/Output: [(-92 99 85 -11) -92]
Test Case: 447 | Input/Output: [(0 -77 -13 -29) -77]
Test Case: 448 | Input/Output: [(-77 -78 -2 -1) -78]
Test Case: 449 | Input/Output: [(-12 46 -7 -67) -67]
Test Case: 450 | Input/Output: [(-89 -75 32 3) -89]
Test Case: 451 | Input/Output: [(-60 65 55 67) -60]
Test Case: 452 | Input/Output: [(60 -33 -31 40) -33]
Test Case: 453 | Input/Output: [(-28 -34 99 -23) -34]
Test Case: 454 | Input/Output: [(17 87 -88 -64) -88]
Test Case: 455 | Input/Output: [(-34 68 26 85) -34]
Test Case: 456 | Input/Output: [(-37 91 -79 -87) -87]
Test Case: 457 | Input/Output: [(50 -94 -46 44) -94]
Test Case: 458 | Input/Output: [(19 -62 -53 -2) -62]
Test Case: 459 | Input/Output: [(87 -5 -25 97) -25]
Test Case: 460 | Input/Output: [(-9 65 59 -34) -34]
Test Case: 461 | Input/Output: [(91 -52 -74 29) -74]
Test Case: 462 | Input/Output: [(-83 29 92 -85) -85]
Test Case: 463 | Input/Output: [(57 -75 63 2) -75]
Test Case: 464 | Input/Output: [(34 76 41 -11) -11]
Test Case: 465 | Input/Output: [(-27 34 -89 -86) -89]
Test Case: 466 | Input/Output: [(90 -63 83 46) -63]
Test Case: 467 | Input/Output: [(65 67 -60 63) -60]
Test Case: 468 | Input/Output: [(40 -27 7 -98) -98]
Test Case: 469 | Input/Output: [(-89 -31 -3 -53) -89]
Test Case: 470 | Input/Output: [(-60 55 -88 47) -88]
Test Case: 471 | Input/Output: [(50 62 89 -72) -72]
Test Case: 472 | Input/Output: [(68 50 -68 -80) -80]
Test Case: 473 | Input/Output: [(31 88 -1 -11) -11]
Test Case: 474 | Input/Output: [(0 -19 37 24) -19]
Test Case: 475 | Input/Output: [(-40 48 -66 81) -66]
Test Case: 476 | Input/Output: [(-69 72 -98 -10) -98]
Test Case: 477 | Input/Output: [(93 -11 -50 31) -50]
Test Case: 478 | Input/Output: [(-26 -55 -84 87) -84]
Test Case: 479 | Input/Output: [(-38 5 -54 50) -54]
Test Case: 480 | Input/Output: [(49 -1 -25 23) -25]
Test Case: 481 | Input/Output: [(89 -92 -32 7) -92]
Test Case: 482 | Input/Output: [(-31 79 -3 -67) -67]
Test Case: 483 | Input/Output: [(68 74 57 14) 14]
Test Case: 484 | Input/Output: [(-55 90 -4 -51) -55]
Test Case: 485 | Input/Output: [(-44 45 46 -98) -98]
Test Case: 486 | Input/Output: [(88 23 66 -1) -1]
Test Case: 487 | Input/Output: [(88 13 1 48) 1]
Test Case: 488 | Input/Output: [(-2 -2 6 80) -2]
Test Case: 489 | Input/Output: [(-72 4 92 19) -72]
Test Case: 490 | Input/Output: [(17 7 -25 -2) -25]
Test Case: 491 | Input/Output: [(-57 61 28 -28) -57]
Test Case: 492 | Input/Output: [(86 -88 -66 9) -88]
Test Case: 493 | Input/Output: [(-80 16 -95 93) -95]
Test Case: 494 | Input/Output: [(-71 -48 -28 40) -71]
Test Case: 495 | Input/Output: [(83 -64 -87 -99) -99]
Test Case: 496 | Input/Output: [(-4 -46 57 -75) -75]
Test Case: 497 | Input/Output: [(-19 -77 94 99) -77]
Test Case: 498 | Input/Output: [(38 70 12 -58) -58]
Test Case: 499 | Input/Output: [(-29 58 47 -57) -57]
Test Case: 500 | Input/Output: [(25 78 94 -71) -71]
Test Case: 501 | Input/Output: [(-57 -43 -14 91) -57]
Test Case: 502 | Input/Output: [(-56 47 46 98) -56]
Test Case: 503 | Input/Output: [(-22 -30 -40 10) -40]
Test Case: 504 | Input/Output: [(-46 62 -68 -68) -68]
Test Case: 505 | Input/Output: [(-82 26 -32 -89) -89]
Test Case: 506 | Input/Output: [(22 -2 17 41) -2]
Test Case: 507 | Input/Output: [(-74 -83 12 41) -83]
Test Case: 508 | Input/Output: [(79 -18 -100 49) -100]
Test Case: 509 | Input/Output: [(25 -99 -36 -19) -99]
Test Case: 510 | Input/Output: [(17 77 66 77) 17]
Test Case: 511 | Input/Output: [(61 27 -76 -20) -76]
Test Case: 512 | Input/Output: [(-87 46 33 75) -87]
Test Case: 513 | Input/Output: [(82 13 30 20) 13]
Test Case: 514 | Input/Output: [(-96 47 -12 38) -96]
Test Case: 515 | Input/Output: [(-92 35 -43 80) -92]
Test Case: 516 | Input/Output: [(-1 -42 -3 -32) -42]
Test Case: 517 | Input/Output: [(53 22 92 30) 22]
Test Case: 518 | Input/Output: [(96 -78 -16 73) -78]
Test Case: 519 | Input/Output: [(43 -56 -60 -98) -98]
Test Case: 520 | Input/Output: [(-52 -22 -22 86) -52]
Test Case: 521 | Input/Output: [(-41 81 -20 -66) -66]
Test Case: 522 | Input/Output: [(-94 57 -18 -34) -94]
Test Case: 523 | Input/Output: [(55 96 36 71) 36]
Test Case: 524 | Input/Output: [(59 -27 45 34) -27]
Test Case: 525 | Input/Output: [(-31 -58 13 0) -58]
Test Case: 526 | Input/Output: [(-100 -16 -98 -24) -100]
Test Case: 527 | Input/Output: [(-72 4 38 35) -72]
Test Case: 528 | Input/Output: [(-70 -61 -19 -71) -71]
Test Case: 529 | Input/Output: [(70 52 -86 59) -86]
Test Case: 530 | Input/Output: [(-38 -45 18 -37) -45]
Test Case: 531 | Input/Output: [(-69 13 33 -28) -69]
Test Case: 532 | Input/Output: [(70 58 42 92) 42]
Test Case: 533 | Input/Output: [(55 70 7 36) 7]
Test Case: 534 | Input/Output: [(-85 -73 -59 -9) -85]
Test Case: 535 | Input/Output: [(41 -52 -70 -53) -70]
Test Case: 536 | Input/Output: [(-95 -39 73 78) -95]
Test Case: 537 | Input/Output: [(36 17 56 80) 17]
Test Case: 538 | Input/Output: [(44 -68 29 61) -68]
Test Case: 539 | Input/Output: [(17 23 9 50) 9]
Test Case: 540 | Input/Output: [(46 -90 67 62) -90]
Test Case: 541 | Input/Output: [(-60 51 54 -43) -60]
Test Case: 542 | Input/Output: [(-31 -33 -92 -92) -92]
Test Case: 543 | Input/Output: [(-12 -58 89 67) -58]
Test Case: 544 | Input/Output: [(31 93 -72 24) -72]
Test Case: 545 | Input/Output: [(68 36 24 -13) -13]
Test Case: 546 | Input/Output: [(69 -31 33 -62) -62]
Test Case: 547 | Input/Output: [(30 75 76 89) 30]
Test Case: 548 | Input/Output: [(-33 -85 -7 26) -85]
Test Case: 549 | Input/Output: [(-23 60 -59 1) -59]
Test Case: 550 | Input/Output: [(-46 -78 41 44) -78]
Test Case: 551 | Input/Output: [(-59 -32 -37 12) -59]
Test Case: 552 | Input/Output: [(48 -3 -26 -41) -41]
Test Case: 553 | Input/Output: [(48 -46 -3 -100) -100]
Test Case: 554 | Input/Output: [(-63 -1 29 84) -63]
Test Case: 555 | Input/Output: [(-80 57 15 -38) -80]
Test Case: 556 | Input/Output: [(1 -66 56 54) -66]
Test Case: 557 | Input/Output: [(-13 -56 5 52) -56]
Test Case: 558 | Input/Output: [(64 85 -63 57) -63]
Test Case: 559 | Input/Output: [(19 82 63 21) 19]
Test Case: 560 | Input/Output: [(21 31 -2 83) -2]
Test Case: 561 | Input/Output: [(-99 -49 47 -63) -99]
Test Case: 562 | Input/Output: [(4 -13 94 0) -13]
Test Case: 563 | Input/Output: [(-39 -37 -67 35) -67]
Test Case: 564 | Input/Output: [(-4 95 5 -91) -91]
Test Case: 565 | Input/Output: [(80 68 21 -97) -97]
Test Case: 566 | Input/Output: [(55 30 -35 42) -35]
Test Case: 567 | Input/Output: [(63 56 -20 27) -20]
Test Case: 568 | Input/Output: [(66 40 58 -33) -33]
Test Case: 569 | Input/Output: [(78 47 32 63) 32]
Test Case: 570 | Input/Output: [(38 -60 -83 79) -83]
Test Case: 571 | Input/Output: [(-92 -86 -99 -85) -99]
Test Case: 572 | Input/Output: [(-4 -9 100 -24) -24]
Test Case: 573 | Input/Output: [(23 -71 64 -95) -95]
Test Case: 574 | Input/Output: [(4 94 -11 -57) -57]
Test Case: 575 | Input/Output: [(-46 -99 56 22) -99]
Test Case: 576 | Input/Output: [(-53 -85 100 68) -85]
Test Case: 577 | Input/Output: [(-11 91 72 -42) -42]
Test Case: 578 | Input/Output: [(-14 45 -7 -85) -85]
Test Case: 579 | Input/Output: [(-88 63 -86 99) -88]
Test Case: 580 | Input/Output: [(66 22 11 57) 11]
Test Case: 581 | Input/Output: [(37 -1 6 3) -1]
Test Case: 582 | Input/Output: [(-50 73 -83 -15) -83]
Test Case: 583 | Input/Output: [(55 -99 36 -96) -99]
Test Case: 584 | Input/Output: [(37 41 11 -80) -80]
Test Case: 585 | Input/Output: [(20 32 -52 -79) -79]
Test Case: 586 | Input/Output: [(95 79 -5 32) -5]
Test Case: 587 | Input/Output: [(45 97 -18 -57) -57]
Test Case: 588 | Input/Output: [(-25 -4 -54 -89) -89]
Test Case: 589 | Input/Output: [(-18 61 -64 79) -64]
Test Case: 590 | Input/Output: [(-88 -75 4 -71) -88]
Test Case: 591 | Input/Output: [(-70 -24 -75 48) -75]
Test Case: 592 | Input/Output: [(-8 -4 74 69) -8]
Test Case: 593 | Input/Output: [(27 -20 -87 70) -87]
Test Case: 594 | Input/Output: [(-65 -95 -42 -59) -95]
Test Case: 595 | Input/Output: [(-61 -50 -98 71) -98]
Test Case: 596 | Input/Output: [(82 55 31 -14) -14]
Test Case: 597 | Input/Output: [(20 61 -18 50) -18]
Test Case: 598 | Input/Output: [(56 -83 1 96) -83]
Test Case: 599 | Input/Output: [(78 -4 3 58) -4]
Test Case: 600 | Input/Output: [(43 -76 -28 -92) -92]
Test Case: 601 | Input/Output: [(-3 18 75 -17) -17]
Test Case: 602 | Input/Output: [(41 53 -42 -22) -42]
Test Case: 603 | Input/Output: [(-33 89 -58 -69) -69]
Test Case: 604 | Input/Output: [(94 -50 31 6) -50]
Test Case: 605 | Input/Output: [(77 14 -81 -26) -81]
Test Case: 606 | Input/Output: [(77 -3 34 -100) -100]
Test Case: 607 | Input/Output: [(-2 54 -90 59) -90]
Test Case: 608 | Input/Output: [(92 -8 61 -23) -23]
Test Case: 609 | Input/Output: [(-79 36 -5 -96) -96]
Test Case: 610 | Input/Output: [(-10 -64 -14 1) -64]
Test Case: 611 | Input/Output: [(-94 1 -90 -77) -94]
Test Case: 612 | Input/Output: [(93 15 53 97) 15]
Test Case: 613 | Input/Output: [(82 -84 -21 -76) -84]
Test Case: 614 | Input/Output: [(11 96 24 21) 11]
Test Case: 615 | Input/Output: [(9 36 -39 36) -39]
Test Case: 616 | Input/Output: [(47 -91 -75 9) -91]
Test Case: 617 | Input/Output: [(29 -84 67 -35) -84]
Test Case: 618 | Input/Output: [(-15 63 84 51) -15]
Test Case: 619 | Input/Output: [(95 47 -54 13) -54]
Test Case: 620 | Input/Output: [(16 -68 82 -47) -68]
Test Case: 621 | Input/Output: [(14 86 37 72) 14]
Test Case: 622 | Input/Output: [(75 84 -68 -16) -68]
Test Case: 623 | Input/Output: [(-86 -77 -49 26) -86]
Test Case: 624 | Input/Output: [(-66 86 34 -75) -75]
Test Case: 625 | Input/Output: [(52 36 96 34) 34]
Test Case: 626 | Input/Output: [(70 -98 79 -53) -98]
Test Case: 627 | Input/Output: [(74 -44 -87 -93) -93]
Test Case: 628 | Input/Output: [(-38 -95 33 46) -95]
Test Case: 629 | Input/Output: [(93 -74 -37 77) -74]
Test Case: 630 | Input/Output: [(-42 15 -36 79) -42]
Test Case: 631 | Input/Output: [(13 -58 29 -38) -58]
Test Case: 632 | Input/Output: [(-64 39 27 -73) -73]
Test Case: 633 | Input/Output: [(-50 -56 -53 -95) -95]
Test Case: 634 | Input/Output: [(94 22 9 -8) -8]
Test Case: 635 | Input/Output: [(84 40 50 -80) -80]
Test Case: 636 | Input/Output: [(56 40 -30 39) -30]
Test Case: 637 | Input/Output: [(-53 -63 -34 -8) -63]
Test Case: 638 | Input/Output: [(15 80 75 92) 15]
Test Case: 639 | Input/Output: [(-6 -14 -92 -51) -92]
Test Case: 640 | Input/Output: [(-85 -79 -91 -97) -97]
Test Case: 641 | Input/Output: [(-3 30 41 -48) -48]
Test Case: 642 | Input/Output: [(-98 -43 11 0) -98]
Test Case: 643 | Input/Output: [(-18 98 -73 -75) -75]
Test Case: 644 | Input/Output: [(85 55 -76 -57) -76]
Test Case: 645 | Input/Output: [(-56 93 75 5) -56]
Test Case: 646 | Input/Output: [(54 -1 17 -24) -24]
Test Case: 647 | Input/Output: [(26 99 -5 1) -5]
Test Case: 648 | Input/Output: [(5 -2 -42 81) -42]
Test Case: 649 | Input/Output: [(43 58 35 26) 26]
Test Case: 650 | Input/Output: [(-31 -10 17 5) -31]
Test Case: 651 | Input/Output: [(52 0 56 -38) -38]
Test Case: 652 | Input/Output: [(25 -42 45 -34) -42]
Test Case: 653 | Input/Output: [(-60 -9 -65 28) -65]
Test Case: 654 | Input/Output: [(-69 22 94 75) -69]
Test Case: 655 | Input/Output: [(9 -54 -33 64) -54]
Test Case: 656 | Input/Output: [(-50 30 40 -35) -50]
Test Case: 657 | Input/Output: [(-95 -43 15 -22) -95]
Test Case: 658 | Input/Output: [(-14 9 -39 15) -39]
Test Case: 659 | Input/Output: [(-93 -19 18 100) -93]
Test Case: 660 | Input/Output: [(77 83 -71 -50) -71]
Test Case: 661 | Input/Output: [(-94 -54 -41 38) -94]
Test Case: 662 | Input/Output: [(-97 -80 74 -86) -97]
Test Case: 663 | Input/Output: [(97 -95 -40 90) -95]
Test Case: 664 | Input/Output: [(54 24 60 56) 24]
Test Case: 665 | Input/Output: [(-23 78 -25 -77) -77]
Test Case: 666 | Input/Output: [(27 87 -33 -47) -47]
Test Case: 667 | Input/Output: [(93 32 -91 -98) -98]
Test Case: 668 | Input/Output: [(-52 -69 -55 68) -69]
Test Case: 669 | Input/Output: [(79 -97 -53 34) -97]
Test Case: 670 | Input/Output: [(-3 39 93 -21) -21]
Test Case: 671 | Input/Output: [(-94 55 -60 21) -94]
Test Case: 672 | Input/Output: [(-96 -17 -39 -72) -96]
Test Case: 673 | Input/Output: [(-95 -42 -96 35) -96]
Test Case: 674 | Input/Output: [(-20 70 -3 -12) -20]
Test Case: 675 | Input/Output: [(17 -32 34 61) -32]
Test Case: 676 | Input/Output: [(-66 89 13 -25) -66]
Test Case: 677 | Input/Output: [(-8 23 -60 -3) -60]
Test Case: 678 | Input/Output: [(87 9 -62 -5) -62]
Test Case: 679 | Input/Output: [(7 -46 71 -38) -46]
Test Case: 680 | Input/Output: [(-65 3 85 -34) -65]
Test Case: 681 | Input/Output: [(-62 11 -66 43) -66]
Test Case: 682 | Input/Output: [(-52 24 -64 48) -64]
Test Case: 683 | Input/Output: [(-68 33 -31 82) -68]
Test Case: 684 | Input/Output: [(61 4 -35 -2) -35]
Test Case: 685 | Input/Output: [(82 11 37 83) 11]
Test Case: 686 | Input/Output: [(93 4 1 60) 1]
Test Case: 687 | Input/Output: [(-59 -2 -6 -29) -59]
Test Case: 688 | Input/Output: [(80 92 -48 8) -48]
Test Case: 689 | Input/Output: [(1 5 1 63) 1]
Test Case: 690 | Input/Output: [(-6 97 -87 -25) -87]
Test Case: 691 | Input/Output: [(19 3 -90 70) -90]
Test Case: 692 | Input/Output: [(-44 -14 97 72) -44]
Test Case: 693 | Input/Output: [(85 79 -43 60) -43]
Test Case: 694 | Input/Output: [(11 29 41 96) 11]
Test Case: 695 | Input/Output: [(37 5 30 38) 5]
Test Case: 696 | Input/Output: [(92 71 -10 -33) -33]
Test Case: 697 | Input/Output: [(-73 97 -47 77) -73]
Test Case: 698 | Input/Output: [(79 14 76 -90) -90]
Test Case: 699 | Input/Output: [(-61 11 -53 -15) -61]
Test Case: 700 | Input/Output: [(-5 -23 10 -64) -64]
Test Case: 701 | Input/Output: [(45 61 79 -25) -25]
Test Case: 702 | Input/Output: [(57 50 -96 24) -96]
Test Case: 703 | Input/Output: [(42 -88 -49 -53) -88]
Test Case: 704 | Input/Output: [(85 55 -12 -96) -96]
Test Case: 705 | Input/Output: [(58 -9 -9 -53) -53]
Test Case: 706 | Input/Output: [(-50 44 -63 97) -63]
Test Case: 707 | Input/Output: [(-94 78 -46 93) -94]
Test Case: 708 | Input/Output: [(-43 67 15 -62) -62]
Test Case: 709 | Input/Output: [(6 91 56 75) 6]
Test Case: 710 | Input/Output: [(-19 -58 -71 -32) -71]
Test Case: 711 | Input/Output: [(100 46 -42 -9) -42]
Test Case: 712 | Input/Output: [(9 -10 -16 -28) -28]
Test Case: 713 | Input/Output: [(64 -16 -68 31) -68]
Test Case: 714 | Input/Output: [(-26 95 49 98) -26]
Test Case: 715 | Input/Output: [(-2 81 -5 89) -5]
Test Case: 716 | Input/Output: [(95 -55 -52 -49) -55]
Test Case: 717 | Input/Output: [(-86 94 -47 -40) -86]
Test Case: 718 | Input/Output: [(74 -31 65 68) -31]
Test Case: 719 | Input/Output: [(-54 60 32 -73) -73]
Test Case: 720 | Input/Output: [(-71 -67 0 81) -71]
Test Case: 721 | Input/Output: [(-20 -29 44 49) -29]
Test Case: 722 | Input/Output: [(-75 68 30 40) -75]
Test Case: 723 | Input/Output: [(85 14 -90 -36) -90]
Test Case: 724 | Input/Output: [(8 -4 -79 -13) -79]
Test Case: 725 | Input/Output: [(38 51 13 -78) -78]
Test Case: 726 | Input/Output: [(-18 -2 -65 74) -65]
Test Case: 727 | Input/Output: [(-35 51 -19 47) -35]
Test Case: 728 | Input/Output: [(42 19 -13 100) -13]
Test Case: 729 | Input/Output: [(72 0 -44 -5) -44]
Test Case: 730 | Input/Output: [(39 52 38 -21) -21]
Test Case: 731 | Input/Output: [(58 37 -35 -21) -35]
Test Case: 732 | Input/Output: [(-63 -88 22 -13) -88]
Test Case: 733 | Input/Output: [(-44 95 5 -97) -97]
Test Case: 734 | Input/Output: [(58 36 100 -100) -100]
Test Case: 735 | Input/Output: [(24 -57 -42 -53) -57]
Test Case: 736 | Input/Output: [(52 10 -82 -91) -91]
Test Case: 737 | Input/Output: [(74 38 -26 -50) -50]
Test Case: 738 | Input/Output: [(-32 -72 -77 -51) -77]
Test Case: 739 | Input/Output: [(-15 -56 -56 -42) -56]
Test Case: 740 | Input/Output: [(75 -75 -38 74) -75]
Test Case: 741 | Input/Output: [(-29 -61 -13 -54) -61]
Test Case: 742 | Input/Output: [(-54 77 -57 93) -57]
Test Case: 743 | Input/Output: [(84 63 64 36) 36]
Test Case: 744 | Input/Output: [(-85 -2 58 81) -85]
Test Case: 745 | Input/Output: [(25 27 53 -39) -39]
Test Case: 746 | Input/Output: [(-20 75 1 -56) -56]
Test Case: 747 | Input/Output: [(-78 -75 30 -35) -78]
Test Case: 748 | Input/Output: [(41 89 -97 41) -97]
Test Case: 749 | Input/Output: [(43 1 100 84) 1]
Test Case: 750 | Input/Output: [(37 -63 -18 53) -63]
Test Case: 751 | Input/Output: [(-40 -80 -10 14) -80]
Test Case: 752 | Input/Output: [(-1 -100 74 -65) -100]
Test Case: 753 | Input/Output: [(25 35 96 -70) -70]
Test Case: 754 | Input/Output: [(20 -41 26 -5) -41]
Test Case: 755 | Input/Output: [(63 -41 -22 4) -41]
Test Case: 756 | Input/Output: [(62 87 56 60) 56]
Test Case: 757 | Input/Output: [(89 -19 -14 83) -19]
Test Case: 758 | Input/Output: [(50 32 -76 -12) -76]
Test Case: 759 | Input/Output: [(83 -61 92 16) -61]
Test Case: 760 | Input/Output: [(8 -67 86 9) -67]
Test Case: 761 | Input/Output: [(-59 -72 58 49) -72]
Test Case: 762 | Input/Output: [(-18 77 -70 -98) -98]
Test Case: 763 | Input/Output: [(1 -1 91 91) -1]
Test Case: 764 | Input/Output: [(14 0 -58 -19) -58]
Test Case: 765 | Input/Output: [(-19 91 94 -100) -100]
Test Case: 766 | Input/Output: [(39 20 39 98) 20]
Test Case: 767 | Input/Output: [(34 -49 -75 32) -75]
Test Case: 768 | Input/Output: [(17 -96 52 73) -96]
Test Case: 769 | Input/Output: [(-40 29 53 -82) -82]
Test Case: 770 | Input/Output: [(29 84 -22 56) -22]
Test Case: 771 | Input/Output: [(95 15 -79 -33) -79]
Test Case: 772 | Input/Output: [(-79 -13 23 -17) -79]
Test Case: 773 | Input/Output: [(-29 -47 -20 93) -47]
Test Case: 774 | Input/Output: [(90 57 -28 -13) -28]
Test Case: 775 | Input/Output: [(-9 0 -79 81) -79]
Test Case: 776 | Input/Output: [(-19 13 -64 -91) -91]
Test Case: 777 | Input/Output: [(6 -84 -22 -49) -84]
Test Case: 778 | Input/Output: [(-23 17 -5 -71) -71]
Test Case: 779 | Input/Output: [(94 -56 15 60) -56]
Test Case: 780 | Input/Output: [(72 -29 70 -88) -88]
Test Case: 781 | Input/Output: [(72 7 54 15) 7]
Test Case: 782 | Input/Output: [(-32 -90 45 -13) -90]
Test Case: 783 | Input/Output: [(-35 41 -32 -99) -99]
Test Case: 784 | Input/Output: [(22 -92 15 -17) -92]
Test Case: 785 | Input/Output: [(95 -24 -74 -38) -74]
Test Case: 786 | Input/Output: [(40 26 20 86) 20]
Test Case: 787 | Input/Output: [(-18 4 -6 -70) -70]
Test Case: 788 | Input/Output: [(-87 -94 9 -92) -94]
Test Case: 789 | Input/Output: [(32 29 -86 -50) -86]
Test Case: 790 | Input/Output: [(-16 12 9 15) -16]
Test Case: 791 | Input/Output: [(-19 25 -16 -92) -92]
Test Case: 792 | Input/Output: [(77 68 -64 -53) -64]
Test Case: 793 | Input/Output: [(41 -16 2 64) -16]
Test Case: 794 | Input/Output: [(-22 -34 79 80) -34]
Test Case: 795 | Input/Output: [(22 -2 43 -87) -87]
Test Case: 796 | Input/Output: [(-14 15 57 -41) -41]
Test Case: 797 | Input/Output: [(-85 87 63 35) -85]
Test Case: 798 | Input/Output: [(-12 3 54 3) -12]
Test Case: 799 | Input/Output: [(34 34 88 -92) -92]
Test Case: 800 | Input/Output: [(94 -99 -5 -93) -99]
Test Case: 801 | Input/Output: [(9 49 21 -46) -46]
Test Case: 802 | Input/Output: [(82 55 38 -14) -14]
Test Case: 803 | Input/Output: [(5 31 -60 -61) -61]
Test Case: 804 | Input/Output: [(-56 24 97 58) -56]
Test Case: 805 | Input/Output: [(76 62 -29 75) -29]
Test Case: 806 | Input/Output: [(10 85 6 -5) -5]
Test Case: 807 | Input/Output: [(80 -30 -82 72) -82]
Test Case: 808 | Input/Output: [(-37 -94 46 -47) -94]
Test Case: 809 | Input/Output: [(-77 63 30 28) -77]
Test Case: 810 | Input/Output: [(-20 -63 35 -60) -63]
Test Case: 811 | Input/Output: [(92 -9 13 86) -9]
Test Case: 812 | Input/Output: [(12 -34 9 64) -34]
Test Case: 813 | Input/Output: [(-32 14 -34 58) -34]
Test Case: 814 | Input/Output: [(-23 66 -84 -34) -84]
Test Case: 815 | Input/Output: [(-100 -1 34 81) -100]
Test Case: 816 | Input/Output: [(-55 35 -87 91) -87]
Test Case: 817 | Input/Output: [(-59 -49 -30 36) -59]
Test Case: 818 | Input/Output: [(49 -4 36 -56) -56]
Test Case: 819 | Input/Output: [(-45 -12 -17 0) -45]
Test Case: 820 | Input/Output: [(99 51 -96 4) -96]
Test Case: 821 | Input/Output: [(84 -87 69 -36) -87]
Test Case: 822 | Input/Output: [(2 -3 98 71) -3]
Test Case: 823 | Input/Output: [(-33 72 74 -4) -33]
Test Case: 824 | Input/Output: [(24 2 -53 -6) -53]
Test Case: 825 | Input/Output: [(-45 68 -1 -80) -80]
Test Case: 826 | Input/Output: [(42 32 -94 99) -94]
Test Case: 827 | Input/Output: [(46 42 -40 -71) -71]
Test Case: 828 | Input/Output: [(43 -25 -79 -58) -79]
Test Case: 829 | Input/Output: [(91 -69 52 89) -69]
Test Case: 830 | Input/Output: [(-64 24 -60 47) -64]
Test Case: 831 | Input/Output: [(36 19 -46 43) -46]
Test Case: 832 | Input/Output: [(-22 81 83 -78) -78]
Test Case: 833 | Input/Output: [(-82 -67 24 57) -82]
Test Case: 834 | Input/Output: [(-2 -8 -69 -69) -69]
Test Case: 835 | Input/Output: [(-20 30 -25 30) -25]
Test Case: 836 | Input/Output: [(-29 24 57 -96) -96]
Test Case: 837 | Input/Output: [(-39 -27 -99 79) -99]
Test Case: 838 | Input/Output: [(81 49 82 5) 5]
Test Case: 839 | Input/Output: [(-61 -28 -6 83) -61]
Test Case: 840 | Input/Output: [(65 -75 -3 -95) -95]
Test Case: 841 | Input/Output: [(43 39 47 33) 33]
Test Case: 842 | Input/Output: [(-38 -44 60 68) -44]
Test Case: 843 | Input/Output: [(43 -20 -94 -73) -94]
Test Case: 844 | Input/Output: [(33 13 47 4) 4]
Test Case: 845 | Input/Output: [(-32 -82 -27 -10) -82]
Test Case: 846 | Input/Output: [(90 85 -10 71) -10]
Test Case: 847 | Input/Output: [(-71 -25 -66 -61) -71]
Test Case: 848 | Input/Output: [(28 -50 -63 52) -63]
Test Case: 849 | Input/Output: [(-71 50 66 -92) -92]
Test Case: 850 | Input/Output: [(62 -68 24 54) -68]
Test Case: 851 | Input/Output: [(6 91 9 -41) -41]
Test Case: 852 | Input/Output: [(-24 49 7 -6) -24]
Test Case: 853 | Input/Output: [(-3 -55 -6 93) -55]
Test Case: 854 | Input/Output: [(91 -3 47 59) -3]
Test Case: 855 | Input/Output: [(28 -68 69 40) -68]
Test Case: 856 | Input/Output: [(-38 62 45 90) -38]
Test Case: 857 | Input/Output: [(-14 68 -8 38) -14]
Test Case: 858 | Input/Output: [(-86 -21 45 -58) -86]
Test Case: 859 | Input/Output: [(74 -37 0 -63) -63]
Test Case: 860 | Input/Output: [(-42 2 -12 87) -42]
Test Case: 861 | Input/Output: [(89 98 -64 2) -64]
Test Case: 862 | Input/Output: [(-99 19 28 14) -99]
Test Case: 863 | Input/Output: [(71 46 61 -78) -78]
Test Case: 864 | Input/Output: [(4 27 70 38) 4]
Test Case: 865 | Input/Output: [(65 -84 65 16) -84]
Test Case: 866 | Input/Output: [(-46 -9 13 -8) -46]
Test Case: 867 | Input/Output: [(-5 73 -27 77) -27]
Test Case: 868 | Input/Output: [(90 43 84 23) 23]
Test Case: 869 | Input/Output: [(45 -52 -76 -34) -76]
Test Case: 870 | Input/Output: [(28 37 -15 -45) -45]
Test Case: 871 | Input/Output: [(-78 37 1 -18) -78]
Test Case: 872 | Input/Output: [(-88 -9 -80 -59) -88]
Test Case: 873 | Input/Output: [(-3 19 -44 -83) -83]
Test Case: 874 | Input/Output: [(92 -28 -76 -31) -76]
Test Case: 875 | Input/Output: [(-50 -61 14 39) -61]
Test Case: 876 | Input/Output: [(83 45 23 75) 23]
Test Case: 877 | Input/Output: [(-96 -90 55 77) -96]
Test Case: 878 | Input/Output: [(-37 12 -2 -92) -92]
Test Case: 879 | Input/Output: [(17 68 44 13) 13]
Test Case: 880 | Input/Output: [(-42 20 81 -13) -42]
Test Case: 881 | Input/Output: [(88 -100 90 -43) -100]
Test Case: 882 | Input/Output: [(-59 14 -18 67) -59]
Test Case: 883 | Input/Output: [(59 33 -72 -3) -72]
Test Case: 884 | Input/Output: [(84 32 -40 20) -40]
Test Case: 885 | Input/Output: [(-92 28 34 51) -92]
Test Case: 886 | Input/Output: [(-49 71 28 57) -49]
Test Case: 887 | Input/Output: [(-21 -52 -95 -49) -95]
Test Case: 888 | Input/Output: [(-9 72 83 -1) -9]
Test Case: 889 | Input/Output: [(87 -31 -92 -39) -92]
Test Case: 890 | Input/Output: [(94 83 -15 -100) -100]
Test Case: 891 | Input/Output: [(53 -75 -27 30) -75]
Test Case: 892 | Input/Output: [(26 91 -63 90) -63]
Test Case: 893 | Input/Output: [(59 94 68 -98) -98]
Test Case: 894 | Input/Output: [(-13 -89 -37 64) -89]
Test Case: 895 | Input/Output: [(50 64 -19 18) -19]
Test Case: 896 | Input/Output: [(42 -94 -59 46) -94]
Test Case: 897 | Input/Output: [(-48 36 7 17) -48]
Test Case: 898 | Input/Output: [(19 -52 77 11) -52]
Test Case: 899 | Input/Output: [(0 -27 -85 -72) -85]
Test Case: 900 | Input/Output: [(4 -15 -26 5) -26]
Test Case: 901 | Input/Output: [(98 40 46 12) 12]
Test Case: 902 | Input/Output: [(31 -10 39 44) -10]
Test Case: 903 | Input/Output: [(-34 50 -89 -60) -89]
Test Case: 904 | Input/Output: [(-30 -6 34 -19) -30]
Test Case: 905 | Input/Output: [(-61 -36 -4 -86) -86]
Test Case: 906 | Input/Output: [(-2 -60 1 -89) -89]
Test Case: 907 | Input/Output: [(19 26 -16 54) -16]
Test Case: 908 | Input/Output: [(-53 75 30 -37) -53]
Test Case: 909 | Input/Output: [(-56 -32 86 -98) -98]
Test Case: 910 | Input/Output: [(-35 -78 99 1) -78]
Test Case: 911 | Input/Output: [(-74 25 -66 -23) -74]
Test Case: 912 | Input/Output: [(-82 94 -58 51) -82]
Test Case: 913 | Input/Output: [(91 -71 65 57) -71]
Test Case: 914 | Input/Output: [(72 90 -40 56) -40]
Test Case: 915 | Input/Output: [(-91 -8 -92 -95) -95]
Test Case: 916 | Input/Output: [(-60 93 -1 74) -60]
Test Case: 917 | Input/Output: [(-93 56 2 17) -93]
Test Case: 918 | Input/Output: [(-4 -37 -35 9) -37]
Test Case: 919 | Input/Output: [(62 85 -42 -35) -42]
Test Case: 920 | Input/Output: [(78 -15 33 93) -15]
Test Case: 921 | Input/Output: [(-64 49 -68 78) -68]
Test Case: 922 | Input/Output: [(36 68 -89 -12) -89]
Test Case: 923 | Input/Output: [(95 100 21 -7) -7]
Test Case: 924 | Input/Output: [(-16 84 62 -65) -65]
Test Case: 925 | Input/Output: [(-3 -13 67 39) -13]
Test Case: 926 | Input/Output: [(78 65 -3 -70) -70]
Test Case: 927 | Input/Output: [(19 72 -19 40) -19]
Test Case: 928 | Input/Output: [(43 -43 -38 -88) -88]
Test Case: 929 | Input/Output: [(68 -3 24 35) -3]
Test Case: 930 | Input/Output: [(22 -51 94 -38) -51]
Test Case: 931 | Input/Output: [(-25 24 39 -15) -25]
Test Case: 932 | Input/Output: [(-59 10 59 39) -59]
Test Case: 933 | Input/Output: [(78 -10 -8 -94) -94]
Test Case: 934 | Input/Output: [(-97 46 -79 20) -97]
Test Case: 935 | Input/Output: [(-96 -34 76 -92) -96]
Test Case: 936 | Input/Output: [(-44 -77 -26 -9) -77]
Test Case: 937 | Input/Output: [(-17 -26 65 50) -26]
Test Case: 938 | Input/Output: [(-25 73 -3 -41) -41]
Test Case: 939 | Input/Output: [(-55 -35 68 -26) -55]
Test Case: 940 | Input/Output: [(27 -11 -49 -62) -62]
Test Case: 941 | Input/Output: [(-14 -46 16 -50) -50]
Test Case: 942 | Input/Output: [(96 9 -70 99) -70]
Test Case: 943 | Input/Output: [(87 47 -78 -28) -78]
Test Case: 944 | Input/Output: [(-52 -66 -79 -48) -79]
Test Case: 945 | Input/Output: [(-28 -94 -11 -99) -99]
Test Case: 946 | Input/Output: [(33 -90 -33 58) -90]
Test Case: 947 | Input/Output: [(-27 -55 80 -25) -55]
Test Case: 948 | Input/Output: [(-84 -56 -87 -69) -87]
Test Case: 949 | Input/Output: [(-20 -83 -96 -91) -96]
Test Case: 950 | Input/Output: [(-59 -8 -5 -31) -59]
Test Case: 951 | Input/Output: [(97 -37 68 92) -37]
Test Case: 952 | Input/Output: [(-6 -45 -19 -73) -73]
Test Case: 953 | Input/Output: [(-67 93 -24 53) -67]
Test Case: 954 | Input/Output: [(96 -48 86 94) -48]
Test Case: 955 | Input/Output: [(47 -96 25 76) -96]
Test Case: 956 | Input/Output: [(-64 99 -42 -25) -64]
Test Case: 957 | Input/Output: [(-46 -66 82 -34) -66]
Test Case: 958 | Input/Output: [(-39 70 81 -70) -70]
Test Case: 959 | Input/Output: [(20 -77 79 55) -77]
Test Case: 960 | Input/Output: [(-40 13 -94 -25) -94]
Test Case: 961 | Input/Output: [(-72 -26 11 -43) -72]
Test Case: 962 | Input/Output: [(-2 52 -79 -19) -79]
Test Case: 963 | Input/Output: [(-37 81 -38 -67) -67]
Test Case: 964 | Input/Output: [(-43 -19 68 -16) -43]
Test Case: 965 | Input/Output: [(-84 66 -63 -9) -84]
Test Case: 966 | Input/Output: [(90 -77 -63 -17) -77]
Test Case: 967 | Input/Output: [(-7 -58 -26 42) -58]
Test Case: 968 | Input/Output: [(57 97 4 10) 4]
Test Case: 969 | Input/Output: [(20 -88 25 -27) -88]
Test Case: 970 | Input/Output: [(65 -87 30 -91) -91]
Test Case: 971 | Input/Output: [(-65 -1 60 -7) -65]
Test Case: 972 | Input/Output: [(69 17 -97 -42) -97]
Test Case: 973 | Input/Output: [(41 29 22 8) 8]
Test Case: 974 | Input/Output: [(-73 55 92 -95) -95]
Test Case: 975 | Input/Output: [(-74 -80 98 -86) -86]
Test Case: 976 | Input/Output: [(64 -15 37 100) -15]
Test Case: 977 | Input/Output: [(-72 5 -10 100) -72]
Test Case: 978 | Input/Output: [(40 38 54 -85) -85]
Test Case: 979 | Input/Output: [(-33 -7 -3 56) -33]
Test Case: 980 | Input/Output: [(40 -45 -60 85) -60]
Test Case: 981 | Input/Output: [(73 59 -14 -42) -42]
Test Case: 982 | Input/Output: [(-47 42 -94 10) -94]
Test Case: 983 | Input/Output: [(87 30 -86 -57) -86]
Test Case: 984 | Input/Output: [(16 68 16 -62) -62]
Test Case: 985 | Input/Output: [(-75 38 60 3) -75]
Test Case: 986 | Input/Output: [(3 -72 -13 34) -72]
Test Case: 987 | Input/Output: [(72 -74 80 7) -74]
Test Case: 988 | Input/Output: [(-16 -75 -38 -6) -75]
Test Case: 989 | Input/Output: [(32 -30 12 36) -30]
Test Case: 990 | Input/Output: [(-17 74 11 -55) -55]
Test Case: 991 | Input/Output: [(-28 73 -43 38) -43]
Test Case: 992 | Input/Output: [(-21 77 -32 -35) -35]
Test Case: 993 | Input/Output: [(-94 20 51 -16) -94]
Test Case: 994 | Input/Output: [(-98 -46 76 -13) -98]
Test Case: 995 | Input/Output: [(-37 -58 -19 -78) -78]
Test Case: 996 | Input/Output: [(-100 -14 84 84) -100]
Test Case: 997 | Input/Output: [(-56 69 -89 95) -89]
Test Case: 998 | Input/Output: [(21 12 45 -23) -23]
Test Case: 999 | Input/Output: [(68 4 -23 -58) -58]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -76 -8 -68 -98 -67 -26 39 -80 75 -59 -71 -63 -18 1 -10 79
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-73 -73 -73 16] -73] [[-6 -83 -6 -6] -83] [[-8 8 8 8] -8] [[-24 -24 -24 -45] -45] [[6 -98 6 6] -98] [[19 -94 19 19] -94] [[63 63 0 63] 0] [[44 10 10 10] 10] [[-59 -59 -72 -59] -72] [[-96 -96 88 -96] -96] [(-81 -81 -81 -81) -81] [(-50 -50 -50 -50) -50] [(-74 -74 -74 -74) -74] [(-83 -83 -83 -83) -83] [(65 65 65 65) 65] [(8 84 66 15) 8] [(94 19 24 76) 19] [(70 65 29 2) 2] [(30 48 17 76) 17] [(71 21 20 84) 20] [(63 72 50 4) 4] [(27 95 97 85) 27] [(65 9 64 86) 9] [(79 41 36 74) 36] [(29 10 51 82) 10] [(16 94 94 96) 16] [(42 79 52 75) 42] [(97 93 31 15) 15] [(64 58 30 86) 30] [(66 93 62 78) 62] [(94 66 25 26) 25] [(36 97 1 87) 1] [(32 79 60 43) 32] [(44 97 59 8) 8] [(39 82 31 28) 28] [(56 70 -16 -41) -41] [(-53 -84 -39 -68) -84] [(-25 3 43 44) -25] [(69 90 32 57) 32] [(-45 63 86 8) -45] [(-32 45 14 81) -32] [(-53 24 -75 56) -75] [(-64 -52 -39 86) -64] [(70 -29 -41 55) -41] [(49 -77 -55 30) -77] [(81 81 36 -87) -87] [(5 -37 80 45) -37] [(37 91 -21 25) -21] [(-89 92 96 73) -89] [(-68 53 -71 -66) -71] [(-13 74 92 -7) -13] [(-75 -88 54 -75) -88] [(48 29 -84 6) -84] [(20 14 -23 -71) -71] [(62 36 -96 15) -96] [(-22 36 24 -70) -70] [(72 -41 -60 -31) -60] [(70 51 32 -62) -62] [(2 57 11 42) 2] [(59 -88 22 -46) -88] [(-27 30 -36 -89) -89] [(11 -4 -89 -35) -89] [(3 50 100 -67) -67] [(-60 45 65 -51) -60] [(-75 97 -64 -56) -75] [(-28 -57 -38 70) -57] [(-53 -12 30 68) -53] [(22 -46 45 -19) -46] [(98 74 -6 -77) -77] [(41 -71 47 70) -71] [(-16 -58 26 -96) -96] [(-26 -39 72 -37) -39] [(77 -99 37 -93) -99] [(80 66 34 -58) -58] [(16 -21 -70 45) -70] [(-89 12 -44 76) -89] [(-61 -20 -27 -55) -61] [(27 -11 -30 -4) -30] [(-99 8 71 97) -99] [(-2 -13 52 -3) -13] [(-40 26 8 73) -40] [(-98 -66 74 78) -98] [(-85 73 40 23) -85] [(-25 89 -68 -59) -68] [(-50 -59 63 52) -59] [(-72 -32 63 11) -72] [(-96 -18 -28 14) -96] [(-31 15 -10 -73) -73] [(-44 -27 -62 89) -62] [(41 -78 93 23) -78] [(47 -32 -3 -58) -58] [(78 -44 10 -3) -44] [(31 -31 31 -41) -41] [(53 -70 -35 95) -70] [(62 42 -41 51) -41])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction 39} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_807} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 2, :instruction exec_dup})
Lexicase best program: (exec_do*count () integer_inc print_boolean integer_pop 39 boolean_stackdepth integer_fromboolean integer_min integer_empty exec_shove (exec_k_when_autoconstructing (integer_dec boolean_dup_times exec_while () exec_shove (exec_empty integer_lt exec_swap (boolean_and integer_sub integer_lte boolean_shove integer_flush exec_do*count () exec_s (boolean_dup) (exec_rot (integer_yank) (integer_swap in3 integer_pop exec_s_when_autoconstructing (boolean_dup) (boolean_stackdepth) (in2 exec_shove (in3 print_integer boolean_or exec_stackdepth)) boolean_rot integer_empty tagged_807 integer_max exec_dup_times () integer_dup_items boolean_frominteger exec_do*count (boolean_or exec_swap (integer_dup) (integer_rot) integer_mult) integer_eq) (exec_stackdepth exec_k (integer_dec exec_y_when_autoconstructing (integer_pop exec_eq exec_do*times () boolean_swap) integer_add integer_gt) (boolean_rot exec_while (print_boolean integer_sub boolean_pop) integer_min) exec_dup ())) ()) ())) ()))
Lexicase best errors: [0 0 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 101
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction 39} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_807} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 2, :instruction exec_dup})
Zero cases best program: (exec_do*count () integer_inc print_boolean integer_pop 39 boolean_stackdepth integer_fromboolean integer_min integer_empty exec_shove (exec_k_when_autoconstructing (integer_dec boolean_dup_times exec_while () exec_shove (exec_empty integer_lt exec_swap (boolean_and integer_sub integer_lte boolean_shove integer_flush exec_do*count () exec_s (boolean_dup) (exec_rot (integer_yank) (integer_swap in3 integer_pop exec_s_when_autoconstructing (boolean_dup) (boolean_stackdepth) (in2 exec_shove (in3 print_integer boolean_or exec_stackdepth)) boolean_rot integer_empty tagged_807 integer_max exec_dup_times () integer_dup_items boolean_frominteger exec_do*count (boolean_or exec_swap (integer_dup) (integer_rot) integer_mult) integer_eq) (exec_stackdepth exec_k (integer_dec exec_y_when_autoconstructing (integer_pop exec_eq exec_do*times () boolean_swap) integer_add integer_gt) (boolean_rot exec_while (print_boolean integer_sub boolean_pop) integer_min) exec_dup ())) ()) ())) ()))
Zero cases best errors: [0 0 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 101
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 12 15 10 4 5 3 3 3 4)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (4 12 15 10 4 5 3 3 3 4)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_154} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (in3 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_154 (integer_inc boolean_yank exec_y_when_autoconstructing (boolean_invert_first_then_and exec_noop boolean_xor integer_mult exec_k (integer_swap exec_s_when_autoconstructing () (integer_flush boolean_dup_times exec_noop integer_swap) (boolean_invert_second_then_and boolean_dup_times integer_shove integer_stackdepth in1 integer_dec) print_boolean integer_eq) (boolean_invert_first_then_and boolean_not) exec_do*while (integer_dup_items boolean_and exec_eq in4 boolean_swap print_exec () boolean_xor integer_empty print_integer integer_dec boolean_or)) boolean_and integer_stackdepth integer_shove boolean_stackdepth boolean_frominteger exec_if (integer_sub boolean_shove boolean_and) (exec_s_when_autoconstructing () () ()))) () ())
Errors: [0 0 0 0 0 1 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 52
Size: 70
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 9.937
Median total errors in population: 10
Error averages by case: (0.996 0.988 0.985 0.99 0.996 0.995 0.997 0.997 0.997 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.477
Average program size in population (points): 67.728
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 438008
--- Timings ---
Current time: 1559584476442 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.7 seconds, 29.7%
Fitness Testing:      1.6 seconds, 66.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 44                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 94                 
Correct output: 2                   | Program output: 70                 
Correct output: 17                  | Program output: 30                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 9                   | Program output: 65                 
Correct output: 36                  | Program output: 79                 
Correct output: 10                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 97                 
Correct output: 30                  | Program output: 64                 
Correct output: 62                  | Program output: 66                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 8                   | Program output: 44                 
Correct output: 28                  | Program output: 39                 
Correct output: -41                 | Program output: 56                 
Correct output: -84                 | Program output: -53                
Correct output: -25                 | Program output: -25                
Correct output: 32                  | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -32                 | Program output: -32                
Correct output: -75                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -41                 | Program output: 70                 
Correct output: -77                 | Program output: 49                 
Correct output: -87                 | Program output: 81                 
Correct output: -37                 | Program output: 5                  
Correct output: -21                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 48                 
Correct output: -71                 | Program output: 20                 
Correct output: -96                 | Program output: 62                 
Correct output: -70                 | Program output: -22                
Correct output: -60                 | Program output: 72                 
Correct output: -62                 | Program output: 70                 
Correct output: 2                   | Program output: 2                  
Correct output: -88                 | Program output: 59                 
Correct output: -89                 | Program output: -27                
Correct output: -89                 | Program output: 11                 
Correct output: -67                 | Program output: 3                  
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -57                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -46                 | Program output: 22                 
Correct output: -77                 | Program output: 98                 
Correct output: -71                 | Program output: 41                 
Correct output: -96                 | Program output: -16                
Correct output: -39                 | Program output: -26                
Correct output: -99                 | Program output: 77                 
Correct output: -58                 | Program output: 80                 
Correct output: -70                 | Program output: 16                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -30                 | Program output: 27                 
Correct output: -99                 | Program output: -99                
Correct output: -13                 | Program output: -2                 
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -25                
Correct output: -59                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -31                
Correct output: -62                 | Program output: -44                
Correct output: -78                 | Program output: 41                 
Correct output: -58                 | Program output: 47                 
Correct output: -44                 | Program output: 78                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: 53                 
Correct output: -41                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction 61} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (integer_stackdepth in2 in2 in1 exec_noop print_integer integer_add integer_div boolean_empty integer_flush integer_pop 61 boolean_stackdepth integer_stackdepth boolean_stackdepth integer_yank boolean_invert_first_then_and integer_pop integer_add integer_add in3 exec_swap (boolean_dup_items boolean_stackdepth) ())
Lexicase best errors: [1 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction 61} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (integer_stackdepth in2 in2 in1 exec_noop print_integer integer_add integer_div boolean_empty integer_flush integer_pop 61 boolean_stackdepth integer_stackdepth boolean_stackdepth integer_yank boolean_invert_first_then_and integer_pop integer_add integer_add in3 exec_swap (boolean_dup_items boolean_stackdepth) ())
Zero cases best errors: [1 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (133 125 416 125 126 126 416 240 240 125)
Population mean number of elite cases: 2.07
Count of perfect (error zero) individuals by case: (133 125 416 125 126 126 416 240 240 125)
Population mean number of perfect (error zero) cases: 2.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction 61} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_stackdepth in2 in2 in1 exec_noop print_integer integer_add integer_div boolean_empty integer_flush integer_pop 61 boolean_stackdepth integer_stackdepth boolean_stackdepth integer_yank boolean_invert_first_then_and integer_pop integer_add integer_add in3 exec_swap (boolean_dup_items boolean_stackdepth) ())
Errors: [1 0 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 24
Size: 27
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 7.928
Median total errors in population: 8
Error averages by case: (0.867 0.875 0.584 0.875 0.874 0.874 0.584 0.76 0.76 0.875)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.721
Average program size in population (points): 55.948
Average percent parens in population: 0.241
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.521
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.453
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.44
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 815024
--- Timings ---
Current time: 1559584479027 milliseconds
Total Time:           5.0 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.5 seconds, 49.2%
Fitness Testing:      2.2 seconds, 43.7%
Report:               0.3 seconds,  5.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: 16                 
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 15                 
Correct output: 19                  | Program output: 76                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 76                 
Correct output: 20                  | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 85                 
Correct output: 9                   | Program output: 86                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 82                 
Correct output: 16                  | Program output: 96                 
Correct output: 42                  | Program output: 75                 
Correct output: 15                  | Program output: 15                 
Correct output: 30                  | Program output: 86                 
Correct output: 62                  | Program output: 78                 
Correct output: 25                  | Program output: 26                 
Correct output: 1                   | Program output: 87                 
Correct output: 32                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 28                  | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -68                
Correct output: -25                 | Program output: 44                 
Correct output: 32                  | Program output: 57                 
Correct output: -45                 | Program output: 8                  
Correct output: -32                 | Program output: 81                 
Correct output: -75                 | Program output: 56                 
Correct output: -64                 | Program output: 86                 
Correct output: -41                 | Program output: 55                 
Correct output: -77                 | Program output: 30                 
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: 45                 
Correct output: -21                 | Program output: 25                 
Correct output: -89                 | Program output: 73                 
Correct output: -71                 | Program output: -66                
Correct output: -13                 | Program output: -7                 
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -96                 | Program output: 15                 
Correct output: -70                 | Program output: -70                
Correct output: -60                 | Program output: -31                
Correct output: -62                 | Program output: -62                
Correct output: 2                   | Program output: 42                 
Correct output: -88                 | Program output: -46                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -51                
Correct output: -75                 | Program output: -56                
Correct output: -57                 | Program output: 70                 
Correct output: -53                 | Program output: 68                 
Correct output: -46                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 70                 
Correct output: -96                 | Program output: -96                
Correct output: -39                 | Program output: -37                
Correct output: -99                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: 45                 
Correct output: -89                 | Program output: 76                 
Correct output: -61                 | Program output: -55                
Correct output: -30                 | Program output: -4                 
Correct output: -99                 | Program output: 97                 
Correct output: -13                 | Program output: -3                 
Correct output: -40                 | Program output: 73                 
Correct output: -98                 | Program output: 78                 
Correct output: -85                 | Program output: 23                 
Correct output: -68                 | Program output: -59                
Correct output: -59                 | Program output: 52                 
Correct output: -72                 | Program output: 11                 
Correct output: -96                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: 89                 
Correct output: -78                 | Program output: 23                 
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -3                 
Correct output: -41                 | Program output: -41                
Correct output: -70                 | Program output: 95                 
Correct output: -41                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_dup (integer_gte in4 print_integer exec_yank integer_swap integer_pop integer_div exec_y () integer_empty) exec_dup () exec_when (exec_yankdup) exec_while (exec_noop print_integer boolean_dup integer_gt boolean_dup_times exec_s (integer_dup_times exec_yank boolean_flush boolean_yankdup boolean_yankdup exec_k_when_autoconstructing () (in2 integer_lte integer_lte) boolean_invert_first_then_and) (integer_dup_items boolean_and exec_eq in4 boolean_swap print_exec () boolean_xor integer_empty print_integer integer_dec boolean_or) () boolean_and integer_stackdepth integer_shove boolean_stackdepth boolean_frominteger exec_if (integer_sub boolean_shove boolean_and) (exec_s_when_autoconstructing () () ())))
Lexicase best errors: [0 0 1 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 68
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_dup (integer_gte in4 print_integer exec_yank integer_swap integer_pop integer_div exec_y () integer_empty) exec_dup () exec_when (exec_yankdup) exec_while (exec_noop print_integer boolean_dup integer_gt boolean_dup_times exec_s (integer_dup_times exec_yank boolean_flush boolean_yankdup boolean_yankdup exec_k_when_autoconstructing () (in2 integer_lte integer_lte) boolean_invert_first_then_and) (integer_dup_items boolean_and exec_eq in4 boolean_swap print_exec () boolean_xor integer_empty print_integer integer_dec boolean_or) () boolean_and integer_stackdepth integer_shove boolean_stackdepth boolean_frominteger exec_if (integer_sub boolean_shove boolean_and) (exec_s_when_autoconstructing () () ())))
Zero cases best errors: [0 0 1 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 68
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (192 192 170 922 635 464 92 192 92 92)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (192 192 170 922 635 464 92 192 92 92)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Best program: (integer_add exec_eq integer_rot integer_flush exec_dup (boolean_yankdup) boolean_flush integer_dup_times integer_fromboolean in4 print_integer integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte integer_eq boolean_and integer_rot integer_lte exec_empty)
Errors: [0 0 1 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 30
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 6.957
Median total errors in population: 7
Error averages by case: (0.808 0.808 0.83 0.078 0.365 0.536 0.908 0.808 0.908 0.908)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.25
Average program size in population (points): 58.305
Average percent parens in population: 0.221
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.025
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1183167
--- Timings ---
Current time: 1559584481951 milliseconds
Total Time:           8.0 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.7 seconds, 58.6%
Fitness Testing:      2.7 seconds, 33.5%
Report:               0.5 seconds,  6.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 84                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 65                 
Correct output: 17                  | Program output: 48                 
Correct output: 20                  | Program output: 21                 
Correct output: 4                   | Program output: 72                 
Correct output: 27                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 79                 
Correct output: 15                  | Program output: 93                 
Correct output: 30                  | Program output: 58                 
Correct output: 62                  | Program output: 93                 
Correct output: 25                  | Program output: 66                 
Correct output: 1                   | Program output: 97                 
Correct output: 32                  | Program output: 79                 
Correct output: 8                   | Program output: 97                 
Correct output: 28                  | Program output: 82                 
Correct output: -41                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: 3                  
Correct output: 32                  | Program output: 90                 
Correct output: -45                 | Program output: 63                 
Correct output: -32                 | Program output: 45                 
Correct output: -75                 | Program output: 24                 
Correct output: -64                 | Program output: -52                
Correct output: -41                 | Program output: -29                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 81                 
Correct output: -37                 | Program output: -37                
Correct output: -21                 | Program output: 91                 
Correct output: -89                 | Program output: 92                 
Correct output: -71                 | Program output: 53                 
Correct output: -13                 | Program output: 74                 
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: 29                 
Correct output: -71                 | Program output: 14                 
Correct output: -96                 | Program output: 36                 
Correct output: -70                 | Program output: 36                 
Correct output: -60                 | Program output: -41                
Correct output: -62                 | Program output: 51                 
Correct output: 2                   | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: 30                 
Correct output: -89                 | Program output: -4                 
Correct output: -67                 | Program output: 50                 
Correct output: -60                 | Program output: 45                 
Correct output: -75                 | Program output: 97                 
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: -12                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: 74                 
Correct output: -71                 | Program output: -71                
Correct output: -96                 | Program output: -58                
Correct output: -39                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: 66                 
Correct output: -70                 | Program output: -21                
Correct output: -89                 | Program output: 12                 
Correct output: -61                 | Program output: -20                
Correct output: -30                 | Program output: -11                
Correct output: -99                 | Program output: 8                  
Correct output: -13                 | Program output: -13                
Correct output: -40                 | Program output: 26                 
Correct output: -98                 | Program output: -66                
Correct output: -85                 | Program output: 73                 
Correct output: -68                 | Program output: 89                 
Correct output: -59                 | Program output: -59                
Correct output: -72                 | Program output: -32                
Correct output: -96                 | Program output: -18                
Correct output: -73                 | Program output: 15                 
Correct output: -62                 | Program output: -27                
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: -31                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_172} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction -73} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -98} {:close 1, :instruction tagged_48} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq})
Lexicase best program: (boolean_rot integer_dup tagged_172 in2 print_integer integer_flush -73 exec_eq exec_when (exec_y_when_autoconstructing () boolean_dup in2 integer_fromboolean print_integer integer_min) exec_empty boolean_rot boolean_or exec_dup (boolean_dup_times exec_while (integer_yank exec_dup_items integer_max exec_dup_times (print_boolean boolean_eq boolean_invert_first_then_and exec_do*count (exec_dup_times (-98 tagged_48) integer_yank integer_gte boolean_swap exec_pop () boolean_flush) exec_flush integer_dup_items exec_do*while () integer_max) exec_y_when_autoconstructing (exec_pop (integer_flush) boolean_yankdup boolean_eq))))
Lexicase best errors: [1 0 1 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 58
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_172} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction -73} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -98} {:close 1, :instruction tagged_48} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq})
Zero cases best program: (boolean_rot integer_dup tagged_172 in2 print_integer integer_flush -73 exec_eq exec_when (exec_y_when_autoconstructing () boolean_dup in2 integer_fromboolean print_integer integer_min) exec_empty boolean_rot boolean_or exec_dup (boolean_dup_times exec_while (integer_yank exec_dup_items integer_max exec_dup_times (print_boolean boolean_eq boolean_invert_first_then_and exec_do*count (exec_dup_times (-98 tagged_48) integer_yank integer_gte boolean_swap exec_pop () boolean_flush) exec_flush integer_dup_items exec_do*while () integer_max) exec_y_when_autoconstructing (exec_pop (integer_flush) boolean_yankdup boolean_eq))))
Zero cases best errors: [1 0 1 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 58
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 309 134 309 134 165 165 309 309 315)
Population mean number of elite cases: 2.28
Count of perfect (error zero) individuals by case: (134 309 134 309 134 165 165 309 309 315)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_334} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_496} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction -85} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max})
Best program: (boolean_stackdepth exec_yank tag_integer_334 in2 integer_max print_integer boolean_stackdepth tag_boolean_496 boolean_invert_first_then_and exec_y (boolean_yank exec_s () (boolean_dup_items in3 boolean_invert_second_then_and) (integer_div boolean_rot) exec_y (exec_do*range (integer_sub)) boolean_flush integer_stackdepth boolean_or -85 boolean_stackdepth exec_dup (integer_dup_items exec_y_when_autoconstructing () integer_div exec_s (integer_fromboolean) (exec_yankdup) (boolean_flush exec_do*while (integer_inc exec_eq boolean_frominteger exec_stackdepth boolean_dup exec_eq integer_swap exec_do*count (print_newline exec_noop) boolean_frominteger integer_max)))))
Errors: [1 0 1 0 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 46
Size: 60
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.717
Median total errors in population: 8
Error averages by case: (0.866 0.691 0.866 0.691 0.866 0.835 0.835 0.691 0.691 0.685)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.671
Average program size in population (points): 56.608
Average percent parens in population: 0.231
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4535
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1627337
--- Timings ---
Current time: 1559584485472 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.9 seconds, 62.6%
Fitness Testing:      3.3 seconds, 29.6%
Report:               0.8 seconds,  6.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 84                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 65                 
Correct output: 17                  | Program output: 48                 
Correct output: 20                  | Program output: 21                 
Correct output: 4                   | Program output: 72                 
Correct output: 27                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 79                 
Correct output: 15                  | Program output: 93                 
Correct output: 30                  | Program output: 58                 
Correct output: 62                  | Program output: 93                 
Correct output: 25                  | Program output: 66                 
Correct output: 1                   | Program output: 97                 
Correct output: 32                  | Program output: 79                 
Correct output: 8                   | Program output: 97                 
Correct output: 28                  | Program output: 82                 
Correct output: -41                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: 3                  
Correct output: 32                  | Program output: 90                 
Correct output: -45                 | Program output: 63                 
Correct output: -32                 | Program output: 45                 
Correct output: -75                 | Program output: 24                 
Correct output: -64                 | Program output: -52                
Correct output: -41                 | Program output: -29                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 81                 
Correct output: -37                 | Program output: -37                
Correct output: -21                 | Program output: 91                 
Correct output: -89                 | Program output: 92                 
Correct output: -71                 | Program output: 53                 
Correct output: -13                 | Program output: 74                 
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: 29                 
Correct output: -71                 | Program output: 14                 
Correct output: -96                 | Program output: 36                 
Correct output: -70                 | Program output: 36                 
Correct output: -60                 | Program output: -41                
Correct output: -62                 | Program output: 51                 
Correct output: 2                   | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: 30                 
Correct output: -89                 | Program output: -4                 
Correct output: -67                 | Program output: 50                 
Correct output: -60                 | Program output: 45                 
Correct output: -75                 | Program output: 97                 
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: -12                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: 74                 
Correct output: -71                 | Program output: -71                
Correct output: -96                 | Program output: -58                
Correct output: -39                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: 66                 
Correct output: -70                 | Program output: -21                
Correct output: -89                 | Program output: 12                 
Correct output: -61                 | Program output: -20                
Correct output: -30                 | Program output: -11                
Correct output: -99                 | Program output: 8                  
Correct output: -13                 | Program output: -13                
Correct output: -40                 | Program output: 26                 
Correct output: -98                 | Program output: -66                
Correct output: -85                 | Program output: 73                 
Correct output: -68                 | Program output: 89                 
Correct output: -59                 | Program output: -59                
Correct output: -72                 | Program output: -32                
Correct output: -96                 | Program output: -18                
Correct output: -73                 | Program output: 15                 
Correct output: -62                 | Program output: -27                
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: -31                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_342} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_eq} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup})
Lexicase best program: (print_boolean integer_sub in1 exec_if (print_integer integer_dup_times boolean_xor integer_dup_items boolean_or) (in4 exec_shove (integer_dup exec_s_when_autoconstructing () (integer_sub integer_stackdepth exec_flush) (integer_mult integer_gt integer_mult integer_max exec_do*times (tagged_342 print_newline exec_do*times (exec_k_when_autoconstructing () (integer_min) exec_yankdup boolean_empty integer_stackdepth integer_dup_times exec_rot () (in3 integer_empty integer_max print_boolean integer_empty exec_swap (exec_y () boolean_invert_second_then_and exec_k_when_autoconstructing (boolean_dup boolean_empty print_exec () integer_dec print_exec () exec_do*times (integer_dup boolean_eq) print_newline) (boolean_pop in1) in1 exec_dup (boolean_invert_second_then_and boolean_or exec_if (print_boolean) (exec_shove (boolean_shove) exec_yank exec_dup (integer_lt) exec_yankdup))) ()) ()))))))
Lexicase best errors: [0 0 1 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 90
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_342} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_eq} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup})
Zero cases best program: (print_boolean integer_sub in1 exec_if (print_integer integer_dup_times boolean_xor integer_dup_items boolean_or) (in4 exec_shove (integer_dup exec_s_when_autoconstructing () (integer_sub integer_stackdepth exec_flush) (integer_mult integer_gt integer_mult integer_max exec_do*times (tagged_342 print_newline exec_do*times (exec_k_when_autoconstructing () (integer_min) exec_yankdup boolean_empty integer_stackdepth integer_dup_times exec_rot () (in3 integer_empty integer_max print_boolean integer_empty exec_swap (exec_y () boolean_invert_second_then_and exec_k_when_autoconstructing (boolean_dup boolean_empty print_exec () integer_dec print_exec () exec_do*times (integer_dup boolean_eq) print_newline) (boolean_pop in1) in1 exec_dup (boolean_invert_second_then_and boolean_or exec_if (print_boolean) (exec_shove (boolean_shove) exec_yank exec_dup (integer_lt) exec_yankdup))) ()) ()))))))
Zero cases best errors: [0 0 1 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 90
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (922 275 367 367 367 274 90 190 91 274)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (922 275 367 367 367 274 90 190 91 274)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -98} {:close 1, :instruction tagged_48} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_182} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_boolean_859} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec})
Best program: (integer_sub exec_y_when_autoconstructing () boolean_dup in2 integer_fromboolean print_integer integer_min exec_empty boolean_rot boolean_or exec_dup (boolean_dup_times exec_while (integer_yank exec_dup_items integer_max exec_dup_times (print_boolean boolean_eq boolean_invert_first_then_and exec_do*count (exec_dup_times (-98 tagged_48) integer_yank integer_gte boolean_swap exec_pop () boolean_flush) exec_flush integer_dup_items exec_do*while () integer_max) exec_y_when_autoconstructing (boolean_pop integer_flush) boolean_yankdup boolean_eq integer_dup_items) boolean_flush exec_do*while (exec_k (boolean_stackdepth exec_shove (integer_yankdup exec_pop () boolean_and integer_rot) integer_empty integer_add) (integer_flush tag_boolean_182 exec_do*count (boolean_dup_times exec_while ()) exec_yank exec_do*count (boolean_invert_second_then_and integer_eq tag_boolean_859 in2 exec_stackdepth exec_dup (exec_rot () (exec_if (boolean_and integer_yank) (boolean_dup_times integer_mod in2) integer_dup_times) (integer_fromboolean exec_swap (integer_lt boolean_stackdepth) (exec_dup_times (integer_dec)))))))))
Errors: [0 1 0 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 77
Size: 104
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 6.783
Median total errors in population: 6
Error averages by case: (0.078 0.725 0.633 0.633 0.633 0.726 0.91 0.81 0.909 0.726)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.241
Average program size in population (points): 60.111
Average percent parens in population: 0.235
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.97875
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2052577
--- Timings ---
Current time: 1559584489056 milliseconds
Total Time:          14.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.3 seconds, 63.5%
Fitness Testing:      3.8 seconds, 26.1%
Report:               1.4 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_334} {:close 0, :instruction in2} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_342} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup})
Lexicase best program: (boolean_stackdepth exec_yank tag_integer_334 in2 integer_max print_integer in4 exec_shove (integer_dup exec_s_when_autoconstructing () (integer_sub integer_stackdepth exec_flush) (integer_mult integer_gt integer_mult integer_max exec_do*times (tagged_342 print_newline exec_do*times (exec_k_when_autoconstructing () (integer_min) exec_yankdup boolean_empty integer_stackdepth integer_dup_times exec_rot () (exec_do*while (integer_empty integer_max print_boolean integer_empty exec_swap (exec_y () boolean_invert_second_then_and exec_k_when_autoconstructing (boolean_dup boolean_empty print_exec () integer_dec integer_dup integer_dec print_newline) (exec_do*times (in1) in1 exec_dup (boolean_invert_second_then_and boolean_or exec_if (print_boolean) (exec_shove (boolean_shove) exec_yank exec_dup (integer_lt) exec_yankdup)))) ())) ())))))
Lexicase best errors: [0 1 1 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 83
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_334} {:close 0, :instruction in2} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_342} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup})
Zero cases best program: (boolean_stackdepth exec_yank tag_integer_334 in2 integer_max print_integer in4 exec_shove (integer_dup exec_s_when_autoconstructing () (integer_sub integer_stackdepth exec_flush) (integer_mult integer_gt integer_mult integer_max exec_do*times (tagged_342 print_newline exec_do*times (exec_k_when_autoconstructing () (integer_min) exec_yankdup boolean_empty integer_stackdepth integer_dup_times exec_rot () (exec_do*while (integer_empty integer_max print_boolean integer_empty exec_swap (exec_y () boolean_invert_second_then_and exec_k_when_autoconstructing (boolean_dup boolean_empty print_exec () integer_dec integer_dup integer_dec print_newline) (exec_do*times (in1) in1 exec_dup (boolean_invert_second_then_and boolean_or exec_if (print_boolean) (exec_shove (boolean_shove) exec_yank exec_dup (integer_lt) exec_yankdup)))) ())) ())))))
Zero cases best errors: [0 1 1 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 83
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 108 325 325 202 108 299 108 299 325)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (296 108 325 325 202 108 299 108 299 325)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_870} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte})
Best program: (integer_rot exec_if (exec_noop exec_k (in3 print_integer) (tagged_816 integer_sub exec_when (integer_yankdup) integer_swap exec_eq integer_pop tag_integer_870 in4) integer_mod in2) (integer_mod boolean_frominteger exec_yankdup integer_lte))
Errors: [1 0 1 1 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.605
Median total errors in population: 7
Error averages by case: (0.704 0.892 0.675 0.675 0.798 0.892 0.701 0.892 0.701 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.446
Average program size in population (points): 56.043
Average percent parens in population: 0.228
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.4660625
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2474266
--- Timings ---
Current time: 1559584491980 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.5 seconds, 63.8%
Fitness Testing:      4.3 seconds, 23.7%
Report:               2.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 44                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 94                 
Correct output: 2                   | Program output: 70                 
Correct output: 17                  | Program output: 30                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 9                   | Program output: 65                 
Correct output: 36                  | Program output: 79                 
Correct output: 10                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 97                 
Correct output: 30                  | Program output: 64                 
Correct output: 62                  | Program output: 66                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 8                   | Program output: 44                 
Correct output: 28                  | Program output: 39                 
Correct output: -41                 | Program output: 56                 
Correct output: -84                 | Program output: -53                
Correct output: -25                 | Program output: -25                
Correct output: 32                  | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -32                 | Program output: -32                
Correct output: -75                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -41                 | Program output: 70                 
Correct output: -77                 | Program output: 49                 
Correct output: -87                 | Program output: 81                 
Correct output: -37                 | Program output: 5                  
Correct output: -21                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 48                 
Correct output: -71                 | Program output: 20                 
Correct output: -96                 | Program output: 62                 
Correct output: -70                 | Program output: -22                
Correct output: -60                 | Program output: 72                 
Correct output: -62                 | Program output: 70                 
Correct output: 2                   | Program output: 2                  
Correct output: -88                 | Program output: 59                 
Correct output: -89                 | Program output: -27                
Correct output: -89                 | Program output: 11                 
Correct output: -67                 | Program output: 3                  
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -57                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -46                 | Program output: 22                 
Correct output: -77                 | Program output: 98                 
Correct output: -71                 | Program output: 41                 
Correct output: -96                 | Program output: -16                
Correct output: -39                 | Program output: -26                
Correct output: -99                 | Program output: 77                 
Correct output: -58                 | Program output: 80                 
Correct output: -70                 | Program output: 16                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -30                 | Program output: 27                 
Correct output: -99                 | Program output: -99                
Correct output: -13                 | Program output: -2                 
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -25                
Correct output: -59                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -31                
Correct output: -62                 | Program output: -44                
Correct output: -78                 | Program output: 41                 
Correct output: -58                 | Program output: 47                 
Correct output: -44                 | Program output: 78                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: 53                 
Correct output: -41                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction tagged_215} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq})
Lexicase best program: (boolean_dup integer_dup_items integer_shove integer_lt boolean_yankdup in1 integer_mult integer_dup_times print_integer integer_lte exec_dup_times () exec_rot () (in1) (integer_add exec_yankdup integer_dup_times integer_swap) integer_dup_items exec_do*count () integer_pop exec_rot (integer_inc integer_mult integer_empty integer_eq) (exec_dup_items integer_min exec_do*times () exec_y_when_autoconstructing () boolean_rot exec_do*count (integer_rot) integer_lte integer_shove exec_yank boolean_empty integer_dec) (boolean_not exec_flush integer_min exec_if () (exec_yankdup) tagged_215 integer_yank exec_dup_times ()) boolean_not exec_do*range (exec_eq))
Lexicase best errors: [1 1 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 64
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction tagged_215} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq})
Zero cases best program: (boolean_dup integer_dup_items integer_shove integer_lt boolean_yankdup in1 integer_mult integer_dup_times print_integer integer_lte exec_dup_times () exec_rot () (in1) (integer_add exec_yankdup integer_dup_times integer_swap) integer_dup_items exec_do*count () integer_pop exec_rot (integer_inc integer_mult integer_empty integer_eq) (exec_dup_items integer_min exec_do*times () exec_y_when_autoconstructing () boolean_rot exec_do*count (integer_rot) integer_lte integer_shove exec_yank boolean_empty integer_dec) (boolean_not exec_flush integer_min exec_if () (exec_yankdup) tagged_215 integer_yank exec_dup_times ()) boolean_not exec_do*range (exec_eq))
Zero cases best errors: [1 1 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 64
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (318 84 278 278 842 245 278 318 84 244)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (318 84 278 278 842 245 278 318 84 244)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Best program: (integer_stackdepth in2 in2 in1 exec_noop print_integer integer_add integer_div boolean_empty boolean_not exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte integer_eq boolean_and integer_rot integer_lte exec_empty)
Errors: [1 1 0 0 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 19
Size: 22
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 7.031
Median total errors in population: 7
Error averages by case: (0.682 0.916 0.722 0.722 0.158 0.755 0.722 0.682 0.916 0.756)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.106
Average program size in population (points): 54.463
Average percent parens in population: 0.232
Minimum age in population: 6.0
Maximum age in population: 11.0625
Average age in population: 8.94559375
Median age in population: 9.03125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2830222
--- Timings ---
Current time: 1559584495041 milliseconds
Total Time:          21.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.0 seconds, 66.3%
Fitness Testing:      4.7 seconds, 22.2%
Report:               2.3 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 44                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 94                 
Correct output: 2                   | Program output: 70                 
Correct output: 17                  | Program output: 30                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 9                   | Program output: 65                 
Correct output: 36                  | Program output: 79                 
Correct output: 10                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 97                 
Correct output: 30                  | Program output: 64                 
Correct output: 62                  | Program output: 66                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 8                   | Program output: 44                 
Correct output: 28                  | Program output: 39                 
Correct output: -41                 | Program output: 56                 
Correct output: -84                 | Program output: -53                
Correct output: -25                 | Program output: -25                
Correct output: 32                  | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -32                 | Program output: -32                
Correct output: -75                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -41                 | Program output: 70                 
Correct output: -77                 | Program output: 49                 
Correct output: -87                 | Program output: 81                 
Correct output: -37                 | Program output: 5                  
Correct output: -21                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 48                 
Correct output: -71                 | Program output: 20                 
Correct output: -96                 | Program output: 62                 
Correct output: -70                 | Program output: -22                
Correct output: -60                 | Program output: 72                 
Correct output: -62                 | Program output: 70                 
Correct output: 2                   | Program output: 2                  
Correct output: -88                 | Program output: 59                 
Correct output: -89                 | Program output: -27                
Correct output: -89                 | Program output: 11                 
Correct output: -67                 | Program output: 3                  
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -57                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -46                 | Program output: 22                 
Correct output: -77                 | Program output: 98                 
Correct output: -71                 | Program output: 41                 
Correct output: -96                 | Program output: -16                
Correct output: -39                 | Program output: -26                
Correct output: -99                 | Program output: 77                 
Correct output: -58                 | Program output: 80                 
Correct output: -70                 | Program output: 16                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -30                 | Program output: 27                 
Correct output: -99                 | Program output: -99                
Correct output: -13                 | Program output: -2                 
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -25                
Correct output: -59                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -31                
Correct output: -62                 | Program output: -44                
Correct output: -78                 | Program output: 41                 
Correct output: -58                 | Program output: 47                 
Correct output: -44                 | Program output: 78                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: 53                 
Correct output: -41                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_334} {:close 0, :instruction in2} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_496} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_or} {:close 0, :instruction -85} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_stackdepth exec_yank tag_integer_334 in2 integer_max print_integer boolean_stackdepth tag_boolean_496 boolean_invert_first_then_and exec_y (boolean_yank) exec_s () (boolean_dup_items in3 boolean_invert_second_then_and) (integer_div boolean_rot) exec_y (exec_do*range (integer_empty)) boolean_flush integer_stackdepth boolean_or -85 boolean_stackdepth exec_dup (integer_dup_items exec_y_when_autoconstructing () integer_div exec_s (integer_fromboolean exec_yankdup) (boolean_flush exec_do*while (integer_inc exec_eq boolean_frominteger) exec_stackdepth boolean_dup exec_eq integer_swap exec_do*count (print_newline exec_noop) boolean_frominteger integer_max) ()))
Lexicase best errors: [1 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 60
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_334} {:close 0, :instruction in2} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_496} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_or} {:close 0, :instruction -85} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_stackdepth exec_yank tag_integer_334 in2 integer_max print_integer boolean_stackdepth tag_boolean_496 boolean_invert_first_then_and exec_y (boolean_yank) exec_s () (boolean_dup_items in3 boolean_invert_second_then_and) (integer_div boolean_rot) exec_y (exec_do*range (integer_empty)) boolean_flush integer_stackdepth boolean_or -85 boolean_stackdepth exec_dup (integer_dup_items exec_y_when_autoconstructing () integer_div exec_s (integer_fromboolean exec_yankdup) (boolean_flush exec_do*while (integer_inc exec_eq boolean_frominteger) exec_stackdepth boolean_dup exec_eq integer_swap exec_do*count (print_newline exec_noop) boolean_frominteger integer_max) ()))
Zero cases best errors: [1 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 60
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (323 234 199 235 236 235 199 323 323 323)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (323 234 199 235 236 235 199 323 323 323)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction print_newline} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction tagged_215} {:close 1, :instruction integer_yank} {:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_not})
Best program: (print_boolean integer_sub in1 exec_if (print_integer integer_dup_times boolean_xor integer_dup_items boolean_or) (in4 exec_shove (integer_stackdepth exec_s_when_autoconstructing () (integer_sub integer_stackdepth exec_flush integer_mult in2 print_newline integer_eq) (exec_dup_items integer_min exec_do*times () exec_y_when_autoconstructing () boolean_rot exec_do*count (integer_rot) integer_lte integer_shove exec_yank boolean_empty integer_dec) boolean_not exec_flush integer_min exec_if () (boolean_or) tagged_215 integer_yank) exec_dup_times ()) boolean_not)
Errors: [0 1 1 1 1 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 41
Size: 54
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 7.37
Median total errors in population: 6
Error averages by case: (0.677 0.766 0.801 0.765 0.764 0.765 0.801 0.677 0.677 0.677)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.558
Average program size in population (points): 52.122
Average percent parens in population: 0.225
Minimum age in population: 7.75
Maximum age in population: 12.28125
Average age in population: 10.409859375
Median age in population: 10.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3187169
--- Timings ---
Current time: 1559584497801 milliseconds
Total Time:          23.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.2 seconds, 67.7%
Fitness Testing:      5.1 seconds, 21.3%
Report:               2.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 84                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 65                 
Correct output: 17                  | Program output: 48                 
Correct output: 20                  | Program output: 21                 
Correct output: 4                   | Program output: 72                 
Correct output: 27                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 79                 
Correct output: 15                  | Program output: 93                 
Correct output: 30                  | Program output: 58                 
Correct output: 62                  | Program output: 93                 
Correct output: 25                  | Program output: 66                 
Correct output: 1                   | Program output: 97                 
Correct output: 32                  | Program output: 79                 
Correct output: 8                   | Program output: 97                 
Correct output: 28                  | Program output: 82                 
Correct output: -41                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: 3                  
Correct output: 32                  | Program output: 90                 
Correct output: -45                 | Program output: 63                 
Correct output: -32                 | Program output: 45                 
Correct output: -75                 | Program output: 24                 
Correct output: -64                 | Program output: -52                
Correct output: -41                 | Program output: -29                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 81                 
Correct output: -37                 | Program output: -37                
Correct output: -21                 | Program output: 91                 
Correct output: -89                 | Program output: 92                 
Correct output: -71                 | Program output: 53                 
Correct output: -13                 | Program output: 74                 
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: 29                 
Correct output: -71                 | Program output: 14                 
Correct output: -96                 | Program output: 36                 
Correct output: -70                 | Program output: 36                 
Correct output: -60                 | Program output: -41                
Correct output: -62                 | Program output: 51                 
Correct output: 2                   | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: 30                 
Correct output: -89                 | Program output: -4                 
Correct output: -67                 | Program output: 50                 
Correct output: -60                 | Program output: 45                 
Correct output: -75                 | Program output: 97                 
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: -12                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: 74                 
Correct output: -71                 | Program output: -71                
Correct output: -96                 | Program output: -58                
Correct output: -39                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: 66                 
Correct output: -70                 | Program output: -21                
Correct output: -89                 | Program output: 12                 
Correct output: -61                 | Program output: -20                
Correct output: -30                 | Program output: -11                
Correct output: -99                 | Program output: 8                  
Correct output: -13                 | Program output: -13                
Correct output: -40                 | Program output: 26                 
Correct output: -98                 | Program output: -66                
Correct output: -85                 | Program output: 73                 
Correct output: -68                 | Program output: 89                 
Correct output: -59                 | Program output: -59                
Correct output: -72                 | Program output: -32                
Correct output: -96                 | Program output: -18                
Correct output: -73                 | Program output: 15                 
Correct output: -62                 | Program output: -27                
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: -31                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_334} {:close 0, :instruction in2} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction -85} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction tagged_215} {:close 1, :instruction integer_yank} {:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup})
Lexicase best program: (boolean_stackdepth exec_yank tag_integer_334 in2 integer_max print_integer exec_while (integer_div boolean_rot) exec_y (exec_do*range (integer_sub)) boolean_flush integer_stackdepth boolean_or -85 boolean_stackdepth exec_dup (integer_mult integer_empty integer_eq) exec_dup_items boolean_swap boolean_stackdepth exec_y_when_autoconstructing () boolean_rot exec_do*count (integer_rot) integer_lte integer_shove exec_yank boolean_empty integer_dec boolean_not exec_flush integer_eq exec_if () (exec_yankdup) tagged_215 integer_yank exec_dup_times () boolean_not exec_do*range (exec_eq in4 integer_swap exec_do*range () in3 boolean_stackdepth integer_dec boolean_stackdepth boolean_invert_second_then_and exec_if (print_integer boolean_invert_first_then_and exec_if () (exec_do*range () boolean_dup_items) exec_dup_times () boolean_invert_first_then_and integer_eq exec_stackdepth print_integer) (integer_rot exec_dup (integer_lt) exec_yankdup)))
Lexicase best errors: [1 1 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_334} {:close 0, :instruction in2} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction -85} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction tagged_215} {:close 1, :instruction integer_yank} {:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup})
Zero cases best program: (boolean_stackdepth exec_yank tag_integer_334 in2 integer_max print_integer exec_while (integer_div boolean_rot) exec_y (exec_do*range (integer_sub)) boolean_flush integer_stackdepth boolean_or -85 boolean_stackdepth exec_dup (integer_mult integer_empty integer_eq) exec_dup_items boolean_swap boolean_stackdepth exec_y_when_autoconstructing () boolean_rot exec_do*count (integer_rot) integer_lte integer_shove exec_yank boolean_empty integer_dec boolean_not exec_flush integer_eq exec_if () (exec_yankdup) tagged_215 integer_yank exec_dup_times () boolean_not exec_do*range (exec_eq in4 integer_swap exec_do*range () in3 boolean_stackdepth integer_dec boolean_stackdepth boolean_invert_second_then_and exec_if (print_integer boolean_invert_first_then_and exec_if () (exec_do*range () boolean_dup_items) exec_dup_times () boolean_invert_first_then_and integer_eq exec_stackdepth print_integer) (integer_rot exec_dup (integer_lt) exec_yankdup)))
Zero cases best errors: [1 1 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (373 1000 1000 937 1000 183 754 381 381 381)
Population mean number of elite cases: 6.39
Count of perfect (error zero) individuals by case: (373 0 0 937 0 183 754 381 381 381)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_334} {:close 0, :instruction in2} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte})
Best program: (boolean_stackdepth exec_yank tag_integer_334 in2 integer_max print_integer boolean_stackdepth exec_yank boolean_invert_first_then_and exec_y (boolean_yank exec_s () (boolean_dup_items boolean_shove boolean_invert_second_then_and) (in4) integer_mod in2) integer_mod boolean_frominteger exec_yankdup integer_lte)
Errors: [1 1 1 0 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 27
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 6.61
Median total errors in population: 7
Error averages by case: (0.627 1.0 1.0 0.063 1.0 0.817 0.246 0.619 0.619 0.619)
Error minima by case: (0 1 1 0 1 0 0 0 0 0)
Average genome size in population (length): 39.422
Average program size in population (points): 52.061
Average percent parens in population: 0.229
Minimum age in population: 9.0
Maximum age in population: 13.7734375
Average age in population: 11.9366328125
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3546584
--- Timings ---
Current time: 1559584501215 milliseconds
Total Time:          26.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.4 seconds, 68.9%
Fitness Testing:      5.5 seconds, 20.5%
Report:               2.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 2, :instruction exec_when} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction 61} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range})
Lexicase best program: (in3 print_integer exec_flush integer_pop exec_dup_times () print_exec (exec_when ()) exec_dup_items exec_while (print_integer integer_pop 61 boolean_stackdepth boolean_not boolean_rot) exec_y (exec_do*range ()))
Lexicase best errors: [1 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 2, :instruction exec_when} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction 61} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range})
Zero cases best program: (in3 print_integer exec_flush integer_pop exec_dup_times () print_exec (exec_when ()) exec_dup_items exec_while (print_integer integer_pop 61 boolean_stackdepth boolean_not boolean_rot) exec_y (exec_do*range ()))
Zero cases best errors: [1 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 158 573 934 158 202 158 158 1 202)
Population mean number of elite cases: 2.75
Count of perfect (error zero) individuals by case: (202 158 573 934 158 202 158 158 1 202)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 2, :instruction exec_when} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup})
Best program: (in3 print_integer exec_flush integer_pop exec_dup_times () print_exec (exec_when ()) exec_dup_items exec_yank integer_dup_times exec_dup_times (print_exec () boolean_yank) integer_min integer_yank exec_k (integer_lt) (exec_yankdup))
Errors: [1 0 1 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.254
Median total errors in population: 8
Error averages by case: (0.798 0.842 0.427 0.066 0.842 0.798 0.842 0.842 0.999 0.798)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.868
Average program size in population (points): 52.668
Average percent parens in population: 0.232
Minimum age in population: 10.0
Maximum age in population: 15.33203125
Average age in population: 13.3740703125
Median age in population: 13.466796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3948863
--- Timings ---
Current time: 1559584503881 milliseconds
Total Time:          30.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.5 seconds, 68.2%
Fitness Testing:      5.9 seconds, 19.7%
Report:               3.5 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 2, :instruction exec_when} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty})
Lexicase best program: (in3 print_integer exec_flush integer_pop exec_dup_times () print_exec (exec_when ()) exec_dup_items exec_yank integer_dup_times exec_dup_times (integer_lte) exec_yankdup integer_dup_times integer_swap integer_dup_items exec_do*count (integer_pop exec_rot (integer_inc integer_mult integer_empty integer_eq) (exec_dup_items integer_min exec_do*times () exec_y_when_autoconstructing () boolean_rot exec_do*count (integer_rot) integer_lte integer_shove exec_yank boolean_empty) ()))
Lexicase best errors: [1 1 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 46
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 2, :instruction exec_when} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty})
Zero cases best program: (in3 print_integer exec_flush integer_pop exec_dup_times () print_exec (exec_when ()) exec_dup_items exec_yank integer_dup_times exec_dup_times (integer_lte) exec_yankdup integer_dup_times integer_swap integer_dup_items exec_do*count (integer_pop exec_rot (integer_inc integer_mult integer_empty integer_eq) (exec_dup_items integer_min exec_do*times () exec_y_when_autoconstructing () boolean_rot exec_do*count (integer_rot) integer_lte integer_shove exec_yank boolean_empty) ()))
Zero cases best errors: [1 1 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 46
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 299 104 948 298 444 298 444 445 101)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (101 299 104 948 298 444 298 444 445 101)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or})
Best program: (integer_stackdepth in2 in2 boolean_yank exec_k_when_autoconstructing (integer_dec boolean_dup_times exec_while () exec_shove (exec_empty integer_lt exec_swap (boolean_and integer_sub integer_lte boolean_shove integer_flush exec_do*count () exec_s (boolean_dup) (exec_rot (integer_yank) (integer_swap in3 integer_pop exec_s_when_autoconstructing (boolean_dup) (boolean_stackdepth) (in2 exec_shove (in3 print_integer boolean_or))) ()) ()) ())) ())
Errors: [1 1 1 0 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 33
Size: 51
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.518
Median total errors in population: 6
Error averages by case: (0.899 0.701 0.896 0.052 0.702 0.556 0.702 0.556 0.555 0.899)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.722
Average program size in population (points): 45.555
Average percent parens in population: 0.222
Minimum age in population: 11.0
Maximum age in population: 16.849609375
Average age in population: 14.97923828125
Median age in population: 15.025390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4199280
--- Timings ---
Current time: 1559584506927 milliseconds
Total Time:          32.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.0 seconds, 69.7%
Fitness Testing:      6.2 seconds, 18.9%
Report:               3.7 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 44                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 94                 
Correct output: 2                   | Program output: 70                 
Correct output: 17                  | Program output: 30                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 9                   | Program output: 65                 
Correct output: 36                  | Program output: 79                 
Correct output: 10                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 97                 
Correct output: 30                  | Program output: 64                 
Correct output: 62                  | Program output: 66                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 8                   | Program output: 44                 
Correct output: 28                  | Program output: 39                 
Correct output: -41                 | Program output: 56                 
Correct output: -84                 | Program output: -53                
Correct output: -25                 | Program output: -25                
Correct output: 32                  | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -32                 | Program output: -32                
Correct output: -75                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -41                 | Program output: 70                 
Correct output: -77                 | Program output: 49                 
Correct output: -87                 | Program output: 81                 
Correct output: -37                 | Program output: 5                  
Correct output: -21                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 48                 
Correct output: -71                 | Program output: 20                 
Correct output: -96                 | Program output: 62                 
Correct output: -70                 | Program output: -22                
Correct output: -60                 | Program output: 72                 
Correct output: -62                 | Program output: 70                 
Correct output: 2                   | Program output: 2                  
Correct output: -88                 | Program output: 59                 
Correct output: -89                 | Program output: -27                
Correct output: -89                 | Program output: 11                 
Correct output: -67                 | Program output: 3                  
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -57                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -46                 | Program output: 22                 
Correct output: -77                 | Program output: 98                 
Correct output: -71                 | Program output: 41                 
Correct output: -96                 | Program output: -16                
Correct output: -39                 | Program output: -26                
Correct output: -99                 | Program output: 77                 
Correct output: -58                 | Program output: 80                 
Correct output: -70                 | Program output: 16                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -30                 | Program output: 27                 
Correct output: -99                 | Program output: -99                
Correct output: -13                 | Program output: -2                 
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -25                
Correct output: -59                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -31                
Correct output: -62                 | Program output: -44                
Correct output: -78                 | Program output: 41                 
Correct output: -58                 | Program output: 47                 
Correct output: -44                 | Program output: 78                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: 53                 
Correct output: -41                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction 61} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (integer_stackdepth in2 in2 in1 exec_noop print_integer integer_add integer_div boolean_empty integer_flush integer_pop 61 boolean_stackdepth integer_stackdepth boolean_stackdepth integer_yank boolean_invert_first_then_and integer_pop integer_eq integer_sub in3 exec_stackdepth boolean_dup_items boolean_stackdepth)
Lexicase best errors: [0 0 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.040
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction 61} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (integer_stackdepth in2 in2 in1 exec_noop print_integer integer_add integer_div boolean_empty integer_flush integer_pop 61 boolean_stackdepth integer_stackdepth boolean_stackdepth integer_yank boolean_invert_first_then_and integer_pop integer_eq integer_sub in3 exec_stackdepth boolean_dup_items boolean_stackdepth)
Zero cases best errors: [0 0 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.040
--- Lexicase Population Statistics ---
Count of elite individuals by case: (299 296 184 105 299 642 345 184 935 589)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (299 296 184 105 299 642 345 184 935 589)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction 61} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2})
Best program: (integer_stackdepth in2 integer_flush in1 exec_noop print_integer integer_add integer_div boolean_empty integer_flush integer_pop 61 boolean_stackdepth integer_dup exec_empty integer_lt exec_swap (boolean_and integer_sub integer_lte boolean_shove integer_flush exec_do*count () exec_s (boolean_dup) (exec_if (integer_yank) (integer_swap in3 integer_pop exec_s_when_autoconstructing (boolean_dup) (boolean_stackdepth) (in2))) ()) ())
Errors: [0 0 1 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 46
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 6.122
Median total errors in population: 7
Error averages by case: (0.701 0.704 0.816 0.895 0.701 0.358 0.655 0.816 0.065 0.411)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.313
Average program size in population (points): 44.871
Average percent parens in population: 0.220
Minimum age in population: 14.015625
Maximum age in population: 18.525390625
Average age in population: 16.4667421875
Median age in population: 16.5439453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4496088
--- Timings ---
Current time: 1559584509629 milliseconds
Total Time:          35.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.1 seconds, 70.3%
Fitness Testing:      6.5 seconds, 18.3%
Report:               3.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: 16                 
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 15                 
Correct output: 19                  | Program output: 76                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 76                 
Correct output: 20                  | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 85                 
Correct output: 9                   | Program output: 86                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 82                 
Correct output: 16                  | Program output: 96                 
Correct output: 42                  | Program output: 75                 
Correct output: 15                  | Program output: 15                 
Correct output: 30                  | Program output: 86                 
Correct output: 62                  | Program output: 78                 
Correct output: 25                  | Program output: 26                 
Correct output: 1                   | Program output: 87                 
Correct output: 32                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 28                  | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -68                
Correct output: -25                 | Program output: 44                 
Correct output: 32                  | Program output: 57                 
Correct output: -45                 | Program output: 8                  
Correct output: -32                 | Program output: 81                 
Correct output: -75                 | Program output: 56                 
Correct output: -64                 | Program output: 86                 
Correct output: -41                 | Program output: 55                 
Correct output: -77                 | Program output: 30                 
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: 45                 
Correct output: -21                 | Program output: 25                 
Correct output: -89                 | Program output: 73                 
Correct output: -71                 | Program output: -66                
Correct output: -13                 | Program output: -7                 
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -96                 | Program output: 15                 
Correct output: -70                 | Program output: -70                
Correct output: -60                 | Program output: -31                
Correct output: -62                 | Program output: -62                
Correct output: 2                   | Program output: 42                 
Correct output: -88                 | Program output: -46                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -51                
Correct output: -75                 | Program output: -56                
Correct output: -57                 | Program output: 70                 
Correct output: -53                 | Program output: 68                 
Correct output: -46                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 70                 
Correct output: -96                 | Program output: -96                
Correct output: -39                 | Program output: -37                
Correct output: -99                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: 45                 
Correct output: -89                 | Program output: 76                 
Correct output: -61                 | Program output: -55                
Correct output: -30                 | Program output: -4                 
Correct output: -99                 | Program output: 97                 
Correct output: -13                 | Program output: -3                 
Correct output: -40                 | Program output: 73                 
Correct output: -98                 | Program output: 78                 
Correct output: -85                 | Program output: 23                 
Correct output: -68                 | Program output: -59                
Correct output: -59                 | Program output: 52                 
Correct output: -72                 | Program output: 11                 
Correct output: -96                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: 89                 
Correct output: -78                 | Program output: 23                 
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -3                 
Correct output: -41                 | Program output: -41                
Correct output: -70                 | Program output: 95                 
Correct output: -41                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Lexicase best program: (in3 integer_add exec_eq integer_rot integer_flush exec_dup (boolean_yankdup) boolean_flush integer_dup_times integer_fromboolean in4 print_integer integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup exec_do*while (exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte) integer_eq boolean_and integer_rot integer_lte exec_empty)
Lexicase best errors: [1 1 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.156
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Zero cases best program: (in3 integer_add exec_eq integer_rot integer_flush exec_dup (boolean_yankdup) boolean_flush integer_dup_times integer_fromboolean in4 print_integer integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup exec_do*while (exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte) integer_eq boolean_and integer_rot integer_lte exec_empty)
Zero cases best errors: [1 1 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 242 104 104 104 240 242 104 104 104)
Population mean number of elite cases: 1.49
Count of perfect (error zero) individuals by case: (138 242 104 104 104 240 242 104 104 104)
Population mean number of perfect (error zero) cases: 1.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Best program: (in3 integer_add exec_eq integer_rot integer_flush exec_dup (boolean_yankdup) boolean_flush integer_dup_times integer_fromboolean in4 print_integer integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte integer_eq boolean_and integer_rot integer_lte exec_empty)
Errors: [1 1 0 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 27
Size: 31
Percent parens: 0.129
--- Population Statistics ---
Average total errors in population: 8.514
Median total errors in population: 10
Error averages by case: (0.862 0.758 0.896 0.896 0.896 0.76 0.758 0.896 0.896 0.896)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.326
Average program size in population (points): 43.181
Average percent parens in population: 0.211
Minimum age in population: 15.4453125
Maximum age in population: 20.16748046875
Average age in population: 17.9276416015625
Median age in population: 18.00634765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4861634
--- Timings ---
Current time: 1559584512427 milliseconds
Total Time:          38.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.3 seconds, 70.9%
Fitness Testing:      6.9 seconds, 18.0%
Report:               4.2 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_rot exec_if (exec_noop exec_k (in3 print_integer) (tagged_816 integer_sub exec_when (boolean_rot boolean_or exec_dup (boolean_dup_times exec_while (print_integer boolean_stackdepth boolean_flush boolean_invert_first_then_and exec_y (boolean_yank) exec_s () (boolean_dup_items in3 boolean_invert_second_then_and) (integer_div boolean_rot) exec_y (exec_do*range (integer_sub)) boolean_flush))))) ())
Lexicase best errors: [0 0 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_rot exec_if (exec_noop exec_k (in3 print_integer) (tagged_816 integer_sub exec_when (boolean_rot boolean_or exec_dup (boolean_dup_times exec_while (print_integer boolean_stackdepth boolean_flush boolean_invert_first_then_and exec_y (boolean_yank) exec_s () (boolean_dup_items in3 boolean_invert_second_then_and) (integer_div boolean_rot) exec_y (exec_do*range (integer_sub)) boolean_flush))))) ())
Zero cases best errors: [0 0 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (95 95 1000 95 95 837 280 558 933 95)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (95 95 0 95 95 837 280 558 933 95)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_870} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction -85} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_rot exec_if (exec_noop exec_k (in3 print_integer tagged_816 integer_sub exec_when (integer_yankdup integer_swap exec_eq in4 print_integer tag_integer_870 in4) integer_mod exec_do*count (exec_dup_times (exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times integer_lte) integer_eq boolean_eq boolean_or -85 boolean_stackdepth exec_dup (integer_dup_items integer_add in3) exec_swap (boolean_dup_items boolean_stackdepth) ()))) ()) ())
Errors: [0 0 1 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 51
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.917
Median total errors in population: 7
Error averages by case: (0.905 0.905 1.0 0.905 0.905 0.163 0.72 0.442 0.067 0.905)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 30.845
Average program size in population (points): 38.468
Average percent parens in population: 0.183
Minimum age in population: 16.4453125
Maximum age in population: 21.68701171875
Average age in population: 19.51885986328125
Median age in population: 19.60009765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.549
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5240679
--- Timings ---
Current time: 1559584515302 milliseconds
Total Time:          41.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.2 seconds, 71.2%
Fitness Testing:      7.4 seconds, 17.9%
Report:               4.4 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot})
Lexicase best program: (in3 integer_add exec_eq integer_rot integer_flush exec_dup (boolean_yankdup) boolean_flush integer_dup_times integer_fromboolean in4 print_integer integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte integer_eq boolean_and integer_rot)
Lexicase best errors: [0 1 1 1 0 1 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 29
Percent parens: 0.138
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot})
Zero cases best program: (in3 integer_add exec_eq integer_rot integer_flush exec_dup (boolean_yankdup) boolean_flush integer_dup_times integer_fromboolean in4 print_integer integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte integer_eq boolean_and integer_rot)
Zero cases best errors: [0 1 1 1 0 1 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 29
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 1000 1000 606 180 607 168 1000 1000 168)
Population mean number of elite cases: 5.91
Count of perfect (error zero) individuals by case: (180 0 0 606 180 607 168 0 0 168)
Population mean number of perfect (error zero) cases: 1.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_154} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_flush})
Best program: (in3 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_154 (boolean_empty integer_rot boolean_yank) exec_s () () (boolean_dup_items in3 boolean_invert_second_then_and) boolean_shove boolean_rot) () (exec_y (exec_empty integer_mod)) boolean_flush)
Errors: [1 1 1 0 1 0 1 1 1 1]
Total: 8
Mean: 0.8
Genome size: 19
Size: 28
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 8.091
Median total errors in population: 8
Error averages by case: (0.82 1.0 1.0 0.394 0.82 0.393 0.832 1.0 1.0 0.832)
Error minima by case: (0 1 1 0 0 0 0 1 1 0)
Average genome size in population (length): 32.05
Average program size in population (points): 42.071
Average percent parens in population: 0.228
Minimum age in population: 18.078125
Maximum age in population: 22.9461669921875
Average age in population: 21.00757434082031
Median age in population: 21.091796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5493096
--- Timings ---
Current time: 1559584517555 milliseconds
Total Time:          43.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.1 seconds, 71.1%
Fitness Testing:      7.6 seconds, 17.5%
Report:               4.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: 16                 
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 15                 
Correct output: 19                  | Program output: 76                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 76                 
Correct output: 20                  | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 85                 
Correct output: 9                   | Program output: 86                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 82                 
Correct output: 16                  | Program output: 96                 
Correct output: 42                  | Program output: 75                 
Correct output: 15                  | Program output: 15                 
Correct output: 30                  | Program output: 86                 
Correct output: 62                  | Program output: 78                 
Correct output: 25                  | Program output: 26                 
Correct output: 1                   | Program output: 87                 
Correct output: 32                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 28                  | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -68                
Correct output: -25                 | Program output: 44                 
Correct output: 32                  | Program output: 57                 
Correct output: -45                 | Program output: 8                  
Correct output: -32                 | Program output: 81                 
Correct output: -75                 | Program output: 56                 
Correct output: -64                 | Program output: 86                 
Correct output: -41                 | Program output: 55                 
Correct output: -77                 | Program output: 30                 
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: 45                 
Correct output: -21                 | Program output: 25                 
Correct output: -89                 | Program output: 73                 
Correct output: -71                 | Program output: -66                
Correct output: -13                 | Program output: -7                 
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -96                 | Program output: 15                 
Correct output: -70                 | Program output: -70                
Correct output: -60                 | Program output: -31                
Correct output: -62                 | Program output: -62                
Correct output: 2                   | Program output: 42                 
Correct output: -88                 | Program output: -46                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -51                
Correct output: -75                 | Program output: -56                
Correct output: -57                 | Program output: 70                 
Correct output: -53                 | Program output: 68                 
Correct output: -46                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 70                 
Correct output: -96                 | Program output: -96                
Correct output: -39                 | Program output: -37                
Correct output: -99                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: 45                 
Correct output: -89                 | Program output: 76                 
Correct output: -61                 | Program output: -55                
Correct output: -30                 | Program output: -4                 
Correct output: -99                 | Program output: 97                 
Correct output: -13                 | Program output: -3                 
Correct output: -40                 | Program output: 73                 
Correct output: -98                 | Program output: 78                 
Correct output: -85                 | Program output: 23                 
Correct output: -68                 | Program output: -59                
Correct output: -59                 | Program output: 52                 
Correct output: -72                 | Program output: 11                 
Correct output: -96                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: 89                 
Correct output: -78                 | Program output: 23                 
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -3                 
Correct output: -41                 | Program output: -41                
Correct output: -70                 | Program output: 95                 
Correct output: -41                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Lexicase best program: (in3 integer_add exec_eq integer_rot integer_flush exec_dup (boolean_yankdup) boolean_flush integer_dup_times integer_fromboolean in4 print_integer integer_max boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte integer_eq boolean_and integer_rot integer_lte exec_empty)
Lexicase best errors: [1 0 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.129
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Zero cases best program: (in3 integer_add exec_eq integer_rot integer_flush exec_dup (boolean_yankdup) boolean_flush integer_dup_times integer_fromboolean in4 print_integer integer_max boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte integer_eq boolean_and integer_rot integer_lte exec_empty)
Zero cases best errors: [1 0 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.129
--- Lexicase Population Statistics ---
Count of elite individuals by case: (339 298 1000 299 305 298 305 1000 299 1000)
Population mean number of elite cases: 5.14
Count of perfect (error zero) individuals by case: (339 298 0 299 305 298 305 0 299 0)
Population mean number of perfect (error zero) cases: 2.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Best program: (in3 integer_add exec_eq integer_rot integer_flush exec_dup (boolean_yankdup) boolean_flush integer_dup_times integer_fromboolean in4 print_integer integer_dup_times boolean_flush boolean_dup_times exec_eq integer_div boolean_not exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte integer_eq boolean_and integer_rot integer_lte exec_empty)
Errors: [1 0 1 0 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 27
Size: 31
Percent parens: 0.129
--- Population Statistics ---
Average total errors in population: 7.857
Median total errors in population: 8
Error averages by case: (0.661 0.702 1.0 0.701 0.695 0.702 0.695 1.0 0.701 1.0)
Error minima by case: (0 0 1 0 0 0 0 1 0 1)
Average genome size in population (length): 30.919
Average program size in population (points): 39.857
Average percent parens in population: 0.211
Minimum age in population: 19.50390625
Maximum age in population: 24.57958984375
Average age in population: 22.44196069335938
Median age in population: 22.5384521484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5815160
--- Timings ---
Current time: 1559584519975 milliseconds
Total Time:          46.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.9 seconds, 71.6%
Fitness Testing:      8.0 seconds, 17.4%
Report:               5.0 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: 16                 
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 15                 
Correct output: 19                  | Program output: 76                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 76                 
Correct output: 20                  | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 85                 
Correct output: 9                   | Program output: 86                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 82                 
Correct output: 16                  | Program output: 96                 
Correct output: 42                  | Program output: 75                 
Correct output: 15                  | Program output: 15                 
Correct output: 30                  | Program output: 86                 
Correct output: 62                  | Program output: 78                 
Correct output: 25                  | Program output: 26                 
Correct output: 1                   | Program output: 87                 
Correct output: 32                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 28                  | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -68                
Correct output: -25                 | Program output: 44                 
Correct output: 32                  | Program output: 57                 
Correct output: -45                 | Program output: 8                  
Correct output: -32                 | Program output: 81                 
Correct output: -75                 | Program output: 56                 
Correct output: -64                 | Program output: 86                 
Correct output: -41                 | Program output: 55                 
Correct output: -77                 | Program output: 30                 
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: 45                 
Correct output: -21                 | Program output: 25                 
Correct output: -89                 | Program output: 73                 
Correct output: -71                 | Program output: -66                
Correct output: -13                 | Program output: -7                 
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -96                 | Program output: 15                 
Correct output: -70                 | Program output: -70                
Correct output: -60                 | Program output: -31                
Correct output: -62                 | Program output: -62                
Correct output: 2                   | Program output: 42                 
Correct output: -88                 | Program output: -46                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -51                
Correct output: -75                 | Program output: -56                
Correct output: -57                 | Program output: 70                 
Correct output: -53                 | Program output: 68                 
Correct output: -46                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 70                 
Correct output: -96                 | Program output: -96                
Correct output: -39                 | Program output: -37                
Correct output: -99                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: 45                 
Correct output: -89                 | Program output: 76                 
Correct output: -61                 | Program output: -55                
Correct output: -30                 | Program output: -4                 
Correct output: -99                 | Program output: 97                 
Correct output: -13                 | Program output: -3                 
Correct output: -40                 | Program output: 73                 
Correct output: -98                 | Program output: 78                 
Correct output: -85                 | Program output: 23                 
Correct output: -68                 | Program output: -59                
Correct output: -59                 | Program output: 52                 
Correct output: -72                 | Program output: 11                 
Correct output: -96                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: 89                 
Correct output: -78                 | Program output: 23                 
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -3                 
Correct output: -41                 | Program output: -41                
Correct output: -70                 | Program output: 95                 
Correct output: -41                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_sub exec_y_when_autoconstructing () boolean_dup in2 integer_mult integer_dup_times print_integer integer_lte integer_min exec_rot () (in1) (integer_add exec_yankdup exec_y (integer_swap) exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte) integer_eq boolean_and integer_rot integer_lte exec_empty)
Lexicase best errors: [1 0 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 32
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_sub exec_y_when_autoconstructing () boolean_dup in2 integer_mult integer_dup_times print_integer integer_lte integer_min exec_rot () (in1) (integer_add exec_yankdup exec_y (integer_swap) exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte) integer_eq boolean_and integer_rot integer_lte exec_empty)
Zero cases best errors: [1 0 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 32
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (533 809 128 128 942 128 277 277 532 1000)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (533 809 128 128 942 128 277 277 532 0)
Population mean number of perfect (error zero) cases: 3.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Best program: (in3 boolean_invert_first_then_and exec_eq integer_rot integer_flush exec_dup (boolean_yankdup) boolean_flush integer_dup_times integer_fromboolean in4 print_integer integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte integer_eq boolean_and integer_rot integer_lte exec_empty)
Errors: [0 0 1 1 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 27
Size: 31
Percent parens: 0.129
--- Population Statistics ---
Average total errors in population: 6.246
Median total errors in population: 6
Error averages by case: (0.467 0.191 0.872 0.872 0.058 0.872 0.723 0.723 0.468 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 29.368
Average program size in population (points): 36.688
Average percent parens in population: 0.187
Minimum age in population: 20.947998046875
Maximum age in population: 26.12966918945312
Average age in population: 23.92779302978516
Median age in population: 24.0321044921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6178067
--- Timings ---
Current time: 1559584522643 milliseconds
Total Time:          48.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.0 seconds, 71.9%
Fitness Testing:      8.4 seconds, 17.2%
Report:               5.2 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: 16                 
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 15                 
Correct output: 19                  | Program output: 76                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 76                 
Correct output: 20                  | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 85                 
Correct output: 9                   | Program output: 86                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 82                 
Correct output: 16                  | Program output: 96                 
Correct output: 42                  | Program output: 75                 
Correct output: 15                  | Program output: 15                 
Correct output: 30                  | Program output: 86                 
Correct output: 62                  | Program output: 78                 
Correct output: 25                  | Program output: 26                 
Correct output: 1                   | Program output: 87                 
Correct output: 32                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 28                  | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -68                
Correct output: -25                 | Program output: 44                 
Correct output: 32                  | Program output: 57                 
Correct output: -45                 | Program output: 8                  
Correct output: -32                 | Program output: 81                 
Correct output: -75                 | Program output: 56                 
Correct output: -64                 | Program output: 86                 
Correct output: -41                 | Program output: 55                 
Correct output: -77                 | Program output: 30                 
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: 45                 
Correct output: -21                 | Program output: 25                 
Correct output: -89                 | Program output: 73                 
Correct output: -71                 | Program output: -66                
Correct output: -13                 | Program output: -7                 
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -96                 | Program output: 15                 
Correct output: -70                 | Program output: -70                
Correct output: -60                 | Program output: -31                
Correct output: -62                 | Program output: -62                
Correct output: 2                   | Program output: 42                 
Correct output: -88                 | Program output: -46                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -51                
Correct output: -75                 | Program output: -56                
Correct output: -57                 | Program output: 70                 
Correct output: -53                 | Program output: 68                 
Correct output: -46                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 70                 
Correct output: -96                 | Program output: -96                
Correct output: -39                 | Program output: -37                
Correct output: -99                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: 45                 
Correct output: -89                 | Program output: 76                 
Correct output: -61                 | Program output: -55                
Correct output: -30                 | Program output: -4                 
Correct output: -99                 | Program output: 97                 
Correct output: -13                 | Program output: -3                 
Correct output: -40                 | Program output: 73                 
Correct output: -98                 | Program output: 78                 
Correct output: -85                 | Program output: 23                 
Correct output: -68                 | Program output: -59                
Correct output: -59                 | Program output: 52                 
Correct output: -72                 | Program output: 11                 
Correct output: -96                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: 89                 
Correct output: -78                 | Program output: 23                 
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -3                 
Correct output: -41                 | Program output: -41                
Correct output: -70                 | Program output: 95                 
Correct output: -41                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_334} {:close 0, :instruction in2} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_sub exec_y_when_autoconstructing () boolean_dup in2 integer_fromboolean print_integer integer_min exec_empty boolean_rot boolean_or boolean_stackdepth exec_yank tag_integer_334 in2 integer_max print_integer boolean_stackdepth boolean_flush boolean_invert_first_then_and exec_y (boolean_yank) exec_s () (boolean_dup_items in3 boolean_invert_second_then_and) ())
Lexicase best errors: [1 1 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 31
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_334} {:close 0, :instruction in2} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_sub exec_y_when_autoconstructing () boolean_dup in2 integer_fromboolean print_integer integer_min exec_empty boolean_rot boolean_or boolean_stackdepth exec_yank tag_integer_334 in2 integer_max print_integer boolean_stackdepth boolean_flush boolean_invert_first_then_and exec_y (boolean_yank) exec_s () (boolean_dup_items in3 boolean_invert_second_then_and) ())
Zero cases best errors: [1 1 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 31
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 1000 1000 290 353 297 940 1000 290 353)
Population mean number of elite cases: 5.82
Count of perfect (error zero) individuals by case: (296 0 0 290 353 297 940 0 290 353)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Best program: (in3 integer_add exec_eq integer_rot integer_flush exec_dup (boolean_yankdup) boolean_flush integer_dup_times integer_fromboolean in4 print_integer boolean_xor boolean_flush boolean_dup_times exec_eq integer_flush boolean_not exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte integer_eq boolean_and integer_rot integer_lte exec_empty)
Errors: [0 1 1 1 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 27
Size: 31
Percent parens: 0.129
--- Population Statistics ---
Average total errors in population: 7.181
Median total errors in population: 7
Error averages by case: (0.704 1.0 1.0 0.71 0.647 0.703 0.06 1.0 0.71 0.647)
Error minima by case: (0 1 1 0 0 0 0 1 0 0)
Average genome size in population (length): 30.098
Average program size in population (points): 38.743
Average percent parens in population: 0.211
Minimum age in population: 21.947998046875
Maximum age in population: 27.20024108886719
Average age in population: 25.42056872558594
Median age in population: 25.45999145507812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6523748
--- Timings ---
Current time: 1559584525132 milliseconds
Total Time:          51.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.9 seconds, 72.1%
Fitness Testing:      8.8 seconds, 17.1%
Report:               5.4 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: 16                 
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 15                 
Correct output: 19                  | Program output: 76                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 76                 
Correct output: 20                  | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 85                 
Correct output: 9                   | Program output: 86                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 82                 
Correct output: 16                  | Program output: 96                 
Correct output: 42                  | Program output: 75                 
Correct output: 15                  | Program output: 15                 
Correct output: 30                  | Program output: 86                 
Correct output: 62                  | Program output: 78                 
Correct output: 25                  | Program output: 26                 
Correct output: 1                   | Program output: 87                 
Correct output: 32                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 28                  | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -68                
Correct output: -25                 | Program output: 44                 
Correct output: 32                  | Program output: 57                 
Correct output: -45                 | Program output: 8                  
Correct output: -32                 | Program output: 81                 
Correct output: -75                 | Program output: 56                 
Correct output: -64                 | Program output: 86                 
Correct output: -41                 | Program output: 55                 
Correct output: -77                 | Program output: 30                 
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: 45                 
Correct output: -21                 | Program output: 25                 
Correct output: -89                 | Program output: 73                 
Correct output: -71                 | Program output: -66                
Correct output: -13                 | Program output: -7                 
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -96                 | Program output: 15                 
Correct output: -70                 | Program output: -70                
Correct output: -60                 | Program output: -31                
Correct output: -62                 | Program output: -62                
Correct output: 2                   | Program output: 42                 
Correct output: -88                 | Program output: -46                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -51                
Correct output: -75                 | Program output: -56                
Correct output: -57                 | Program output: 70                 
Correct output: -53                 | Program output: 68                 
Correct output: -46                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 70                 
Correct output: -96                 | Program output: -96                
Correct output: -39                 | Program output: -37                
Correct output: -99                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: 45                 
Correct output: -89                 | Program output: 76                 
Correct output: -61                 | Program output: -55                
Correct output: -30                 | Program output: -4                 
Correct output: -99                 | Program output: 97                 
Correct output: -13                 | Program output: -3                 
Correct output: -40                 | Program output: 73                 
Correct output: -98                 | Program output: 78                 
Correct output: -85                 | Program output: 23                 
Correct output: -68                 | Program output: -59                
Correct output: -59                 | Program output: 52                 
Correct output: -72                 | Program output: 11                 
Correct output: -96                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: 89                 
Correct output: -78                 | Program output: 23                 
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -3                 
Correct output: -41                 | Program output: -41                
Correct output: -70                 | Program output: 95                 
Correct output: -41                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Lexicase best program: (in3 integer_add exec_eq integer_rot integer_flush exec_dup () boolean_yankdup boolean_flush integer_dup_times integer_fromboolean in4 print_integer boolean_or boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (integer_dup_items integer_dup_times) () integer_lte integer_eq boolean_and integer_rot integer_lte exec_empty)
Lexicase best errors: [1 1 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.129
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Zero cases best program: (in3 integer_add exec_eq integer_rot integer_flush exec_dup () boolean_yankdup boolean_flush integer_dup_times integer_fromboolean in4 print_integer boolean_or boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (integer_dup_items integer_dup_times) () integer_lte integer_eq boolean_and integer_rot integer_lte exec_empty)
Zero cases best errors: [1 1 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.129
--- Lexicase Population Statistics ---
Count of elite individuals by case: (290 1000 313 313 290 290 646 1000 313 936)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (290 0 313 313 290 290 646 0 313 936)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_334} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_496} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_496} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction -85} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup})
Best program: (boolean_stackdepth boolean_stackdepth exec_yank tag_integer_334 in2 in4 print_integer boolean_stackdepth tag_boolean_496 boolean_invert_first_then_and exec_y (boolean_yank exec_s (tagged_816 integer_sub exec_when (exec_while (boolean_or exec_dup (boolean_dup_times exec_while (integer_yank exec_dup_items integer_max print_integer boolean_stackdepth tag_boolean_496 boolean_invert_first_then_and boolean_yank boolean_yank) exec_s () (boolean_dup_items in3 boolean_invert_second_then_and) (integer_div boolean_rot) exec_y (exec_do*range (integer_empty)) boolean_flush integer_stackdepth boolean_frominteger -85 boolean_stackdepth exec_dup (integer_dup_items exec_y_when_autoconstructing () integer_div exec_s (integer_fromboolean) (exec_yankdup) ()))))) () ()))
Errors: [1 1 0 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 51
Size: 70
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 6.609
Median total errors in population: 6
Error averages by case: (0.71 1.0 0.687 0.687 0.71 0.71 0.354 1.0 0.687 0.064)
Error minima by case: (0 1 0 0 0 0 0 1 0 0)
Average genome size in population (length): 29.185
Average program size in population (points): 37.259
Average percent parens in population: 0.206
Minimum age in population: 23.70947265625
Maximum age in population: 28.96907806396484
Average age in population: 26.92601345825195
Median age in population: 27.01480865478516
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6873792
--- Timings ---
Current time: 1559584528666 milliseconds
Total Time:          53.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.1 seconds, 72.5%
Fitness Testing:      9.2 seconds, 17.0%
Report:               5.6 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_48} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s})
Lexicase best program: (integer_rot integer_inc exec_noop exec_k (in3 print_integer) (tagged_816 integer_sub exec_when (exec_stackdepth boolean_or exec_dup (boolean_dup_times exec_while (integer_yank exec_dup_items tagged_48 integer_lte exec_s () () ())))))
Lexicase best errors: [0 1 1 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 28
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_48} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s})
Zero cases best program: (integer_rot integer_inc exec_noop exec_k (in3 print_integer) (tagged_816 integer_sub exec_when (exec_stackdepth boolean_or exec_dup (boolean_dup_times exec_while (integer_yank exec_dup_items tagged_48 integer_lte exec_s () () ())))))
Zero cases best errors: [0 1 1 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 28
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (436 1000 507 943 1000 507 1000 1000 436 1000)
Population mean number of elite cases: 7.83
Count of perfect (error zero) individuals by case: (436 0 507 943 0 507 0 0 436 0)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_48} {:close 0, :instruction -98} {:close 0, :instruction tagged_48} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_or})
Best program: (integer_rot integer_inc exec_noop exec_k (in3 print_integer) (tagged_816 integer_sub exec_when (boolean_rot boolean_or exec_dup (boolean_dup_times exec_while (integer_yank exec_dup_items tagged_48 -98 tagged_48 integer_yank integer_gte boolean_swap exec_pop () boolean_flush) exec_flush integer_dup_items exec_do*while () integer_shove) integer_dup_items boolean_and exec_eq in4 boolean_swap print_exec (boolean_xor integer_empty print_integer integer_dec boolean_or))))
Errors: [0 1 1 0 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 39
Size: 48
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 7.171
Median total errors in population: 7
Error averages by case: (0.564 1.0 0.493 0.057 1.0 0.493 1.0 1.0 0.564 1.0)
Error minima by case: (0 1 0 0 1 0 1 1 0 1)
Average genome size in population (length): 28.474
Average program size in population (points): 36.01
Average percent parens in population: 0.200
Minimum age in population: 25.3251953125
Maximum age in population: 30.35604476928711
Average age in population: 28.3998277015686
Median age in population: 28.44413757324219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.002
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7108948
--- Timings ---
Current time: 1559584531114 milliseconds
Total Time:          57.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.1 seconds, 71.8%
Fitness Testing:      9.4 seconds, 16.5%
Report:               6.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_870} {:close 1, :instruction in4} {:close 0, :instruction integer_mod})
Lexicase best program: (integer_rot exec_if (exec_noop boolean_invert_second_then_and in3 print_integer tagged_816 integer_sub exec_when (integer_yankdup) integer_swap exec_eq integer_pop tag_integer_870 in4) (integer_mod))
Lexicase best errors: [1 0 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 20
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_870} {:close 1, :instruction in4} {:close 0, :instruction integer_mod})
Zero cases best program: (integer_rot exec_if (exec_noop boolean_invert_second_then_and in3 print_integer tagged_816 integer_sub exec_when (integer_yankdup) integer_swap exec_eq integer_pop tag_integer_870 in4) (integer_mod))
Zero cases best errors: [1 0 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 20
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 478 1000 1000 963 478 1000 1000 480 1000)
Population mean number of elite cases: 8.40
Count of perfect (error zero) individuals by case: (0 478 0 0 963 478 0 0 480 0)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_154} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_shove})
Best program: (integer_sub in3 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_154 (integer_inc boolean_yank exec_y_when_autoconstructing (integer_add exec_yankdup integer_dup_times integer_swap integer_dec) print_boolean integer_eq boolean_shove boolean_not) exec_do*while (boolean_swap boolean_and exec_eq in4) boolean_swap print_exec (boolean_xor exec_yank print_newline integer_dec boolean_not exec_flush integer_min exec_if (exec_y (boolean_or exec_if (print_boolean) (exec_shove ()))) ())) () ())
Errors: [1 0 1 1 0 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 39
Size: 53
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 7.601
Median total errors in population: 8
Error averages by case: (1.0 0.522 1.0 1.0 0.037 0.522 1.0 1.0 0.52 1.0)
Error minima by case: (1 0 1 1 0 0 1 1 0 1)
Average genome size in population (length): 28.582
Average program size in population (points): 36.323
Average percent parens in population: 0.203
Minimum age in population: 26.59877014160156
Maximum age in population: 31.8324031829834
Average age in population: 29.91031076049805
Median age in population: 29.97897434234619
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7348657
--- Timings ---
Current time: 1559584533269 milliseconds
Total Time:          59.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.9 seconds, 72.2%
Fitness Testing:      9.7 seconds, 16.3%
Report:               6.7 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_870} {:close 1, :instruction in4} {:close 0, :instruction integer_mod})
Lexicase best program: (integer_rot exec_if (exec_noop boolean_invert_second_then_and in3 print_integer tagged_816 integer_sub exec_when (integer_yankdup) integer_swap exec_eq integer_pop tag_integer_870 in4) (integer_mod))
Lexicase best errors: [1 1 1 1 1 1 1 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 9
Lexicase best mean error: 0.9
Lexicase best size: 20
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_870} {:close 1, :instruction in4} {:close 0, :instruction integer_mod})
Zero cases best program: (integer_rot exec_if (exec_noop boolean_invert_second_then_and in3 print_integer tagged_816 integer_sub exec_when (integer_yankdup) integer_swap exec_eq integer_pop tag_integer_870 in4) (integer_mod))
Zero cases best errors: [1 1 1 1 1 1 1 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 1
Zero cases best total error: 9
Zero cases best mean error: 0.9
Zero cases best size: 20
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1000 1000 1000 1000 1000 640 1000)
Population mean number of elite cases: 9.64
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 640 0)
Population mean number of perfect (error zero) cases: 0.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while})
Best program: (integer_rot exec_yank exec_noop exec_k (in3 print_integer tagged_816 exec_s_when_autoconstructing (exec_do*count (exec_s (boolean_dup) (exec_rot (integer_yank) (integer_swap in3 integer_pop exec_s_when_autoconstructing (boolean_dup) (boolean_stackdepth) (in2 exec_shove (integer_flush) boolean_yankdup boolean_eq integer_dup_items) boolean_flush exec_do*while ()) ()) ())) () ()) ())
Errors: [1 1 1 1 1 1 1 1 0 1]
Total: 9
Mean: 0.9
Genome size: 27
Size: 45
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 9.36
Median total errors in population: 9
Error averages by case: (1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.36 1.0)
Error minima by case: (1 1 1 1 1 1 1 1 0 1)
Average genome size in population (length): 28.279
Average program size in population (points): 36.596
Average percent parens in population: 0.220
Minimum age in population: 28.38379669189453
Maximum age in population: 33.54322052001953
Average age in population: 31.41370181655884
Median age in population: 31.46307992935181
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.729
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7561589
--- Timings ---
Current time: 1559584535543 milliseconds
Total Time:          61.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.7 seconds, 72.6%
Fitness Testing:     10.0 seconds, 16.2%
Report:               6.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_267} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_or})
Lexicase best program: (tagged_267 exec_if (exec_noop exec_k (in3 print_integer) (tagged_816 integer_sub integer_inc integer_yankdup) exec_s_when_autoconstructing (exec_eq boolean_swap exec_pop () boolean_flush) (exec_flush integer_dup_items exec_do*while () integer_shove) (integer_dup_items boolean_and print_boolean in4 boolean_swap print_exec (boolean_xor integer_empty print_integer integer_dec boolean_or))) ())
Lexicase best errors: [1 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_267} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_or})
Zero cases best program: (tagged_267 exec_if (exec_noop exec_k (in3 print_integer) (tagged_816 integer_sub integer_inc integer_yankdup) exec_s_when_autoconstructing (exec_eq boolean_swap exec_pop () boolean_flush) (exec_flush integer_dup_items exec_do*while () integer_shove) (integer_dup_items boolean_and print_boolean in4 boolean_swap print_exec (boolean_xor integer_empty print_integer integer_dec boolean_or))) ())
Zero cases best errors: [1 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 963 1000 963 1000 964 963 963 1 963)
Population mean number of elite cases: 8.78
Count of perfect (error zero) individuals by case: (0 963 0 963 0 964 963 963 1 963)
Population mean number of perfect (error zero) cases: 5.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_267} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_pop} {:close 0, :instruction tag_integer_870} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items})
Best program: (tagged_267 exec_if (exec_noop exec_k (in3 print_integer) (tagged_816 integer_sub integer_inc integer_yankdup) exec_s_when_autoconstructing (integer_fromboolean integer_pop) (tag_integer_870 in4 integer_mod) (exec_dup () integer_mod boolean_frominteger exec_yankdup integer_dup_items)) (integer_sub integer_pop exec_rot () (boolean_not integer_mult integer_empty integer_eq exec_dup_items) ()))
Errors: [1 0 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 29
Size: 41
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 4.22
Median total errors in population: 4
Error averages by case: (1.0 0.037 1.0 0.037 1.0 0.036 0.037 0.037 0.999 0.037)
Error minima by case: (1 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 28.202
Average program size in population (points): 37.883
Average percent parens in population: 0.250
Minimum age in population: 29.59443664550781
Maximum age in population: 35.16962814331055
Average age in population: 32.95180361652374
Median age in population: 32.99476599693298
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7710088
--- Timings ---
Current time: 1559584537772 milliseconds
Total Time:          63.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.5 seconds, 72.9%
Fitness Testing:     10.2 seconds, 15.9%
Report:               7.1 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction tag_integer_870} {:close 1, :instruction in4} {:close 1, :instruction integer_mod})
Lexicase best program: (integer_rot exec_if (exec_noop boolean_invert_second_then_and boolean_invert_second_then_and in3 print_integer tagged_816 integer_sub exec_when (integer_yankdup) integer_swap in3 integer_pop) (tag_integer_870 in4) integer_mod)
Lexicase best errors: [0 0 1 1 1 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 21
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction tag_integer_870} {:close 1, :instruction in4} {:close 1, :instruction integer_mod})
Zero cases best program: (integer_rot exec_if (exec_noop boolean_invert_second_then_and boolean_invert_second_then_and in3 print_integer tagged_816 integer_sub exec_when (integer_yankdup) integer_swap in3 integer_pop) (tag_integer_870 in4) integer_mod)
Zero cases best errors: [0 0 1 1 1 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 21
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (817 817 1000 3 3 144 1000 144 959 1000)
Population mean number of elite cases: 5.89
Count of perfect (error zero) individuals by case: (817 817 0 3 3 144 0 144 959 0)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_integer_870} {:close 2, :instruction in4} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte})
Best program: (integer_rot exec_if (exec_noop exec_k (in3 print_integer) (tagged_816 integer_sub exec_when (integer_yankdup) integer_swap boolean_rot boolean_yankdup tag_integer_870 in4)) (integer_mod in2) integer_mod boolean_frominteger exec_yankdup integer_lte)
Errors: [0 0 1 1 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.113
Median total errors in population: 7
Error averages by case: (0.183 0.183 1.0 0.997 0.997 0.856 1.0 0.856 0.041 1.0)
Error minima by case: (0 0 1 0 0 0 1 0 0 1)
Average genome size in population (length): 27.346
Average program size in population (points): 36.464
Average percent parens in population: 0.244
Minimum age in population: 31.45956039428711
Maximum age in population: 36.53599500656128
Average age in population: 34.34883662605286
Median age in population: 34.39037752151489
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 7865419
--- Timings ---
Current time: 1559584539575 milliseconds
Total Time:          65.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.0 seconds, 73.0%
Fitness Testing:     10.3 seconds, 15.8%
Report:               7.3 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction tag_exec_154} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 84} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Lexicase best program: (in3 print_integer exec_empty boolean_frominteger exec_rot () (tag_exec_154 (integer_lte boolean_yank exec_y_when_autoconstructing (boolean_invert_first_then_and exec_noop integer_dup_items integer_mult 84 boolean_flush) boolean_invert_first_then_and exec_noop boolean_xor integer_mult exec_k (boolean_flush) (integer_stackdepth integer_lte) in4 print_integer integer_dup_times boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (integer_dup_items integer_dup_times) (integer_lte) integer_eq boolean_and integer_rot integer_lte exec_empty) ())
Lexicase best errors: [0 1 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction tag_exec_154} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 84} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Zero cases best program: (in3 print_integer exec_empty boolean_frominteger exec_rot () (tag_exec_154 (integer_lte boolean_yank exec_y_when_autoconstructing (boolean_invert_first_then_and exec_noop integer_dup_items integer_mult 84 boolean_flush) boolean_invert_first_then_and exec_noop boolean_xor integer_mult exec_k (boolean_flush) (integer_stackdepth integer_lte) in4 print_integer integer_dup_times boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (integer_dup_items integer_dup_times) (integer_lte) integer_eq boolean_and integer_rot integer_lte exec_empty) ())
Zero cases best errors: [0 1 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (920 335 255 920 326 1 336 335 326 326)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (920 335 255 920 326 1 336 335 326 326)
Population mean number of perfect (error zero) cases: 4.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq})
Best program: (exec_k (exec_if (exec_noop exec_k (in3 print_integer tagged_816 integer_sub boolean_not integer_lt integer_yank boolean_invert_first_then_and integer_pop integer_add) (in4 print_integer integer_dup_times) boolean_flush integer_dup_items integer_dup_times) (integer_lte) integer_eq) ())
Errors: [0 1 1 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 29
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 5.92
Median total errors in population: 5
Error averages by case: (0.08 0.665 0.745 0.08 0.674 0.999 0.664 0.665 0.674 0.674)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.631
Average program size in population (points): 32.647
Average percent parens in population: 0.209
Minimum age in population: 32.70185852050781
Maximum age in population: 37.59728121757507
Average age in population: 35.79730943143368
Median age in population: 35.85617625713348
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 187
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 8041385
--- Timings ---
Current time: 1559584541523 milliseconds
Total Time:          67.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.6 seconds, 73.3%
Fitness Testing:     10.6 seconds, 15.6%
Report:               7.4 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction tag_integer_870} {:close 1, :instruction in4} {:close 1, :instruction integer_mod})
Lexicase best program: (integer_rot exec_if (integer_stackdepth boolean_invert_second_then_and in3 print_integer tagged_816 integer_sub exec_when (integer_yankdup) integer_swap in3 integer_pop) (tag_integer_870 in4) integer_mod)
Lexicase best errors: [1 0 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction tag_integer_870} {:close 1, :instruction in4} {:close 1, :instruction integer_mod})
Zero cases best program: (integer_rot exec_if (integer_stackdepth boolean_invert_second_then_and in3 print_integer tagged_816 integer_sub exec_when (integer_yankdup) integer_swap in3 integer_pop) (tag_integer_870 in4) integer_mod)
Zero cases best errors: [1 0 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (143 385 942 287 127 287 385 143 385 942)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (143 385 942 287 127 287 385 143 385 942)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_integer_870} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lte})
Best program: (exec_dup_items exec_if (exec_noop exec_k (in3 print_integer tagged_816 integer_sub exec_when (integer_yankdup) boolean_dup integer_dup_items integer_yankdup tag_integer_870 in4) (integer_mod integer_dup_times boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (integer_dup_items) (integer_dup_times) integer_lte) (boolean_dup_times exec_while (integer_yank exec_dup_items boolean_dup_times exec_s (integer_dup_times integer_pop boolean_flush boolean_yankdup boolean_yankdup exec_k_when_autoconstructing () (integer_empty integer_lte) integer_lte) () ())))
Errors: [1 0 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 41
Size: 55
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 5.974
Median total errors in population: 6
Error averages by case: (0.857 0.615 0.058 0.713 0.873 0.713 0.615 0.857 0.615 0.058)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.062
Average program size in population (points): 34.177
Average percent parens in population: 0.229
Minimum age in population: 33.70185852050781
Maximum age in population: 39.26004844903946
Average age in population: 37.16817545342445
Median age in population: 37.201630204916
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 8188627
--- Timings ---
Current time: 1559584544034 milliseconds
Total Time:          70.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.7 seconds, 73.7%
Fitness Testing:     10.7 seconds, 15.3%
Report:               7.6 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 44                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 94                 
Correct output: 2                   | Program output: 70                 
Correct output: 17                  | Program output: 30                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 9                   | Program output: 65                 
Correct output: 36                  | Program output: 79                 
Correct output: 10                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 97                 
Correct output: 30                  | Program output: 64                 
Correct output: 62                  | Program output: 66                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 8                   | Program output: 44                 
Correct output: 28                  | Program output: 39                 
Correct output: -41                 | Program output: 56                 
Correct output: -84                 | Program output: -53                
Correct output: -25                 | Program output: -25                
Correct output: 32                  | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -32                 | Program output: -32                
Correct output: -75                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -41                 | Program output: 70                 
Correct output: -77                 | Program output: 49                 
Correct output: -87                 | Program output: 81                 
Correct output: -37                 | Program output: 5                  
Correct output: -21                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 48                 
Correct output: -71                 | Program output: 20                 
Correct output: -96                 | Program output: 62                 
Correct output: -70                 | Program output: -22                
Correct output: -60                 | Program output: 72                 
Correct output: -62                 | Program output: 70                 
Correct output: 2                   | Program output: 2                  
Correct output: -88                 | Program output: 59                 
Correct output: -89                 | Program output: -27                
Correct output: -89                 | Program output: 11                 
Correct output: -67                 | Program output: 3                  
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -57                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -46                 | Program output: 22                 
Correct output: -77                 | Program output: 98                 
Correct output: -71                 | Program output: 41                 
Correct output: -96                 | Program output: -16                
Correct output: -39                 | Program output: -26                
Correct output: -99                 | Program output: 77                 
Correct output: -58                 | Program output: 80                 
Correct output: -70                 | Program output: 16                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -30                 | Program output: 27                 
Correct output: -99                 | Program output: -99                
Correct output: -13                 | Program output: -2                 
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -25                
Correct output: -59                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -31                
Correct output: -62                 | Program output: -44                
Correct output: -78                 | Program output: 41                 
Correct output: -58                 | Program output: 47                 
Correct output: -44                 | Program output: 78                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: 53                 
Correct output: -41                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_121 (exec_y_when_autoconstructing (boolean_yank exec_eq integer_dup_times) boolean_dup_times exec_while () integer_yank exec_s (boolean_dup_times exec_noop) (integer_stackdepth integer_lt integer_yank) (boolean_invert_first_then_and integer_pop integer_add) boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ())) () ())
Lexicase best errors: [1 1 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_121 (exec_y_when_autoconstructing (boolean_yank exec_eq integer_dup_times) boolean_dup_times exec_while () integer_yank exec_s (boolean_dup_times exec_noop) (integer_stackdepth integer_lt integer_yank) (boolean_invert_first_then_and integer_pop integer_add) boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ())) () ())
Zero cases best errors: [1 1 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 134 230 349 230 230 230 138 230 233)
Population mean number of elite cases: 2.35
Count of perfect (error zero) individuals by case: (350 134 230 349 230 230 230 138 230 233)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_121 (exec_y_when_autoconstructing (boolean_yank exec_eq in1) integer_add exec_yankdup integer_fromboolean in4 print_integer integer_dup_times) boolean_flush) (boolean_dup_times boolean_invert_first_then_and integer_pop integer_add) (boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ()))
Errors: [1 1 0 1 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.646
Median total errors in population: 8
Error averages by case: (0.65 0.866 0.77 0.651 0.77 0.77 0.77 0.862 0.77 0.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.91
Average program size in population (points): 34.428
Average percent parens in population: 0.239
Minimum age in population: 35.91319370269775
Maximum age in population: 40.40131884813309
Average age in population: 38.65945873132348
Median age in population: 38.7337301671505
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 8326648
--- Timings ---
Current time: 1559584546784 milliseconds
Total Time:          72.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.2 seconds, 74.2%
Fitness Testing:     10.9 seconds, 15.0%
Report:               7.8 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 44                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 94                 
Correct output: 2                   | Program output: 70                 
Correct output: 17                  | Program output: 30                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 9                   | Program output: 65                 
Correct output: 36                  | Program output: 79                 
Correct output: 10                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 97                 
Correct output: 30                  | Program output: 64                 
Correct output: 62                  | Program output: 66                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 8                   | Program output: 44                 
Correct output: 28                  | Program output: 39                 
Correct output: -41                 | Program output: 56                 
Correct output: -84                 | Program output: -53                
Correct output: -25                 | Program output: -25                
Correct output: 32                  | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -32                 | Program output: -32                
Correct output: -75                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -41                 | Program output: 70                 
Correct output: -77                 | Program output: 49                 
Correct output: -87                 | Program output: 81                 
Correct output: -37                 | Program output: 5                  
Correct output: -21                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 48                 
Correct output: -71                 | Program output: 20                 
Correct output: -96                 | Program output: 62                 
Correct output: -70                 | Program output: -22                
Correct output: -60                 | Program output: 72                 
Correct output: -62                 | Program output: 70                 
Correct output: 2                   | Program output: 2                  
Correct output: -88                 | Program output: 59                 
Correct output: -89                 | Program output: -27                
Correct output: -89                 | Program output: 11                 
Correct output: -67                 | Program output: 3                  
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -57                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -46                 | Program output: 22                 
Correct output: -77                 | Program output: 98                 
Correct output: -71                 | Program output: 41                 
Correct output: -96                 | Program output: -16                
Correct output: -39                 | Program output: -26                
Correct output: -99                 | Program output: 77                 
Correct output: -58                 | Program output: 80                 
Correct output: -70                 | Program output: 16                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -30                 | Program output: 27                 
Correct output: -99                 | Program output: -99                
Correct output: -13                 | Program output: -2                 
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -25                
Correct output: -59                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -31                
Correct output: -62                 | Program output: -44                
Correct output: -78                 | Program output: 41                 
Correct output: -58                 | Program output: 47                 
Correct output: -44                 | Program output: 78                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: 53                 
Correct output: -41                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_121 (exec_y_when_autoconstructing (boolean_yank exec_eq integer_dup_times) boolean_dup_times exec_while () integer_yank exec_s (boolean_dup_times exec_noop) (integer_stackdepth integer_lt integer_yank) (boolean_invert_first_then_and integer_pop integer_add) boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ())) () ())
Lexicase best errors: [1 0 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_121 (exec_y_when_autoconstructing (boolean_yank exec_eq integer_dup_times) boolean_dup_times exec_while () integer_yank exec_s (boolean_dup_times exec_noop) (integer_stackdepth integer_lt integer_yank) (boolean_invert_first_then_and integer_pop integer_add) boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ())) () ())
Zero cases best errors: [1 0 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (196 486 962 173 173 486 173 196 486 486)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (196 486 962 173 173 486 173 196 486 486)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_121 (exec_y_when_autoconstructing (boolean_yank exec_eq) integer_dup_times) boolean_dup_times exec_while () integer_yank exec_s (boolean_dup_times exec_noop) (integer_stackdepth integer_lt integer_yank) (boolean_invert_first_then_and integer_pop integer_add) boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ()) () ())
Errors: [1 0 0 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 41
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 6.183
Median total errors in population: 6
Error averages by case: (0.804 0.514 0.038 0.827 0.827 0.514 0.827 0.804 0.514 0.514)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.468
Average program size in population (points): 36.094
Average percent parens in population: 0.258
Minimum age in population: 37.84710538387299
Maximum age in population: 41.95050656795502
Average age in population: 40.09688396304846
Median age in population: 40.16636615246534
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 8444962
--- Timings ---
Current time: 1559584549563 milliseconds
Total Time:          75.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.7 seconds, 74.8%
Fitness Testing:     11.1 seconds, 14.6%
Report:               7.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_496} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (integer_rot in3 print_integer exec_flush boolean_frominteger exec_rot () (in3 print_integer exec_flush integer_pop exec_do*times (integer_max print_integer boolean_stackdepth tag_boolean_496 boolean_invert_first_then_and exec_y (exec_while (in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ())))) ())
Lexicase best errors: [1 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_496} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (integer_rot in3 print_integer exec_flush boolean_frominteger exec_rot () (in3 print_integer exec_flush integer_pop exec_do*times (integer_max print_integer boolean_stackdepth tag_boolean_496 boolean_invert_first_then_and exec_y (exec_while (in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ())))) ())
Zero cases best errors: [1 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (438 942 199 199 199 637 199 440 2 438)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (438 942 199 199 199 637 199 440 2 438)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -85})
Best program: (integer_rot integer_max exec_noop exec_k (in3 print_integer tagged_816 exec_s_when_autoconstructing (exec_do*count (exec_s (boolean_dup) (exec_rot (integer_yank) (integer_swap boolean_pop integer_lte) () integer_eq boolean_and exec_dup (boolean_or -85)) ())) () ()) ())
Errors: [1 0 0 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 21
Size: 35
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 6.307
Median total errors in population: 5
Error averages by case: (0.562 0.058 0.801 0.801 0.801 0.363 0.801 0.56 0.998 0.562)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.221
Average program size in population (points): 35.587
Average percent parens in population: 0.255
Minimum age in population: 39.04269051551819
Maximum age in population: 43.59951467812061
Average age in population: 41.64461343088746
Median age in population: 41.72964711859822
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 8578330
--- Timings ---
Current time: 1559584552402 milliseconds
Total Time:          78.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.1 seconds, 75.4%
Fitness Testing:     11.2 seconds, 14.3%
Report:               8.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_870} {:close 0, :instruction in4} {:close 0, :instruction integer_mod})
Lexicase best program: (integer_rot exec_if (exec_noop boolean_invert_second_then_and in3 print_integer tagged_816 integer_sub exec_when () integer_yankdup) (integer_swap exec_eq integer_pop tag_integer_870 in4 integer_mod))
Lexicase best errors: [0 0 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_870} {:close 0, :instruction in4} {:close 0, :instruction integer_mod})
Zero cases best program: (integer_rot exec_if (exec_noop boolean_invert_second_then_and in3 print_integer tagged_816 integer_sub exec_when () integer_yankdup) (integer_swap exec_eq integer_pop tag_integer_870 in4 integer_mod))
Zero cases best errors: [0 0 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (524 524 119 524 314 524 3 118 118 645)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (524 524 119 524 314 524 3 118 118 645)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_121} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Best program: (in3 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_121 (integer_gt boolean_yank exec_eq boolean_invert_first_then_and exec_eq integer_rot integer_stackdepth exec_dup (boolean_yankdup)) integer_dup integer_dup_times exec_if (integer_eq boolean_and integer_rot integer_lte exec_empty) ()) () ())
Errors: [0 0 1 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.587
Median total errors in population: 5
Error averages by case: (0.476 0.476 0.881 0.476 0.686 0.476 0.997 0.882 0.882 0.355)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.119
Average program size in population (points): 35.505
Average percent parens in population: 0.257
Minimum age in population: 40.04269051551819
Maximum age in population: 45.5222012065351
Average age in population: 43.11161025394127
Median age in population: 43.15695944800973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 8707864
--- Timings ---
Current time: 1559584554621 milliseconds
Total Time:          80.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.1 seconds, 75.6%
Fitness Testing:     11.4 seconds, 14.1%
Report:               8.2 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Lexicase best program: (boolean_dup_times exec_y_when_autoconstructing () boolean_dup in2 exec_k (integer_yank print_integer tagged_816 integer_sub exec_when (integer_yankdup) integer_swap boolean_rot integer_pop) (in4 print_integer integer_dup_times) integer_dup_times integer_lte integer_pop boolean_and integer_rot integer_lte exec_empty)
Lexicase best errors: [1 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 29
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Zero cases best program: (boolean_dup_times exec_y_when_autoconstructing () boolean_dup in2 exec_k (integer_yank print_integer tagged_816 integer_sub exec_when (integer_yankdup) integer_swap boolean_rot integer_pop) (in4 print_integer integer_dup_times) integer_dup_times integer_lte integer_pop boolean_and integer_rot integer_lte exec_empty)
Zero cases best errors: [1 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 29
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 922 103 103 425 286 108 286 425 814)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (108 922 103 103 425 286 108 286 425 814)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_154} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Best program: (in3 print_integer exec_flush boolean_frominteger integer_dec tag_exec_154 (in3 print_integer) exec_flush boolean_frominteger exec_rot (tag_exec_121 (exec_y_when_autoconstructing (boolean_yank exec_eq integer_dup_times) boolean_dup_times exec_while () integer_yank exec_s (boolean_dup_times exec_noop) (integer_stackdepth integer_lt integer_yank) (boolean_invert_first_then_and integer_pop integer_add) boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ())) () ())
Errors: [1 0 1 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 33
Size: 47
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 6.42
Median total errors in population: 6
Error averages by case: (0.892 0.078 0.897 0.897 0.575 0.714 0.892 0.714 0.575 0.186)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.774
Average program size in population (points): 31.091
Average percent parens in population: 0.223
Minimum age in population: 41.76157830655575
Maximum age in population: 46.89609500952065
Average age in population: 44.6330765585769
Median age in population: 44.68819237314165
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 8866279
--- Timings ---
Current time: 1559584556838 milliseconds
Total Time:          83.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.0 seconds, 75.9%
Fitness Testing:     11.6 seconds, 14.0%
Report:               8.3 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 44                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 94                 
Correct output: 2                   | Program output: 70                 
Correct output: 17                  | Program output: 30                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 9                   | Program output: 65                 
Correct output: 36                  | Program output: 79                 
Correct output: 10                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 97                 
Correct output: 30                  | Program output: 64                 
Correct output: 62                  | Program output: 66                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 8                   | Program output: 44                 
Correct output: 28                  | Program output: 39                 
Correct output: -41                 | Program output: 56                 
Correct output: -84                 | Program output: -53                
Correct output: -25                 | Program output: -25                
Correct output: 32                  | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -32                 | Program output: -32                
Correct output: -75                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -41                 | Program output: 70                 
Correct output: -77                 | Program output: 49                 
Correct output: -87                 | Program output: 81                 
Correct output: -37                 | Program output: 5                  
Correct output: -21                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 48                 
Correct output: -71                 | Program output: 20                 
Correct output: -96                 | Program output: 62                 
Correct output: -70                 | Program output: -22                
Correct output: -60                 | Program output: 72                 
Correct output: -62                 | Program output: 70                 
Correct output: 2                   | Program output: 2                  
Correct output: -88                 | Program output: 59                 
Correct output: -89                 | Program output: -27                
Correct output: -89                 | Program output: 11                 
Correct output: -67                 | Program output: 3                  
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -57                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -46                 | Program output: 22                 
Correct output: -77                 | Program output: 98                 
Correct output: -71                 | Program output: 41                 
Correct output: -96                 | Program output: -16                
Correct output: -39                 | Program output: -26                
Correct output: -99                 | Program output: 77                 
Correct output: -58                 | Program output: 80                 
Correct output: -70                 | Program output: 16                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -30                 | Program output: 27                 
Correct output: -99                 | Program output: -99                
Correct output: -13                 | Program output: -2                 
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -25                
Correct output: -59                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -31                
Correct output: -62                 | Program output: -44                
Correct output: -78                 | Program output: 41                 
Correct output: -58                 | Program output: 47                 
Correct output: -44                 | Program output: 78                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: 53                 
Correct output: -41                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_121 (exec_y_when_autoconstructing (boolean_yank exec_eq integer_dup_times)) boolean_dup_times exec_while (integer_yank exec_s (boolean_dup_times integer_gt) (integer_stackdepth integer_lt integer_yank) (boolean_invert_first_then_and integer_pop integer_add) boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ())) () ())
Lexicase best errors: [0 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 41
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_121 (exec_y_when_autoconstructing (boolean_yank exec_eq integer_dup_times)) boolean_dup_times exec_while (integer_yank exec_s (boolean_dup_times integer_gt) (integer_stackdepth integer_lt integer_yank) (boolean_invert_first_then_and integer_pop integer_add) boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ())) () ())
Zero cases best errors: [0 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 41
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (242 245 241 245 242 241 231 241 700 946)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (242 245 241 245 242 241 231 241 700 946)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 2, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger exec_eq tag_exec_121 (exec_y_when_autoconstructing (boolean_yank exec_eq integer_dup_times) boolean_dup_times exec_while () integer_yank exec_s (integer_add boolean_stackdepth integer_yank) (boolean_invert_first_then_and integer_pop integer_add) (boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ())))
Errors: [0 1 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 26
Size: 36
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 6.426
Median total errors in population: 7
Error averages by case: (0.758 0.755 0.759 0.755 0.758 0.759 0.769 0.759 0.3 0.054)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.82
Average program size in population (points): 29.667
Average percent parens in population: 0.213
Minimum age in population: 42.76157830655575
Maximum age in population: 48.10337305720896
Average age in population: 46.07936393529829
Median age in population: 46.13687869952992
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 9003498
--- Timings ---
Current time: 1559584559212 milliseconds
Total Time:          85.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.1 seconds, 76.2%
Fitness Testing:     11.8 seconds, 13.8%
Report:               8.4 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 44                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 94                 
Correct output: 2                   | Program output: 70                 
Correct output: 17                  | Program output: 30                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 9                   | Program output: 65                 
Correct output: 36                  | Program output: 79                 
Correct output: 10                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 97                 
Correct output: 30                  | Program output: 64                 
Correct output: 62                  | Program output: 66                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 8                   | Program output: 44                 
Correct output: 28                  | Program output: 39                 
Correct output: -41                 | Program output: 56                 
Correct output: -84                 | Program output: -53                
Correct output: -25                 | Program output: -25                
Correct output: 32                  | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -32                 | Program output: -32                
Correct output: -75                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -41                 | Program output: 70                 
Correct output: -77                 | Program output: 49                 
Correct output: -87                 | Program output: 81                 
Correct output: -37                 | Program output: 5                  
Correct output: -21                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 48                 
Correct output: -71                 | Program output: 20                 
Correct output: -96                 | Program output: 62                 
Correct output: -70                 | Program output: -22                
Correct output: -60                 | Program output: 72                 
Correct output: -62                 | Program output: 70                 
Correct output: 2                   | Program output: 2                  
Correct output: -88                 | Program output: 59                 
Correct output: -89                 | Program output: -27                
Correct output: -89                 | Program output: 11                 
Correct output: -67                 | Program output: 3                  
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -57                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -46                 | Program output: 22                 
Correct output: -77                 | Program output: 98                 
Correct output: -71                 | Program output: 41                 
Correct output: -96                 | Program output: -16                
Correct output: -39                 | Program output: -26                
Correct output: -99                 | Program output: 77                 
Correct output: -58                 | Program output: 80                 
Correct output: -70                 | Program output: 16                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -30                 | Program output: 27                 
Correct output: -99                 | Program output: -99                
Correct output: -13                 | Program output: -2                 
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -25                
Correct output: -59                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -31                
Correct output: -62                 | Program output: -44                
Correct output: -78                 | Program output: 41                 
Correct output: -58                 | Program output: 47                 
Correct output: -44                 | Program output: 78                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: 53                 
Correct output: -41                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_121 (exec_y_when_autoconstructing (boolean_yank in1) integer_add exec_yankdup integer_fromboolean in4 print_integer)) () ())
Lexicase best errors: [1 0 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_121 (exec_y_when_autoconstructing (boolean_yank in1) integer_add exec_yankdup integer_fromboolean in4 print_integer)) () ())
Zero cases best errors: [1 0 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (122 624 220 624 624 624 624 220 1000 1000)
Population mean number of elite cases: 5.68
Count of perfect (error zero) individuals by case: (122 624 220 624 624 624 624 220 0 0)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger exec_rot (tag_exec_121 () exec_y_when_autoconstructing (boolean_yank exec_eq integer_dup_times) boolean_dup_times exec_while () integer_yank exec_s (boolean_dup_times exec_noop) (integer_stackdepth integer_lt integer_yank) (boolean_invert_first_then_and integer_pop integer_add) boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ()) () ())
Errors: [1 0 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 28
Size: 41
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 6.318
Median total errors in population: 5
Error averages by case: (0.878 0.376 0.78 0.376 0.376 0.376 0.376 0.78 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 24.485
Average program size in population (points): 33.301
Average percent parens in population: 0.253
Minimum age in population: 43.76157830655575
Maximum age in population: 49.86879811016843
Average age in population: 47.54057082368294
Median age in population: 47.60777420550585
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 9093510
--- Timings ---
Current time: 1559584561838 milliseconds
Total Time:          88.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.5 seconds, 76.7%
Fitness Testing:     11.9 seconds, 13.5%
Report:               8.5 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 44                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 94                 
Correct output: 2                   | Program output: 70                 
Correct output: 17                  | Program output: 30                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 9                   | Program output: 65                 
Correct output: 36                  | Program output: 79                 
Correct output: 10                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 97                 
Correct output: 30                  | Program output: 64                 
Correct output: 62                  | Program output: 66                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 8                   | Program output: 44                 
Correct output: 28                  | Program output: 39                 
Correct output: -41                 | Program output: 56                 
Correct output: -84                 | Program output: -53                
Correct output: -25                 | Program output: -25                
Correct output: 32                  | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -32                 | Program output: -32                
Correct output: -75                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -41                 | Program output: 70                 
Correct output: -77                 | Program output: 49                 
Correct output: -87                 | Program output: 81                 
Correct output: -37                 | Program output: 5                  
Correct output: -21                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: 48                 
Correct output: -71                 | Program output: 20                 
Correct output: -96                 | Program output: 62                 
Correct output: -70                 | Program output: -22                
Correct output: -60                 | Program output: 72                 
Correct output: -62                 | Program output: 70                 
Correct output: 2                   | Program output: 2                  
Correct output: -88                 | Program output: 59                 
Correct output: -89                 | Program output: -27                
Correct output: -89                 | Program output: 11                 
Correct output: -67                 | Program output: 3                  
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -57                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -46                 | Program output: 22                 
Correct output: -77                 | Program output: 98                 
Correct output: -71                 | Program output: 41                 
Correct output: -96                 | Program output: -16                
Correct output: -39                 | Program output: -26                
Correct output: -99                 | Program output: 77                 
Correct output: -58                 | Program output: 80                 
Correct output: -70                 | Program output: 16                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -30                 | Program output: 27                 
Correct output: -99                 | Program output: -99                
Correct output: -13                 | Program output: -2                 
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -25                
Correct output: -59                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -31                
Correct output: -62                 | Program output: -44                
Correct output: -78                 | Program output: 41                 
Correct output: -58                 | Program output: 47                 
Correct output: -44                 | Program output: 78                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: 53                 
Correct output: -41                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger tag_exec_121 (exec_y_when_autoconstructing (boolean_yank exec_eq integer_dup_times) boolean_dup_times exec_while (integer_yank exec_s (boolean_dup_times exec_noop) (integer_stackdepth integer_lt integer_yank) (boolean_invert_first_then_and integer_pop integer_add) boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ())))
Lexicase best errors: [0 0 0 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger tag_exec_121 (exec_y_when_autoconstructing (boolean_yank exec_eq integer_dup_times) boolean_dup_times exec_while (integer_yank exec_s (boolean_dup_times exec_noop) (integer_stackdepth integer_lt integer_yank) (boolean_invert_first_then_and integer_pop integer_add) boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ())))
Zero cases best errors: [0 0 0 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (966 617 853 1000 236 236 617 1000 1000 1000)
Population mean number of elite cases: 7.53
Count of perfect (error zero) individuals by case: (966 617 853 0 236 236 617 0 0 0)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction tag_exec_121} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_dup_times in1 print_integer exec_flush boolean_frominteger exec_rot () (tag_exec_121 (exec_y_when_autoconstructing (boolean_yank exec_eq integer_dup_times) boolean_dup_times exec_while () integer_yank exec_s (boolean_dup_times) (exec_noop) (integer_stackdepth integer_lt integer_yank) boolean_invert_first_then_and integer_pop integer_add) boolean_empty exec_y_when_autoconstructing (boolean_stackdepth)) ())
Errors: [0 0 0 1 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 37
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 6.475
Median total errors in population: 6
Error averages by case: (0.034 0.383 0.147 1.0 0.764 0.764 0.383 1.0 1.0 1.0)
Error minima by case: (0 0 0 1 0 0 0 1 1 1)
Average genome size in population (length): 24.517
Average program size in population (points): 33.587
Average percent parens in population: 0.258
Minimum age in population: 45.91381162405014
Maximum age in population: 50.93227168102749
Average age in population: 49.04580497519067
Median age in population: 49.12040391820483
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 9188594
--- Timings ---
Current time: 1559584564091 milliseconds
Total Time:          90.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.5 seconds, 77.0%
Fitness Testing:     12.0 seconds, 13.3%
Report:               8.6 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_154} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction tag_exec_101} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (in3 print_integer exec_flush boolean_frominteger integer_dec tag_exec_154 (integer_inc boolean_yank boolean_eq boolean_invert_first_then_and exec_noop exec_s () (in3 print_integer integer_inc boolean_frominteger exec_rot () (tag_exec_101 (boolean_dup_times exec_noop integer_stackdepth integer_lt integer_yank) boolean_invert_first_then_and integer_pop integer_add) (boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ())) ()))
Lexicase best errors: [0 0 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_154} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction tag_exec_101} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (in3 print_integer exec_flush boolean_frominteger integer_dec tag_exec_154 (integer_inc boolean_yank boolean_eq boolean_invert_first_then_and exec_noop exec_s () (in3 print_integer integer_inc boolean_frominteger exec_rot () (tag_exec_101 (boolean_dup_times exec_noop integer_stackdepth integer_lt integer_yank) boolean_invert_first_then_and integer_pop integer_add) (boolean_empty in3 exec_swap (exec_y_when_autoconstructing (boolean_stackdepth)) ())) ()))
Zero cases best errors: [0 0 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (478 478 478 478 1 489 1000 1000 1 967)
Population mean number of elite cases: 5.37
Count of perfect (error zero) individuals by case: (478 478 478 478 1 489 0 0 1 967)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_870} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_lte})
Best program: (boolean_invert_second_then_and exec_if (exec_noop exec_k (in3 print_integer) (tagged_816 integer_sub exec_when (integer_yankdup) integer_swap boolean_rot integer_pop tag_integer_870 print_exec () integer_mod exec_do*while () integer_mod boolean_frominteger exec_yankdup integer_lte)) ())
Errors: [0 0 0 0 1 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 6.63
Median total errors in population: 8
Error averages by case: (0.522 0.522 0.522 0.522 0.999 0.511 1.0 1.0 0.999 0.033)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 25.341
Average program size in population (points): 35.105
Average percent parens in population: 0.273
Minimum age in population: 47.95964175090194
Maximum age in population: 52.53718506614678
Average age in population: 50.53266484320513
Median age in population: 50.57714720256627
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 9291815
--- Timings ---
Current time: 1559584566179 milliseconds
Total Time:          92.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.3 seconds, 77.2%
Fitness Testing:     12.2 seconds, 13.2%
Report:               8.8 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -39                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -39                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 80                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 22                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: 30                 
Correct output: -46                 | Program output: 45                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 47                 
Correct output: -96                 | Program output: 26                 
Correct output: -39                 | Program output: 72                 
Correct output: -99                 | Program output: 37                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: 52                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: 74                 
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: 63                 
Correct output: -72                 | Program output: 63                 
Correct output: -96                 | Program output: -28                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 93                 
Correct output: -58                 | Program output: -3                 
Correct output: -44                 | Program output: 10                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_rot integer_div exec_noop exec_y_when_autoconstructing (in3 print_integer) boolean_stackdepth exec_pop (boolean_invert_first_then_and integer_yankdup boolean_not integer_stackdepth integer_stackdepth) boolean_pop integer_lte integer_eq integer_pop boolean_and integer_rot integer_lte exec_empty)
Lexicase best errors: [0 1 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_rot integer_div exec_noop exec_y_when_autoconstructing (in3 print_integer) boolean_stackdepth exec_pop (boolean_invert_first_then_and integer_yankdup boolean_not integer_stackdepth integer_stackdepth) boolean_pop integer_lte integer_eq integer_pop boolean_and integer_rot integer_lte exec_empty)
Zero cases best errors: [0 1 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (580 133 581 1000 950 580 1000 1 580 133)
Population mean number of elite cases: 5.54
Count of perfect (error zero) individuals by case: (580 133 581 0 950 580 0 1 580 133)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_816} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 79} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty})
Best program: (in3 integer_rot integer_inc exec_noop exec_k (in3 print_integer) (tagged_816 integer_sub exec_yankdup integer_fromboolean 79 print_integer integer_dup_times boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not integer_rot integer_lte exec_empty)
Errors: [0 1 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 22
Size: 25
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6.462
Median total errors in population: 5
Error averages by case: (0.42 0.867 0.419 1.0 0.05 0.42 1.0 0.999 0.42 0.867)
Error minima by case: (0 0 0 1 0 0 1 0 0 0)
Average genome size in population (length): 27.534
Average program size in population (points): 36.638
Average percent parens in population: 0.246
Minimum age in population: 49.73061782703735
Maximum age in population: 54.09727593389107
Average age in population: 52.03858406258747
Median age in population: 52.11827936474583
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 145
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 9464990
--- Timings ---
Current time: 1559584568290 milliseconds
Total Time:          94.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.1 seconds, 77.4%
Fitness Testing:     12.4 seconds, 13.1%
Report:               8.9 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -53                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -64                
Correct output: -41                 | Program output: 70                 
Correct output: -77                 | Program output: 49                 
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: 5                  
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: 72                 
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: 59                 
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: 11                 
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -46                 | Program output: 22                 
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: 41                 
Correct output: -96                 | Program output: -16                
Correct output: -39                 | Program output: -26                
Correct output: -99                 | Program output: 77                 
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: 16                 
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -61                
Correct output: -30                 | Program output: 27                 
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: -2                 
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -44                
Correct output: -78                 | Program output: 41                 
Correct output: -58                 | Program output: 47                 
Correct output: -44                 | Program output: 78                 
Correct output: -41                 | Program output: 31                 
Correct output: -70                 | Program output: 53                 
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Lexicase best program: (in3 boolean_dup_times in1 boolean_dup in2 exec_k (integer_yank boolean_yank print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (boolean_and) (integer_dup_times) boolean_flush)
Lexicase best errors: [1 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 24
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Zero cases best program: (in3 boolean_dup_times in1 boolean_dup in2 exec_k (integer_yank boolean_yank print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (boolean_and) (integer_dup_times) boolean_flush)
Zero cases best errors: [1 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 24
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (522 958 523 832 1000 310 832 310 523 309)
Population mean number of elite cases: 6.12
Count of perfect (error zero) individuals by case: (522 958 523 832 0 310 832 310 523 309)
Population mean number of perfect (error zero) cases: 5.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Best program: (in3 boolean_dup_times in1 boolean_dup in2 exec_k (integer_yank boolean_yank print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (boolean_and) (integer_dup_times) boolean_flush)
Errors: [1 0 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 19
Size: 24
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 4.881
Median total errors in population: 4
Error averages by case: (0.478 0.042 0.477 0.168 1.0 0.69 0.168 0.69 0.477 0.691)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 26.339
Average program size in population (points): 36.863
Average percent parens in population: 0.278
Minimum age in population: 50.91309219808318
Maximum age in population: 55.30955640724278
Average age in population: 53.54050505117688
Median age in population: 53.63124988008349
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 9592778
--- Timings ---
Current time: 1559584570440 milliseconds
Total Time:          96.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.9 seconds, 77.5%
Fitness Testing:     12.6 seconds, 13.0%
Report:               9.0 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 97                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 86                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -52                
Correct output: -41                 | Program output: -29                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: -37                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 92                 
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -41                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -4                 
Correct output: -67                 | Program output: 100                
Correct output: -60                 | Program output: 65                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: -12                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: -71                
Correct output: -96                 | Program output: -58                
Correct output: -39                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -21                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -20                
Correct output: -30                 | Program output: -11                
Correct output: -99                 | Program output: 71                 
Correct output: -13                 | Program output: -13                
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: -66                
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -72                 | Program output: -32                
Correct output: -96                 | Program output: -18                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -27                
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: -31                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Lexicase best program: (in3 boolean_dup_times in1 in2 in2 exec_k (integer_yank boolean_yank print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (boolean_and) (integer_dup_times) boolean_flush)
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 24
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Zero cases best program: (in3 boolean_dup_times in1 in2 in2 exec_k (integer_yank boolean_yank print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (boolean_and) (integer_dup_times) boolean_flush)
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 24
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (663 667 2 662 274 662 2 2 2 1000)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (663 667 2 662 274 662 2 2 2 0)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Best program: (in3 boolean_dup_times in1 in2 in2 exec_k (integer_yank boolean_yank print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not exec_k_when_autoconstructing (boolean_and) (integer_dup_times) boolean_flush)
Errors: [0 0 0 0 1 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 19
Size: 24
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 7.064
Median total errors in population: 7
Error averages by case: (0.337 0.333 0.998 0.338 0.726 0.338 0.998 0.998 0.998 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 22.36
Average program size in population (points): 29.958
Average percent parens in population: 0.246
Minimum age in population: 51.92703386861831
Maximum age in population: 56.77259150518512
Average age in population: 55.23515533548112
Median age in population: 55.16640111755987
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 326
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 333
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 9722317
--- Timings ---
Current time: 1559584573178 milliseconds
Total Time:          99.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.3 seconds, 77.8%
Fitness Testing:     12.7 seconds, 12.8%
Report:               9.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -8                  | Program output: 8                  
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 50                 
Correct output: 27                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 94                 
Correct output: 42                  | Program output: 52                 
Correct output: 15                  | Program output: 31                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 60                 
Correct output: 8                   | Program output: 59                 
Correct output: 28                  | Program output: 31                 
Correct output: -41                 | Program output: -16                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: 3                  
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: 63                 
Correct output: -32                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -64                
Correct output: -41                 | Program output: -29                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 36                 
Correct output: -37                 | Program output: -37                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 92                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: 74                 
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 24                 
Correct output: -60                 | Program output: -41                
Correct output: -62                 | Program output: 32                 
Correct output: 2                   | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -36                
Correct output: -89                 | Program output: -4                 
Correct output: -67                 | Program output: 50                 
Correct output: -60                 | Program output: 45                 
Correct output: -75                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: -53                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -6                 
Correct output: -71                 | Program output: -71                
Correct output: -96                 | Program output: -58                
Correct output: -39                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: 34                 
Correct output: -70                 | Program output: -21                
Correct output: -89                 | Program output: -44                
Correct output: -61                 | Program output: -61                
Correct output: -30                 | Program output: -11                
Correct output: -99                 | Program output: 8                  
Correct output: -13                 | Program output: -13                
Correct output: -40                 | Program output: 8                  
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -10                
Correct output: -62                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: -31                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Lexicase best program: (in3 boolean_dup_times in1 in2 in2 exec_k (integer_yank integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
Lexicase best errors: [0 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 22
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Zero cases best program: (in3 boolean_dup_times in1 in2 in2 exec_k (integer_yank integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
Zero cases best errors: [0 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 22
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (132 1000 1000 6 955 1000 1000 956 814 812)
Population mean number of elite cases: 7.68
Count of perfect (error zero) individuals by case: (132 0 0 6 955 0 0 956 814 812)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Best program: (in3 boolean_dup_times in1 in2 in2 exec_k (integer_yank integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
Errors: [0 1 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 19
Size: 22
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 6.325
Median total errors in population: 6
Error averages by case: (0.868 1.0 1.0 0.994 0.045 1.0 1.0 0.044 0.186 0.188)
Error minima by case: (0 1 1 0 0 1 1 0 0 0)
Average genome size in population (length): 19.554
Average program size in population (points): 25.12
Average percent parens in population: 0.218
Minimum age in population: 54.30997593322536
Maximum age in population: 58.23034249518241
Average age in population: 57.37277574651659
Median age in population: 57.15190681233071
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 622
Genome diversity (% unique genomes):	 0.325
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 636
Syntactic diversity (% unique Push programs):	 0.303
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 9871249
--- Timings ---
Current time: 1559584575567 milliseconds
Total Time:         101.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.3 seconds, 78.0%
Fitness Testing:     12.9 seconds, 12.7%
Report:               9.4 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -8                  | Program output: -8                 
Correct output: -45                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: 0                   | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 65                 
Correct output: 17                  | Program output: 30                 
Correct output: 20                  | Program output: 21                 
Correct output: 4                   | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 93                 
Correct output: 30                  | Program output: 58                 
Correct output: 62                  | Program output: 66                 
Correct output: 25                  | Program output: 66                 
Correct output: 1                   | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 8                   | Program output: 44                 
Correct output: 28                  | Program output: 39                 
Correct output: -41                 | Program output: 56                 
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: 3                  
Correct output: 32                  | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -32                 | Program output: -32                
Correct output: -75                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -41                 | Program output: -29                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 81                 
Correct output: -37                 | Program output: -37                
Correct output: -21                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: 29                 
Correct output: -71                 | Program output: 14                 
Correct output: -96                 | Program output: 36                 
Correct output: -70                 | Program output: -22                
Correct output: -60                 | Program output: -41                
Correct output: -62                 | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -27                
Correct output: -89                 | Program output: -4                 
Correct output: -67                 | Program output: 3                  
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: -53                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: 74                 
Correct output: -71                 | Program output: -71                
Correct output: -96                 | Program output: -58                
Correct output: -39                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: 66                 
Correct output: -70                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -30                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -13                 | Program output: -13                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -25                
Correct output: -59                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -31                
Correct output: -62                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: -31                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Lexicase best program: (in3 boolean_flush in1 integer_min in2 in3 boolean_dup_times in1 in2 in2 exec_k (integer_yank integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 27
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Zero cases best program: (in3 boolean_flush in1 integer_min in2 in3 boolean_dup_times in1 in2 in2 exec_k (integer_yank integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 27
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (652 650 964 1 652 303 650 964 964 651)
Population mean number of elite cases: 6.45
Count of perfect (error zero) individuals by case: (652 650 964 1 652 303 650 964 964 651)
Population mean number of perfect (error zero) cases: 6.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Best program: (exec_dup (boolean_dup_times in1 in2 in2) exec_k (integer_yank integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 19
Size: 23
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 3.549
Median total errors in population: 2
Error averages by case: (0.348 0.35 0.036 0.999 0.348 0.697 0.35 0.036 0.036 0.349)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.033
Average program size in population (points): 22.711
Average percent parens in population: 0.160
Minimum age in population: 58.95937136979774
Maximum age in population: 60.20911888699629
Average age in population: 59.53416570154268
Median age in population: 59.20911888699629
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 473
Genome diversity (% unique genomes):	 0.269
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 504
Syntactic diversity (% unique Push programs):	 0.234
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 10032871
--- Timings ---
Current time: 1559584577699 milliseconds
Total Time:         103.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.0 seconds, 78.1%
Fitness Testing:     13.1 seconds, 12.7%
Report:               9.5 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 222
Test mean error for best: 0.22200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 27                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 15                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 32                 
Correct output: 8                   | Program output: 8                  
Correct output: 28                  | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -68                
Correct output: -25                 | Program output: -25                
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: -45                
Correct output: -32                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: 5                  
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: 2                   | Program output: 2                  
Correct output: -88                 | Program output: -46                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -46                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 41                 
Correct output: -96                 | Program output: -96                
Correct output: -39                 | Program output: -37                
Correct output: -99                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: -13                 | Program output: -3                 
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 23                 
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -3                 
Correct output: -41                 | Program output: -41                
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Lexicase best program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 29
Percent parens: 0.103
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Zero cases best program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 29
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (481 450 69 947 69 452 947 452 69 69)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (481 450 69 947 69 452 947 452 69 69)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush})
Best program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 26
Size: 29
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 5.995
Median total errors in population: 7
Error averages by case: (0.519 0.55 0.931 0.053 0.931 0.548 0.053 0.548 0.931 0.931)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.139
Average program size in population (points): 22.347
Average percent parens in population: 0.144
Minimum age in population: 59.95937136979774
Maximum age in population: 62.08424512839701
Average age in population: 61.50328653557645
Median age in population: 61.52180824909738
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 351
Genome diversity (% unique genomes):	 0.278
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 370
Syntactic diversity (% unique Push programs):	 0.255
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 10200100
--- Timings ---
Current time: 1559584579845 milliseconds
Total Time:         106.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.8 seconds, 78.2%
Fitness Testing:     13.3 seconds, 12.6%
Report:               9.7 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 40
Successful program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 29


Auto-simplifying with starting size: 29
step: 0
program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 500
program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 1000
program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 1500
program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 2000
program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 2500
program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 3000
program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 3500
program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 4000
program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 4500
program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 5000
program: (in3 boolean_flush in1 integer_min exec_k (in4 integer_min print_integer integer_dup_times) (boolean_flush) boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush boolean_dup_times exec_eq integer_yankdup boolean_not boolean_and boolean_and integer_dup_times boolean_flush)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 222
Test mean error for best: 0.22200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: 6                  
Correct output: -94                 | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: 65                  | Program output: 65                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 27                 
Correct output: 9                   | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 15                 
Correct output: 30                  | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 32                 
Correct output: 8                   | Program output: 8                  
Correct output: 28                  | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -68                
Correct output: -25                 | Program output: -25                
Correct output: 32                  | Program output: 32                 
Correct output: -45                 | Program output: -45                
Correct output: -32                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: 5                  
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -88                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: 2                   | Program output: 2                  
Correct output: -88                 | Program output: -46                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -57                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -46                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 41                 
Correct output: -96                 | Program output: -96                
Correct output: -39                 | Program output: -37                
Correct output: -99                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: -13                 | Program output: -3                 
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -62                
Correct output: -78                 | Program output: 23                 
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -3                 
Correct output: -41                 | Program output: -41                
Correct output: -70                 | Program output: -35                
Correct output: -41                 | Program output: -41                
;;******************************
