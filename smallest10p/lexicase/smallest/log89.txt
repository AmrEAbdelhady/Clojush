Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[82 20 20 20] 20] [[-43 66 -43 -43] -43] [[96 -4 -4 -4] -4] [[100 -52 100 100] -52] [[-59 -59 -59 -12] -59] [[82 82 62 82] 62] [[93 -82 -82 -82] -82] [[-94 -94 -94 -87] -94] [[-89 92 92 92] -89] [[-85 -85 31 -85] -85] [(6 6 6 6) 6] [(-31 -31 -31 -31) -31] [(-36 -36 -36 -36) -36] [(-98 -98 -98 -98) -98] [(-66 -66 -66 -66) -66] [(17 77 41 77) 17] [(81 6 94 65) 6] [(82 70 26 2) 2] [(1 69 88 3) 1] [(8 2 73 42) 2] [(27 92 42 38) 27] [(42 12 35 83) 12] [(21 77 9 62) 9] [(31 38 38 66) 31] [(53 96 59 77) 53] [(18 0 7 4) 0] [(52 5 90 45) 5] [(11 44 42 85) 11] [(87 17 64 28) 17] [(1 58 47 28) 1] [(6 28 50 9) 6] [(52 38 8 37) 8] [(32 41 100 7) 7] [(79 78 2 54) 2] [(25 53 83 47) 25] [(-29 -70 -51 11) -70] [(-45 -81 -15 -73) -81] [(20 -48 -76 95) -76] [(-59 80 58 95) -59] [(42 49 39 -89) -89] [(12 76 -52 28) -52] [(88 97 -6 58) -6] [(-51 25 14 -12) -51] [(-98 82 44 62) -98] [(60 13 81 0) 0] [(30 72 47 -40) -40] [(-2 -60 0 61) -60] [(97 -62 20 0) -62] [(88 -95 48 -89) -95] [(-42 -92 28 -72) -92] [(-92 17 93 21) -92] [(-87 28 8 23) -87] [(23 -24 100 97) -24] [(90 -62 -25 -69) -69] [(81 32 -66 -76) -76] [(52 -28 -14 -27) -28] [(-26 -27 -48 -58) -58] [(-61 30 -92 57) -92] [(-72 -85 -68 -80) -85] [(-72 95 -15 -67) -72] [(54 -28 60 -62) -62] [(69 88 -98 34) -98] [(51 19 39 -100) -100] [(8 15 -29 -58) -58] [(-86 -82 55 -32) -86] [(-30 -25 -56 -79) -79] [(76 8 26 0) 0] [(-29 80 21 17) -29] [(-32 -12 -86 82) -86] [(54 86 -37 -96) -96] [(8 -32 91 -70) -70] [(-79 -19 71 17) -79] [(-63 72 20 11) -63] [(-50 -62 22 79) -62] [(-55 2 87 -83) -83] [(-76 80 -97 -58) -97] [(42 -53 75 -64) -64] [(-20 79 -67 -6) -67] [(-51 55 -7 -87) -87] [(-36 -4 53 0) -36] [(-5 14 -16 -63) -63] [(-81 22 -98 -38) -98] [(27 8 -22 15) -22] [(-40 19 47 31) -40] [(90 -56 -13 69) -56] [(30 19 42 -70) -70] [(36 -92 13 -9) -92] [(-22 -25 71 78) -25] [(-95 67 64 -85) -95] [(-73 55 -9 44) -73] [(-22 44 59 77) -22] [(54 11 50 -45) -45] [(-27 22 -16 -57) -57] [(71 59 52 70) 52] [(-16 -49 47 6) -49])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[82 20 20 20] 20]
Train Case:   6 | Input/Output: [[-43 66 -43 -43] -43]
Train Case:   7 | Input/Output: [[96 -4 -4 -4] -4]
Train Case:   8 | Input/Output: [[100 -52 100 100] -52]
Train Case:   9 | Input/Output: [[-59 -59 -59 -12] -59]
Train Case:  10 | Input/Output: [[82 82 62 82] 62]
Train Case:  11 | Input/Output: [[93 -82 -82 -82] -82]
Train Case:  12 | Input/Output: [[-94 -94 -94 -87] -94]
Train Case:  13 | Input/Output: [[-89 92 92 92] -89]
Train Case:  14 | Input/Output: [[-85 -85 31 -85] -85]
Train Case:  15 | Input/Output: [(6 6 6 6) 6]
Train Case:  16 | Input/Output: [(-31 -31 -31 -31) -31]
Train Case:  17 | Input/Output: [(-36 -36 -36 -36) -36]
Train Case:  18 | Input/Output: [(-98 -98 -98 -98) -98]
Train Case:  19 | Input/Output: [(-66 -66 -66 -66) -66]
Train Case:  20 | Input/Output: [(17 77 41 77) 17]
Train Case:  21 | Input/Output: [(81 6 94 65) 6]
Train Case:  22 | Input/Output: [(82 70 26 2) 2]
Train Case:  23 | Input/Output: [(1 69 88 3) 1]
Train Case:  24 | Input/Output: [(8 2 73 42) 2]
Train Case:  25 | Input/Output: [(27 92 42 38) 27]
Train Case:  26 | Input/Output: [(42 12 35 83) 12]
Train Case:  27 | Input/Output: [(21 77 9 62) 9]
Train Case:  28 | Input/Output: [(31 38 38 66) 31]
Train Case:  29 | Input/Output: [(53 96 59 77) 53]
Train Case:  30 | Input/Output: [(18 0 7 4) 0]
Train Case:  31 | Input/Output: [(52 5 90 45) 5]
Train Case:  32 | Input/Output: [(11 44 42 85) 11]
Train Case:  33 | Input/Output: [(87 17 64 28) 17]
Train Case:  34 | Input/Output: [(1 58 47 28) 1]
Train Case:  35 | Input/Output: [(6 28 50 9) 6]
Train Case:  36 | Input/Output: [(52 38 8 37) 8]
Train Case:  37 | Input/Output: [(32 41 100 7) 7]
Train Case:  38 | Input/Output: [(79 78 2 54) 2]
Train Case:  39 | Input/Output: [(25 53 83 47) 25]
Train Case:  40 | Input/Output: [(-29 -70 -51 11) -70]
Train Case:  41 | Input/Output: [(-45 -81 -15 -73) -81]
Train Case:  42 | Input/Output: [(20 -48 -76 95) -76]
Train Case:  43 | Input/Output: [(-59 80 58 95) -59]
Train Case:  44 | Input/Output: [(42 49 39 -89) -89]
Train Case:  45 | Input/Output: [(12 76 -52 28) -52]
Train Case:  46 | Input/Output: [(88 97 -6 58) -6]
Train Case:  47 | Input/Output: [(-51 25 14 -12) -51]
Train Case:  48 | Input/Output: [(-98 82 44 62) -98]
Train Case:  49 | Input/Output: [(60 13 81 0) 0]
Train Case:  50 | Input/Output: [(30 72 47 -40) -40]
Train Case:  51 | Input/Output: [(-2 -60 0 61) -60]
Train Case:  52 | Input/Output: [(97 -62 20 0) -62]
Train Case:  53 | Input/Output: [(88 -95 48 -89) -95]
Train Case:  54 | Input/Output: [(-42 -92 28 -72) -92]
Train Case:  55 | Input/Output: [(-92 17 93 21) -92]
Train Case:  56 | Input/Output: [(-87 28 8 23) -87]
Train Case:  57 | Input/Output: [(23 -24 100 97) -24]
Train Case:  58 | Input/Output: [(90 -62 -25 -69) -69]
Train Case:  59 | Input/Output: [(81 32 -66 -76) -76]
Train Case:  60 | Input/Output: [(52 -28 -14 -27) -28]
Train Case:  61 | Input/Output: [(-26 -27 -48 -58) -58]
Train Case:  62 | Input/Output: [(-61 30 -92 57) -92]
Train Case:  63 | Input/Output: [(-72 -85 -68 -80) -85]
Train Case:  64 | Input/Output: [(-72 95 -15 -67) -72]
Train Case:  65 | Input/Output: [(54 -28 60 -62) -62]
Train Case:  66 | Input/Output: [(69 88 -98 34) -98]
Train Case:  67 | Input/Output: [(51 19 39 -100) -100]
Train Case:  68 | Input/Output: [(8 15 -29 -58) -58]
Train Case:  69 | Input/Output: [(-86 -82 55 -32) -86]
Train Case:  70 | Input/Output: [(-30 -25 -56 -79) -79]
Train Case:  71 | Input/Output: [(76 8 26 0) 0]
Train Case:  72 | Input/Output: [(-29 80 21 17) -29]
Train Case:  73 | Input/Output: [(-32 -12 -86 82) -86]
Train Case:  74 | Input/Output: [(54 86 -37 -96) -96]
Train Case:  75 | Input/Output: [(8 -32 91 -70) -70]
Train Case:  76 | Input/Output: [(-79 -19 71 17) -79]
Train Case:  77 | Input/Output: [(-63 72 20 11) -63]
Train Case:  78 | Input/Output: [(-50 -62 22 79) -62]
Train Case:  79 | Input/Output: [(-55 2 87 -83) -83]
Train Case:  80 | Input/Output: [(-76 80 -97 -58) -97]
Train Case:  81 | Input/Output: [(42 -53 75 -64) -64]
Train Case:  82 | Input/Output: [(-20 79 -67 -6) -67]
Train Case:  83 | Input/Output: [(-51 55 -7 -87) -87]
Train Case:  84 | Input/Output: [(-36 -4 53 0) -36]
Train Case:  85 | Input/Output: [(-5 14 -16 -63) -63]
Train Case:  86 | Input/Output: [(-81 22 -98 -38) -98]
Train Case:  87 | Input/Output: [(27 8 -22 15) -22]
Train Case:  88 | Input/Output: [(-40 19 47 31) -40]
Train Case:  89 | Input/Output: [(90 -56 -13 69) -56]
Train Case:  90 | Input/Output: [(30 19 42 -70) -70]
Train Case:  91 | Input/Output: [(36 -92 13 -9) -92]
Train Case:  92 | Input/Output: [(-22 -25 71 78) -25]
Train Case:  93 | Input/Output: [(-95 67 64 -85) -95]
Train Case:  94 | Input/Output: [(-73 55 -9 44) -73]
Train Case:  95 | Input/Output: [(-22 44 59 77) -22]
Train Case:  96 | Input/Output: [(54 11 50 -45) -45]
Train Case:  97 | Input/Output: [(-27 22 -16 -57) -57]
Train Case:  98 | Input/Output: [(71 59 52 70) 52]
Train Case:  99 | Input/Output: [(-16 -49 47 6) -49]
Test Case:   0 | Input/Output: [[-86 -86 52 -86] -86]
Test Case:   1 | Input/Output: [[-91 -91 63 -91] -91]
Test Case:   2 | Input/Output: [[40 -23 -23 -23] -23]
Test Case:   3 | Input/Output: [[50 -45 50 50] -45]
Test Case:   4 | Input/Output: [[80 -65 -65 -65] -65]
Test Case:   5 | Input/Output: [[-70 99 99 99] -70]
Test Case:   6 | Input/Output: [[5 -13 5 5] -13]
Test Case:   7 | Input/Output: [[51 51 51 11] 11]
Test Case:   8 | Input/Output: [[67 -4 67 67] -4]
Test Case:   9 | Input/Output: [[-5 92 -5 -5] -5]
Test Case:  10 | Input/Output: [[-99 -99 -99 -64] -99]
Test Case:  11 | Input/Output: [[31 48 31 31] 31]
Test Case:  12 | Input/Output: [[22 -22 -22 -22] -22]
Test Case:  13 | Input/Output: [[-37 -37 -37 75] -37]
Test Case:  14 | Input/Output: [[91 -3 91 91] -3]
Test Case:  15 | Input/Output: [[4 30 30 30] 4]
Test Case:  16 | Input/Output: [[13 13 -17 13] -17]
Test Case:  17 | Input/Output: [[27 27 27 99] 27]
Test Case:  18 | Input/Output: [[-79 -79 -9 -79] -79]
Test Case:  19 | Input/Output: [[15 -75 -75 -75] -75]
Test Case:  20 | Input/Output: [[-76 -76 -76 -41] -76]
Test Case:  21 | Input/Output: [[62 62 -78 62] -78]
Test Case:  22 | Input/Output: [[60 60 60 79] 60]
Test Case:  23 | Input/Output: [[83 83 83 -71] -71]
Test Case:  24 | Input/Output: [[54 -8 -8 -8] -8]
Test Case:  25 | Input/Output: [[86 -17 86 86] -17]
Test Case:  26 | Input/Output: [[44 43 44 44] 43]
Test Case:  27 | Input/Output: [[44 31 44 44] 31]
Test Case:  28 | Input/Output: [[-9 88 -9 -9] -9]
Test Case:  29 | Input/Output: [[-60 -81 -81 -81] -81]
Test Case:  30 | Input/Output: [[-12 -12 -44 -12] -44]
Test Case:  31 | Input/Output: [[-99 -99 -99 34] -99]
Test Case:  32 | Input/Output: [[46 35 35 35] 35]
Test Case:  33 | Input/Output: [[-48 58 -48 -48] -48]
Test Case:  34 | Input/Output: [[-85 19 -85 -85] -85]
Test Case:  35 | Input/Output: [[-98 62 -98 -98] -98]
Test Case:  36 | Input/Output: [[-45 26 26 26] -45]
Test Case:  37 | Input/Output: [[64 64 64 20] 20]
Test Case:  38 | Input/Output: [[-30 -30 86 -30] -30]
Test Case:  39 | Input/Output: [[-65 -87 -87 -87] -87]
Test Case:  40 | Input/Output: [[-64 -64 -64 -77] -77]
Test Case:  41 | Input/Output: [[84 84 46 84] 46]
Test Case:  42 | Input/Output: [[20 87 20 20] 20]
Test Case:  43 | Input/Output: [[-52 -52 88 -52] -52]
Test Case:  44 | Input/Output: [[10 -89 10 10] -89]
Test Case:  45 | Input/Output: [[-70 -70 15 -70] -70]
Test Case:  46 | Input/Output: [[57 -96 57 57] -96]
Test Case:  47 | Input/Output: [[-47 -47 -47 -81] -81]
Test Case:  48 | Input/Output: [[63 63 -8 63] -8]
Test Case:  49 | Input/Output: [[15 15 15 13] 13]
Test Case:  50 | Input/Output: [[73 73 73 -50] -50]
Test Case:  51 | Input/Output: [[81 81 2 81] 2]
Test Case:  52 | Input/Output: [[67 91 67 67] 67]
Test Case:  53 | Input/Output: [[-99 -99 -99 85] -99]
Test Case:  54 | Input/Output: [[-32 -32 -19 -32] -32]
Test Case:  55 | Input/Output: [[-41 -13 -13 -13] -41]
Test Case:  56 | Input/Output: [[42 -59 42 42] -59]
Test Case:  57 | Input/Output: [[-19 8 -19 -19] -19]
Test Case:  58 | Input/Output: [[-31 81 81 81] -31]
Test Case:  59 | Input/Output: [[-61 -61 42 -61] -61]
Test Case:  60 | Input/Output: [[66 66 33 66] 33]
Test Case:  61 | Input/Output: [[71 71 79 71] 71]
Test Case:  62 | Input/Output: [[36 36 36 88] 36]
Test Case:  63 | Input/Output: [[6 6 6 -98] -98]
Test Case:  64 | Input/Output: [[84 84 84 35] 35]
Test Case:  65 | Input/Output: [[78 -41 -41 -41] -41]
Test Case:  66 | Input/Output: [[37 -22 37 37] -22]
Test Case:  67 | Input/Output: [[58 -2 -2 -2] -2]
Test Case:  68 | Input/Output: [[60 50 50 50] 50]
Test Case:  69 | Input/Output: [[-84 -94 -94 -94] -94]
Test Case:  70 | Input/Output: [[60 51 60 60] 51]
Test Case:  71 | Input/Output: [[85 85 85 -9] -9]
Test Case:  72 | Input/Output: [[9 9 9 11] 9]
Test Case:  73 | Input/Output: [[64 -46 -46 -46] -46]
Test Case:  74 | Input/Output: [[40 40 40 44] 40]
Test Case:  75 | Input/Output: [[-37 -37 34 -37] -37]
Test Case:  76 | Input/Output: [[-18 -18 -18 -4] -18]
Test Case:  77 | Input/Output: [[-37 7 7 7] -37]
Test Case:  78 | Input/Output: [[11 11 11 40] 11]
Test Case:  79 | Input/Output: [[94 94 -75 94] -75]
Test Case:  80 | Input/Output: [[48 48 91 48] 48]
Test Case:  81 | Input/Output: [[-72 -72 -10 -72] -72]
Test Case:  82 | Input/Output: [[27 27 27 23] 23]
Test Case:  83 | Input/Output: [[-4 -4 -84 -4] -84]
Test Case:  84 | Input/Output: [[-19 73 73 73] -19]
Test Case:  85 | Input/Output: [[57 57 -45 57] -45]
Test Case:  86 | Input/Output: [[-69 -69 -69 10] -69]
Test Case:  87 | Input/Output: [[-75 75 75 75] -75]
Test Case:  88 | Input/Output: [[-63 -63 24 -63] -63]
Test Case:  89 | Input/Output: [[69 36 69 69] 36]
Test Case:  90 | Input/Output: [[43 24 24 24] 24]
Test Case:  91 | Input/Output: [[67 67 10 67] 10]
Test Case:  92 | Input/Output: [[81 81 81 30] 30]
Test Case:  93 | Input/Output: [[-82 12 -82 -82] -82]
Test Case:  94 | Input/Output: [[76 6 76 76] 6]
Test Case:  95 | Input/Output: [[28 28 87 28] 28]
Test Case:  96 | Input/Output: [[98 98 -51 98] -51]
Test Case:  97 | Input/Output: [[-74 -74 -74 98] -74]
Test Case:  98 | Input/Output: [[-79 64 -79 -79] -79]
Test Case:  99 | Input/Output: [[-44 -44 73 -44] -44]
Test Case: 100 | Input/Output: [(100 100 100 100) 100]
Test Case: 101 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 102 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 103 | Input/Output: [(66 66 66 66) 66]
Test Case: 104 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 105 | Input/Output: [(68 68 68 68) 68]
Test Case: 106 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 107 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 108 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 109 | Input/Output: [(94 94 94 94) 94]
Test Case: 110 | Input/Output: [(85 85 85 85) 85]
Test Case: 111 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 112 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 113 | Input/Output: [(70 70 70 70) 70]
Test Case: 114 | Input/Output: [(54 54 54 54) 54]
Test Case: 115 | Input/Output: [(69 69 69 69) 69]
Test Case: 116 | Input/Output: [(55 55 55 55) 55]
Test Case: 117 | Input/Output: [(38 38 38 38) 38]
Test Case: 118 | Input/Output: [(25 25 25 25) 25]
Test Case: 119 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 120 | Input/Output: [(64 64 64 64) 64]
Test Case: 121 | Input/Output: [(18 18 18 18) 18]
Test Case: 122 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 123 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 124 | Input/Output: [(93 93 93 93) 93]
Test Case: 125 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 126 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 127 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 128 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 129 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 130 | Input/Output: [(9 9 9 9) 9]
Test Case: 131 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 132 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 133 | Input/Output: [(43 43 43 43) 43]
Test Case: 134 | Input/Output: [(28 28 28 28) 28]
Test Case: 135 | Input/Output: [(98 98 98 98) 98]
Test Case: 136 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 137 | Input/Output: [(12 12 12 12) 12]
Test Case: 138 | Input/Output: [(15 15 15 15) 15]
Test Case: 139 | Input/Output: [(48 48 48 48) 48]
Test Case: 140 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 141 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 142 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 143 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 144 | Input/Output: [(51 51 51 51) 51]
Test Case: 145 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 146 | Input/Output: [(29 29 29 29) 29]
Test Case: 147 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 148 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 149 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 150 | Input/Output: [(41 41 41 41) 41]
Test Case: 151 | Input/Output: [(0 0 0 0) 0]
Test Case: 152 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 153 | Input/Output: [(44 44 44 44) 44]
Test Case: 154 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 155 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 156 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 157 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 158 | Input/Output: [(60 60 60 60) 60]
Test Case: 159 | Input/Output: [(14 14 14 14) 14]
Test Case: 160 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 161 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 162 | Input/Output: [(39 39 39 39) 39]
Test Case: 163 | Input/Output: [(55 55 55 55) 55]
Test Case: 164 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 165 | Input/Output: [(100 100 100 100) 100]
Test Case: 166 | Input/Output: [(100 100 100 100) 100]
Test Case: 167 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 168 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 169 | Input/Output: [(54 54 54 54) 54]
Test Case: 170 | Input/Output: [(0 0 0 0) 0]
Test Case: 171 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 172 | Input/Output: [(59 59 59 59) 59]
Test Case: 173 | Input/Output: [(76 76 76 76) 76]
Test Case: 174 | Input/Output: [(34 34 34 34) 34]
Test Case: 175 | Input/Output: [(87 87 87 87) 87]
Test Case: 176 | Input/Output: [(75 75 75 75) 75]
Test Case: 177 | Input/Output: [(4 4 4 4) 4]
Test Case: 178 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 179 | Input/Output: [(54 54 54 54) 54]
Test Case: 180 | Input/Output: [(78 78 78 78) 78]
Test Case: 181 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 182 | Input/Output: [(35 35 35 35) 35]
Test Case: 183 | Input/Output: [(1 1 1 1) 1]
Test Case: 184 | Input/Output: [(40 40 40 40) 40]
Test Case: 185 | Input/Output: [(58 58 58 58) 58]
Test Case: 186 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 187 | Input/Output: [(0 0 0 0) 0]
Test Case: 188 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 189 | Input/Output: [(62 62 62 62) 62]
Test Case: 190 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 191 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 192 | Input/Output: [(69 69 69 69) 69]
Test Case: 193 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 194 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 195 | Input/Output: [(9 9 9 9) 9]
Test Case: 196 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 197 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 198 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 199 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 200 | Input/Output: [(91 52 52 66) 52]
Test Case: 201 | Input/Output: [(1 37 67 55) 1]
Test Case: 202 | Input/Output: [(84 86 57 87) 57]
Test Case: 203 | Input/Output: [(58 57 56 40) 40]
Test Case: 204 | Input/Output: [(18 76 87 5) 5]
Test Case: 205 | Input/Output: [(76 93 58 76) 58]
Test Case: 206 | Input/Output: [(97 57 32 36) 32]
Test Case: 207 | Input/Output: [(58 88 58 85) 58]
Test Case: 208 | Input/Output: [(45 52 55 94) 45]
Test Case: 209 | Input/Output: [(48 23 17 100) 17]
Test Case: 210 | Input/Output: [(50 74 79 75) 50]
Test Case: 211 | Input/Output: [(13 81 97 11) 11]
Test Case: 212 | Input/Output: [(77 79 47 27) 27]
Test Case: 213 | Input/Output: [(48 83 23 66) 23]
Test Case: 214 | Input/Output: [(74 85 61 81) 61]
Test Case: 215 | Input/Output: [(64 43 71 63) 43]
Test Case: 216 | Input/Output: [(32 63 62 66) 32]
Test Case: 217 | Input/Output: [(76 18 100 10) 10]
Test Case: 218 | Input/Output: [(18 64 18 8) 8]
Test Case: 219 | Input/Output: [(91 41 75 58) 41]
Test Case: 220 | Input/Output: [(52 46 25 47) 25]
Test Case: 221 | Input/Output: [(13 38 92 20) 13]
Test Case: 222 | Input/Output: [(77 21 77 9) 9]
Test Case: 223 | Input/Output: [(87 71 42 65) 42]
Test Case: 224 | Input/Output: [(73 70 78 86) 70]
Test Case: 225 | Input/Output: [(65 3 54 48) 3]
Test Case: 226 | Input/Output: [(59 88 78 16) 16]
Test Case: 227 | Input/Output: [(76 77 78 73) 73]
Test Case: 228 | Input/Output: [(48 15 53 57) 15]
Test Case: 229 | Input/Output: [(70 28 76 7) 7]
Test Case: 230 | Input/Output: [(16 43 52 18) 16]
Test Case: 231 | Input/Output: [(100 81 83 63) 63]
Test Case: 232 | Input/Output: [(96 13 40 87) 13]
Test Case: 233 | Input/Output: [(71 62 0 84) 0]
Test Case: 234 | Input/Output: [(24 28 3 1) 1]
Test Case: 235 | Input/Output: [(88 31 10 55) 10]
Test Case: 236 | Input/Output: [(59 51 53 26) 26]
Test Case: 237 | Input/Output: [(72 73 15 7) 7]
Test Case: 238 | Input/Output: [(29 10 4 10) 4]
Test Case: 239 | Input/Output: [(85 33 31 60) 31]
Test Case: 240 | Input/Output: [(18 94 81 65) 18]
Test Case: 241 | Input/Output: [(52 59 4 91) 4]
Test Case: 242 | Input/Output: [(48 93 85 25) 25]
Test Case: 243 | Input/Output: [(97 90 57 23) 23]
Test Case: 244 | Input/Output: [(49 55 0 71) 0]
Test Case: 245 | Input/Output: [(93 5 2 18) 2]
Test Case: 246 | Input/Output: [(39 30 86 50) 30]
Test Case: 247 | Input/Output: [(90 68 82 8) 8]
Test Case: 248 | Input/Output: [(87 73 83 34) 34]
Test Case: 249 | Input/Output: [(62 100 63 36) 36]
Test Case: 250 | Input/Output: [(98 51 60 39) 39]
Test Case: 251 | Input/Output: [(23 66 96 69) 23]
Test Case: 252 | Input/Output: [(66 67 34 55) 34]
Test Case: 253 | Input/Output: [(16 4 23 100) 4]
Test Case: 254 | Input/Output: [(80 89 48 95) 48]
Test Case: 255 | Input/Output: [(15 56 36 32) 15]
Test Case: 256 | Input/Output: [(74 100 66 55) 55]
Test Case: 257 | Input/Output: [(81 39 55 45) 39]
Test Case: 258 | Input/Output: [(89 56 62 92) 56]
Test Case: 259 | Input/Output: [(21 38 31 36) 21]
Test Case: 260 | Input/Output: [(21 46 26 34) 21]
Test Case: 261 | Input/Output: [(35 55 5 86) 5]
Test Case: 262 | Input/Output: [(28 54 94 0) 0]
Test Case: 263 | Input/Output: [(80 4 48 31) 4]
Test Case: 264 | Input/Output: [(100 71 65 0) 0]
Test Case: 265 | Input/Output: [(36 37 97 88) 36]
Test Case: 266 | Input/Output: [(31 97 32 39) 31]
Test Case: 267 | Input/Output: [(25 11 7 67) 7]
Test Case: 268 | Input/Output: [(10 61 39 24) 10]
Test Case: 269 | Input/Output: [(95 93 24 92) 24]
Test Case: 270 | Input/Output: [(45 58 62 70) 45]
Test Case: 271 | Input/Output: [(89 16 79 22) 16]
Test Case: 272 | Input/Output: [(84 24 28 19) 19]
Test Case: 273 | Input/Output: [(56 97 88 43) 43]
Test Case: 274 | Input/Output: [(88 29 39 86) 29]
Test Case: 275 | Input/Output: [(14 67 96 90) 14]
Test Case: 276 | Input/Output: [(17 94 70 58) 17]
Test Case: 277 | Input/Output: [(66 42 54 33) 33]
Test Case: 278 | Input/Output: [(32 50 28 29) 28]
Test Case: 279 | Input/Output: [(22 57 85 80) 22]
Test Case: 280 | Input/Output: [(99 47 88 93) 47]
Test Case: 281 | Input/Output: [(22 88 67 35) 22]
Test Case: 282 | Input/Output: [(54 90 39 90) 39]
Test Case: 283 | Input/Output: [(84 26 76 76) 26]
Test Case: 284 | Input/Output: [(95 74 4 12) 4]
Test Case: 285 | Input/Output: [(84 98 40 100) 40]
Test Case: 286 | Input/Output: [(33 49 80 65) 33]
Test Case: 287 | Input/Output: [(66 76 69 19) 19]
Test Case: 288 | Input/Output: [(96 93 78 45) 45]
Test Case: 289 | Input/Output: [(72 18 23 40) 18]
Test Case: 290 | Input/Output: [(45 35 93 88) 35]
Test Case: 291 | Input/Output: [(33 14 53 77) 14]
Test Case: 292 | Input/Output: [(72 46 46 63) 46]
Test Case: 293 | Input/Output: [(55 77 91 3) 3]
Test Case: 294 | Input/Output: [(77 91 71 10) 10]
Test Case: 295 | Input/Output: [(83 69 78 10) 10]
Test Case: 296 | Input/Output: [(36 88 27 86) 27]
Test Case: 297 | Input/Output: [(39 69 41 100) 39]
Test Case: 298 | Input/Output: [(28 95 80 10) 10]
Test Case: 299 | Input/Output: [(26 18 32 72) 18]
Test Case: 300 | Input/Output: [(89 48 90 76) 48]
Test Case: 301 | Input/Output: [(8 92 48 22) 8]
Test Case: 302 | Input/Output: [(2 44 10 40) 2]
Test Case: 303 | Input/Output: [(56 29 57 9) 9]
Test Case: 304 | Input/Output: [(63 99 17 1) 1]
Test Case: 305 | Input/Output: [(26 28 7 79) 7]
Test Case: 306 | Input/Output: [(53 57 68 64) 53]
Test Case: 307 | Input/Output: [(54 21 54 53) 21]
Test Case: 308 | Input/Output: [(89 79 96 49) 49]
Test Case: 309 | Input/Output: [(18 73 91 88) 18]
Test Case: 310 | Input/Output: [(31 69 88 92) 31]
Test Case: 311 | Input/Output: [(9 32 20 31) 9]
Test Case: 312 | Input/Output: [(32 70 59 52) 32]
Test Case: 313 | Input/Output: [(10 78 75 28) 10]
Test Case: 314 | Input/Output: [(80 23 54 16) 16]
Test Case: 315 | Input/Output: [(7 6 78 66) 6]
Test Case: 316 | Input/Output: [(20 91 29 98) 20]
Test Case: 317 | Input/Output: [(50 69 9 5) 5]
Test Case: 318 | Input/Output: [(18 85 86 90) 18]
Test Case: 319 | Input/Output: [(6 1 38 96) 1]
Test Case: 320 | Input/Output: [(5 72 22 55) 5]
Test Case: 321 | Input/Output: [(9 98 81 11) 9]
Test Case: 322 | Input/Output: [(10 82 8 87) 8]
Test Case: 323 | Input/Output: [(75 26 8 64) 8]
Test Case: 324 | Input/Output: [(53 27 50 22) 22]
Test Case: 325 | Input/Output: [(95 24 88 47) 24]
Test Case: 326 | Input/Output: [(43 15 14 90) 14]
Test Case: 327 | Input/Output: [(91 19 50 31) 19]
Test Case: 328 | Input/Output: [(79 97 85 15) 15]
Test Case: 329 | Input/Output: [(76 65 42 63) 42]
Test Case: 330 | Input/Output: [(90 11 5 79) 5]
Test Case: 331 | Input/Output: [(25 45 15 16) 15]
Test Case: 332 | Input/Output: [(24 98 86 36) 24]
Test Case: 333 | Input/Output: [(50 52 37 75) 37]
Test Case: 334 | Input/Output: [(68 92 90 7) 7]
Test Case: 335 | Input/Output: [(92 24 88 12) 12]
Test Case: 336 | Input/Output: [(71 70 23 76) 23]
Test Case: 337 | Input/Output: [(30 99 53 9) 9]
Test Case: 338 | Input/Output: [(52 53 60 46) 46]
Test Case: 339 | Input/Output: [(39 21 33 88) 21]
Test Case: 340 | Input/Output: [(79 94 57 88) 57]
Test Case: 341 | Input/Output: [(97 71 51 37) 37]
Test Case: 342 | Input/Output: [(30 16 71 0) 0]
Test Case: 343 | Input/Output: [(100 44 11 46) 11]
Test Case: 344 | Input/Output: [(81 46 85 90) 46]
Test Case: 345 | Input/Output: [(1 47 91 1) 1]
Test Case: 346 | Input/Output: [(79 30 50 32) 30]
Test Case: 347 | Input/Output: [(95 72 77 30) 30]
Test Case: 348 | Input/Output: [(96 29 61 69) 29]
Test Case: 349 | Input/Output: [(58 12 70 60) 12]
Test Case: 350 | Input/Output: [(45 67 66 42) 42]
Test Case: 351 | Input/Output: [(30 46 12 30) 12]
Test Case: 352 | Input/Output: [(3 73 35 61) 3]
Test Case: 353 | Input/Output: [(22 92 53 82) 22]
Test Case: 354 | Input/Output: [(72 12 77 7) 7]
Test Case: 355 | Input/Output: [(63 36 68 44) 36]
Test Case: 356 | Input/Output: [(0 79 52 63) 0]
Test Case: 357 | Input/Output: [(36 18 32 88) 18]
Test Case: 358 | Input/Output: [(72 71 88 13) 13]
Test Case: 359 | Input/Output: [(81 60 29 90) 29]
Test Case: 360 | Input/Output: [(54 35 9 10) 9]
Test Case: 361 | Input/Output: [(61 4 64 10) 4]
Test Case: 362 | Input/Output: [(67 8 96 93) 8]
Test Case: 363 | Input/Output: [(1 71 84 66) 1]
Test Case: 364 | Input/Output: [(36 1 82 87) 1]
Test Case: 365 | Input/Output: [(40 52 77 84) 40]
Test Case: 366 | Input/Output: [(15 71 29 93) 15]
Test Case: 367 | Input/Output: [(95 28 87 84) 28]
Test Case: 368 | Input/Output: [(30 77 89 65) 30]
Test Case: 369 | Input/Output: [(70 32 10 29) 10]
Test Case: 370 | Input/Output: [(68 50 2 19) 2]
Test Case: 371 | Input/Output: [(7 17 39 58) 7]
Test Case: 372 | Input/Output: [(1 32 34 45) 1]
Test Case: 373 | Input/Output: [(93 69 87 9) 9]
Test Case: 374 | Input/Output: [(30 87 81 12) 12]
Test Case: 375 | Input/Output: [(34 47 59 43) 34]
Test Case: 376 | Input/Output: [(69 5 65 1) 1]
Test Case: 377 | Input/Output: [(80 45 7 37) 7]
Test Case: 378 | Input/Output: [(62 11 46 50) 11]
Test Case: 379 | Input/Output: [(2 70 22 78) 2]
Test Case: 380 | Input/Output: [(99 50 59 66) 50]
Test Case: 381 | Input/Output: [(76 98 64 91) 64]
Test Case: 382 | Input/Output: [(55 21 13 9) 9]
Test Case: 383 | Input/Output: [(93 47 87 72) 47]
Test Case: 384 | Input/Output: [(52 82 30 60) 30]
Test Case: 385 | Input/Output: [(19 26 6 25) 6]
Test Case: 386 | Input/Output: [(47 95 100 14) 14]
Test Case: 387 | Input/Output: [(50 90 85 26) 26]
Test Case: 388 | Input/Output: [(9 19 96 26) 9]
Test Case: 389 | Input/Output: [(85 23 28 21) 21]
Test Case: 390 | Input/Output: [(11 63 7 10) 7]
Test Case: 391 | Input/Output: [(92 53 54 3) 3]
Test Case: 392 | Input/Output: [(64 96 38 25) 25]
Test Case: 393 | Input/Output: [(60 82 35 4) 4]
Test Case: 394 | Input/Output: [(50 10 91 97) 10]
Test Case: 395 | Input/Output: [(18 23 28 48) 18]
Test Case: 396 | Input/Output: [(17 9 76 98) 9]
Test Case: 397 | Input/Output: [(81 16 21 42) 16]
Test Case: 398 | Input/Output: [(50 84 39 60) 39]
Test Case: 399 | Input/Output: [(22 51 67 87) 22]
Test Case: 400 | Input/Output: [(37 80 56 -35) -35]
Test Case: 401 | Input/Output: [(70 -88 -54 -18) -88]
Test Case: 402 | Input/Output: [(-68 -66 -90 -25) -90]
Test Case: 403 | Input/Output: [(73 -42 89 -36) -42]
Test Case: 404 | Input/Output: [(-87 -17 -33 90) -87]
Test Case: 405 | Input/Output: [(-60 14 59 -44) -60]
Test Case: 406 | Input/Output: [(49 -17 -37 28) -37]
Test Case: 407 | Input/Output: [(-77 -47 -88 -82) -88]
Test Case: 408 | Input/Output: [(59 -20 17 -27) -27]
Test Case: 409 | Input/Output: [(31 94 -61 77) -61]
Test Case: 410 | Input/Output: [(-74 10 -76 21) -76]
Test Case: 411 | Input/Output: [(-50 -33 -95 43) -95]
Test Case: 412 | Input/Output: [(61 45 74 -84) -84]
Test Case: 413 | Input/Output: [(61 31 -50 3) -50]
Test Case: 414 | Input/Output: [(32 84 -26 73) -26]
Test Case: 415 | Input/Output: [(36 -88 -23 54) -88]
Test Case: 416 | Input/Output: [(32 -66 -38 -70) -70]
Test Case: 417 | Input/Output: [(-19 -19 -84 -44) -84]
Test Case: 418 | Input/Output: [(39 -15 -77 98) -77]
Test Case: 419 | Input/Output: [(61 -19 -48 -91) -91]
Test Case: 420 | Input/Output: [(-47 69 64 -64) -64]
Test Case: 421 | Input/Output: [(-27 -55 64 35) -55]
Test Case: 422 | Input/Output: [(28 23 -78 -92) -92]
Test Case: 423 | Input/Output: [(2 58 -27 90) -27]
Test Case: 424 | Input/Output: [(-3 0 -10 -7) -10]
Test Case: 425 | Input/Output: [(94 14 -84 -32) -84]
Test Case: 426 | Input/Output: [(35 32 -81 38) -81]
Test Case: 427 | Input/Output: [(-9 -93 28 62) -93]
Test Case: 428 | Input/Output: [(14 50 -16 -39) -39]
Test Case: 429 | Input/Output: [(-86 -35 6 -68) -86]
Test Case: 430 | Input/Output: [(0 86 51 52) 0]
Test Case: 431 | Input/Output: [(-67 55 2 67) -67]
Test Case: 432 | Input/Output: [(-42 -1 15 57) -42]
Test Case: 433 | Input/Output: [(21 -47 -87 -64) -87]
Test Case: 434 | Input/Output: [(-44 74 80 -53) -53]
Test Case: 435 | Input/Output: [(12 11 -4 62) -4]
Test Case: 436 | Input/Output: [(-75 -95 -58 -78) -95]
Test Case: 437 | Input/Output: [(-40 3 -8 -36) -40]
Test Case: 438 | Input/Output: [(79 -8 100 13) -8]
Test Case: 439 | Input/Output: [(-75 47 13 -100) -100]
Test Case: 440 | Input/Output: [(-34 -16 -71 -32) -71]
Test Case: 441 | Input/Output: [(-78 -59 -52 85) -78]
Test Case: 442 | Input/Output: [(-57 -98 -29 -79) -98]
Test Case: 443 | Input/Output: [(58 52 -12 -36) -36]
Test Case: 444 | Input/Output: [(-63 59 -89 -84) -89]
Test Case: 445 | Input/Output: [(-42 -65 59 58) -65]
Test Case: 446 | Input/Output: [(8 -30 -25 3) -30]
Test Case: 447 | Input/Output: [(31 90 51 3) 3]
Test Case: 448 | Input/Output: [(-27 38 85 -24) -27]
Test Case: 449 | Input/Output: [(-87 86 93 59) -87]
Test Case: 450 | Input/Output: [(-72 -72 85 85) -72]
Test Case: 451 | Input/Output: [(18 -26 -74 76) -74]
Test Case: 452 | Input/Output: [(92 43 46 -7) -7]
Test Case: 453 | Input/Output: [(77 -37 5 96) -37]
Test Case: 454 | Input/Output: [(12 94 62 48) 12]
Test Case: 455 | Input/Output: [(-28 -29 89 -85) -85]
Test Case: 456 | Input/Output: [(29 6 60 89) 6]
Test Case: 457 | Input/Output: [(-93 68 -88 -63) -93]
Test Case: 458 | Input/Output: [(-25 -15 -44 46) -44]
Test Case: 459 | Input/Output: [(-59 -52 62 -30) -59]
Test Case: 460 | Input/Output: [(33 -56 -80 -11) -80]
Test Case: 461 | Input/Output: [(67 -18 52 -51) -51]
Test Case: 462 | Input/Output: [(-40 14 -96 -51) -96]
Test Case: 463 | Input/Output: [(-95 35 98 52) -95]
Test Case: 464 | Input/Output: [(77 -88 83 -23) -88]
Test Case: 465 | Input/Output: [(30 -67 71 -40) -67]
Test Case: 466 | Input/Output: [(47 33 -94 71) -94]
Test Case: 467 | Input/Output: [(57 17 -97 61) -97]
Test Case: 468 | Input/Output: [(1 16 0 -60) -60]
Test Case: 469 | Input/Output: [(34 -70 27 80) -70]
Test Case: 470 | Input/Output: [(41 -50 -48 -70) -70]
Test Case: 471 | Input/Output: [(-23 41 46 99) -23]
Test Case: 472 | Input/Output: [(7 94 -71 -50) -71]
Test Case: 473 | Input/Output: [(95 -18 81 56) -18]
Test Case: 474 | Input/Output: [(-62 12 79 46) -62]
Test Case: 475 | Input/Output: [(-24 28 -23 -53) -53]
Test Case: 476 | Input/Output: [(-84 -57 74 -66) -84]
Test Case: 477 | Input/Output: [(-95 63 97 71) -95]
Test Case: 478 | Input/Output: [(68 14 29 -23) -23]
Test Case: 479 | Input/Output: [(-76 -16 -47 -7) -76]
Test Case: 480 | Input/Output: [(-75 -64 12 -63) -75]
Test Case: 481 | Input/Output: [(29 -2 -94 1) -94]
Test Case: 482 | Input/Output: [(64 91 -10 -56) -56]
Test Case: 483 | Input/Output: [(-1 48 72 -97) -97]
Test Case: 484 | Input/Output: [(-38 -8 -9 -75) -75]
Test Case: 485 | Input/Output: [(71 -60 3 6) -60]
Test Case: 486 | Input/Output: [(-54 -82 79 -100) -100]
Test Case: 487 | Input/Output: [(-71 72 -50 74) -71]
Test Case: 488 | Input/Output: [(-100 45 53 -9) -100]
Test Case: 489 | Input/Output: [(38 60 41 -20) -20]
Test Case: 490 | Input/Output: [(73 -90 60 -7) -90]
Test Case: 491 | Input/Output: [(19 20 -11 37) -11]
Test Case: 492 | Input/Output: [(-88 43 -4 -43) -88]
Test Case: 493 | Input/Output: [(-59 87 -45 -38) -59]
Test Case: 494 | Input/Output: [(-74 36 75 -74) -74]
Test Case: 495 | Input/Output: [(47 -37 13 -62) -62]
Test Case: 496 | Input/Output: [(-68 57 84 17) -68]
Test Case: 497 | Input/Output: [(93 -95 26 81) -95]
Test Case: 498 | Input/Output: [(-15 -2 15 65) -15]
Test Case: 499 | Input/Output: [(-70 -53 16 -61) -70]
Test Case: 500 | Input/Output: [(-83 83 -51 -19) -83]
Test Case: 501 | Input/Output: [(75 -12 19 61) -12]
Test Case: 502 | Input/Output: [(79 24 -70 -53) -70]
Test Case: 503 | Input/Output: [(-70 19 -43 88) -70]
Test Case: 504 | Input/Output: [(-39 14 -64 -31) -64]
Test Case: 505 | Input/Output: [(42 99 31 61) 31]
Test Case: 506 | Input/Output: [(56 -25 -93 -39) -93]
Test Case: 507 | Input/Output: [(82 -53 42 50) -53]
Test Case: 508 | Input/Output: [(7 92 -72 -45) -72]
Test Case: 509 | Input/Output: [(85 -75 -49 -23) -75]
Test Case: 510 | Input/Output: [(7 -32 74 82) -32]
Test Case: 511 | Input/Output: [(44 61 -62 23) -62]
Test Case: 512 | Input/Output: [(63 27 -18 50) -18]
Test Case: 513 | Input/Output: [(24 -81 -92 -42) -92]
Test Case: 514 | Input/Output: [(-38 28 57 -43) -43]
Test Case: 515 | Input/Output: [(61 -19 -10 -70) -70]
Test Case: 516 | Input/Output: [(-31 -44 -36 -51) -51]
Test Case: 517 | Input/Output: [(18 55 -85 -96) -96]
Test Case: 518 | Input/Output: [(-43 -68 67 -62) -68]
Test Case: 519 | Input/Output: [(-55 -48 -91 -53) -91]
Test Case: 520 | Input/Output: [(17 80 59 46) 17]
Test Case: 521 | Input/Output: [(25 97 38 -100) -100]
Test Case: 522 | Input/Output: [(-34 70 61 71) -34]
Test Case: 523 | Input/Output: [(-90 70 46 65) -90]
Test Case: 524 | Input/Output: [(19 51 61 82) 19]
Test Case: 525 | Input/Output: [(-76 8 -64 -57) -76]
Test Case: 526 | Input/Output: [(-34 -15 -99 85) -99]
Test Case: 527 | Input/Output: [(67 -18 97 1) -18]
Test Case: 528 | Input/Output: [(-28 -37 -89 36) -89]
Test Case: 529 | Input/Output: [(-47 -71 -99 22) -99]
Test Case: 530 | Input/Output: [(81 -88 -60 -98) -98]
Test Case: 531 | Input/Output: [(-32 83 98 -10) -32]
Test Case: 532 | Input/Output: [(98 72 -98 15) -98]
Test Case: 533 | Input/Output: [(-62 88 -46 96) -62]
Test Case: 534 | Input/Output: [(74 -30 57 -98) -98]
Test Case: 535 | Input/Output: [(26 57 -32 -95) -95]
Test Case: 536 | Input/Output: [(-78 58 -68 -34) -78]
Test Case: 537 | Input/Output: [(9 0 97 -67) -67]
Test Case: 538 | Input/Output: [(-9 29 30 78) -9]
Test Case: 539 | Input/Output: [(-85 10 -78 39) -85]
Test Case: 540 | Input/Output: [(78 -67 -14 -46) -67]
Test Case: 541 | Input/Output: [(-69 29 31 -92) -92]
Test Case: 542 | Input/Output: [(25 -24 -95 60) -95]
Test Case: 543 | Input/Output: [(-55 -77 10 -14) -77]
Test Case: 544 | Input/Output: [(-9 -72 -38 66) -72]
Test Case: 545 | Input/Output: [(-34 -94 15 -83) -94]
Test Case: 546 | Input/Output: [(74 68 4 -88) -88]
Test Case: 547 | Input/Output: [(-89 73 62 78) -89]
Test Case: 548 | Input/Output: [(40 45 76 -100) -100]
Test Case: 549 | Input/Output: [(52 -3 99 -63) -63]
Test Case: 550 | Input/Output: [(14 78 41 53) 14]
Test Case: 551 | Input/Output: [(92 74 -38 -29) -38]
Test Case: 552 | Input/Output: [(0 87 49 -86) -86]
Test Case: 553 | Input/Output: [(-79 39 -58 -68) -79]
Test Case: 554 | Input/Output: [(53 21 49 67) 21]
Test Case: 555 | Input/Output: [(-95 91 85 65) -95]
Test Case: 556 | Input/Output: [(69 41 -50 -98) -98]
Test Case: 557 | Input/Output: [(80 -24 -32 -17) -32]
Test Case: 558 | Input/Output: [(15 -16 -24 32) -24]
Test Case: 559 | Input/Output: [(61 37 48 -61) -61]
Test Case: 560 | Input/Output: [(62 16 54 57) 16]
Test Case: 561 | Input/Output: [(-96 46 44 70) -96]
Test Case: 562 | Input/Output: [(-52 70 -66 -90) -90]
Test Case: 563 | Input/Output: [(39 98 -54 -52) -54]
Test Case: 564 | Input/Output: [(87 -52 -23 -79) -79]
Test Case: 565 | Input/Output: [(44 89 87 -6) -6]
Test Case: 566 | Input/Output: [(36 92 -73 -22) -73]
Test Case: 567 | Input/Output: [(-79 -88 12 56) -88]
Test Case: 568 | Input/Output: [(53 -27 -24 -91) -91]
Test Case: 569 | Input/Output: [(-80 78 9 67) -80]
Test Case: 570 | Input/Output: [(19 -17 -41 82) -41]
Test Case: 571 | Input/Output: [(51 0 85 -98) -98]
Test Case: 572 | Input/Output: [(-12 -47 21 -75) -75]
Test Case: 573 | Input/Output: [(-64 63 -100 -64) -100]
Test Case: 574 | Input/Output: [(32 43 -82 -11) -82]
Test Case: 575 | Input/Output: [(-63 49 -43 51) -63]
Test Case: 576 | Input/Output: [(37 40 -87 11) -87]
Test Case: 577 | Input/Output: [(82 -68 30 51) -68]
Test Case: 578 | Input/Output: [(32 38 9 29) 9]
Test Case: 579 | Input/Output: [(-85 79 -9 -31) -85]
Test Case: 580 | Input/Output: [(-55 14 -1 -61) -61]
Test Case: 581 | Input/Output: [(40 -95 72 -71) -95]
Test Case: 582 | Input/Output: [(85 -84 -64 -46) -84]
Test Case: 583 | Input/Output: [(86 3 -58 -17) -58]
Test Case: 584 | Input/Output: [(81 -28 71 83) -28]
Test Case: 585 | Input/Output: [(-47 -39 -89 61) -89]
Test Case: 586 | Input/Output: [(61 -86 54 1) -86]
Test Case: 587 | Input/Output: [(62 -33 -34 54) -34]
Test Case: 588 | Input/Output: [(-74 49 -75 90) -75]
Test Case: 589 | Input/Output: [(-13 -73 14 -82) -82]
Test Case: 590 | Input/Output: [(-84 3 64 -79) -84]
Test Case: 591 | Input/Output: [(36 -90 -90 -23) -90]
Test Case: 592 | Input/Output: [(-89 -73 -73 34) -89]
Test Case: 593 | Input/Output: [(95 7 -94 -93) -94]
Test Case: 594 | Input/Output: [(41 39 94 24) 24]
Test Case: 595 | Input/Output: [(73 88 86 -73) -73]
Test Case: 596 | Input/Output: [(-65 -34 -55 -18) -65]
Test Case: 597 | Input/Output: [(68 48 -81 100) -81]
Test Case: 598 | Input/Output: [(-82 55 -41 6) -82]
Test Case: 599 | Input/Output: [(0 -67 58 47) -67]
Test Case: 600 | Input/Output: [(-16 -7 -48 86) -48]
Test Case: 601 | Input/Output: [(43 99 39 7) 7]
Test Case: 602 | Input/Output: [(-74 9 23 -42) -74]
Test Case: 603 | Input/Output: [(-39 84 24 -96) -96]
Test Case: 604 | Input/Output: [(53 -57 -37 -9) -57]
Test Case: 605 | Input/Output: [(27 -22 -67 -19) -67]
Test Case: 606 | Input/Output: [(71 37 -96 -16) -96]
Test Case: 607 | Input/Output: [(73 -93 -47 54) -93]
Test Case: 608 | Input/Output: [(88 -25 63 40) -25]
Test Case: 609 | Input/Output: [(56 -35 95 -100) -100]
Test Case: 610 | Input/Output: [(-90 -94 -33 62) -94]
Test Case: 611 | Input/Output: [(61 21 84 55) 21]
Test Case: 612 | Input/Output: [(-33 31 14 -77) -77]
Test Case: 613 | Input/Output: [(-68 78 -2 48) -68]
Test Case: 614 | Input/Output: [(34 1 -62 -70) -70]
Test Case: 615 | Input/Output: [(-58 8 3 -28) -58]
Test Case: 616 | Input/Output: [(65 44 -52 2) -52]
Test Case: 617 | Input/Output: [(-51 -75 -75 -3) -75]
Test Case: 618 | Input/Output: [(-41 22 57 -40) -41]
Test Case: 619 | Input/Output: [(-56 -80 -43 -30) -80]
Test Case: 620 | Input/Output: [(53 -51 35 -56) -56]
Test Case: 621 | Input/Output: [(-39 65 89 -67) -67]
Test Case: 622 | Input/Output: [(-40 30 -11 35) -40]
Test Case: 623 | Input/Output: [(71 -54 -23 76) -54]
Test Case: 624 | Input/Output: [(-30 -61 -27 -5) -61]
Test Case: 625 | Input/Output: [(72 47 1 -51) -51]
Test Case: 626 | Input/Output: [(7 25 -60 60) -60]
Test Case: 627 | Input/Output: [(-89 -45 -23 -84) -89]
Test Case: 628 | Input/Output: [(-35 96 44 73) -35]
Test Case: 629 | Input/Output: [(-9 -45 -90 17) -90]
Test Case: 630 | Input/Output: [(-86 -32 -15 33) -86]
Test Case: 631 | Input/Output: [(77 -58 -14 -47) -58]
Test Case: 632 | Input/Output: [(59 12 35 80) 12]
Test Case: 633 | Input/Output: [(-61 -21 60 -86) -86]
Test Case: 634 | Input/Output: [(98 -58 -37 -38) -58]
Test Case: 635 | Input/Output: [(-35 3 -15 -1) -35]
Test Case: 636 | Input/Output: [(86 -88 -45 64) -88]
Test Case: 637 | Input/Output: [(87 77 -15 76) -15]
Test Case: 638 | Input/Output: [(-8 -15 -53 30) -53]
Test Case: 639 | Input/Output: [(96 -51 -78 -84) -84]
Test Case: 640 | Input/Output: [(-12 -86 -64 -82) -86]
Test Case: 641 | Input/Output: [(91 43 -31 -56) -56]
Test Case: 642 | Input/Output: [(69 28 -35 100) -35]
Test Case: 643 | Input/Output: [(89 -67 -79 100) -79]
Test Case: 644 | Input/Output: [(90 -30 -6 -56) -56]
Test Case: 645 | Input/Output: [(20 -56 83 78) -56]
Test Case: 646 | Input/Output: [(39 -47 -24 -35) -47]
Test Case: 647 | Input/Output: [(95 67 94 -68) -68]
Test Case: 648 | Input/Output: [(-20 31 81 -9) -20]
Test Case: 649 | Input/Output: [(22 -75 30 53) -75]
Test Case: 650 | Input/Output: [(-27 -14 77 -58) -58]
Test Case: 651 | Input/Output: [(-45 -4 49 29) -45]
Test Case: 652 | Input/Output: [(-52 69 63 -7) -52]
Test Case: 653 | Input/Output: [(46 -92 84 38) -92]
Test Case: 654 | Input/Output: [(80 -50 65 19) -50]
Test Case: 655 | Input/Output: [(62 -78 -3 91) -78]
Test Case: 656 | Input/Output: [(48 -95 37 -48) -95]
Test Case: 657 | Input/Output: [(58 21 70 -4) -4]
Test Case: 658 | Input/Output: [(-11 -22 -57 -32) -57]
Test Case: 659 | Input/Output: [(-86 20 57 -71) -86]
Test Case: 660 | Input/Output: [(-91 -15 4 41) -91]
Test Case: 661 | Input/Output: [(-33 37 -2 93) -33]
Test Case: 662 | Input/Output: [(-31 83 -39 -50) -50]
Test Case: 663 | Input/Output: [(22 -31 -35 -31) -35]
Test Case: 664 | Input/Output: [(90 -39 10 91) -39]
Test Case: 665 | Input/Output: [(46 53 -18 5) -18]
Test Case: 666 | Input/Output: [(93 78 -44 46) -44]
Test Case: 667 | Input/Output: [(49 -38 -38 -20) -38]
Test Case: 668 | Input/Output: [(-46 27 56 27) -46]
Test Case: 669 | Input/Output: [(44 -59 -63 6) -63]
Test Case: 670 | Input/Output: [(-93 65 68 41) -93]
Test Case: 671 | Input/Output: [(-60 -78 -48 49) -78]
Test Case: 672 | Input/Output: [(-81 -91 95 29) -91]
Test Case: 673 | Input/Output: [(33 14 -5 75) -5]
Test Case: 674 | Input/Output: [(64 -31 -11 63) -31]
Test Case: 675 | Input/Output: [(17 65 -66 64) -66]
Test Case: 676 | Input/Output: [(-68 -87 -85 -44) -87]
Test Case: 677 | Input/Output: [(-75 5 -79 95) -79]
Test Case: 678 | Input/Output: [(74 -72 -83 55) -83]
Test Case: 679 | Input/Output: [(-26 30 -62 56) -62]
Test Case: 680 | Input/Output: [(51 -22 -14 -51) -51]
Test Case: 681 | Input/Output: [(-26 -26 -46 -82) -82]
Test Case: 682 | Input/Output: [(88 -92 -21 25) -92]
Test Case: 683 | Input/Output: [(43 -17 22 8) -17]
Test Case: 684 | Input/Output: [(38 -92 -7 -12) -92]
Test Case: 685 | Input/Output: [(-27 -94 5 -89) -94]
Test Case: 686 | Input/Output: [(-100 -17 84 66) -100]
Test Case: 687 | Input/Output: [(95 -29 89 28) -29]
Test Case: 688 | Input/Output: [(-92 -9 65 1) -92]
Test Case: 689 | Input/Output: [(-25 29 59 -68) -68]
Test Case: 690 | Input/Output: [(36 -48 -28 -85) -85]
Test Case: 691 | Input/Output: [(22 94 -4 -50) -50]
Test Case: 692 | Input/Output: [(-97 4 -64 72) -97]
Test Case: 693 | Input/Output: [(-74 35 -41 29) -74]
Test Case: 694 | Input/Output: [(-67 -80 -68 -95) -95]
Test Case: 695 | Input/Output: [(-90 21 -29 60) -90]
Test Case: 696 | Input/Output: [(-100 -45 2 67) -100]
Test Case: 697 | Input/Output: [(-89 100 31 34) -89]
Test Case: 698 | Input/Output: [(56 62 81 19) 19]
Test Case: 699 | Input/Output: [(22 -42 71 -73) -73]
Test Case: 700 | Input/Output: [(76 -31 -83 6) -83]
Test Case: 701 | Input/Output: [(-33 -57 -11 95) -57]
Test Case: 702 | Input/Output: [(1 76 66 90) 1]
Test Case: 703 | Input/Output: [(-73 97 58 -54) -73]
Test Case: 704 | Input/Output: [(-10 21 -50 18) -50]
Test Case: 705 | Input/Output: [(-18 29 -13 -84) -84]
Test Case: 706 | Input/Output: [(91 -45 -61 19) -61]
Test Case: 707 | Input/Output: [(-2 -2 15 -33) -33]
Test Case: 708 | Input/Output: [(-32 72 86 -45) -45]
Test Case: 709 | Input/Output: [(51 35 -53 2) -53]
Test Case: 710 | Input/Output: [(25 -32 60 52) -32]
Test Case: 711 | Input/Output: [(2 52 -95 -84) -95]
Test Case: 712 | Input/Output: [(-23 -49 77 -70) -70]
Test Case: 713 | Input/Output: [(53 8 -89 71) -89]
Test Case: 714 | Input/Output: [(75 55 -29 -83) -83]
Test Case: 715 | Input/Output: [(76 61 30 -66) -66]
Test Case: 716 | Input/Output: [(89 52 -70 -63) -70]
Test Case: 717 | Input/Output: [(31 70 -19 -79) -79]
Test Case: 718 | Input/Output: [(20 86 44 -99) -99]
Test Case: 719 | Input/Output: [(63 -86 79 -25) -86]
Test Case: 720 | Input/Output: [(9 -95 -10 22) -95]
Test Case: 721 | Input/Output: [(-40 60 92 -29) -40]
Test Case: 722 | Input/Output: [(28 89 74 -75) -75]
Test Case: 723 | Input/Output: [(62 74 -94 71) -94]
Test Case: 724 | Input/Output: [(19 10 -44 74) -44]
Test Case: 725 | Input/Output: [(66 97 -34 63) -34]
Test Case: 726 | Input/Output: [(70 48 45 -75) -75]
Test Case: 727 | Input/Output: [(30 -93 -97 -6) -97]
Test Case: 728 | Input/Output: [(65 -98 -29 -25) -98]
Test Case: 729 | Input/Output: [(-33 10 -56 57) -56]
Test Case: 730 | Input/Output: [(35 53 77 59) 35]
Test Case: 731 | Input/Output: [(15 89 63 -72) -72]
Test Case: 732 | Input/Output: [(16 55 -2 -67) -67]
Test Case: 733 | Input/Output: [(-84 -20 -39 -37) -84]
Test Case: 734 | Input/Output: [(-48 74 11 7) -48]
Test Case: 735 | Input/Output: [(-74 54 -53 39) -74]
Test Case: 736 | Input/Output: [(66 45 11 -71) -71]
Test Case: 737 | Input/Output: [(7 72 0 26) 0]
Test Case: 738 | Input/Output: [(11 60 -30 -79) -79]
Test Case: 739 | Input/Output: [(86 -14 41 81) -14]
Test Case: 740 | Input/Output: [(-58 -85 58 78) -85]
Test Case: 741 | Input/Output: [(-92 68 -8 25) -92]
Test Case: 742 | Input/Output: [(-45 -23 6 -52) -52]
Test Case: 743 | Input/Output: [(-14 81 69 47) -14]
Test Case: 744 | Input/Output: [(-52 -52 -83 -15) -83]
Test Case: 745 | Input/Output: [(-34 65 17 -93) -93]
Test Case: 746 | Input/Output: [(54 47 -22 21) -22]
Test Case: 747 | Input/Output: [(83 51 -76 -95) -95]
Test Case: 748 | Input/Output: [(64 20 -87 -65) -87]
Test Case: 749 | Input/Output: [(64 -63 -57 -47) -63]
Test Case: 750 | Input/Output: [(-30 -52 100 55) -52]
Test Case: 751 | Input/Output: [(33 64 -83 -36) -83]
Test Case: 752 | Input/Output: [(85 44 -38 -74) -74]
Test Case: 753 | Input/Output: [(22 -46 -54 52) -54]
Test Case: 754 | Input/Output: [(27 30 -98 -44) -98]
Test Case: 755 | Input/Output: [(-52 -16 19 58) -52]
Test Case: 756 | Input/Output: [(32 -61 90 78) -61]
Test Case: 757 | Input/Output: [(0 94 3 95) 0]
Test Case: 758 | Input/Output: [(61 49 5 53) 5]
Test Case: 759 | Input/Output: [(62 -14 37 -94) -94]
Test Case: 760 | Input/Output: [(-35 28 72 -40) -40]
Test Case: 761 | Input/Output: [(-91 86 -78 54) -91]
Test Case: 762 | Input/Output: [(69 46 32 -14) -14]
Test Case: 763 | Input/Output: [(-25 -84 -38 55) -84]
Test Case: 764 | Input/Output: [(72 31 76 -33) -33]
Test Case: 765 | Input/Output: [(-78 -98 -96 28) -98]
Test Case: 766 | Input/Output: [(-13 33 -5 -36) -36]
Test Case: 767 | Input/Output: [(-72 94 45 97) -72]
Test Case: 768 | Input/Output: [(-41 -58 -24 18) -58]
Test Case: 769 | Input/Output: [(-60 -34 -76 97) -76]
Test Case: 770 | Input/Output: [(-73 28 1 32) -73]
Test Case: 771 | Input/Output: [(-69 -63 35 72) -69]
Test Case: 772 | Input/Output: [(-25 -98 12 -64) -98]
Test Case: 773 | Input/Output: [(66 74 56 -96) -96]
Test Case: 774 | Input/Output: [(-25 43 -50 78) -50]
Test Case: 775 | Input/Output: [(52 16 58 -38) -38]
Test Case: 776 | Input/Output: [(33 12 -39 -34) -39]
Test Case: 777 | Input/Output: [(0 -23 -98 -42) -98]
Test Case: 778 | Input/Output: [(15 46 -12 36) -12]
Test Case: 779 | Input/Output: [(-41 -83 88 -53) -83]
Test Case: 780 | Input/Output: [(60 -65 97 -20) -65]
Test Case: 781 | Input/Output: [(-36 -26 60 92) -36]
Test Case: 782 | Input/Output: [(-3 71 -93 51) -93]
Test Case: 783 | Input/Output: [(0 86 -54 -59) -59]
Test Case: 784 | Input/Output: [(38 11 -30 -47) -47]
Test Case: 785 | Input/Output: [(66 -77 -90 -45) -90]
Test Case: 786 | Input/Output: [(66 -60 -72 -9) -72]
Test Case: 787 | Input/Output: [(-31 -23 -86 -92) -92]
Test Case: 788 | Input/Output: [(-37 -37 4 27) -37]
Test Case: 789 | Input/Output: [(79 -43 28 -10) -43]
Test Case: 790 | Input/Output: [(62 6 -47 -71) -71]
Test Case: 791 | Input/Output: [(62 -53 -84 -24) -84]
Test Case: 792 | Input/Output: [(-98 76 -96 29) -98]
Test Case: 793 | Input/Output: [(-19 37 62 -48) -48]
Test Case: 794 | Input/Output: [(9 -63 -38 97) -63]
Test Case: 795 | Input/Output: [(64 -69 83 -23) -69]
Test Case: 796 | Input/Output: [(-71 3 -16 -49) -71]
Test Case: 797 | Input/Output: [(-95 35 -39 -38) -95]
Test Case: 798 | Input/Output: [(69 -61 92 49) -61]
Test Case: 799 | Input/Output: [(-46 -85 -38 79) -85]
Test Case: 800 | Input/Output: [(-55 -81 -36 48) -81]
Test Case: 801 | Input/Output: [(-52 21 -100 -9) -100]
Test Case: 802 | Input/Output: [(-46 71 94 28) -46]
Test Case: 803 | Input/Output: [(15 31 -12 -34) -34]
Test Case: 804 | Input/Output: [(-75 -83 4 77) -83]
Test Case: 805 | Input/Output: [(-5 -91 9 77) -91]
Test Case: 806 | Input/Output: [(-92 -59 65 44) -92]
Test Case: 807 | Input/Output: [(88 98 -13 35) -13]
Test Case: 808 | Input/Output: [(-19 -14 54 -42) -42]
Test Case: 809 | Input/Output: [(4 68 -29 -52) -52]
Test Case: 810 | Input/Output: [(-52 -63 -43 -11) -63]
Test Case: 811 | Input/Output: [(-38 -92 -37 93) -92]
Test Case: 812 | Input/Output: [(0 57 11 83) 0]
Test Case: 813 | Input/Output: [(-64 4 15 32) -64]
Test Case: 814 | Input/Output: [(27 69 22 66) 22]
Test Case: 815 | Input/Output: [(-46 -86 70 47) -86]
Test Case: 816 | Input/Output: [(-19 -56 88 36) -56]
Test Case: 817 | Input/Output: [(65 -32 -14 -7) -32]
Test Case: 818 | Input/Output: [(-72 -50 92 -62) -72]
Test Case: 819 | Input/Output: [(-47 -42 -94 -6) -94]
Test Case: 820 | Input/Output: [(-1 -9 -93 30) -93]
Test Case: 821 | Input/Output: [(19 0 -12 82) -12]
Test Case: 822 | Input/Output: [(38 8 -78 86) -78]
Test Case: 823 | Input/Output: [(42 -76 78 42) -76]
Test Case: 824 | Input/Output: [(16 -72 -56 41) -72]
Test Case: 825 | Input/Output: [(-64 -14 38 -76) -76]
Test Case: 826 | Input/Output: [(-53 -81 41 -83) -83]
Test Case: 827 | Input/Output: [(-59 10 32 -2) -59]
Test Case: 828 | Input/Output: [(-26 -87 -25 32) -87]
Test Case: 829 | Input/Output: [(92 -27 -45 1) -45]
Test Case: 830 | Input/Output: [(-22 46 -44 71) -44]
Test Case: 831 | Input/Output: [(-54 -59 -14 -27) -59]
Test Case: 832 | Input/Output: [(-58 -19 -98 67) -98]
Test Case: 833 | Input/Output: [(-96 -97 -93 -8) -97]
Test Case: 834 | Input/Output: [(-24 18 15 -6) -24]
Test Case: 835 | Input/Output: [(15 -88 50 -48) -88]
Test Case: 836 | Input/Output: [(73 20 -29 -92) -92]
Test Case: 837 | Input/Output: [(-14 68 86 -18) -18]
Test Case: 838 | Input/Output: [(-81 58 15 80) -81]
Test Case: 839 | Input/Output: [(-58 6 -72 -9) -72]
Test Case: 840 | Input/Output: [(-90 -36 65 -36) -90]
Test Case: 841 | Input/Output: [(-76 58 -62 16) -76]
Test Case: 842 | Input/Output: [(53 -86 -76 49) -86]
Test Case: 843 | Input/Output: [(70 48 67 61) 48]
Test Case: 844 | Input/Output: [(-62 -71 59 -11) -71]
Test Case: 845 | Input/Output: [(24 -86 -6 74) -86]
Test Case: 846 | Input/Output: [(-9 54 83 46) -9]
Test Case: 847 | Input/Output: [(-3 -24 -31 -11) -31]
Test Case: 848 | Input/Output: [(-56 -9 -22 57) -56]
Test Case: 849 | Input/Output: [(-69 20 -61 13) -69]
Test Case: 850 | Input/Output: [(-37 -86 -50 -38) -86]
Test Case: 851 | Input/Output: [(77 22 -27 -77) -77]
Test Case: 852 | Input/Output: [(-39 -25 81 -13) -39]
Test Case: 853 | Input/Output: [(20 43 -20 100) -20]
Test Case: 854 | Input/Output: [(-16 35 -63 8) -63]
Test Case: 855 | Input/Output: [(-50 -76 -21 -95) -95]
Test Case: 856 | Input/Output: [(-77 12 30 -56) -77]
Test Case: 857 | Input/Output: [(-43 20 -83 -38) -83]
Test Case: 858 | Input/Output: [(-64 -1 9 74) -64]
Test Case: 859 | Input/Output: [(15 -57 -33 -39) -57]
Test Case: 860 | Input/Output: [(44 97 89 96) 44]
Test Case: 861 | Input/Output: [(-42 -82 8 -50) -82]
Test Case: 862 | Input/Output: [(-17 -45 -6 51) -45]
Test Case: 863 | Input/Output: [(-56 -77 61 -16) -77]
Test Case: 864 | Input/Output: [(-95 -96 -58 30) -96]
Test Case: 865 | Input/Output: [(-20 33 15 9) -20]
Test Case: 866 | Input/Output: [(-8 27 -61 -94) -94]
Test Case: 867 | Input/Output: [(-41 99 31 -94) -94]
Test Case: 868 | Input/Output: [(-32 -46 25 54) -46]
Test Case: 869 | Input/Output: [(-84 82 -43 -60) -84]
Test Case: 870 | Input/Output: [(-53 28 -93 -66) -93]
Test Case: 871 | Input/Output: [(52 -93 49 66) -93]
Test Case: 872 | Input/Output: [(27 -68 23 -60) -68]
Test Case: 873 | Input/Output: [(-86 94 -88 16) -88]
Test Case: 874 | Input/Output: [(-82 96 84 18) -82]
Test Case: 875 | Input/Output: [(7 83 57 -40) -40]
Test Case: 876 | Input/Output: [(-90 66 -17 -71) -90]
Test Case: 877 | Input/Output: [(-82 16 76 -91) -91]
Test Case: 878 | Input/Output: [(89 -72 -69 -42) -72]
Test Case: 879 | Input/Output: [(-61 72 53 -67) -67]
Test Case: 880 | Input/Output: [(7 -49 -28 -8) -49]
Test Case: 881 | Input/Output: [(20 98 -5 -60) -60]
Test Case: 882 | Input/Output: [(-37 -17 8 -12) -37]
Test Case: 883 | Input/Output: [(-92 71 -37 -32) -92]
Test Case: 884 | Input/Output: [(-97 94 -38 -37) -97]
Test Case: 885 | Input/Output: [(22 41 50 -23) -23]
Test Case: 886 | Input/Output: [(49 50 12 16) 12]
Test Case: 887 | Input/Output: [(5 25 34 76) 5]
Test Case: 888 | Input/Output: [(-90 60 0 -43) -90]
Test Case: 889 | Input/Output: [(-23 -11 7 74) -23]
Test Case: 890 | Input/Output: [(61 -75 8 -75) -75]
Test Case: 891 | Input/Output: [(-54 99 93 52) -54]
Test Case: 892 | Input/Output: [(-27 57 11 39) -27]
Test Case: 893 | Input/Output: [(37 76 61 -14) -14]
Test Case: 894 | Input/Output: [(-8 -71 46 74) -71]
Test Case: 895 | Input/Output: [(-56 56 69 -95) -95]
Test Case: 896 | Input/Output: [(79 100 24 43) 24]
Test Case: 897 | Input/Output: [(-47 45 4 -86) -86]
Test Case: 898 | Input/Output: [(-70 89 -3 64) -70]
Test Case: 899 | Input/Output: [(-21 17 -81 -89) -89]
Test Case: 900 | Input/Output: [(94 -73 52 -40) -73]
Test Case: 901 | Input/Output: [(79 14 68 -15) -15]
Test Case: 902 | Input/Output: [(40 -59 94 26) -59]
Test Case: 903 | Input/Output: [(-95 95 37 80) -95]
Test Case: 904 | Input/Output: [(-52 67 79 -71) -71]
Test Case: 905 | Input/Output: [(60 74 84 -15) -15]
Test Case: 906 | Input/Output: [(45 95 -77 14) -77]
Test Case: 907 | Input/Output: [(9 7 28 38) 7]
Test Case: 908 | Input/Output: [(52 -90 -42 -55) -90]
Test Case: 909 | Input/Output: [(78 16 96 -26) -26]
Test Case: 910 | Input/Output: [(30 -58 -52 23) -58]
Test Case: 911 | Input/Output: [(-88 -70 74 41) -88]
Test Case: 912 | Input/Output: [(73 -62 -91 -12) -91]
Test Case: 913 | Input/Output: [(96 42 50 -31) -31]
Test Case: 914 | Input/Output: [(-49 71 100 21) -49]
Test Case: 915 | Input/Output: [(-12 76 -83 40) -83]
Test Case: 916 | Input/Output: [(-54 -73 70 29) -73]
Test Case: 917 | Input/Output: [(81 94 50 -96) -96]
Test Case: 918 | Input/Output: [(-48 -97 -34 -31) -97]
Test Case: 919 | Input/Output: [(-8 26 3 82) -8]
Test Case: 920 | Input/Output: [(-55 -69 -98 100) -98]
Test Case: 921 | Input/Output: [(85 -33 35 -7) -33]
Test Case: 922 | Input/Output: [(91 54 98 -24) -24]
Test Case: 923 | Input/Output: [(-17 37 -39 92) -39]
Test Case: 924 | Input/Output: [(7 -90 95 -37) -90]
Test Case: 925 | Input/Output: [(-41 -26 -30 -51) -51]
Test Case: 926 | Input/Output: [(-21 -99 46 -60) -99]
Test Case: 927 | Input/Output: [(49 -70 0 -93) -93]
Test Case: 928 | Input/Output: [(86 -78 -88 -78) -88]
Test Case: 929 | Input/Output: [(-52 -52 47 -49) -52]
Test Case: 930 | Input/Output: [(90 52 -49 20) -49]
Test Case: 931 | Input/Output: [(-51 6 -36 19) -51]
Test Case: 932 | Input/Output: [(-67 0 4 78) -67]
Test Case: 933 | Input/Output: [(-36 -76 -33 -27) -76]
Test Case: 934 | Input/Output: [(18 -89 3 62) -89]
Test Case: 935 | Input/Output: [(94 32 -68 67) -68]
Test Case: 936 | Input/Output: [(42 -76 -77 -38) -77]
Test Case: 937 | Input/Output: [(-83 -9 54 56) -83]
Test Case: 938 | Input/Output: [(53 -15 -43 11) -43]
Test Case: 939 | Input/Output: [(76 63 89 18) 18]
Test Case: 940 | Input/Output: [(45 24 46 -46) -46]
Test Case: 941 | Input/Output: [(14 -80 6 -53) -80]
Test Case: 942 | Input/Output: [(88 -2 40 -6) -6]
Test Case: 943 | Input/Output: [(-34 82 -7 -63) -63]
Test Case: 944 | Input/Output: [(-56 57 -87 -89) -89]
Test Case: 945 | Input/Output: [(-89 64 34 36) -89]
Test Case: 946 | Input/Output: [(6 35 66 -45) -45]
Test Case: 947 | Input/Output: [(-12 20 -47 20) -47]
Test Case: 948 | Input/Output: [(38 51 39 100) 38]
Test Case: 949 | Input/Output: [(-33 -59 -43 -49) -59]
Test Case: 950 | Input/Output: [(89 -53 43 8) -53]
Test Case: 951 | Input/Output: [(80 43 -38 -31) -38]
Test Case: 952 | Input/Output: [(-73 14 54 28) -73]
Test Case: 953 | Input/Output: [(-5 58 72 -36) -36]
Test Case: 954 | Input/Output: [(52 28 85 -15) -15]
Test Case: 955 | Input/Output: [(-9 -65 -28 55) -65]
Test Case: 956 | Input/Output: [(-46 46 -9 49) -46]
Test Case: 957 | Input/Output: [(4 23 6 16) 4]
Test Case: 958 | Input/Output: [(15 -86 -74 -66) -86]
Test Case: 959 | Input/Output: [(-43 78 -22 -60) -60]
Test Case: 960 | Input/Output: [(80 38 82 69) 38]
Test Case: 961 | Input/Output: [(5 30 2 14) 2]
Test Case: 962 | Input/Output: [(-38 14 35 96) -38]
Test Case: 963 | Input/Output: [(-7 50 -52 -57) -57]
Test Case: 964 | Input/Output: [(-33 -100 17 -59) -100]
Test Case: 965 | Input/Output: [(99 -45 42 -2) -45]
Test Case: 966 | Input/Output: [(93 6 -82 -90) -90]
Test Case: 967 | Input/Output: [(-84 -45 43 -12) -84]
Test Case: 968 | Input/Output: [(52 -66 12 8) -66]
Test Case: 969 | Input/Output: [(-72 95 14 74) -72]
Test Case: 970 | Input/Output: [(-30 9 64 73) -30]
Test Case: 971 | Input/Output: [(98 19 20 -6) -6]
Test Case: 972 | Input/Output: [(64 95 -67 -57) -67]
Test Case: 973 | Input/Output: [(-33 -8 46 37) -33]
Test Case: 974 | Input/Output: [(-4 45 20 6) -4]
Test Case: 975 | Input/Output: [(74 80 -21 44) -21]
Test Case: 976 | Input/Output: [(89 35 35 -77) -77]
Test Case: 977 | Input/Output: [(-75 -56 -46 87) -75]
Test Case: 978 | Input/Output: [(-42 -88 -10 55) -88]
Test Case: 979 | Input/Output: [(-22 -58 38 -30) -58]
Test Case: 980 | Input/Output: [(-83 -79 -94 -5) -94]
Test Case: 981 | Input/Output: [(52 -26 54 -63) -63]
Test Case: 982 | Input/Output: [(-21 86 37 -57) -57]
Test Case: 983 | Input/Output: [(83 83 -20 91) -20]
Test Case: 984 | Input/Output: [(-51 86 74 33) -51]
Test Case: 985 | Input/Output: [(-53 90 -41 -11) -53]
Test Case: 986 | Input/Output: [(-64 -30 91 -51) -64]
Test Case: 987 | Input/Output: [(-73 -24 -2 -96) -96]
Test Case: 988 | Input/Output: [(66 -75 5 -16) -75]
Test Case: 989 | Input/Output: [(35 -64 -99 -64) -99]
Test Case: 990 | Input/Output: [(-67 71 -62 -8) -67]
Test Case: 991 | Input/Output: [(85 -51 -27 -28) -51]
Test Case: 992 | Input/Output: [(100 71 -89 -62) -89]
Test Case: 993 | Input/Output: [(-61 -19 -62 2) -62]
Test Case: 994 | Input/Output: [(-63 0 6 -19) -63]
Test Case: 995 | Input/Output: [(-47 -5 76 -98) -98]
Test Case: 996 | Input/Output: [(-92 -23 -92 -33) -92]
Test Case: 997 | Input/Output: [(8 -86 -70 -67) -86]
Test Case: 998 | Input/Output: [(-78 44 45 56) -78]
Test Case: 999 | Input/Output: [(-23 -28 -83 -47) -83]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 47 67 11 58 107 -70 33 15 124 10 14 -89 45 -68 5 52
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[82 20 20 20] 20] [[-43 66 -43 -43] -43] [[96 -4 -4 -4] -4] [[100 -52 100 100] -52] [[-59 -59 -59 -12] -59] [[82 82 62 82] 62] [[93 -82 -82 -82] -82] [[-94 -94 -94 -87] -94] [[-89 92 92 92] -89] [[-85 -85 31 -85] -85] [(6 6 6 6) 6] [(-31 -31 -31 -31) -31] [(-36 -36 -36 -36) -36] [(-98 -98 -98 -98) -98] [(-66 -66 -66 -66) -66] [(17 77 41 77) 17] [(81 6 94 65) 6] [(82 70 26 2) 2] [(1 69 88 3) 1] [(8 2 73 42) 2] [(27 92 42 38) 27] [(42 12 35 83) 12] [(21 77 9 62) 9] [(31 38 38 66) 31] [(53 96 59 77) 53] [(18 0 7 4) 0] [(52 5 90 45) 5] [(11 44 42 85) 11] [(87 17 64 28) 17] [(1 58 47 28) 1] [(6 28 50 9) 6] [(52 38 8 37) 8] [(32 41 100 7) 7] [(79 78 2 54) 2] [(25 53 83 47) 25] [(-29 -70 -51 11) -70] [(-45 -81 -15 -73) -81] [(20 -48 -76 95) -76] [(-59 80 58 95) -59] [(42 49 39 -89) -89] [(12 76 -52 28) -52] [(88 97 -6 58) -6] [(-51 25 14 -12) -51] [(-98 82 44 62) -98] [(60 13 81 0) 0] [(30 72 47 -40) -40] [(-2 -60 0 61) -60] [(97 -62 20 0) -62] [(88 -95 48 -89) -95] [(-42 -92 28 -72) -92] [(-92 17 93 21) -92] [(-87 28 8 23) -87] [(23 -24 100 97) -24] [(90 -62 -25 -69) -69] [(81 32 -66 -76) -76] [(52 -28 -14 -27) -28] [(-26 -27 -48 -58) -58] [(-61 30 -92 57) -92] [(-72 -85 -68 -80) -85] [(-72 95 -15 -67) -72] [(54 -28 60 -62) -62] [(69 88 -98 34) -98] [(51 19 39 -100) -100] [(8 15 -29 -58) -58] [(-86 -82 55 -32) -86] [(-30 -25 -56 -79) -79] [(76 8 26 0) 0] [(-29 80 21 17) -29] [(-32 -12 -86 82) -86] [(54 86 -37 -96) -96] [(8 -32 91 -70) -70] [(-79 -19 71 17) -79] [(-63 72 20 11) -63] [(-50 -62 22 79) -62] [(-55 2 87 -83) -83] [(-76 80 -97 -58) -97] [(42 -53 75 -64) -64] [(-20 79 -67 -6) -67] [(-51 55 -7 -87) -87] [(-36 -4 53 0) -36] [(-5 14 -16 -63) -63] [(-81 22 -98 -38) -98] [(27 8 -22 15) -22] [(-40 19 47 31) -40] [(90 -56 -13 69) -56] [(30 19 42 -70) -70] [(36 -92 13 -9) -92] [(-22 -25 71 78) -25] [(-95 67 64 -85) -95] [(-73 55 -9 44) -73] [(-22 44 59 77) -22] [(54 11 50 -45) -45] [(-27 22 -16 -57) -57] [(71 59 52 70) 52] [(-16 -49 47 6) -49])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: 93                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 2, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_exec})
Lexicase best program: (integer_yankdup integer_gte integer_div boolean_or in1 print_integer in4 integer_pop boolean_eq exec_s (boolean_or) () (in2 boolean_shove integer_gt boolean_dup_items in3 integer_gte) exec_y_when_autoconstructing (exec_when (integer_gt exec_do*count (boolean_or boolean_dup_items exec_rot (integer_sub) () (exec_empty integer_fromboolean boolean_shove exec_s () (integer_stackdepth exec_dup (exec_y_when_autoconstructing (boolean_dup_times integer_eq boolean_stackdepth) boolean_rot) integer_flush) (integer_flush in1 in2 integer_stackdepth integer_empty integer_swap integer_shove in4 exec_do*while (exec_k (boolean_dup boolean_frominteger) (boolean_or integer_max print_exec () boolean_frominteger exec_swap () (in4 integer_swap print_exec ())))))))))
Lexicase best errors: [0 1 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 79
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 2, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_exec})
Zero cases best program: (integer_yankdup integer_gte integer_div boolean_or in1 print_integer in4 integer_pop boolean_eq exec_s (boolean_or) () (in2 boolean_shove integer_gt boolean_dup_items in3 integer_gte) exec_y_when_autoconstructing (exec_when (integer_gt exec_do*count (boolean_or boolean_dup_items exec_rot (integer_sub) () (exec_empty integer_fromboolean boolean_shove exec_s () (integer_stackdepth exec_dup (exec_y_when_autoconstructing (boolean_dup_times integer_eq boolean_stackdepth) boolean_rot) integer_flush) (integer_flush in1 in2 integer_stackdepth integer_empty integer_swap integer_shove in4 exec_do*while (exec_k (boolean_dup boolean_frominteger) (boolean_or integer_max print_exec () boolean_frominteger exec_swap () (in4 integer_swap print_exec ())))))))))
Zero cases best errors: [0 1 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 79
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 5 2 5 5 7 6 17 7 21)
Population mean number of elite cases: 0.08
Count of perfect (error zero) individuals by case: (4 5 2 5 5 7 6 17 7 21)
Population mean number of perfect (error zero) cases: 0.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_508} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_lte} {:close 2, :instruction exec_noop})
Best program: (integer_sub in1 integer_empty integer_gt exec_eq exec_shove (exec_y_when_autoconstructing (in2 boolean_yankdup) boolean_eq boolean_yankdup tagged_508 exec_swap (in3 integer_gt) (exec_empty boolean_and integer_dup integer_add boolean_xor) integer_fromboolean integer_stackdepth) print_integer exec_y () exec_shove () integer_inc in3 integer_lt exec_dup_times (integer_add exec_s_when_autoconstructing (boolean_rot print_newline exec_do*range (integer_stackdepth) exec_s_when_autoconstructing (integer_gte exec_do*count (boolean_shove boolean_eq exec_pop (boolean_empty) integer_yankdup) in4 exec_rot () (exec_do*times () print_boolean exec_while (integer_stackdepth) exec_stackdepth boolean_or exec_eq boolean_not integer_mod integer_swap exec_when (boolean_or boolean_swap boolean_yank print_integer exec_yankdup exec_yankdup exec_yankdup exec_dup (integer_inc integer_max boolean_invert_first_then_and boolean_stackdepth integer_rot boolean_dup_items print_newline) exec_shove (boolean_dup boolean_shove exec_flush boolean_frominteger integer_dup) exec_dup_times (boolean_yank integer_yankdup integer_lt exec_empty exec_k_when_autoconstructing (exec_s_when_autoconstructing () (exec_k_when_autoconstructing (integer_rot integer_lte) (exec_noop)) ()) ()))) ()) () ()) () ()))
Errors: [0 1 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 88
Size: 121
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 9.921
Median total errors in population: 10
Error averages by case: (0.996 0.995 0.998 0.995 0.995 0.993 0.994 0.983 0.993 0.979)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.535
Average program size in population (points): 70.974
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 501832
--- Timings ---
Current time: 1559584595915 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.8 seconds, 32.7%
Fitness Testing:      1.6 seconds, 62.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.1%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: 93                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 2, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_yankdup integer_gte integer_div boolean_or in1 print_integer in4 integer_pop boolean_eq exec_s (boolean_or) () (in2 boolean_shove integer_gt boolean_dup_items in3 integer_gte) exec_y_when_autoconstructing (exec_when (integer_gt exec_do*count (boolean_or boolean_dup_items exec_rot (integer_sub) () (exec_empty integer_fromboolean boolean_shove exec_s () (integer_stackdepth exec_dup (exec_y_when_autoconstructing (boolean_dup_times integer_eq boolean_stackdepth) boolean_rot) integer_flush) (integer_flush in1 in2 integer_stackdepth integer_empty integer_swap integer_shove in4 exec_do*while (exec_k (boolean_dup boolean_frominteger) (boolean_or integer_max print_exec () boolean_frominteger exec_swap () (in4 exec_stackdepth) exec_eq boolean_invert_second_then_and boolean_swap) boolean_pop integer_empty) integer_rot exec_s_when_autoconstructing (boolean_pop) (integer_lte integer_mult exec_k (integer_pop in2 exec_rot () (exec_rot () (in1) (integer_div boolean_stackdepth) boolean_flush exec_rot (boolean_frominteger) (boolean_eq exec_yank integer_sub integer_flush) (exec_while (exec_when (integer_empty integer_dec exec_stackdepth) integer_dup_times boolean_empty exec_do*while () boolean_flush))) ()) ()) ()))))))
Lexicase best errors: [1 1 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 128
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 2, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_yankdup integer_gte integer_div boolean_or in1 print_integer in4 integer_pop boolean_eq exec_s (boolean_or) () (in2 boolean_shove integer_gt boolean_dup_items in3 integer_gte) exec_y_when_autoconstructing (exec_when (integer_gt exec_do*count (boolean_or boolean_dup_items exec_rot (integer_sub) () (exec_empty integer_fromboolean boolean_shove exec_s () (integer_stackdepth exec_dup (exec_y_when_autoconstructing (boolean_dup_times integer_eq boolean_stackdepth) boolean_rot) integer_flush) (integer_flush in1 in2 integer_stackdepth integer_empty integer_swap integer_shove in4 exec_do*while (exec_k (boolean_dup boolean_frominteger) (boolean_or integer_max print_exec () boolean_frominteger exec_swap () (in4 exec_stackdepth) exec_eq boolean_invert_second_then_and boolean_swap) boolean_pop integer_empty) integer_rot exec_s_when_autoconstructing (boolean_pop) (integer_lte integer_mult exec_k (integer_pop in2 exec_rot () (exec_rot () (in1) (integer_div boolean_stackdepth) boolean_flush exec_rot (boolean_frominteger) (boolean_eq exec_yank integer_sub integer_flush) (exec_while (exec_when (integer_empty integer_dec exec_stackdepth) integer_dup_times boolean_empty exec_do*while () boolean_flush))) ()) ()) ()))))))
Zero cases best errors: [1 1 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 128
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 93 594 457 430 93 121 417 121 420)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (175 93 594 457 430 93 121 417 121 420)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 2, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_exec})
Best program: (integer_yankdup integer_gte integer_div boolean_or in1 print_integer in4 integer_pop boolean_eq exec_s (boolean_or) () (in2 boolean_shove integer_gt boolean_dup_items in3 integer_gte) exec_y_when_autoconstructing (exec_when (integer_gt exec_do*count (boolean_or boolean_dup_items exec_rot (integer_sub) () (exec_empty integer_fromboolean boolean_shove exec_s () (integer_stackdepth exec_dup (exec_y_when_autoconstructing (boolean_dup_times integer_eq boolean_stackdepth) boolean_rot) integer_flush) (integer_flush in1 in2 integer_stackdepth integer_empty integer_swap integer_shove in4 exec_do*while (exec_k (boolean_dup boolean_frominteger) (boolean_or integer_max print_exec () boolean_frominteger exec_swap () (in4 integer_swap print_exec ())))))))))
Errors: [1 1 0 0 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 57
Size: 79
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 7.079
Median total errors in population: 8
Error averages by case: (0.825 0.907 0.406 0.543 0.57 0.907 0.879 0.583 0.879 0.58)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.037
Average program size in population (points): 78.07
Average percent parens in population: 0.285
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.496
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1098909
--- Timings ---
Current time: 1559584599029 milliseconds
Total Time:           5.8 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.6 seconds, 44.5%
Fitness Testing:      2.3 seconds, 40.0%
Report:               0.8 seconds, 13.5%
Other:                0.0 seconds,  0.1%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: 93                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_483} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_769} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_integer_501})
Lexicase best program: (in2 boolean_dup tag_integer_341 boolean_invert_second_then_and tagged_926 in3 in1 exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) boolean_stackdepth exec_rot (integer_mod boolean_or integer_sub boolean_pop boolean_xor exec_dup_items tagged_483 boolean_invert_first_then_and integer_flush boolean_eq) (integer_rot boolean_yankdup boolean_swap) (boolean_pop exec_k (boolean_dup integer_max boolean_dup integer_dec exec_if (boolean_flush boolean_invert_second_then_and in4) (boolean_and integer_empty integer_div exec_y (boolean_shove exec_if () (boolean_or) integer_inc integer_gt in2 exec_stackdepth exec_do*times (exec_eq) integer_gt exec_do*while () print_exec (exec_do*count (exec_rot () () (boolean_dup_times) integer_dup_times exec_eq exec_dup_times (integer_lt tag_exec_769 (boolean_dup_items tag_integer_501))))))) ()))
Lexicase best errors: [0 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 94
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_483} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_769} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_integer_501})
Zero cases best program: (in2 boolean_dup tag_integer_341 boolean_invert_second_then_and tagged_926 in3 in1 exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) boolean_stackdepth exec_rot (integer_mod boolean_or integer_sub boolean_pop boolean_xor exec_dup_items tagged_483 boolean_invert_first_then_and integer_flush boolean_eq) (integer_rot boolean_yankdup boolean_swap) (boolean_pop exec_k (boolean_dup integer_max boolean_dup integer_dec exec_if (boolean_flush boolean_invert_second_then_and in4) (boolean_and integer_empty integer_div exec_y (boolean_shove exec_if () (boolean_or) integer_inc integer_gt in2 exec_stackdepth exec_do*times (exec_eq) integer_gt exec_do*while () print_exec (exec_do*count (exec_rot () () (boolean_dup_times) integer_dup_times exec_eq exec_dup_times (integer_lt tag_exec_769 (boolean_dup_items tag_integer_501))))))) ()))
Zero cases best errors: [0 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 94
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (403 403 403 162 875 866 102 192 410 404)
Population mean number of elite cases: 4.22
Count of perfect (error zero) individuals by case: (403 403 403 162 875 866 102 192 410 404)
Population mean number of perfect (error zero) cases: 4.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Best program: (integer_flush integer_eq exec_while () integer_dec boolean_not exec_do*while (exec_do*times (exec_swap (boolean_shove) (integer_shove integer_flush print_boolean in1 boolean_xor print_integer integer_min integer_swap exec_rot () (exec_do*while (exec_if (boolean_dup_times) (exec_swap (exec_empty integer_inc exec_if () (exec_do*times (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_do*while () boolean_or) ()))) ()))) ()))))
Errors: [0 0 0 1 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 53
Percent parens: 0.396
--- Population Statistics ---
Average total errors in population: 5.78
Median total errors in population: 7
Error averages by case: (0.597 0.597 0.597 0.838 0.125 0.134 0.898 0.808 0.59 0.596)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.28
Average program size in population (points): 70.566
Average percent parens in population: 0.291
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.963
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1658779
--- Timings ---
Current time: 1559584601911 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.5 seconds, 50.0%
Fitness Testing:      2.9 seconds, 32.9%
Report:               1.4 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_boolean_306} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction in2})
Lexicase best program: (exec_stackdepth exec_swap () (boolean_invert_second_then_and exec_k_when_autoconstructing () (in2 print_integer integer_lt boolean_dup_times integer_swap integer_mod integer_mod in4 boolean_dup_items) integer_lt) integer_swap in4 integer_empty integer_stackdepth integer_max boolean_swap exec_do*times () integer_lt tag_boolean_306 boolean_yankdup integer_gte exec_dup_items exec_shove (integer_dup_times integer_lte exec_eq boolean_invert_first_then_and) boolean_stackdepth exec_dup_items integer_flush exec_yank exec_eq boolean_empty in2)
Lexicase best errors: [1 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.156
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_boolean_306} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction in2})
Zero cases best program: (exec_stackdepth exec_swap () (boolean_invert_second_then_and exec_k_when_autoconstructing () (in2 print_integer integer_lt boolean_dup_times integer_swap integer_mod integer_mod in4 boolean_dup_items) integer_lt) integer_swap in4 integer_empty integer_stackdepth integer_max boolean_swap exec_do*times () integer_lt tag_boolean_306 boolean_yankdup integer_gte exec_dup_items exec_shove (integer_dup_times integer_lte exec_eq boolean_invert_first_then_and) boolean_stackdepth exec_dup_items integer_flush exec_yank exec_eq boolean_empty in2)
Zero cases best errors: [1 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (122 120 534 885 123 122 763 121 526 106)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (122 120 534 885 123 122 763 121 526 106)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_483} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_9} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_194} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div})
Best program: (integer_yankdup integer_mod integer_mult exec_pop () in2 boolean_swap print_integer boolean_not exec_yank integer_div integer_fromboolean integer_dec boolean_dup exec_when (exec_do*while (integer_lt)) integer_pop exec_rot (print_integer integer_inc) (exec_if (print_integer) (exec_y () integer_empty in4)) (boolean_stackdepth exec_rot (integer_mod boolean_or integer_sub boolean_pop boolean_xor exec_dup_items tagged_483 boolean_invert_first_then_and integer_flush integer_lte) (boolean_and exec_s () (print_integer print_boolean print_boolean integer_dec) (integer_swap tagged_9 integer_dup integer_mod exec_noop tag_integer_194 exec_empty integer_mult boolean_not exec_while (boolean_flush integer_shove boolean_swap in3 boolean_pop exec_y_when_autoconstructing (boolean_and exec_flush)) boolean_dup_times integer_fromboolean exec_dup_times (integer_min) exec_stackdepth integer_div)) ()))
Errors: [1 0 1 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 67
Size: 86
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 6.578
Median total errors in population: 6
Error averages by case: (0.878 0.88 0.466 0.115 0.877 0.878 0.237 0.879 0.474 0.894)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.429
Average program size in population (points): 69.462
Average percent parens in population: 0.293
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.45475
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2214151
--- Timings ---
Current time: 1559584604918 milliseconds
Total Time:          11.9 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.4 seconds, 54.2%
Fitness Testing:      3.5 seconds, 29.9%
Report:               1.8 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction 46} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction 99} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_div})
Lexicase best program: (integer_gte boolean_eq 46 exec_when (integer_add boolean_dup boolean_eq boolean_xor integer_pop) boolean_yankdup boolean_frominteger print_boolean integer_dec exec_s (in2 exec_eq integer_gte print_newline print_integer) (in2 integer_stackdepth boolean_dup_times) (integer_yank exec_flush boolean_dup_times boolean_or exec_when (boolean_flush boolean_dup_items) boolean_eq print_newline integer_mod exec_eq boolean_and exec_y_when_autoconstructing (exec_s_when_autoconstructing (exec_if (boolean_stackdepth) (print_newline print_integer integer_dec boolean_dup 99 boolean_and print_exec (boolean_and integer_dec exec_stackdepth) exec_eq boolean_invert_second_then_and boolean_swap) boolean_pop integer_empty) (integer_rot exec_s_when_autoconstructing (boolean_pop) (boolean_swap integer_mult exec_k (integer_pop in2 exec_rot () (exec_rot () (in1) (integer_div)) ()) ()) ()) ())))
Lexicase best errors: [1 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 89
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction 46} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction 99} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_div})
Zero cases best program: (integer_gte boolean_eq 46 exec_when (integer_add boolean_dup boolean_eq boolean_xor integer_pop) boolean_yankdup boolean_frominteger print_boolean integer_dec exec_s (in2 exec_eq integer_gte print_newline print_integer) (in2 integer_stackdepth boolean_dup_times) (integer_yank exec_flush boolean_dup_times boolean_or exec_when (boolean_flush boolean_dup_items) boolean_eq print_newline integer_mod exec_eq boolean_and exec_y_when_autoconstructing (exec_s_when_autoconstructing (exec_if (boolean_stackdepth) (print_newline print_integer integer_dec boolean_dup 99 boolean_and print_exec (boolean_and integer_dec exec_stackdepth) exec_eq boolean_invert_second_then_and boolean_swap) boolean_pop integer_empty) (integer_rot exec_s_when_autoconstructing (boolean_pop) (boolean_swap integer_mult exec_k (integer_pop in2 exec_rot () (exec_rot () (in1) (integer_div)) ()) ()) ()) ())))
Zero cases best errors: [1 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 89
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 219 336 657 877 204 877 336 672 654)
Population mean number of elite cases: 5.05
Count of perfect (error zero) individuals by case: (217 219 336 657 877 204 877 336 672 654)
Population mean number of perfect (error zero) cases: 5.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_eq} {:close 0, :instruction 49} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 2, :instruction exec_do*times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec})
Best program: (integer_yankdup integer_mod integer_mult exec_pop () in2 boolean_yank print_integer boolean_not exec_yank integer_div integer_fromboolean integer_dec boolean_dup exec_when (integer_lte integer_lt) integer_pop exec_rot (integer_flush integer_inc) (exec_if (print_integer) (integer_max exec_when (in1) exec_while (exec_eq 49 boolean_invert_first_then_and) exec_dup_times () exec_flush in1 exec_do*times ()) boolean_or) (boolean_dup_items) integer_yank print_exec ())
Errors: [1 1 0 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 37
Size: 50
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 4.951
Median total errors in population: 5
Error averages by case: (0.783 0.781 0.664 0.343 0.123 0.796 0.123 0.664 0.328 0.346)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.774
Average program size in population (points): 62.6
Average percent parens in population: 0.284
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.927375
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2700658
--- Timings ---
Current time: 1559584607934 milliseconds
Total Time:          15.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.6 seconds, 57.2%
Fitness Testing:      4.1 seconds, 27.3%
Report:               2.2 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction 46} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_gte boolean_eq 46 exec_when (integer_add boolean_dup boolean_eq boolean_xor integer_pop) boolean_yankdup boolean_frominteger print_boolean integer_dec exec_s (in2 exec_eq integer_gte in2 print_integer) (in2 integer_stackdepth boolean_dup_times) (integer_yank exec_flush boolean_dup_times boolean_or exec_when (boolean_flush boolean_dup_items) boolean_eq print_newline integer_lt exec_eq boolean_and exec_empty))
Lexicase best errors: [0 0 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction 46} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_gte boolean_eq 46 exec_when (integer_add boolean_dup boolean_eq boolean_xor integer_pop) boolean_yankdup boolean_frominteger print_boolean integer_dec exec_s (in2 exec_eq integer_gte in2 print_integer) (in2 integer_stackdepth boolean_dup_times) (integer_yank exec_flush boolean_dup_times boolean_or exec_when (boolean_flush boolean_dup_items) boolean_eq print_newline integer_lt exec_eq boolean_and exec_empty))
Zero cases best errors: [0 0 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (899 446 454 1000 457 186 266 263 186 899)
Population mean number of elite cases: 5.06
Count of perfect (error zero) individuals by case: (899 446 454 0 457 186 266 263 186 899)
Population mean number of perfect (error zero) cases: 4.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_425} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tagged_72} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_537} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 1, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_exec_479} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction integer_eq})
Best program: (integer_yankdup integer_mod integer_eq exec_shove (integer_add tag_exec_425 () in4 exec_if (exec_swap (boolean_not exec_dup_items tagged_72) (in2 print_integer exec_do*times (integer_dup exec_do*range (tag_integer_537 boolean_swap integer_max) print_boolean) integer_max exec_flush exec_if (integer_empty exec_s (exec_yank boolean_and in3 in4 integer_gte exec_y () exec_k (integer_gte print_exec () print_integer integer_sub exec_dup () exec_stackdepth integer_mult exec_s_when_autoconstructing (tag_exec_479 () integer_lt exec_do*times (integer_add integer_yankdup integer_add print_exec (exec_s (integer_eq) () ()))) () ()) ()) () ()) ())) ()))
Errors: [0 0 0 1 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 50
Size: 78
Percent parens: 0.359
--- Population Statistics ---
Average total errors in population: 5.944
Median total errors in population: 6
Error averages by case: (0.101 0.554 0.546 1.0 0.543 0.814 0.734 0.737 0.814 0.101)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 45.395
Average program size in population (points): 62.894
Average percent parens in population: 0.274
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.3775
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3216293
--- Timings ---
Current time: 1559584610916 milliseconds
Total Time:          17.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.5 seconds, 59.1%
Fitness Testing:      4.6 seconds, 26.0%
Report:               2.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k} {:close 2, :instruction boolean_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_empty} {:close 2, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_integer_779} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 1, :instruction print_boolean} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_empty})
Lexicase best program: (in4 print_integer exec_s (exec_k () (boolean_stackdepth)) (boolean_and) (boolean_not boolean_dup_items exec_flush exec_noop exec_shove (boolean_not integer_gte) integer_empty) in4 integer_gt exec_yank exec_do*range (integer_stackdepth boolean_empty boolean_not integer_stackdepth exec_if () () exec_rot (exec_s_when_autoconstructing (exec_do*while () exec_y_when_autoconstructing () boolean_empty integer_empty exec_pop (integer_dup_items boolean_or) exec_k (integer_yank print_boolean) (exec_flush integer_div) integer_dec exec_yank boolean_pop in4 exec_yank boolean_stackdepth integer_lte boolean_and print_boolean exec_s_when_autoconstructing (boolean_eq exec_yank) (integer_mod tag_integer_779 print_boolean integer_yankdup boolean_yank integer_add print_boolean) (exec_dup ()) exec_do*while () exec_yank integer_min integer_shove) () (integer_pop exec_dup_items boolean_invert_first_then_and integer_min integer_gte) boolean_shove) (boolean_eq integer_empty exec_rot () (boolean_flush boolean_empty) ()) ()))
Lexicase best errors: [0 1 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 101
Percent parens: 0.287
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k} {:close 2, :instruction boolean_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_empty} {:close 2, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_integer_779} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 1, :instruction print_boolean} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_empty})
Zero cases best program: (in4 print_integer exec_s (exec_k () (boolean_stackdepth)) (boolean_and) (boolean_not boolean_dup_items exec_flush exec_noop exec_shove (boolean_not integer_gte) integer_empty) in4 integer_gt exec_yank exec_do*range (integer_stackdepth boolean_empty boolean_not integer_stackdepth exec_if () () exec_rot (exec_s_when_autoconstructing (exec_do*while () exec_y_when_autoconstructing () boolean_empty integer_empty exec_pop (integer_dup_items boolean_or) exec_k (integer_yank print_boolean) (exec_flush integer_div) integer_dec exec_yank boolean_pop in4 exec_yank boolean_stackdepth integer_lte boolean_and print_boolean exec_s_when_autoconstructing (boolean_eq exec_yank) (integer_mod tag_integer_779 print_boolean integer_yankdup boolean_yank integer_add print_boolean) (exec_dup ()) exec_do*while () exec_yank integer_min integer_shove) () (integer_pop exec_dup_items boolean_invert_first_then_and integer_min integer_gte) boolean_shove) (boolean_eq integer_empty exec_rot () (boolean_flush boolean_empty) ()) ()))
Zero cases best errors: [0 1 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 101
Percent parens: 0.287
--- Lexicase Population Statistics ---
Count of elite individuals by case: (248 1000 1000 1 248 381 378 384 627 248)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (248 0 0 1 248 381 378 384 627 248)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_425} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_72} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_586} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction in2})
Best program: (integer_eq exec_shove (integer_add tag_exec_425 () in4 exec_if (exec_swap (boolean_not tagged_72) (in2 print_integer exec_do*times (integer_dup exec_do*range (tag_integer_586 boolean_swap integer_max) print_boolean) integer_max in4 exec_if (integer_empty exec_s (exec_yank boolean_and in3 in4 integer_lte exec_eq boolean_invert_first_then_and) (boolean_stackdepth) (exec_dup_items integer_flush exec_yank exec_eq boolean_empty in2)) ())) ()))
Errors: [1 1 1 1 1 0 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 37
Size: 51
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 7.485
Median total errors in population: 6
Error averages by case: (0.752 1.0 1.0 0.999 0.752 0.619 0.622 0.616 0.373 0.752)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 42.447
Average program size in population (points): 58.898
Average percent parens in population: 0.277
Minimum age in population: 6.0
Maximum age in population: 10.9375
Average age in population: 8.887125
Median age in population: 8.984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3674305
--- Timings ---
Current time: 1559584613855 milliseconds
Total Time:          20.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.3 seconds, 59.9%
Fitness Testing:      5.1 seconds, 24.6%
Report:               3.1 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: 93                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output:                    
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output:                    
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Lexicase best program: (in2 exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 in1 exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_do*while () boolean_or) ()) () ())
Lexicase best errors: [0 1 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Zero cases best program: (in2 exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 in1 exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_do*while () boolean_or) ()) () ())
Zero cases best errors: [0 1 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (125 408 124 1 125 125 414 125 125 414)
Population mean number of elite cases: 1.99
Count of perfect (error zero) individuals by case: (125 408 124 1 125 125 414 125 125 414)
Population mean number of perfect (error zero) cases: 1.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Best program: (in2 exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 in1 exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_do*while () boolean_or) ()) () ())
Errors: [0 1 0 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 29
Size: 39
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 8.014
Median total errors in population: 7
Error averages by case: (0.875 0.592 0.876 0.999 0.875 0.875 0.586 0.875 0.875 0.586)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.153
Average program size in population (points): 52.896
Average percent parens in population: 0.275
Minimum age in population: 7.5
Maximum age in population: 12.359375
Average age in population: 10.353
Median age in population: 10.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4141458
--- Timings ---
Current time: 1559584617310 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.7 seconds, 61.1%
Fitness Testing:      5.5 seconds, 23.0%
Report:               3.7 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_yankdup exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 in1 boolean_dup_times in3 in1 exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_do*while () boolean_or) ()) () ())
Lexicase best errors: [1 1 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_yankdup exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 in1 boolean_dup_times in3 in1 exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_do*while () boolean_or) ()) () ())
Zero cases best errors: [1 1 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (84 1000 819 277 539 818 274 85 540 430)
Population mean number of elite cases: 4.87
Count of perfect (error zero) individuals by case: (84 0 819 277 539 818 274 85 540 430)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction 46} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction 99} {:close 0, :instruction boolean_and})
Best program: (integer_gte boolean_eq 46 exec_when (integer_add boolean_dup boolean_eq boolean_xor integer_pop) boolean_yankdup integer_dup print_boolean integer_dec boolean_eq in2 exec_eq integer_gte print_newline print_integer in2 boolean_dup_items boolean_dup_times integer_yank exec_flush boolean_dup_times boolean_or exec_when (boolean_flush boolean_dup_items) boolean_eq print_newline integer_lt exec_eq boolean_and exec_y_when_autoconstructing (exec_s_when_autoconstructing (exec_if (boolean_stackdepth) (print_newline print_integer integer_dec boolean_dup 99 boolean_and)) () ()))
Errors: [1 1 0 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 44
Size: 53
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 6.134
Median total errors in population: 6
Error averages by case: (0.916 1.0 0.181 0.723 0.461 0.182 0.726 0.915 0.46 0.57)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.322
Average program size in population (points): 46.142
Average percent parens in population: 0.253
Minimum age in population: 9.859375
Maximum age in population: 13.5390625
Average age in population: 11.7494765625
Median age in population: 11.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 263
Genome diversity (% unique genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 276
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4850426
--- Timings ---
Current time: 1559584620012 milliseconds
Total Time:          27.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.5 seconds, 60.5%
Fitness Testing:      6.3 seconds, 23.2%
Report:               4.3 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 3, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (exec_do*times (exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 exec_when (integer_add boolean_dup boolean_eq boolean_xor integer_pop)) boolean_yankdup integer_yankdup print_boolean integer_dec exec_s (in2 exec_eq integer_gte in2 print_integer) (in2 integer_stackdepth boolean_dup_times boolean_invert_second_then_and exec_flush boolean_dup_times) ())
Lexicase best errors: [1 1 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 3, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (exec_do*times (exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 exec_when (integer_add boolean_dup boolean_eq boolean_xor integer_pop)) boolean_yankdup integer_yankdup print_boolean integer_dec exec_s (in2 exec_eq integer_gte in2 print_integer) (in2 integer_stackdepth boolean_dup_times boolean_invert_second_then_and exec_flush boolean_dup_times) ())
Zero cases best errors: [1 1 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (235 344 316 316 6 317 344 317 234 1)
Population mean number of elite cases: 2.43
Count of perfect (error zero) individuals by case: (235 344 316 316 6 317 344 317 234 1)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction 46} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction tag_exec_410} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction integer_eq})
Best program: (integer_gte boolean_eq 46 exec_when (integer_add boolean_dup boolean_eq boolean_xor integer_pop) boolean_yankdup boolean_frominteger print_boolean integer_dec exec_s (in2 exec_eq integer_gte in2 print_integer) (in2 integer_stackdepth integer_dup) (integer_yank exec_flush boolean_dup_times boolean_or exec_when (boolean_flush boolean_dup_items) boolean_eq print_newline integer_lt exec_eq integer_dec exec_y_when_autoconstructing (exec_s_when_autoconstructing (exec_if (boolean_stackdepth) (print_newline print_integer integer_dec boolean_dup tag_exec_410 () exec_stackdepth exec_do*times (integer_add integer_yankdup) integer_add print_exec (exec_s (integer_eq) () ()))) () ())))
Errors: [1 1 0 0 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 51
Size: 69
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 7.57
Median total errors in population: 8
Error averages by case: (0.765 0.656 0.684 0.684 0.994 0.683 0.656 0.683 0.766 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.646
Average program size in population (points): 46.128
Average percent parens in population: 0.245
Minimum age in population: 10.859375
Maximum age in population: 15.08984375
Average age in population: 13.374328125
Median age in population: 13.4453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.005
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5509941
--- Timings ---
Current time: 1559584622677 milliseconds
Total Time:          29.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.2 seconds, 61.0%
Fitness Testing:      7.0 seconds, 23.5%
Report:               4.5 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Lexicase best program: (in2 exec_yank tag_integer_341 exec_yank exec_stackdepth integer_pop boolean_invert_second_then_and exec_k_when_autoconstructing () (in2 print_integer integer_lt integer_gte) integer_empty in4 integer_gt exec_yank exec_do*range (integer_stackdepth boolean_empty boolean_not integer_stackdepth exec_if () (integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4)) boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (exec_yankdup integer_fromboolean exec_do*while () boolean_or) ()) () ())
Lexicase best errors: [1 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 53
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Zero cases best program: (in2 exec_yank tag_integer_341 exec_yank exec_stackdepth integer_pop boolean_invert_second_then_and exec_k_when_autoconstructing () (in2 print_integer integer_lt integer_gte) integer_empty in4 integer_gt exec_yank exec_do*range (integer_stackdepth boolean_empty boolean_not integer_stackdepth exec_if () (integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4)) boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (exec_yankdup integer_fromboolean exec_do*while () boolean_or) ()) () ())
Zero cases best errors: [1 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 53
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (157 927 927 255 155 158 254 254 370 927)
Population mean number of elite cases: 4.38
Count of perfect (error zero) individuals by case: (157 927 927 255 155 158 254 254 370 927)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction 46} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction tagged_208} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq})
Best program: (integer_gte boolean_eq 46 exec_when (integer_add boolean_dup boolean_eq boolean_xor integer_pop) boolean_yankdup tagged_390 print_boolean integer_dec integer_add in2 tagged_208 integer_gte in2 print_integer in2 integer_stackdepth boolean_dup_times integer_yank exec_flush boolean_dup_times boolean_or exec_when (boolean_flush boolean_dup_items) boolean_eq print_newline integer_lt exec_eq boolean_and integer_dup integer_add boolean_xor integer_fromboolean exec_do*range () print_integer exec_y () exec_shove () integer_inc in3 integer_lt exec_dup_times (integer_add exec_s_when_autoconstructing (boolean_rot print_newline exec_do*range (exec_y_when_autoconstructing () exec_s_when_autoconstructing (integer_gte exec_do*count (boolean_shove boolean_eq exec_pop (boolean_empty) integer_yankdup) in4 exec_rot () (exec_do*times (print_boolean exec_while (integer_stackdepth) exec_stackdepth boolean_or exec_eq)) ()) () ())) () ()))
Errors: [1 0 0 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 69
Size: 91
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 5.616
Median total errors in population: 6
Error averages by case: (0.843 0.073 0.073 0.745 0.845 0.842 0.746 0.746 0.63 0.073)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.638
Average program size in population (points): 45.791
Average percent parens in population: 0.238
Minimum age in population: 12.21875
Maximum age in population: 16.474609375
Average age in population: 14.797462890625
Median age in population: 14.88671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.008
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6149608
--- Timings ---
Current time: 1559584625327 milliseconds
Total Time:          32.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.9 seconds, 61.4%
Fitness Testing:      7.7 seconds, 23.6%
Report:               4.7 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_483} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove})
Lexicase best program: (in2 in2 boolean_yank print_integer boolean_not exec_yank integer_div integer_fromboolean integer_dec boolean_dup exec_when (integer_lte integer_lt) integer_pop exec_rot (in2 boolean_rot integer_max integer_mod exec_k (integer_dup_times exec_flush boolean_xor exec_y () integer_empty in4) () in4) (exec_rot (integer_mod boolean_or integer_sub boolean_pop boolean_xor exec_dup_items tagged_483 boolean_invert_first_then_and integer_flush boolean_eq) (integer_rot boolean_yankdup boolean_swap) (boolean_pop exec_k (boolean_dup integer_max boolean_dup integer_dec exec_if (integer_flush boolean_invert_second_then_and in4) (boolean_and integer_empty integer_div exec_y (boolean_shove))) ())) ())
Lexicase best errors: [0 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 72
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_483} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove})
Zero cases best program: (in2 in2 boolean_yank print_integer boolean_not exec_yank integer_div integer_fromboolean integer_dec boolean_dup exec_when (integer_lte integer_lt) integer_pop exec_rot (in2 boolean_rot integer_max integer_mod exec_k (integer_dup_times exec_flush boolean_xor exec_y () integer_empty in4) () in4) (exec_rot (integer_mod boolean_or integer_sub boolean_pop boolean_xor exec_dup_items tagged_483 boolean_invert_first_then_and integer_flush boolean_eq) (integer_rot boolean_yankdup boolean_swap) (boolean_pop exec_k (boolean_dup integer_max boolean_dup integer_dec exec_if (integer_flush boolean_invert_second_then_and in4) (boolean_and integer_empty integer_div exec_y (boolean_shove))) ())) ())
Zero cases best errors: [0 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 72
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (496 283 144 143 496 143 283 920 492 492)
Population mean number of elite cases: 3.89
Count of perfect (error zero) individuals by case: (496 283 144 143 496 143 283 920 492 492)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Best program: (integer_yankdup integer_pop integer_mult exec_pop () in2 boolean_yank print_integer boolean_not exec_yank integer_div integer_fromboolean boolean_xor print_integer in2 boolean_rot integer_max exec_when (integer_lte integer_lt) integer_pop exec_rot (exec_yank boolean_and integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () exec_dup (in4)) (boolean_stackdepth) (exec_rot (exec_s (boolean_invert_second_then_and) (exec_yankdup integer_fromboolean exec_do*while () boolean_or) ()) () ()))
Errors: [0 1 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 55
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.108
Median total errors in population: 6
Error averages by case: (0.504 0.717 0.856 0.857 0.504 0.857 0.717 0.08 0.508 0.508)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.201
Average program size in population (points): 47.011
Average percent parens in population: 0.273
Minimum age in population: 13.21875
Maximum age in population: 18.140625
Average age in population: 16.254154296875
Median age in population: 16.3134765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6742785
--- Timings ---
Current time: 1559584628887 milliseconds
Total Time:          35.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.3 seconds, 62.5%
Fitness Testing:      8.3 seconds, 23.3%
Report:               5.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_boolean_306} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction in2})
Lexicase best program: (boolean_yankdup integer_mod integer_mult exec_pop () in2 integer_dup print_integer boolean_not exec_yank integer_div integer_fromboolean integer_dec boolean_dup exec_when (integer_lte integer_lt) integer_pop exec_rot (integer_flush integer_inc) (exec_if (print_integer) (integer_lt tag_boolean_306 exec_eq integer_gte exec_dup_items exec_shove (integer_dup_times integer_lte exec_eq boolean_invert_first_then_and) boolean_stackdepth) exec_dup_items integer_flush boolean_yank exec_eq boolean_empty in2) ())
Lexicase best errors: [1 1 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_boolean_306} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction in2})
Zero cases best program: (boolean_yankdup integer_mod integer_mult exec_pop () in2 integer_dup print_integer boolean_not exec_yank integer_div integer_fromboolean integer_dec boolean_dup exec_when (integer_lte integer_lt) integer_pop exec_rot (integer_flush integer_inc) (exec_if (print_integer) (integer_lt tag_boolean_306 exec_eq integer_gte exec_dup_items exec_shove (integer_dup_times integer_lte exec_eq boolean_invert_first_then_and) boolean_stackdepth) exec_dup_items integer_flush boolean_yank exec_eq boolean_empty in2) ())
Zero cases best errors: [1 1 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (298 218 400 218 917 394 400 394 220 6)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (298 218 400 218 917 394 400 394 220 6)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_or})
Best program: (integer_yankdup integer_mod integer_mult exec_pop () in2 print_integer in2 boolean_rot integer_mult integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4 boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_y () boolean_or) ()) () ())
Errors: [1 1 0 1 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 25
Size: 35
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.535
Median total errors in population: 6
Error averages by case: (0.702 0.782 0.6 0.782 0.083 0.606 0.6 0.606 0.78 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.323
Average program size in population (points): 45.522
Average percent parens in population: 0.268
Minimum age in population: 15.15625
Maximum age in population: 19.69873046875
Average age in population: 17.73464990234375
Median age in population: 17.80810546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7337198
--- Timings ---
Current time: 1559584632210 milliseconds
Total Time:          39.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.4 seconds, 62.5%
Fitness Testing:      8.9 seconds, 22.9%
Report:               5.6 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_stackdepth exec_swap () (boolean_invert_second_then_and exec_k_when_autoconstructing () (in2 print_integer integer_lt boolean_dup_times integer_swap integer_mod integer_mod in4 boolean_dup_items) integer_lt) integer_swap in4 integer_empty integer_stackdepth integer_max boolean_xor exec_y () integer_empty in4 boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_do*while () boolean_or) ()) () ())
Lexicase best errors: [1 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 44
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_stackdepth exec_swap () (boolean_invert_second_then_and exec_k_when_autoconstructing () (in2 print_integer integer_lt boolean_dup_times integer_swap integer_mod integer_mod in4 boolean_dup_items) integer_lt) integer_swap in4 integer_empty integer_stackdepth integer_max boolean_xor exec_y () integer_empty in4 boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_do*while () boolean_or) ()) () ())
Zero cases best errors: [1 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 44
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (312 415 102 101 102 101 416 312 415 416)
Population mean number of elite cases: 2.69
Count of perfect (error zero) individuals by case: (312 415 102 101 102 101 416 312 415 416)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction 46} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction 49} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_do*times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec})
Best program: (integer_gte boolean_eq 46 exec_when (integer_yankdup integer_gte integer_div in2 print_integer) in2 integer_empty exec_when (exec_dup_items integer_lt) integer_pop exec_rot (integer_flush integer_inc) (exec_if (print_integer) (in3 exec_when (in1) exec_while (integer_mult 49 boolean_invert_first_then_and) exec_dup_times () exec_flush integer_lt exec_do*times ()) boolean_or) (boolean_dup_items) integer_yank print_exec ())
Errors: [1 0 1 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 35
Size: 48
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 7.308
Median total errors in population: 8
Error averages by case: (0.688 0.585 0.898 0.899 0.898 0.899 0.584 0.688 0.585 0.584)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.413
Average program size in population (points): 44.534
Average percent parens in population: 0.274
Minimum age in population: 16.15625
Maximum age in population: 21.231689453125
Average age in population: 19.38871118164062
Median age in population: 19.42236328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.715
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7952326
--- Timings ---
Current time: 1559584635109 milliseconds
Total Time:          42.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.3 seconds, 62.4%
Fitness Testing:      9.6 seconds, 22.7%
Report:               6.1 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 94                 
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 88                 
Correct output: 2                   | Program output: 73                 
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 7                  
Correct output: 5                   | Program output: 90                 
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 64                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 83                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 81                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: 0                  
Correct output: -62                 | Program output: 20                 
Correct output: -95                 | Program output: 48                 
Correct output: -92                 | Program output: 28                 
Correct output: -92                 | Program output: 93                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: 100                
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -68                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: 60                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 39                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: 55                 
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 26                 
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: 91                 
Correct output: -79                 | Program output: 71                 
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: 22                 
Correct output: -83                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: 53                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 47                 
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: 42                 
Correct output: -92                 | Program output: 13                 
Correct output: -25                 | Program output: 71                 
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 59                 
Correct output: -45                 | Program output: 50                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: 47                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Lexicase best program: (in2 exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 in1 exec_dup (tagged_926 in3 integer_lte exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor boolean_xor exec_y () integer_empty in4)) boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) () (boolean_xor integer_fromboolean exec_do*while () boolean_or)) () ())
Lexicase best errors: [1 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Zero cases best program: (in2 exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 in1 exec_dup (tagged_926 in3 integer_lte exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor boolean_xor exec_y () integer_empty in4)) boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) () (boolean_xor integer_fromboolean exec_do*while () boolean_or)) () ())
Zero cases best errors: [1 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 171 901 171 708 191 171 883 189 192)
Population mean number of elite cases: 3.76
Count of perfect (error zero) individuals by case: (186 171 901 171 708 191 171 883 189 192)
Population mean number of perfect (error zero) cases: 3.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Best program: (in2 exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 in1 exec_dup (tagged_926 in3 integer_lte exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor boolean_xor exec_y () integer_empty in4)) boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_do*while () boolean_or) ()) () ())
Errors: [1 0 0 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 34
Size: 45
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 6.237
Median total errors in population: 6
Error averages by case: (0.814 0.829 0.099 0.829 0.292 0.809 0.829 0.117 0.811 0.808)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.947
Average program size in population (points): 43.594
Average percent parens in population: 0.267
Minimum age in population: 17.15625
Maximum age in population: 22.6611328125
Average age in population: 20.89672021484375
Median age in population: 20.94781494140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 8578715
--- Timings ---
Current time: 1559584638413 milliseconds
Total Time:          45.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.3 seconds, 62.6%
Fitness Testing:     10.3 seconds, 22.8%
Report:               6.4 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_if (print_integer in2 boolean_dup_times integer_max integer_mod boolean_dup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4)) (boolean_stackdepth) exec_rot (exec_s (boolean_invert_second_then_and) (integer_yankdup integer_fromboolean exec_do*while () boolean_or) ()) () ())
Lexicase best errors: [0 0 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_if (print_integer in2 boolean_dup_times integer_max integer_mod boolean_dup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4)) (boolean_stackdepth) exec_rot (exec_s (boolean_invert_second_then_and) (integer_yankdup integer_fromboolean exec_do*while () boolean_or) ()) () ())
Zero cases best errors: [0 0 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 431 2 425 153 336 2 336 923)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (2 2 431 2 425 153 336 2 336 923)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_425} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Best program: (integer_eq exec_shove (integer_add tag_exec_425 () in4 in2 print_integer in2 boolean_rot integer_max integer_mod boolean_swap) integer_dup_times tagged_534 boolean_xor exec_y () integer_empty integer_dup boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_do*while ()) (boolean_or)) () ())
Errors: [0 0 1 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 26
Size: 37
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 7.388
Median total errors in population: 7
Error averages by case: (0.998 0.998 0.569 0.998 0.575 0.847 0.664 0.998 0.664 0.077)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.575
Average program size in population (points): 41.578
Average percent parens in population: 0.265
Minimum age in population: 19.7274169921875
Maximum age in population: 24.49566650390625
Average age in population: 22.49587353515625
Median age in population: 22.50643920898438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 9322177
--- Timings ---
Current time: 1559584641941 milliseconds
Total Time:          48.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.4 seconds, 62.3%
Fitness Testing:     11.2 seconds, 23.0%
Report:               7.1 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: 93                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Lexicase best program: (in2 exec_k_when_autoconstructing (tag_integer_341 boolean_invert_second_then_and tagged_926 in3 in1 exec_dup () boolean_xor print_integer in2 boolean_rot) (integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) boolean_stackdepth exec_rot (boolean_dup_times exec_do*while () boolean_or) () ())
Lexicase best errors: [1 0 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Zero cases best program: (in2 exec_k_when_autoconstructing (tag_integer_341 boolean_invert_second_then_and tagged_926 in3 in1 exec_dup () boolean_xor print_integer in2 boolean_rot) (integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) boolean_stackdepth exec_rot (boolean_dup_times exec_do*while () boolean_or) () ())
Zero cases best errors: [1 0 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (104 202 208 104 402 402 201 201 104 915)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (104 202 208 104 402 402 201 201 104 915)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Best program: (exec_do*times (exec_yank tag_integer_341) boolean_invert_second_then_and tagged_926 in3 in1 exec_dup (exec_s (print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y ()) (integer_empty in4) () boolean_stackdepth) exec_rot (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_do*while (boolean_or)) ()) () ())
Errors: [1 0 1 1 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 29
Size: 43
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 7.157
Median total errors in population: 7
Error averages by case: (0.896 0.798 0.792 0.896 0.598 0.598 0.799 0.799 0.896 0.085)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.809
Average program size in population (points): 40.08
Average percent parens in population: 0.281
Minimum age in population: 21.3939208984375
Maximum age in population: 25.76272583007812
Average age in population: 23.53498669433594
Median age in population: 23.53349304199219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 10073785
--- Timings ---
Current time: 1559584645286 milliseconds
Total Time:          52.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.2 seconds, 61.9%
Fitness Testing:     12.1 seconds, 23.2%
Report:               7.6 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: 93                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Lexicase best program: (in2 exec_yank boolean_invert_second_then_and tagged_926 in3 in1 exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) boolean_stackdepth integer_mod exec_s (boolean_invert_second_then_and) (boolean_xor boolean_xor integer_fromboolean exec_do*while () boolean_or) ())
Lexicase best errors: [0 1 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Zero cases best program: (in2 exec_yank boolean_invert_second_then_and tagged_926 in3 in1 exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) boolean_stackdepth integer_mod exec_s (boolean_invert_second_then_and) (boolean_xor boolean_xor integer_fromboolean exec_do*while () boolean_or) ())
Zero cases best errors: [0 1 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (298 200 298 200 298 98 200 298 200 299)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (298 200 298 200 298 98 200 298 200 299)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction 99} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot})
Best program: (boolean_yankdup in3 in1 exec_dup (integer_dup) print_integer boolean_not exec_yank integer_div integer_fromboolean integer_dec exec_empty exec_when (integer_lte integer_lt) integer_pop exec_rot (integer_flush integer_inc) (exec_if (print_integer) (integer_max integer_mod in1) exec_while (exec_eq integer_mult integer_lt exec_eq boolean_and exec_y_when_autoconstructing (exec_s_when_autoconstructing (exec_if (boolean_stackdepth) (print_newline print_integer integer_dec) boolean_dup 99 boolean_and print_exec (exec_do*while (integer_dec exec_stackdepth) exec_eq boolean_invert_second_then_and) boolean_rot) () ()))) ())
Errors: [0 1 0 1 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 47
Size: 64
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 7.611
Median total errors in population: 9
Error averages by case: (0.702 0.8 0.702 0.8 0.702 0.902 0.8 0.702 0.8 0.701)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.035
Average program size in population (points): 40.731
Average percent parens in population: 0.285
Minimum age in population: 22.67315673828125
Maximum age in population: 27.10386657714844
Average age in population: 25.0940592956543
Median age in population: 25.15362548828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 10791528
--- Timings ---
Current time: 1559584648625 milliseconds
Total Time:          55.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.4 seconds, 61.8%
Fitness Testing:     13.0 seconds, 23.2%
Report:               8.2 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_425} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_eq exec_shove (integer_add tag_exec_425 () in4 in2 print_integer in2 boolean_rot integer_max integer_mod boolean_swap) integer_dup_times tagged_534 boolean_xor exec_y () integer_empty integer_dup boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_do*while ()) (boolean_or)) () ())
Lexicase best errors: [1 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_425} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_eq exec_shove (integer_add tag_exec_425 () in4 in2 print_integer in2 boolean_rot integer_max integer_mod boolean_swap) integer_dup_times tagged_534 boolean_xor exec_y () integer_empty integer_dup boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_do*while ()) (boolean_or)) () ())
Zero cases best errors: [1 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 390 476 1000 390 1 86 445 390 390)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (1 390 476 0 390 1 86 445 390 390)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yank} {:close 1, :instruction tag_exec_425} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Best program: (integer_yankdup integer_gte integer_div boolean_or in1 integer_yankdup integer_mod integer_mult exec_pop () exec_noop boolean_yank tag_exec_425 () in4 in2 print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty integer_dup boolean_stackdepth exec_rot (exec_s (boolean_invert_second_then_and) (boolean_xor integer_fromboolean exec_do*while ()) (boolean_or)) () ())
Errors: [1 0 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 45
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 7.431
Median total errors in population: 9
Error averages by case: (0.999 0.61 0.524 1.0 0.61 0.999 0.914 0.555 0.61 0.61)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 29.159
Average program size in population (points): 40.095
Average percent parens in population: 0.271
Minimum age in population: 23.67315673828125
Maximum age in population: 28.48561096191406
Average age in population: 26.51656643676758
Median age in population: 26.60702896118164
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 11524409
--- Timings ---
Current time: 1559584652040 milliseconds
Total Time:          58.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.4 seconds, 61.9%
Fitness Testing:     13.8 seconds, 23.5%
Report:               8.5 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: 93                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Lexicase best program: (in2 exec_yank in3 in1 exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_dup_items exec_y () integer_empty boolean_stackdepth) boolean_stackdepth exec_rot (integer_stackdepth boolean_invert_second_then_and) (integer_pop integer_fromboolean boolean_xor integer_fromboolean exec_do*while () boolean_or) ())
Lexicase best errors: [0 0 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Zero cases best program: (in2 exec_yank in3 in1 exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_dup_items exec_y () integer_empty boolean_stackdepth) boolean_stackdepth exec_rot (integer_stackdepth boolean_invert_second_then_and) (integer_pop integer_fromboolean boolean_xor integer_fromboolean exec_do*while () boolean_or) ())
Zero cases best errors: [0 0 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (911 908 180 127 3 181 103 102 102 102)
Population mean number of elite cases: 2.72
Count of perfect (error zero) individuals by case: (911 908 180 127 3 181 103 102 102 102)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction 61} {:close 0, :instruction tag_integer_341} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 49} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec})
Best program: (in2 61 tag_integer_341 integer_yankdup tagged_926 in3 in1 exec_dup (boolean_xor print_integer in2 boolean_rot integer_fromboolean integer_mod boolean_swap integer_pop exec_rot (integer_flush exec_shove () exec_if (print_integer) (integer_max exec_when (in1 exec_while (integer_yankdup 49 boolean_invert_first_then_and) exec_dup_times () exec_flush in1 exec_do*times () boolean_or) boolean_dup_items) integer_yank print_exec ()) () ()))
Errors: [0 0 1 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 36
Size: 49
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 7.281
Median total errors in population: 8
Error averages by case: (0.089 0.092 0.82 0.873 0.997 0.819 0.897 0.898 0.898 0.898)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.675
Average program size in population (points): 40.844
Average percent parens in population: 0.250
Minimum age in population: 25.37744140625
Maximum age in population: 29.96440124511719
Average age in population: 28.09085976028442
Median age in population: 28.17481803894043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 12284485
--- Timings ---
Current time: 1559584655474 milliseconds
Total Time:          62.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.6 seconds, 61.7%
Fitness Testing:     14.8 seconds, 23.6%
Report:               9.1 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 597
Test mean error for best: 0.59700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 73                 
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 4                  
Correct output: 5                   | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: 0                  
Correct output: -62                 | Program output: 0                  
Correct output: -95                 | Program output: -89                
Correct output: -92                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 97                 
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -68                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -32                
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: 17                 
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: 79                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: 0                  
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 15                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: -9                 
Correct output: -25                 | Program output: 78                 
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () boolean_or))
Lexicase best errors: [0 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 36
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () boolean_or))
Zero cases best errors: [0 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 36
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (463 246 445 463 1 1 914 721 1 463)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (463 246 445 463 1 1 914 721 1 463)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y})
Best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y ()))
Errors: [0 1 0 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 35
Percent parens: 0.086
--- Population Statistics ---
Average total errors in population: 6.282
Median total errors in population: 6
Error averages by case: (0.537 0.754 0.555 0.537 0.999 0.999 0.086 0.279 0.999 0.537)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.034
Average program size in population (points): 42.642
Average percent parens in population: 0.228
Minimum age in population: 27.361572265625
Maximum age in population: 31.4432487487793
Average age in population: 29.86142516708374
Median age in population: 29.85382843017578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 170
Genome diversity (% unique genomes):	 0.514
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 178
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 13039549
--- Timings ---
Current time: 1559584659124 milliseconds
Total Time:          65.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.8 seconds, 61.9%
Fitness Testing:     15.6 seconds, 23.7%
Report:               9.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 594
Test mean error for best: 0.59400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 65                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 42                 
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 4                  
Correct output: 5                   | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 0                  
Correct output: -95                 | Program output: -89                
Correct output: -92                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 97                 
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -32                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: 17                 
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: 79                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: 0                  
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: -9                 
Correct output: -25                 | Program output: 78                 
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4})
Lexicase best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 boolean_not tag_integer_341 boolean_invert_second_then_and tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4))
Lexicase best errors: [0 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 37
Percent parens: 0.081
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4})
Zero cases best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 boolean_not tag_integer_341 boolean_invert_second_then_and tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4))
Zero cases best errors: [0 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 37
Percent parens: 0.081
--- Lexicase Population Statistics ---
Count of elite individuals by case: (390 402 389 407 400 24 417 401 437 112)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (390 402 389 407 400 24 417 401 437 112)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y})
Best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 boolean_dup_times tag_integer_341 boolean_invert_second_then_and tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y ()))
Errors: [0 0 0 0 0 1 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 32
Size: 35
Percent parens: 0.086
--- Population Statistics ---
Average total errors in population: 6.621
Median total errors in population: 8
Error averages by case: (0.61 0.598 0.611 0.593 0.6 0.976 0.583 0.599 0.563 0.888)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.473
Average program size in population (points): 42.874
Average percent parens in population: 0.162
Minimum age in population: 29.60770034790039
Maximum age in population: 32.94053649902344
Average age in population: 31.42473508262634
Median age in population: 31.40345573425293
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 252
Genome diversity (% unique genomes):	 0.447
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 254
Syntactic diversity (% unique Push programs):	 0.427
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 13886399
--- Timings ---
Current time: 1559584662420 milliseconds
Total Time:          69.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.5 seconds, 61.4%
Fitness Testing:     16.6 seconds, 24.0%
Report:              10.0 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 588
Test mean error for best: 0.58800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 65                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 2                   | Program output: 42                 
Correct output: 27                  | Program output: 38                 
Correct output: 12                  | Program output: 83                 
Correct output: 9                   | Program output: 62                 
Correct output: 31                  | Program output: 66                 
Correct output: 53                  | Program output: 77                 
Correct output: 0                   | Program output: 4                  
Correct output: 5                   | Program output: 45                 
Correct output: 11                  | Program output: 85                 
Correct output: 17                  | Program output: 28                 
Correct output: 1                   | Program output: 28                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 37                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -12                
Correct output: -98                 | Program output: 62                 
Correct output: 0                   | Program output: 0                  
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: 0                  
Correct output: -62                 | Program output: 0                  
Correct output: -95                 | Program output: -89                
Correct output: -92                 | Program output: -72                
Correct output: -92                 | Program output: 21                 
Correct output: -87                 | Program output: 23                 
Correct output: -24                 | Program output: 97                 
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -68                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -32                
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: 17                 
Correct output: -63                 | Program output: 11                 
Correct output: -62                 | Program output: 79                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: 0                  
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: 31                 
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -9                 
Correct output: -25                 | Program output: 78                 
Correct output: -95                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: 77                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 70                 
Correct output: -49                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y})
Lexicase best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 exec_yank tag_integer_341 exec_do*while (tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y ())))
Lexicase best errors: [1 1 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y})
Zero cases best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 exec_yank tag_integer_341 exec_do*while (tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y ())))
Zero cases best errors: [1 1 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 659 593 874 11 251 227 226 6 660)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (11 659 593 874 11 251 227 226 6 660)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y})
Best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 exec_yank tag_integer_341 exec_do*while (tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y ())))
Errors: [1 1 0 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 36
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 6.482
Median total errors in population: 6
Error averages by case: (0.989 0.341 0.407 0.126 0.989 0.749 0.773 0.774 0.994 0.34)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.801
Average program size in population (points): 36.09
Average percent parens in population: 0.091
Minimum age in population: 31.27800178527832
Maximum age in population: 34.6062183380127
Average age in population: 33.26041267967224
Median age in population: 33.40345573425293
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.433
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.404
Total error diversity:				 0.006
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 14719404
--- Timings ---
Current time: 1559584665737 milliseconds
Total Time:          72.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.2 seconds, 61.0%
Fitness Testing:     17.6 seconds, 24.3%
Report:              10.6 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 597
Test mean error for best: 0.59700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 65                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 42                 
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 4                  
Correct output: 5                   | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 0                  
Correct output: -95                 | Program output: -89                
Correct output: -92                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 97                 
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -32                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: 17                 
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: 79                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: 0                  
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: -9                 
Correct output: -25                 | Program output: 78                 
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4})
Lexicase best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 boolean_not in3 in1 in2 in2 exec_yank tag_integer_341 boolean_invert_second_then_and integer_lt tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4))
Lexicase best errors: [1 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 43
Percent parens: 0.070
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4})
Zero cases best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 boolean_not in3 in1 in2 in2 exec_yank tag_integer_341 boolean_invert_second_then_and integer_lt tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4))
Zero cases best errors: [1 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 43
Percent parens: 0.070
--- Lexicase Population Statistics ---
Count of elite individuals by case: (59 270 609 512 153 349 377 373 41 451)
Population mean number of elite cases: 3.19
Count of perfect (error zero) individuals by case: (59 270 609 512 153 349 377 373 41 451)
Population mean number of perfect (error zero) cases: 3.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4})
Best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 boolean_not in3 in1 in2 in2 exec_yank tag_integer_341 boolean_invert_second_then_and integer_lt tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4))
Errors: [1 0 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 40
Size: 43
Percent parens: 0.070
--- Population Statistics ---
Average total errors in population: 6.806
Median total errors in population: 7
Error averages by case: (0.941 0.73 0.391 0.488 0.847 0.651 0.623 0.627 0.959 0.549)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.761
Average program size in population (points): 36.126
Average percent parens in population: 0.094
Minimum age in population: 33.61965084075928
Maximum age in population: 35.91949224472046
Average age in population: 34.69665797829628
Median age in population: 34.72354102134705
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.454
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.42
Total error diversity:				 0.008
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 15570522
--- Timings ---
Current time: 1559584669026 milliseconds
Total Time:          75.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.9 seconds, 60.6%
Fitness Testing:     18.6 seconds, 24.5%
Report:              11.2 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 607
Test mean error for best: 0.60700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 65                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 7                  
Correct output: 5                   | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 20                 
Correct output: -95                 | Program output: 48                 
Correct output: -92                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 100                
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 60                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -32                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: 17                 
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: 79                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 75                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: 0                  
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 13                 
Correct output: -25                 | Program output: 78                 
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 50                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4})
Lexicase best program: (integer_gte boolean_eq integer_lte integer_yank in1 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 exec_y_when_autoconstructing (exec_yank tag_integer_341 in2 exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 tag_integer_341 in2 boolean_not in3 in1 in2 in2 exec_yank tag_integer_341 boolean_invert_second_then_and integer_lt tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4)))
Lexicase best errors: [1 1 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 51
Percent parens: 0.078
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4})
Zero cases best program: (integer_gte boolean_eq integer_lte integer_yank in1 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 exec_y_when_autoconstructing (exec_yank tag_integer_341 in2 exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 tag_integer_341 in2 boolean_not in3 in1 in2 in2 exec_yank tag_integer_341 boolean_invert_second_then_and integer_lt tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4)))
Zero cases best errors: [1 1 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 51
Percent parens: 0.078
--- Lexicase Population Statistics ---
Count of elite individuals by case: (49 231 614 16 239 236 169 729 902 418)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (49 231 614 16 239 236 169 729 902 418)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4})
Best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank tag_integer_341 boolean_invert_second_then_and integer_lt tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4))
Errors: [1 1 0 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 40
Size: 43
Percent parens: 0.070
--- Population Statistics ---
Average total errors in population: 6.397
Median total errors in population: 6
Error averages by case: (0.951 0.769 0.386 0.984 0.761 0.764 0.831 0.271 0.098 0.582)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.6
Average program size in population (points): 39.79
Average percent parens in population: 0.081
Minimum age in population: 34.61965084075928
Maximum age in population: 37.67159593105316
Average age in population: 36.18798552823067
Median age in population: 36.11965084075928
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 244
Genome diversity (% unique genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 259
Syntactic diversity (% unique Push programs):	 0.414
Total error diversity:				 0.007
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 16435877
--- Timings ---
Current time: 1559584672312 milliseconds
Total Time:          79.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.6 seconds, 60.2%
Fitness Testing:     19.5 seconds, 24.7%
Report:              11.8 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -12                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output:                    
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 94                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 4                  
Correct output: 5                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: 11                 
Correct output: -81                 | Program output: -73                
Correct output: -76                 | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 81                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: 61                 
Correct output: -62                 | Program output: 0                  
Correct output: -95                 | Program output: -89                
Correct output: -92                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 97                 
Correct output: -69                 | Program output: -69                
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: 82                 
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: 17                 
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: 79                 
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: 0                  
Correct output: -63                 | Program output: 0                  
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 0                  
Correct output: -40                 | Program output: 31                 
Correct output: -56                 | Program output: 69                 
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -9                 
Correct output: -25                 | Program output: 78                 
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 0                  
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y})
Lexicase best program: (integer_gte integer_stackdepth integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 exec_yank in2 exec_yank tag_integer_341 in2 exec_yank tag_integer_341 boolean_invert_second_then_and exec_yank tag_integer_341 in2 exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y ()))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.065
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y})
Zero cases best program: (integer_gte integer_stackdepth integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 exec_yank in2 exec_yank tag_integer_341 in2 exec_yank tag_integer_341 boolean_invert_second_then_and exec_yank tag_integer_341 in2 exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y ()))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.065
--- Lexicase Population Statistics ---
Count of elite individuals by case: (126 128 219 872 498 340 266 445 263 153)
Population mean number of elite cases: 3.31
Count of perfect (error zero) individuals by case: (126 128 219 872 498 340 266 445 263 153)
Population mean number of perfect (error zero) cases: 3.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_integer_341} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y})
Best program: (integer_gte integer_stackdepth integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank tag_integer_341 in2 exec_yank in2 exec_yank tag_integer_341 in2 exec_yank tag_integer_341 boolean_invert_second_then_and exec_yank tag_integer_341 in2 exec_yank tag_integer_341 boolean_invert_second_then_and tagged_926 in3 integer_yankdup exec_dup (boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y ()))
Errors: [1 0 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 43
Size: 46
Percent parens: 0.065
--- Population Statistics ---
Average total errors in population: 6.69
Median total errors in population: 7
Error averages by case: (0.874 0.872 0.781 0.128 0.502 0.66 0.734 0.555 0.737 0.847)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.214
Average program size in population (points): 41.547
Average percent parens in population: 0.081
Minimum age in population: 35.61965084075928
Maximum age in population: 39.21762645244598
Average age in population: 37.6422878203392
Median age in population: 37.72354102134705
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.426
Total error diversity:				 0.008
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.193
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 17245968
--- Timings ---
Current time: 1559584675618 milliseconds
Total Time:          82.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.4 seconds, 59.9%
Fitness Testing:     20.5 seconds, 24.9%
Report:              12.4 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 552
Test mean error for best: 0.55200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output:                    
Correct output: -44                 | Program output:                    
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output:                    
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output:                    
Correct output: -52                 | Program output:                    
Correct output: -59                 | Program output:                    
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output:                    
Correct output: -94                 | Program output:                    
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output:                    
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output:                    
Correct output: -36                 | Program output:                    
Correct output: -98                 | Program output:                    
Correct output: -66                 | Program output:                    
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 42                 
Correct output: 27                  | Program output: 38                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output:                    
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 47                 
Correct output: -70                 | Program output:                    
Correct output: -81                 | Program output:                    
Correct output: -76                 | Program output:                    
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output:                    
Correct output: -62                 | Program output:                    
Correct output: -95                 | Program output:                    
Correct output: -92                 | Program output:                    
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output:                    
Correct output: -69                 | Program output:                    
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output:                    
Correct output: -58                 | Program output:                    
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output:                    
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output:                    
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -32                
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output:                    
Correct output: -79                 | Program output: 17                 
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output:                    
Correct output: -83                 | Program output: 87                 
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output:                    
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: 0                  
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output:                    
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output:                    
Correct output: -25                 | Program output:                    
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 50                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output:                    
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4})
Lexicase best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank integer_lt tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.095
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4})
Zero cases best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank integer_lt tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.095
--- Lexicase Population Statistics ---
Count of elite individuals by case: (625 487 487 181 28 217 315 215 202 501)
Population mean number of elite cases: 3.26
Count of perfect (error zero) individuals by case: (625 487 487 181 28 217 315 215 202 501)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4})
Best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank integer_lt tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 38
Size: 42
Percent parens: 0.095
--- Population Statistics ---
Average total errors in population: 6.742
Median total errors in population: 7
Error averages by case: (0.375 0.513 0.513 0.819 0.972 0.783 0.685 0.785 0.798 0.499)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.418
Average program size in population (points): 43.595
Average percent parens in population: 0.072
Minimum age in population: 36.61965084075928
Maximum age in population: 40.99507763981819
Average age in population: 38.82750969678164
Median age in population: 38.94060206413269
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.009
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.203
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 18094968
--- Timings ---
Current time: 1559584678837 milliseconds
Total Time:          85.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.1 seconds, 59.6%
Fitness Testing:     21.4 seconds, 25.0%
Report:              13.0 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 492
Test mean error for best: 0.49200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: 0                  
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -68                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y})
Lexicase best program: (integer_gte in2 integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 boolean_dup_times boolean_pop boolean_invert_second_then_and in3 in3 integer_yankdup integer_min boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y ())
Lexicase best errors: [0 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 28
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y})
Zero cases best program: (integer_gte in2 integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 boolean_dup_times boolean_pop boolean_invert_second_then_and in3 in3 integer_yankdup integer_min boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y ())
Zero cases best errors: [0 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 28
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 602 50 497 143 232 406 719 473 232)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (209 602 50 497 143 232 406 719 473 232)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y})
Best program: (integer_gte in2 integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 boolean_dup_times boolean_pop boolean_invert_second_then_and in3 in3 integer_yankdup integer_min boolean_xor print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y ())
Errors: [0 0 1 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 28
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 6.437
Median total errors in population: 7
Error averages by case: (0.791 0.398 0.95 0.503 0.857 0.768 0.594 0.281 0.527 0.768)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.511
Average program size in population (points): 41.894
Average percent parens in population: 0.081
Minimum age in population: 38.78012645244598
Maximum age in population: 42.08207154273987
Average age in population: 40.41455108392239
Median age in population: 40.67159593105316
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 274
Genome diversity (% unique genomes):	 0.478
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 284
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.009
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 18842881
--- Timings ---
Current time: 1559584682004 milliseconds
Total Time:          88.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.9 seconds, 59.5%
Fitness Testing:     22.3 seconds, 25.1%
Report:              13.5 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 304
Test mean error for best: 0.30400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 38                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 47                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_926} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4})
Lexicase best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank integer_lt tagged_926 integer_min print_integer in2 boolean_rot integer_max integer_mod exec_if (integer_min print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 46
Percent parens: 0.087
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_926} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4})
Zero cases best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank integer_lt tagged_926 integer_min print_integer in2 boolean_rot integer_max integer_mod exec_if (integer_min print_integer in2 boolean_rot integer_max integer_mod boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 46
Percent parens: 0.087
--- Lexicase Population Statistics ---
Count of elite individuals by case: (829 829 686 508 811 511 170 405 827 828)
Population mean number of elite cases: 6.40
Count of perfect (error zero) individuals by case: (829 829 686 508 811 511 170 405 827 828)
Population mean number of perfect (error zero) cases: 6.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction tagged_926} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_534} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 2, :instruction in4})
Best program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank in2 tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_div boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 38
Size: 42
Percent parens: 0.095
--- Population Statistics ---
Average total errors in population: 3.596
Median total errors in population: 3
Error averages by case: (0.171 0.171 0.314 0.492 0.189 0.489 0.83 0.595 0.173 0.172)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.876
Average program size in population (points): 39.678
Average percent parens in population: 0.071
Minimum age in population: 40.22586119174957
Maximum age in population: 43.40159060060978
Average age in population: 42.01067784053087
Median age in population: 42.06256581097841
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 151
Genome diversity (% unique genomes):	 0.449
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 161
Syntactic diversity (% unique Push programs):	 0.418
Total error diversity:				 0.011
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 19672557
--- Timings ---
Current time: 1559584685352 milliseconds
Total Time:          92.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.6 seconds, 59.3%
Fitness Testing:     23.3 seconds, 25.3%
Report:              14.1 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 28
Successful program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank in2 tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_div boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 42


Auto-simplifying with starting size: 42
step: 0
program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank in2 tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_div boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 500
program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank in2 tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_div boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 1000
program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank in2 tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_div boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 1500
program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank in2 tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_div boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 2000
program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank in2 tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_div boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 2500
program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank in2 tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_div boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 3000
program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank in2 tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_div boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 3500
program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank in2 tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_div boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 4000
program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank in2 tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_div boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 4500
program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank in2 tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_div boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 5000
program: (integer_gte boolean_eq integer_lte integer_yank in4 boolean_shove boolean_invert_second_then_and tagged_926 in3 in1 in2 exec_yank exec_yankdup in2 boolean_not in3 in1 in2 in2 exec_yank in2 tagged_926 in3 integer_yankdup exec_if (integer_min print_integer in2 boolean_rot integer_max integer_div boolean_swap integer_dup_times tagged_534 boolean_xor exec_y () integer_empty in4) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 304
Test mean error for best: 0.30400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 38                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 47                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: -49                
;;******************************
