Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[48 48 37 48] 37] [[78 78 78 -14] -14] [[98 -40 -40 -40] -40] [[1 1 56 1] 1] [[35 35 35 -67] -67] [[19 40 40 40] 19] [[-34 -34 -34 -82] -82] [[-60 73 -60 -60] -60] [[77 -17 77 77] -17] [[-32 -79 -32 -32] -79] [(-23 -23 -23 -23) -23] [(62 62 62 62) 62] [(79 79 79 79) 79] [(80 80 80 80) 80] [(-19 -19 -19 -19) -19] [(54 82 28 51) 28] [(1 10 78 56) 1] [(37 85 3 14) 3] [(20 72 15 45) 15] [(61 59 51 25) 25] [(63 34 38 50) 34] [(67 86 44 51) 44] [(71 19 40 61) 19] [(100 86 65 41) 41] [(51 28 74 16) 16] [(44 50 63 92) 44] [(64 76 31 29) 29] [(10 37 99 48) 10] [(95 98 63 98) 63] [(83 13 87 100) 13] [(59 77 74 7) 7] [(5 61 69 47) 5] [(7 1 23 38) 1] [(70 99 89 42) 42] [(64 61 5 91) 5] [(33 -52 -50 -40) -52] [(68 23 -39 58) -39] [(19 47 -62 -76) -76] [(10 73 88 -36) -36] [(9 74 82 -76) -76] [(17 79 -28 87) -28] [(-64 75 -2 -35) -64] [(-49 -95 15 -80) -95] [(37 -48 -91 -31) -91] [(-21 -70 83 44) -70] [(-83 71 3 42) -83] [(-88 3 -18 9) -88] [(37 -55 96 -40) -55] [(-30 49 -53 -98) -98] [(74 -8 53 -94) -94] [(55 6 96 -10) -10] [(71 -64 18 50) -64] [(-40 -77 -9 -44) -77] [(72 -86 44 -92) -92] [(50 48 -38 -37) -38] [(-60 -44 45 -37) -60] [(-93 -17 -71 -8) -93] [(-1 41 74 100) -1] [(54 -60 94 49) -60] [(69 -10 -50 51) -50] [(-78 -87 71 -10) -87] [(-77 -73 21 -43) -77] [(98 -59 -76 64) -76] [(57 -92 -6 22) -92] [(-41 36 68 52) -41] [(-14 90 -58 1) -58] [(47 86 63 78) 47] [(-27 -33 23 89) -33] [(-97 -1 53 39) -97] [(-94 78 -51 34) -94] [(12 76 92 -36) -36] [(6 -87 -76 -74) -87] [(-24 58 7 89) -24] [(24 79 47 7) 7] [(17 26 -73 53) -73] [(-51 89 -9 -58) -58] [(-54 -81 12 -73) -81] [(-39 80 58 -55) -55] [(-50 79 46 16) -50] [(39 96 56 -67) -67] [(-57 13 -37 80) -57] [(24 81 -59 22) -59] [(76 78 71 -66) -66] [(-24 21 -53 -39) -53] [(-8 -32 26 39) -32] [(-65 83 64 3) -65] [(46 -30 76 -15) -30] [(-75 87 29 92) -75] [(-58 -87 -77 -94) -94] [(-90 4 -12 -53) -90] [(-69 66 -49 90) -69] [(74 19 54 2) 2] [(30 -24 73 -75) -75] [(-73 4 -68 77) -73] [(68 34 56 -79) -79])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[48 48 37 48] 37]
Train Case:   6 | Input/Output: [[78 78 78 -14] -14]
Train Case:   7 | Input/Output: [[98 -40 -40 -40] -40]
Train Case:   8 | Input/Output: [[1 1 56 1] 1]
Train Case:   9 | Input/Output: [[35 35 35 -67] -67]
Train Case:  10 | Input/Output: [[19 40 40 40] 19]
Train Case:  11 | Input/Output: [[-34 -34 -34 -82] -82]
Train Case:  12 | Input/Output: [[-60 73 -60 -60] -60]
Train Case:  13 | Input/Output: [[77 -17 77 77] -17]
Train Case:  14 | Input/Output: [[-32 -79 -32 -32] -79]
Train Case:  15 | Input/Output: [(-23 -23 -23 -23) -23]
Train Case:  16 | Input/Output: [(62 62 62 62) 62]
Train Case:  17 | Input/Output: [(79 79 79 79) 79]
Train Case:  18 | Input/Output: [(80 80 80 80) 80]
Train Case:  19 | Input/Output: [(-19 -19 -19 -19) -19]
Train Case:  20 | Input/Output: [(54 82 28 51) 28]
Train Case:  21 | Input/Output: [(1 10 78 56) 1]
Train Case:  22 | Input/Output: [(37 85 3 14) 3]
Train Case:  23 | Input/Output: [(20 72 15 45) 15]
Train Case:  24 | Input/Output: [(61 59 51 25) 25]
Train Case:  25 | Input/Output: [(63 34 38 50) 34]
Train Case:  26 | Input/Output: [(67 86 44 51) 44]
Train Case:  27 | Input/Output: [(71 19 40 61) 19]
Train Case:  28 | Input/Output: [(100 86 65 41) 41]
Train Case:  29 | Input/Output: [(51 28 74 16) 16]
Train Case:  30 | Input/Output: [(44 50 63 92) 44]
Train Case:  31 | Input/Output: [(64 76 31 29) 29]
Train Case:  32 | Input/Output: [(10 37 99 48) 10]
Train Case:  33 | Input/Output: [(95 98 63 98) 63]
Train Case:  34 | Input/Output: [(83 13 87 100) 13]
Train Case:  35 | Input/Output: [(59 77 74 7) 7]
Train Case:  36 | Input/Output: [(5 61 69 47) 5]
Train Case:  37 | Input/Output: [(7 1 23 38) 1]
Train Case:  38 | Input/Output: [(70 99 89 42) 42]
Train Case:  39 | Input/Output: [(64 61 5 91) 5]
Train Case:  40 | Input/Output: [(33 -52 -50 -40) -52]
Train Case:  41 | Input/Output: [(68 23 -39 58) -39]
Train Case:  42 | Input/Output: [(19 47 -62 -76) -76]
Train Case:  43 | Input/Output: [(10 73 88 -36) -36]
Train Case:  44 | Input/Output: [(9 74 82 -76) -76]
Train Case:  45 | Input/Output: [(17 79 -28 87) -28]
Train Case:  46 | Input/Output: [(-64 75 -2 -35) -64]
Train Case:  47 | Input/Output: [(-49 -95 15 -80) -95]
Train Case:  48 | Input/Output: [(37 -48 -91 -31) -91]
Train Case:  49 | Input/Output: [(-21 -70 83 44) -70]
Train Case:  50 | Input/Output: [(-83 71 3 42) -83]
Train Case:  51 | Input/Output: [(-88 3 -18 9) -88]
Train Case:  52 | Input/Output: [(37 -55 96 -40) -55]
Train Case:  53 | Input/Output: [(-30 49 -53 -98) -98]
Train Case:  54 | Input/Output: [(74 -8 53 -94) -94]
Train Case:  55 | Input/Output: [(55 6 96 -10) -10]
Train Case:  56 | Input/Output: [(71 -64 18 50) -64]
Train Case:  57 | Input/Output: [(-40 -77 -9 -44) -77]
Train Case:  58 | Input/Output: [(72 -86 44 -92) -92]
Train Case:  59 | Input/Output: [(50 48 -38 -37) -38]
Train Case:  60 | Input/Output: [(-60 -44 45 -37) -60]
Train Case:  61 | Input/Output: [(-93 -17 -71 -8) -93]
Train Case:  62 | Input/Output: [(-1 41 74 100) -1]
Train Case:  63 | Input/Output: [(54 -60 94 49) -60]
Train Case:  64 | Input/Output: [(69 -10 -50 51) -50]
Train Case:  65 | Input/Output: [(-78 -87 71 -10) -87]
Train Case:  66 | Input/Output: [(-77 -73 21 -43) -77]
Train Case:  67 | Input/Output: [(98 -59 -76 64) -76]
Train Case:  68 | Input/Output: [(57 -92 -6 22) -92]
Train Case:  69 | Input/Output: [(-41 36 68 52) -41]
Train Case:  70 | Input/Output: [(-14 90 -58 1) -58]
Train Case:  71 | Input/Output: [(47 86 63 78) 47]
Train Case:  72 | Input/Output: [(-27 -33 23 89) -33]
Train Case:  73 | Input/Output: [(-97 -1 53 39) -97]
Train Case:  74 | Input/Output: [(-94 78 -51 34) -94]
Train Case:  75 | Input/Output: [(12 76 92 -36) -36]
Train Case:  76 | Input/Output: [(6 -87 -76 -74) -87]
Train Case:  77 | Input/Output: [(-24 58 7 89) -24]
Train Case:  78 | Input/Output: [(24 79 47 7) 7]
Train Case:  79 | Input/Output: [(17 26 -73 53) -73]
Train Case:  80 | Input/Output: [(-51 89 -9 -58) -58]
Train Case:  81 | Input/Output: [(-54 -81 12 -73) -81]
Train Case:  82 | Input/Output: [(-39 80 58 -55) -55]
Train Case:  83 | Input/Output: [(-50 79 46 16) -50]
Train Case:  84 | Input/Output: [(39 96 56 -67) -67]
Train Case:  85 | Input/Output: [(-57 13 -37 80) -57]
Train Case:  86 | Input/Output: [(24 81 -59 22) -59]
Train Case:  87 | Input/Output: [(76 78 71 -66) -66]
Train Case:  88 | Input/Output: [(-24 21 -53 -39) -53]
Train Case:  89 | Input/Output: [(-8 -32 26 39) -32]
Train Case:  90 | Input/Output: [(-65 83 64 3) -65]
Train Case:  91 | Input/Output: [(46 -30 76 -15) -30]
Train Case:  92 | Input/Output: [(-75 87 29 92) -75]
Train Case:  93 | Input/Output: [(-58 -87 -77 -94) -94]
Train Case:  94 | Input/Output: [(-90 4 -12 -53) -90]
Train Case:  95 | Input/Output: [(-69 66 -49 90) -69]
Train Case:  96 | Input/Output: [(74 19 54 2) 2]
Train Case:  97 | Input/Output: [(30 -24 73 -75) -75]
Train Case:  98 | Input/Output: [(-73 4 -68 77) -73]
Train Case:  99 | Input/Output: [(68 34 56 -79) -79]
Test Case:   0 | Input/Output: [[61 -74 61 61] -74]
Test Case:   1 | Input/Output: [[-96 -83 -96 -96] -96]
Test Case:   2 | Input/Output: [[-25 -25 33 -25] -25]
Test Case:   3 | Input/Output: [[-77 -77 -77 -21] -77]
Test Case:   4 | Input/Output: [[64 64 64 65] 64]
Test Case:   5 | Input/Output: [[11 11 -7 11] -7]
Test Case:   6 | Input/Output: [[-1 -13 -1 -1] -13]
Test Case:   7 | Input/Output: [[-3 -3 -3 25] -3]
Test Case:   8 | Input/Output: [[7 7 7 10] 7]
Test Case:   9 | Input/Output: [[0 -86 -86 -86] -86]
Test Case:  10 | Input/Output: [[-20 -20 -20 -26] -26]
Test Case:  11 | Input/Output: [[49 95 49 49] 49]
Test Case:  12 | Input/Output: [[-65 87 -65 -65] -65]
Test Case:  13 | Input/Output: [[-14 -10 -10 -10] -14]
Test Case:  14 | Input/Output: [[-92 -92 59 -92] -92]
Test Case:  15 | Input/Output: [[77 77 74 77] 74]
Test Case:  16 | Input/Output: [[-8 36 -8 -8] -8]
Test Case:  17 | Input/Output: [[2 -99 -99 -99] -99]
Test Case:  18 | Input/Output: [[30 30 30 -30] -30]
Test Case:  19 | Input/Output: [[-26 -26 -91 -26] -91]
Test Case:  20 | Input/Output: [[32 32 95 32] 32]
Test Case:  21 | Input/Output: [[7 7 7 -27] -27]
Test Case:  22 | Input/Output: [[-50 78 -50 -50] -50]
Test Case:  23 | Input/Output: [[18 2 18 18] 2]
Test Case:  24 | Input/Output: [[-100 -76 -100 -100] -100]
Test Case:  25 | Input/Output: [[66 43 43 43] 43]
Test Case:  26 | Input/Output: [[-79 -26 -79 -79] -79]
Test Case:  27 | Input/Output: [[99 91 91 91] 91]
Test Case:  28 | Input/Output: [[86 88 88 88] 86]
Test Case:  29 | Input/Output: [[-28 -91 -91 -91] -91]
Test Case:  30 | Input/Output: [[-96 -96 -6 -96] -96]
Test Case:  31 | Input/Output: [[-80 -29 -29 -29] -80]
Test Case:  32 | Input/Output: [[-30 -30 -30 56] -30]
Test Case:  33 | Input/Output: [[-82 0 0 0] -82]
Test Case:  34 | Input/Output: [[43 -60 -60 -60] -60]
Test Case:  35 | Input/Output: [[31 -36 31 31] -36]
Test Case:  36 | Input/Output: [[-5 42 42 42] -5]
Test Case:  37 | Input/Output: [[60 60 60 -61] -61]
Test Case:  38 | Input/Output: [[15 75 15 15] 15]
Test Case:  39 | Input/Output: [[88 88 88 -23] -23]
Test Case:  40 | Input/Output: [[12 -37 -37 -37] -37]
Test Case:  41 | Input/Output: [[-27 -58 -27 -27] -58]
Test Case:  42 | Input/Output: [[49 -94 49 49] -94]
Test Case:  43 | Input/Output: [[-11 -27 -11 -11] -27]
Test Case:  44 | Input/Output: [[-29 49 49 49] -29]
Test Case:  45 | Input/Output: [[1 1 -16 1] -16]
Test Case:  46 | Input/Output: [[-21 41 -21 -21] -21]
Test Case:  47 | Input/Output: [[29 29 29 54] 29]
Test Case:  48 | Input/Output: [[65 -4 65 65] -4]
Test Case:  49 | Input/Output: [[-96 -81 -81 -81] -96]
Test Case:  50 | Input/Output: [[61 61 90 61] 61]
Test Case:  51 | Input/Output: [[78 19 19 19] 19]
Test Case:  52 | Input/Output: [[-29 -29 -29 64] -29]
Test Case:  53 | Input/Output: [[-43 -43 -43 -96] -96]
Test Case:  54 | Input/Output: [[74 -16 74 74] -16]
Test Case:  55 | Input/Output: [[33 33 33 -48] -48]
Test Case:  56 | Input/Output: [[80 80 80 -83] -83]
Test Case:  57 | Input/Output: [[22 -22 -22 -22] -22]
Test Case:  58 | Input/Output: [[-44 62 62 62] -44]
Test Case:  59 | Input/Output: [[67 -58 67 67] -58]
Test Case:  60 | Input/Output: [[47 -49 -49 -49] -49]
Test Case:  61 | Input/Output: [[16 16 16 69] 16]
Test Case:  62 | Input/Output: [[-79 -79 -55 -79] -79]
Test Case:  63 | Input/Output: [[58 58 51 58] 51]
Test Case:  64 | Input/Output: [[71 52 71 71] 52]
Test Case:  65 | Input/Output: [[-84 -45 -45 -45] -84]
Test Case:  66 | Input/Output: [[-66 87 87 87] -66]
Test Case:  67 | Input/Output: [[-85 88 -85 -85] -85]
Test Case:  68 | Input/Output: [[-96 -88 -96 -96] -96]
Test Case:  69 | Input/Output: [[13 -83 13 13] -83]
Test Case:  70 | Input/Output: [[-91 -91 81 -91] -91]
Test Case:  71 | Input/Output: [[-77 2 -77 -77] -77]
Test Case:  72 | Input/Output: [[-12 15 15 15] -12]
Test Case:  73 | Input/Output: [[72 72 81 72] 72]
Test Case:  74 | Input/Output: [[-8 13 13 13] -8]
Test Case:  75 | Input/Output: [[85 85 85 -39] -39]
Test Case:  76 | Input/Output: [[-92 -92 -92 11] -92]
Test Case:  77 | Input/Output: [[5 5 5 99] 5]
Test Case:  78 | Input/Output: [[6 39 6 6] 6]
Test Case:  79 | Input/Output: [[70 29 29 29] 29]
Test Case:  80 | Input/Output: [[86 86 -6 86] -6]
Test Case:  81 | Input/Output: [[98 71 98 98] 71]
Test Case:  82 | Input/Output: [[70 -47 70 70] -47]
Test Case:  83 | Input/Output: [[-97 -97 85 -97] -97]
Test Case:  84 | Input/Output: [[82 -57 -57 -57] -57]
Test Case:  85 | Input/Output: [[18 -20 -20 -20] -20]
Test Case:  86 | Input/Output: [[93 93 93 6] 6]
Test Case:  87 | Input/Output: [[79 79 79 98] 79]
Test Case:  88 | Input/Output: [[-8 -8 61 -8] -8]
Test Case:  89 | Input/Output: [[54 54 36 54] 36]
Test Case:  90 | Input/Output: [[-21 38 38 38] -21]
Test Case:  91 | Input/Output: [[-90 -95 -90 -90] -95]
Test Case:  92 | Input/Output: [[0 -49 -49 -49] -49]
Test Case:  93 | Input/Output: [[62 62 62 -73] -73]
Test Case:  94 | Input/Output: [[-33 69 -33 -33] -33]
Test Case:  95 | Input/Output: [[-8 13 13 13] -8]
Test Case:  96 | Input/Output: [[82 3 82 82] 3]
Test Case:  97 | Input/Output: [[-74 -74 79 -74] -74]
Test Case:  98 | Input/Output: [[-32 -32 -37 -32] -37]
Test Case:  99 | Input/Output: [[36 36 36 -14] -14]
Test Case: 100 | Input/Output: [(35 35 35 35) 35]
Test Case: 101 | Input/Output: [(9 9 9 9) 9]
Test Case: 102 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 103 | Input/Output: [(93 93 93 93) 93]
Test Case: 104 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 105 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 106 | Input/Output: [(84 84 84 84) 84]
Test Case: 107 | Input/Output: [(85 85 85 85) 85]
Test Case: 108 | Input/Output: [(12 12 12 12) 12]
Test Case: 109 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 110 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 111 | Input/Output: [(90 90 90 90) 90]
Test Case: 112 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 113 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 114 | Input/Output: [(23 23 23 23) 23]
Test Case: 115 | Input/Output: [(78 78 78 78) 78]
Test Case: 116 | Input/Output: [(81 81 81 81) 81]
Test Case: 117 | Input/Output: [(29 29 29 29) 29]
Test Case: 118 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 119 | Input/Output: [(16 16 16 16) 16]
Test Case: 120 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 121 | Input/Output: [(48 48 48 48) 48]
Test Case: 122 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 123 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 124 | Input/Output: [(50 50 50 50) 50]
Test Case: 125 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 126 | Input/Output: [(84 84 84 84) 84]
Test Case: 127 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 128 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 129 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 130 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 131 | Input/Output: [(91 91 91 91) 91]
Test Case: 132 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 133 | Input/Output: [(62 62 62 62) 62]
Test Case: 134 | Input/Output: [(11 11 11 11) 11]
Test Case: 135 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 136 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 137 | Input/Output: [(44 44 44 44) 44]
Test Case: 138 | Input/Output: [(35 35 35 35) 35]
Test Case: 139 | Input/Output: [(50 50 50 50) 50]
Test Case: 140 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 141 | Input/Output: [(71 71 71 71) 71]
Test Case: 142 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 143 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 144 | Input/Output: [(25 25 25 25) 25]
Test Case: 145 | Input/Output: [(75 75 75 75) 75]
Test Case: 146 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 147 | Input/Output: [(100 100 100 100) 100]
Test Case: 148 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 149 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 150 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 151 | Input/Output: [(77 77 77 77) 77]
Test Case: 152 | Input/Output: [(83 83 83 83) 83]
Test Case: 153 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 154 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 155 | Input/Output: [(20 20 20 20) 20]
Test Case: 156 | Input/Output: [(78 78 78 78) 78]
Test Case: 157 | Input/Output: [(33 33 33 33) 33]
Test Case: 158 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 159 | Input/Output: [(78 78 78 78) 78]
Test Case: 160 | Input/Output: [(30 30 30 30) 30]
Test Case: 161 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 162 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 163 | Input/Output: [(62 62 62 62) 62]
Test Case: 164 | Input/Output: [(12 12 12 12) 12]
Test Case: 165 | Input/Output: [(72 72 72 72) 72]
Test Case: 166 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 167 | Input/Output: [(56 56 56 56) 56]
Test Case: 168 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 169 | Input/Output: [(34 34 34 34) 34]
Test Case: 170 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 171 | Input/Output: [(63 63 63 63) 63]
Test Case: 172 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 173 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 174 | Input/Output: [(17 17 17 17) 17]
Test Case: 175 | Input/Output: [(68 68 68 68) 68]
Test Case: 176 | Input/Output: [(39 39 39 39) 39]
Test Case: 177 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 178 | Input/Output: [(69 69 69 69) 69]
Test Case: 179 | Input/Output: [(30 30 30 30) 30]
Test Case: 180 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 181 | Input/Output: [(60 60 60 60) 60]
Test Case: 182 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 183 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 184 | Input/Output: [(76 76 76 76) 76]
Test Case: 185 | Input/Output: [(7 7 7 7) 7]
Test Case: 186 | Input/Output: [(75 75 75 75) 75]
Test Case: 187 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 188 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 189 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 190 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 191 | Input/Output: [(6 6 6 6) 6]
Test Case: 192 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 193 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 194 | Input/Output: [(96 96 96 96) 96]
Test Case: 195 | Input/Output: [(9 9 9 9) 9]
Test Case: 196 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 197 | Input/Output: [(45 45 45 45) 45]
Test Case: 198 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 199 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 200 | Input/Output: [(82 25 57 68) 25]
Test Case: 201 | Input/Output: [(53 80 22 50) 22]
Test Case: 202 | Input/Output: [(89 67 4 8) 4]
Test Case: 203 | Input/Output: [(75 26 18 59) 18]
Test Case: 204 | Input/Output: [(59 99 74 100) 59]
Test Case: 205 | Input/Output: [(26 42 76 56) 26]
Test Case: 206 | Input/Output: [(22 83 79 70) 22]
Test Case: 207 | Input/Output: [(58 36 31 11) 11]
Test Case: 208 | Input/Output: [(19 57 87 89) 19]
Test Case: 209 | Input/Output: [(24 9 54 18) 9]
Test Case: 210 | Input/Output: [(23 67 0 42) 0]
Test Case: 211 | Input/Output: [(97 0 62 47) 0]
Test Case: 212 | Input/Output: [(46 9 10 45) 9]
Test Case: 213 | Input/Output: [(71 31 79 84) 31]
Test Case: 214 | Input/Output: [(37 92 58 42) 37]
Test Case: 215 | Input/Output: [(48 13 92 1) 1]
Test Case: 216 | Input/Output: [(60 72 16 91) 16]
Test Case: 217 | Input/Output: [(32 43 14 49) 14]
Test Case: 218 | Input/Output: [(71 100 60 68) 60]
Test Case: 219 | Input/Output: [(57 42 23 40) 23]
Test Case: 220 | Input/Output: [(77 96 57 22) 22]
Test Case: 221 | Input/Output: [(35 76 5 100) 5]
Test Case: 222 | Input/Output: [(89 69 0 2) 0]
Test Case: 223 | Input/Output: [(54 75 42 6) 6]
Test Case: 224 | Input/Output: [(33 8 94 70) 8]
Test Case: 225 | Input/Output: [(85 14 13 15) 13]
Test Case: 226 | Input/Output: [(37 69 81 43) 37]
Test Case: 227 | Input/Output: [(67 11 46 69) 11]
Test Case: 228 | Input/Output: [(95 73 43 83) 43]
Test Case: 229 | Input/Output: [(16 9 38 80) 9]
Test Case: 230 | Input/Output: [(69 85 97 82) 69]
Test Case: 231 | Input/Output: [(65 69 84 84) 65]
Test Case: 232 | Input/Output: [(7 3 47 1) 1]
Test Case: 233 | Input/Output: [(74 54 90 46) 46]
Test Case: 234 | Input/Output: [(90 81 92 74) 74]
Test Case: 235 | Input/Output: [(48 50 88 57) 48]
Test Case: 236 | Input/Output: [(15 7 78 71) 7]
Test Case: 237 | Input/Output: [(2 91 7 62) 2]
Test Case: 238 | Input/Output: [(94 46 57 58) 46]
Test Case: 239 | Input/Output: [(62 92 17 35) 17]
Test Case: 240 | Input/Output: [(70 84 11 63) 11]
Test Case: 241 | Input/Output: [(5 56 100 19) 5]
Test Case: 242 | Input/Output: [(11 7 48 24) 7]
Test Case: 243 | Input/Output: [(67 78 27 47) 27]
Test Case: 244 | Input/Output: [(11 58 22 98) 11]
Test Case: 245 | Input/Output: [(39 24 68 51) 24]
Test Case: 246 | Input/Output: [(37 27 78 27) 27]
Test Case: 247 | Input/Output: [(1 91 23 91) 1]
Test Case: 248 | Input/Output: [(69 46 31 65) 31]
Test Case: 249 | Input/Output: [(21 67 22 49) 21]
Test Case: 250 | Input/Output: [(4 89 43 77) 4]
Test Case: 251 | Input/Output: [(44 8 48 90) 8]
Test Case: 252 | Input/Output: [(2 45 67 37) 2]
Test Case: 253 | Input/Output: [(100 63 23 70) 23]
Test Case: 254 | Input/Output: [(45 50 8 48) 8]
Test Case: 255 | Input/Output: [(93 50 85 84) 50]
Test Case: 256 | Input/Output: [(36 19 32 4) 4]
Test Case: 257 | Input/Output: [(5 33 66 68) 5]
Test Case: 258 | Input/Output: [(30 15 17 98) 15]
Test Case: 259 | Input/Output: [(76 18 96 17) 17]
Test Case: 260 | Input/Output: [(31 95 71 59) 31]
Test Case: 261 | Input/Output: [(19 19 69 2) 2]
Test Case: 262 | Input/Output: [(81 16 29 63) 16]
Test Case: 263 | Input/Output: [(51 54 71 99) 51]
Test Case: 264 | Input/Output: [(46 79 89 57) 46]
Test Case: 265 | Input/Output: [(33 39 16 17) 16]
Test Case: 266 | Input/Output: [(74 75 87 6) 6]
Test Case: 267 | Input/Output: [(49 15 48 22) 15]
Test Case: 268 | Input/Output: [(50 93 74 56) 50]
Test Case: 269 | Input/Output: [(31 44 36 19) 19]
Test Case: 270 | Input/Output: [(36 0 36 46) 0]
Test Case: 271 | Input/Output: [(27 87 88 21) 21]
Test Case: 272 | Input/Output: [(92 0 17 45) 0]
Test Case: 273 | Input/Output: [(87 4 0 8) 0]
Test Case: 274 | Input/Output: [(26 71 41 8) 8]
Test Case: 275 | Input/Output: [(80 7 80 76) 7]
Test Case: 276 | Input/Output: [(92 86 87 26) 26]
Test Case: 277 | Input/Output: [(16 72 97 60) 16]
Test Case: 278 | Input/Output: [(25 0 76 52) 0]
Test Case: 279 | Input/Output: [(5 76 84 49) 5]
Test Case: 280 | Input/Output: [(82 99 16 5) 5]
Test Case: 281 | Input/Output: [(7 66 85 13) 7]
Test Case: 282 | Input/Output: [(82 82 55 41) 41]
Test Case: 283 | Input/Output: [(11 37 59 60) 11]
Test Case: 284 | Input/Output: [(39 10 74 0) 0]
Test Case: 285 | Input/Output: [(88 8 39 100) 8]
Test Case: 286 | Input/Output: [(19 10 32 85) 10]
Test Case: 287 | Input/Output: [(94 18 57 95) 18]
Test Case: 288 | Input/Output: [(43 75 6 29) 6]
Test Case: 289 | Input/Output: [(31 79 66 82) 31]
Test Case: 290 | Input/Output: [(0 6 42 67) 0]
Test Case: 291 | Input/Output: [(49 5 56 71) 5]
Test Case: 292 | Input/Output: [(54 82 61 75) 54]
Test Case: 293 | Input/Output: [(10 41 87 60) 10]
Test Case: 294 | Input/Output: [(94 57 29 17) 17]
Test Case: 295 | Input/Output: [(2 36 49 97) 2]
Test Case: 296 | Input/Output: [(30 1 81 90) 1]
Test Case: 297 | Input/Output: [(66 0 10 40) 0]
Test Case: 298 | Input/Output: [(15 4 69 74) 4]
Test Case: 299 | Input/Output: [(60 78 2 2) 2]
Test Case: 300 | Input/Output: [(52 22 89 8) 8]
Test Case: 301 | Input/Output: [(57 56 54 85) 54]
Test Case: 302 | Input/Output: [(51 5 23 19) 5]
Test Case: 303 | Input/Output: [(81 72 41 13) 13]
Test Case: 304 | Input/Output: [(11 97 98 65) 11]
Test Case: 305 | Input/Output: [(69 94 68 64) 64]
Test Case: 306 | Input/Output: [(42 26 66 47) 26]
Test Case: 307 | Input/Output: [(35 14 47 64) 14]
Test Case: 308 | Input/Output: [(6 31 35 74) 6]
Test Case: 309 | Input/Output: [(34 47 90 7) 7]
Test Case: 310 | Input/Output: [(73 45 34 83) 34]
Test Case: 311 | Input/Output: [(58 81 43 97) 43]
Test Case: 312 | Input/Output: [(75 60 60 1) 1]
Test Case: 313 | Input/Output: [(94 87 20 14) 14]
Test Case: 314 | Input/Output: [(89 47 47 65) 47]
Test Case: 315 | Input/Output: [(42 21 29 39) 21]
Test Case: 316 | Input/Output: [(76 5 58 16) 5]
Test Case: 317 | Input/Output: [(41 1 25 24) 1]
Test Case: 318 | Input/Output: [(17 75 15 21) 15]
Test Case: 319 | Input/Output: [(30 9 75 77) 9]
Test Case: 320 | Input/Output: [(40 18 43 34) 18]
Test Case: 321 | Input/Output: [(62 29 32 32) 29]
Test Case: 322 | Input/Output: [(78 35 64 5) 5]
Test Case: 323 | Input/Output: [(42 37 41 75) 37]
Test Case: 324 | Input/Output: [(16 0 87 46) 0]
Test Case: 325 | Input/Output: [(12 38 66 99) 12]
Test Case: 326 | Input/Output: [(73 26 38 49) 26]
Test Case: 327 | Input/Output: [(9 51 20 45) 9]
Test Case: 328 | Input/Output: [(59 18 13 34) 13]
Test Case: 329 | Input/Output: [(57 3 55 41) 3]
Test Case: 330 | Input/Output: [(17 16 19 86) 16]
Test Case: 331 | Input/Output: [(70 42 45 17) 17]
Test Case: 332 | Input/Output: [(25 66 98 25) 25]
Test Case: 333 | Input/Output: [(90 52 71 54) 52]
Test Case: 334 | Input/Output: [(16 36 11 34) 11]
Test Case: 335 | Input/Output: [(8 52 8 91) 8]
Test Case: 336 | Input/Output: [(61 86 62 86) 61]
Test Case: 337 | Input/Output: [(48 70 62 51) 48]
Test Case: 338 | Input/Output: [(45 64 38 75) 38]
Test Case: 339 | Input/Output: [(65 91 47 0) 0]
Test Case: 340 | Input/Output: [(43 55 12 39) 12]
Test Case: 341 | Input/Output: [(10 92 78 31) 10]
Test Case: 342 | Input/Output: [(61 28 49 20) 20]
Test Case: 343 | Input/Output: [(32 5 30 28) 5]
Test Case: 344 | Input/Output: [(26 93 46 70) 26]
Test Case: 345 | Input/Output: [(65 31 1 58) 1]
Test Case: 346 | Input/Output: [(80 14 86 81) 14]
Test Case: 347 | Input/Output: [(7 12 32 66) 7]
Test Case: 348 | Input/Output: [(13 24 95 30) 13]
Test Case: 349 | Input/Output: [(78 90 86 28) 28]
Test Case: 350 | Input/Output: [(77 94 1 9) 1]
Test Case: 351 | Input/Output: [(53 78 24 94) 24]
Test Case: 352 | Input/Output: [(92 62 65 54) 54]
Test Case: 353 | Input/Output: [(14 100 12 33) 12]
Test Case: 354 | Input/Output: [(10 23 86 19) 10]
Test Case: 355 | Input/Output: [(9 45 26 32) 9]
Test Case: 356 | Input/Output: [(99 9 10 76) 9]
Test Case: 357 | Input/Output: [(88 81 70 26) 26]
Test Case: 358 | Input/Output: [(34 6 54 61) 6]
Test Case: 359 | Input/Output: [(66 12 98 0) 0]
Test Case: 360 | Input/Output: [(80 77 10 20) 10]
Test Case: 361 | Input/Output: [(66 32 66 51) 32]
Test Case: 362 | Input/Output: [(56 66 33 31) 31]
Test Case: 363 | Input/Output: [(47 92 11 85) 11]
Test Case: 364 | Input/Output: [(92 5 87 43) 5]
Test Case: 365 | Input/Output: [(46 30 99 98) 30]
Test Case: 366 | Input/Output: [(2 27 100 41) 2]
Test Case: 367 | Input/Output: [(45 69 40 47) 40]
Test Case: 368 | Input/Output: [(71 99 97 16) 16]
Test Case: 369 | Input/Output: [(96 61 81 99) 61]
Test Case: 370 | Input/Output: [(94 37 11 14) 11]
Test Case: 371 | Input/Output: [(69 8 52 67) 8]
Test Case: 372 | Input/Output: [(25 66 80 66) 25]
Test Case: 373 | Input/Output: [(61 99 9 33) 9]
Test Case: 374 | Input/Output: [(60 54 92 65) 54]
Test Case: 375 | Input/Output: [(53 99 30 24) 24]
Test Case: 376 | Input/Output: [(49 92 25 96) 25]
Test Case: 377 | Input/Output: [(80 74 45 58) 45]
Test Case: 378 | Input/Output: [(56 64 27 49) 27]
Test Case: 379 | Input/Output: [(96 72 72 63) 63]
Test Case: 380 | Input/Output: [(53 46 30 12) 12]
Test Case: 381 | Input/Output: [(86 18 34 65) 18]
Test Case: 382 | Input/Output: [(57 32 13 81) 13]
Test Case: 383 | Input/Output: [(36 96 79 20) 20]
Test Case: 384 | Input/Output: [(89 91 16 98) 16]
Test Case: 385 | Input/Output: [(2 16 9 84) 2]
Test Case: 386 | Input/Output: [(10 69 52 90) 10]
Test Case: 387 | Input/Output: [(30 43 98 81) 30]
Test Case: 388 | Input/Output: [(43 39 90 16) 16]
Test Case: 389 | Input/Output: [(16 68 95 57) 16]
Test Case: 390 | Input/Output: [(84 83 26 10) 10]
Test Case: 391 | Input/Output: [(100 47 47 55) 47]
Test Case: 392 | Input/Output: [(3 98 8 47) 3]
Test Case: 393 | Input/Output: [(94 24 51 80) 24]
Test Case: 394 | Input/Output: [(82 39 86 4) 4]
Test Case: 395 | Input/Output: [(65 61 91 10) 10]
Test Case: 396 | Input/Output: [(58 10 90 71) 10]
Test Case: 397 | Input/Output: [(86 61 77 75) 61]
Test Case: 398 | Input/Output: [(50 45 90 96) 45]
Test Case: 399 | Input/Output: [(60 11 75 29) 11]
Test Case: 400 | Input/Output: [(45 15 85 -18) -18]
Test Case: 401 | Input/Output: [(-66 -23 -70 30) -70]
Test Case: 402 | Input/Output: [(83 85 -84 30) -84]
Test Case: 403 | Input/Output: [(13 47 -60 -70) -70]
Test Case: 404 | Input/Output: [(-37 3 80 62) -37]
Test Case: 405 | Input/Output: [(-27 53 -88 54) -88]
Test Case: 406 | Input/Output: [(99 69 -40 -69) -69]
Test Case: 407 | Input/Output: [(-78 58 -54 82) -78]
Test Case: 408 | Input/Output: [(87 -60 -79 87) -79]
Test Case: 409 | Input/Output: [(-85 -40 -67 0) -85]
Test Case: 410 | Input/Output: [(56 57 -22 17) -22]
Test Case: 411 | Input/Output: [(-44 34 -87 46) -87]
Test Case: 412 | Input/Output: [(-28 -21 -19 16) -28]
Test Case: 413 | Input/Output: [(-53 83 55 28) -53]
Test Case: 414 | Input/Output: [(-80 78 -58 -11) -80]
Test Case: 415 | Input/Output: [(-52 -29 91 11) -52]
Test Case: 416 | Input/Output: [(-76 -59 44 -13) -76]
Test Case: 417 | Input/Output: [(86 -33 -35 93) -35]
Test Case: 418 | Input/Output: [(-15 46 -89 67) -89]
Test Case: 419 | Input/Output: [(-78 -9 -57 61) -78]
Test Case: 420 | Input/Output: [(-33 -53 51 -9) -53]
Test Case: 421 | Input/Output: [(-38 -36 -8 -14) -38]
Test Case: 422 | Input/Output: [(-46 -22 13 -96) -96]
Test Case: 423 | Input/Output: [(50 -68 14 -49) -68]
Test Case: 424 | Input/Output: [(-24 -33 -45 -73) -73]
Test Case: 425 | Input/Output: [(-67 -6 31 4) -67]
Test Case: 426 | Input/Output: [(21 -79 -39 52) -79]
Test Case: 427 | Input/Output: [(-88 -91 40 54) -91]
Test Case: 428 | Input/Output: [(-53 -20 66 93) -53]
Test Case: 429 | Input/Output: [(-35 -40 3 3) -40]
Test Case: 430 | Input/Output: [(-84 61 35 25) -84]
Test Case: 431 | Input/Output: [(-38 93 56 58) -38]
Test Case: 432 | Input/Output: [(-8 -47 31 77) -47]
Test Case: 433 | Input/Output: [(67 -88 8 58) -88]
Test Case: 434 | Input/Output: [(22 46 47 -51) -51]
Test Case: 435 | Input/Output: [(-15 -5 62 32) -15]
Test Case: 436 | Input/Output: [(-96 -83 1 43) -96]
Test Case: 437 | Input/Output: [(-22 -36 -70 -56) -70]
Test Case: 438 | Input/Output: [(40 0 83 38) 0]
Test Case: 439 | Input/Output: [(96 33 -15 -59) -59]
Test Case: 440 | Input/Output: [(100 16 -72 -39) -72]
Test Case: 441 | Input/Output: [(55 -11 -9 64) -11]
Test Case: 442 | Input/Output: [(92 -84 -85 73) -85]
Test Case: 443 | Input/Output: [(-34 76 -29 53) -34]
Test Case: 444 | Input/Output: [(89 -6 49 -36) -36]
Test Case: 445 | Input/Output: [(18 -19 -54 97) -54]
Test Case: 446 | Input/Output: [(44 3 -69 -33) -69]
Test Case: 447 | Input/Output: [(-14 10 -73 44) -73]
Test Case: 448 | Input/Output: [(68 87 85 -61) -61]
Test Case: 449 | Input/Output: [(-66 -54 -72 59) -72]
Test Case: 450 | Input/Output: [(-87 4 -18 -40) -87]
Test Case: 451 | Input/Output: [(71 44 25 -5) -5]
Test Case: 452 | Input/Output: [(64 -95 -77 -4) -95]
Test Case: 453 | Input/Output: [(-33 4 66 -100) -100]
Test Case: 454 | Input/Output: [(18 -13 -29 12) -29]
Test Case: 455 | Input/Output: [(8 -31 93 8) -31]
Test Case: 456 | Input/Output: [(16 18 -42 90) -42]
Test Case: 457 | Input/Output: [(7 90 -56 74) -56]
Test Case: 458 | Input/Output: [(46 57 66 -32) -32]
Test Case: 459 | Input/Output: [(-52 9 95 -92) -92]
Test Case: 460 | Input/Output: [(63 68 -18 -69) -69]
Test Case: 461 | Input/Output: [(-32 -31 92 43) -32]
Test Case: 462 | Input/Output: [(-92 -98 13 -75) -98]
Test Case: 463 | Input/Output: [(35 18 22 29) 18]
Test Case: 464 | Input/Output: [(25 -96 -15 12) -96]
Test Case: 465 | Input/Output: [(52 70 -72 18) -72]
Test Case: 466 | Input/Output: [(-71 54 -80 -89) -89]
Test Case: 467 | Input/Output: [(2 -49 -14 71) -49]
Test Case: 468 | Input/Output: [(54 -86 37 -41) -86]
Test Case: 469 | Input/Output: [(-56 -6 26 -79) -79]
Test Case: 470 | Input/Output: [(-43 -84 0 30) -84]
Test Case: 471 | Input/Output: [(-93 13 32 -44) -93]
Test Case: 472 | Input/Output: [(-4 12 53 84) -4]
Test Case: 473 | Input/Output: [(-21 54 47 51) -21]
Test Case: 474 | Input/Output: [(58 -44 52 -19) -44]
Test Case: 475 | Input/Output: [(90 -52 -28 -98) -98]
Test Case: 476 | Input/Output: [(-31 -93 9 28) -93]
Test Case: 477 | Input/Output: [(44 97 68 -58) -58]
Test Case: 478 | Input/Output: [(-9 84 -55 -14) -55]
Test Case: 479 | Input/Output: [(92 28 -35 -76) -76]
Test Case: 480 | Input/Output: [(69 -21 -31 -9) -31]
Test Case: 481 | Input/Output: [(29 -26 -84 -10) -84]
Test Case: 482 | Input/Output: [(26 100 72 -85) -85]
Test Case: 483 | Input/Output: [(-6 -50 -60 97) -60]
Test Case: 484 | Input/Output: [(-71 10 60 80) -71]
Test Case: 485 | Input/Output: [(82 24 10 54) 10]
Test Case: 486 | Input/Output: [(-47 -46 -77 21) -77]
Test Case: 487 | Input/Output: [(53 -79 -14 -67) -79]
Test Case: 488 | Input/Output: [(-18 -49 -87 -87) -87]
Test Case: 489 | Input/Output: [(65 4 -41 -83) -83]
Test Case: 490 | Input/Output: [(51 15 30 -38) -38]
Test Case: 491 | Input/Output: [(-89 -40 66 -87) -89]
Test Case: 492 | Input/Output: [(-22 -12 80 -55) -55]
Test Case: 493 | Input/Output: [(19 77 11 -58) -58]
Test Case: 494 | Input/Output: [(-55 -4 -29 36) -55]
Test Case: 495 | Input/Output: [(92 -41 -16 84) -41]
Test Case: 496 | Input/Output: [(41 -80 -55 26) -80]
Test Case: 497 | Input/Output: [(-56 54 -14 -42) -56]
Test Case: 498 | Input/Output: [(-92 -91 26 84) -92]
Test Case: 499 | Input/Output: [(2 100 25 19) 2]
Test Case: 500 | Input/Output: [(76 23 71 3) 3]
Test Case: 501 | Input/Output: [(-10 -69 -59 97) -69]
Test Case: 502 | Input/Output: [(98 -55 -29 -88) -88]
Test Case: 503 | Input/Output: [(-98 -81 -90 -23) -98]
Test Case: 504 | Input/Output: [(-71 -65 13 1) -71]
Test Case: 505 | Input/Output: [(95 100 86 73) 73]
Test Case: 506 | Input/Output: [(-60 -83 23 95) -83]
Test Case: 507 | Input/Output: [(-67 18 50 32) -67]
Test Case: 508 | Input/Output: [(10 -61 20 1) -61]
Test Case: 509 | Input/Output: [(89 -97 -52 67) -97]
Test Case: 510 | Input/Output: [(77 50 55 1) 1]
Test Case: 511 | Input/Output: [(78 -73 -11 -7) -73]
Test Case: 512 | Input/Output: [(-14 62 -46 -15) -46]
Test Case: 513 | Input/Output: [(-78 -49 50 -36) -78]
Test Case: 514 | Input/Output: [(84 -91 29 -90) -91]
Test Case: 515 | Input/Output: [(22 93 -14 24) -14]
Test Case: 516 | Input/Output: [(98 -31 88 -97) -97]
Test Case: 517 | Input/Output: [(-65 47 15 87) -65]
Test Case: 518 | Input/Output: [(8 -41 -20 76) -41]
Test Case: 519 | Input/Output: [(-92 68 27 -67) -92]
Test Case: 520 | Input/Output: [(24 -30 -7 -32) -32]
Test Case: 521 | Input/Output: [(-40 -10 77 8) -40]
Test Case: 522 | Input/Output: [(-67 54 -52 28) -67]
Test Case: 523 | Input/Output: [(29 54 5 -46) -46]
Test Case: 524 | Input/Output: [(100 -8 -21 32) -21]
Test Case: 525 | Input/Output: [(-3 12 -43 -96) -96]
Test Case: 526 | Input/Output: [(33 -23 87 -23) -23]
Test Case: 527 | Input/Output: [(-64 -16 -66 -9) -66]
Test Case: 528 | Input/Output: [(76 76 44 -99) -99]
Test Case: 529 | Input/Output: [(-58 12 -11 -10) -58]
Test Case: 530 | Input/Output: [(68 -55 -5 -59) -59]
Test Case: 531 | Input/Output: [(69 83 -27 -80) -80]
Test Case: 532 | Input/Output: [(-18 -45 -39 16) -45]
Test Case: 533 | Input/Output: [(3 6 -31 -30) -31]
Test Case: 534 | Input/Output: [(23 63 -15 26) -15]
Test Case: 535 | Input/Output: [(-87 -39 59 26) -87]
Test Case: 536 | Input/Output: [(-72 -28 6 -85) -85]
Test Case: 537 | Input/Output: [(-29 -71 45 -4) -71]
Test Case: 538 | Input/Output: [(-70 -98 98 -3) -98]
Test Case: 539 | Input/Output: [(59 86 50 -96) -96]
Test Case: 540 | Input/Output: [(87 -19 -78 48) -78]
Test Case: 541 | Input/Output: [(31 -6 80 -15) -15]
Test Case: 542 | Input/Output: [(-66 72 -71 -11) -71]
Test Case: 543 | Input/Output: [(-18 62 -5 -24) -24]
Test Case: 544 | Input/Output: [(32 87 -66 45) -66]
Test Case: 545 | Input/Output: [(-15 31 79 88) -15]
Test Case: 546 | Input/Output: [(-32 58 26 47) -32]
Test Case: 547 | Input/Output: [(-44 5 -97 31) -97]
Test Case: 548 | Input/Output: [(10 60 -52 100) -52]
Test Case: 549 | Input/Output: [(-82 3 -21 58) -82]
Test Case: 550 | Input/Output: [(74 -58 89 -69) -69]
Test Case: 551 | Input/Output: [(-28 78 39 91) -28]
Test Case: 552 | Input/Output: [(5 -75 -88 9) -88]
Test Case: 553 | Input/Output: [(99 -36 -17 -12) -36]
Test Case: 554 | Input/Output: [(10 -36 97 -84) -84]
Test Case: 555 | Input/Output: [(13 50 40 32) 13]
Test Case: 556 | Input/Output: [(90 -59 -86 49) -86]
Test Case: 557 | Input/Output: [(-32 -54 -33 -93) -93]
Test Case: 558 | Input/Output: [(-43 -59 -25 12) -59]
Test Case: 559 | Input/Output: [(24 -88 -79 56) -88]
Test Case: 560 | Input/Output: [(-1 -98 69 49) -98]
Test Case: 561 | Input/Output: [(72 94 -40 78) -40]
Test Case: 562 | Input/Output: [(-94 -8 -11 66) -94]
Test Case: 563 | Input/Output: [(56 -76 30 14) -76]
Test Case: 564 | Input/Output: [(99 62 -35 -93) -93]
Test Case: 565 | Input/Output: [(69 93 26 99) 26]
Test Case: 566 | Input/Output: [(-53 23 -14 -49) -53]
Test Case: 567 | Input/Output: [(14 -38 -80 -28) -80]
Test Case: 568 | Input/Output: [(-97 -55 -34 -83) -97]
Test Case: 569 | Input/Output: [(87 26 -8 -9) -9]
Test Case: 570 | Input/Output: [(13 -79 51 8) -79]
Test Case: 571 | Input/Output: [(51 -91 -67 -15) -91]
Test Case: 572 | Input/Output: [(-2 59 18 12) -2]
Test Case: 573 | Input/Output: [(-20 91 -28 79) -28]
Test Case: 574 | Input/Output: [(-39 73 2 86) -39]
Test Case: 575 | Input/Output: [(49 77 3 -60) -60]
Test Case: 576 | Input/Output: [(-93 -99 -82 80) -99]
Test Case: 577 | Input/Output: [(55 -15 -27 57) -27]
Test Case: 578 | Input/Output: [(91 94 59 2) 2]
Test Case: 579 | Input/Output: [(-5 -6 -36 90) -36]
Test Case: 580 | Input/Output: [(94 -96 60 -36) -96]
Test Case: 581 | Input/Output: [(-1 -14 79 45) -14]
Test Case: 582 | Input/Output: [(-50 51 11 -38) -50]
Test Case: 583 | Input/Output: [(68 98 -33 14) -33]
Test Case: 584 | Input/Output: [(-30 78 99 -78) -78]
Test Case: 585 | Input/Output: [(-48 57 -83 58) -83]
Test Case: 586 | Input/Output: [(-56 44 -68 31) -68]
Test Case: 587 | Input/Output: [(6 -7 -18 -87) -87]
Test Case: 588 | Input/Output: [(100 67 -93 63) -93]
Test Case: 589 | Input/Output: [(24 -23 -74 15) -74]
Test Case: 590 | Input/Output: [(50 -85 70 66) -85]
Test Case: 591 | Input/Output: [(-35 12 56 48) -35]
Test Case: 592 | Input/Output: [(-28 74 -46 32) -46]
Test Case: 593 | Input/Output: [(-42 -62 79 -45) -62]
Test Case: 594 | Input/Output: [(88 -63 -96 -2) -96]
Test Case: 595 | Input/Output: [(99 -68 -14 20) -68]
Test Case: 596 | Input/Output: [(63 -28 79 1) -28]
Test Case: 597 | Input/Output: [(80 64 -19 9) -19]
Test Case: 598 | Input/Output: [(1 78 -95 -40) -95]
Test Case: 599 | Input/Output: [(82 35 -91 1) -91]
Test Case: 600 | Input/Output: [(-66 -36 12 -43) -66]
Test Case: 601 | Input/Output: [(34 61 100 -84) -84]
Test Case: 602 | Input/Output: [(-23 56 68 -91) -91]
Test Case: 603 | Input/Output: [(63 91 -8 -31) -31]
Test Case: 604 | Input/Output: [(-12 48 71 -63) -63]
Test Case: 605 | Input/Output: [(-66 -27 -18 28) -66]
Test Case: 606 | Input/Output: [(27 -46 -25 60) -46]
Test Case: 607 | Input/Output: [(-72 61 53 -75) -75]
Test Case: 608 | Input/Output: [(50 43 22 -41) -41]
Test Case: 609 | Input/Output: [(-66 -51 3 44) -66]
Test Case: 610 | Input/Output: [(69 78 46 -13) -13]
Test Case: 611 | Input/Output: [(-10 -71 -9 -35) -71]
Test Case: 612 | Input/Output: [(-4 88 19 -52) -52]
Test Case: 613 | Input/Output: [(-51 -52 -56 -55) -56]
Test Case: 614 | Input/Output: [(-46 72 36 -51) -51]
Test Case: 615 | Input/Output: [(93 59 -55 -44) -55]
Test Case: 616 | Input/Output: [(49 -10 -75 -10) -75]
Test Case: 617 | Input/Output: [(-49 -77 51 8) -77]
Test Case: 618 | Input/Output: [(68 8 15 78) 8]
Test Case: 619 | Input/Output: [(-46 70 9 23) -46]
Test Case: 620 | Input/Output: [(-29 -12 57 -80) -80]
Test Case: 621 | Input/Output: [(90 -98 78 73) -98]
Test Case: 622 | Input/Output: [(-32 27 -34 -14) -34]
Test Case: 623 | Input/Output: [(-94 16 -30 -10) -94]
Test Case: 624 | Input/Output: [(-93 -76 -94 -22) -94]
Test Case: 625 | Input/Output: [(54 -20 -15 48) -20]
Test Case: 626 | Input/Output: [(-64 14 24 -68) -68]
Test Case: 627 | Input/Output: [(30 39 81 69) 30]
Test Case: 628 | Input/Output: [(-57 -78 -4 -22) -78]
Test Case: 629 | Input/Output: [(-7 -19 71 -2) -19]
Test Case: 630 | Input/Output: [(-59 -56 -93 -61) -93]
Test Case: 631 | Input/Output: [(96 75 -52 -7) -52]
Test Case: 632 | Input/Output: [(28 19 2 37) 2]
Test Case: 633 | Input/Output: [(-79 52 56 78) -79]
Test Case: 634 | Input/Output: [(-56 -66 98 5) -66]
Test Case: 635 | Input/Output: [(16 -49 98 70) -49]
Test Case: 636 | Input/Output: [(-26 -36 -60 51) -60]
Test Case: 637 | Input/Output: [(64 -4 -48 16) -48]
Test Case: 638 | Input/Output: [(33 -5 -17 -63) -63]
Test Case: 639 | Input/Output: [(-24 91 -45 -83) -83]
Test Case: 640 | Input/Output: [(-65 13 -100 -92) -100]
Test Case: 641 | Input/Output: [(-38 66 -11 63) -38]
Test Case: 642 | Input/Output: [(-25 -39 13 -6) -39]
Test Case: 643 | Input/Output: [(-35 -57 -85 72) -85]
Test Case: 644 | Input/Output: [(60 20 63 -51) -51]
Test Case: 645 | Input/Output: [(-29 91 44 -95) -95]
Test Case: 646 | Input/Output: [(45 -54 -8 -35) -54]
Test Case: 647 | Input/Output: [(98 69 -24 71) -24]
Test Case: 648 | Input/Output: [(-71 3 99 54) -71]
Test Case: 649 | Input/Output: [(63 84 -54 92) -54]
Test Case: 650 | Input/Output: [(-44 -11 49 42) -44]
Test Case: 651 | Input/Output: [(-96 -28 28 -17) -96]
Test Case: 652 | Input/Output: [(16 -81 86 77) -81]
Test Case: 653 | Input/Output: [(94 55 38 48) 38]
Test Case: 654 | Input/Output: [(29 6 -79 -54) -79]
Test Case: 655 | Input/Output: [(45 74 60 -92) -92]
Test Case: 656 | Input/Output: [(63 -30 -58 -27) -58]
Test Case: 657 | Input/Output: [(-31 5 -61 21) -61]
Test Case: 658 | Input/Output: [(-90 35 -14 5) -90]
Test Case: 659 | Input/Output: [(-40 74 -56 23) -56]
Test Case: 660 | Input/Output: [(-36 69 -27 -62) -62]
Test Case: 661 | Input/Output: [(-91 64 45 -66) -91]
Test Case: 662 | Input/Output: [(86 50 28 37) 28]
Test Case: 663 | Input/Output: [(-20 -37 -11 -64) -64]
Test Case: 664 | Input/Output: [(-86 -86 -51 -12) -86]
Test Case: 665 | Input/Output: [(-60 -41 -36 35) -60]
Test Case: 666 | Input/Output: [(3 34 -91 -60) -91]
Test Case: 667 | Input/Output: [(-70 -90 -53 3) -90]
Test Case: 668 | Input/Output: [(56 -25 42 -3) -25]
Test Case: 669 | Input/Output: [(67 83 97 6) 6]
Test Case: 670 | Input/Output: [(65 3 64 -85) -85]
Test Case: 671 | Input/Output: [(40 27 44 -16) -16]
Test Case: 672 | Input/Output: [(36 -77 67 -33) -77]
Test Case: 673 | Input/Output: [(22 -12 -73 -86) -86]
Test Case: 674 | Input/Output: [(46 29 -5 -57) -57]
Test Case: 675 | Input/Output: [(-52 -17 65 -1) -52]
Test Case: 676 | Input/Output: [(-11 -98 13 -95) -98]
Test Case: 677 | Input/Output: [(-31 -65 -20 -75) -75]
Test Case: 678 | Input/Output: [(13 -92 -46 93) -92]
Test Case: 679 | Input/Output: [(-62 88 -77 87) -77]
Test Case: 680 | Input/Output: [(-68 84 -47 44) -68]
Test Case: 681 | Input/Output: [(1 4 -52 83) -52]
Test Case: 682 | Input/Output: [(-48 -23 -54 -72) -72]
Test Case: 683 | Input/Output: [(77 -30 -11 -60) -60]
Test Case: 684 | Input/Output: [(13 71 12 49) 12]
Test Case: 685 | Input/Output: [(-79 -74 -92 39) -92]
Test Case: 686 | Input/Output: [(54 -100 16 52) -100]
Test Case: 687 | Input/Output: [(25 -43 -67 -94) -94]
Test Case: 688 | Input/Output: [(91 -37 -57 48) -57]
Test Case: 689 | Input/Output: [(28 71 -30 72) -30]
Test Case: 690 | Input/Output: [(32 92 -75 -24) -75]
Test Case: 691 | Input/Output: [(85 23 -22 78) -22]
Test Case: 692 | Input/Output: [(90 -13 -16 97) -16]
Test Case: 693 | Input/Output: [(10 63 -22 71) -22]
Test Case: 694 | Input/Output: [(20 -26 -33 -74) -74]
Test Case: 695 | Input/Output: [(66 -43 -36 -17) -43]
Test Case: 696 | Input/Output: [(-91 16 -7 80) -91]
Test Case: 697 | Input/Output: [(-5 -45 -28 17) -45]
Test Case: 698 | Input/Output: [(52 2 74 -63) -63]
Test Case: 699 | Input/Output: [(11 51 4 -24) -24]
Test Case: 700 | Input/Output: [(34 31 -22 83) -22]
Test Case: 701 | Input/Output: [(42 5 -45 -86) -86]
Test Case: 702 | Input/Output: [(66 11 -83 96) -83]
Test Case: 703 | Input/Output: [(36 27 14 13) 13]
Test Case: 704 | Input/Output: [(-10 74 58 -88) -88]
Test Case: 705 | Input/Output: [(48 18 -71 81) -71]
Test Case: 706 | Input/Output: [(-15 -75 -2 -78) -78]
Test Case: 707 | Input/Output: [(88 97 -100 88) -100]
Test Case: 708 | Input/Output: [(-15 18 15 37) -15]
Test Case: 709 | Input/Output: [(-61 -89 -43 94) -89]
Test Case: 710 | Input/Output: [(-1 -47 99 10) -47]
Test Case: 711 | Input/Output: [(-15 35 83 67) -15]
Test Case: 712 | Input/Output: [(-4 1 24 -21) -21]
Test Case: 713 | Input/Output: [(-46 93 -59 19) -59]
Test Case: 714 | Input/Output: [(50 -39 -75 -31) -75]
Test Case: 715 | Input/Output: [(53 -1 -40 32) -40]
Test Case: 716 | Input/Output: [(-15 -88 -29 41) -88]
Test Case: 717 | Input/Output: [(-50 92 -18 29) -50]
Test Case: 718 | Input/Output: [(-52 -54 -47 58) -54]
Test Case: 719 | Input/Output: [(99 -18 -25 -56) -56]
Test Case: 720 | Input/Output: [(-90 -32 -36 -100) -100]
Test Case: 721 | Input/Output: [(0 84 18 -92) -92]
Test Case: 722 | Input/Output: [(56 -23 40 -23) -23]
Test Case: 723 | Input/Output: [(-70 -88 -62 75) -88]
Test Case: 724 | Input/Output: [(35 -96 -33 -13) -96]
Test Case: 725 | Input/Output: [(-79 -94 30 17) -94]
Test Case: 726 | Input/Output: [(-30 -18 97 -71) -71]
Test Case: 727 | Input/Output: [(60 49 4 -36) -36]
Test Case: 728 | Input/Output: [(25 32 60 26) 25]
Test Case: 729 | Input/Output: [(71 -9 54 43) -9]
Test Case: 730 | Input/Output: [(71 70 -100 -56) -100]
Test Case: 731 | Input/Output: [(29 66 -6 -80) -80]
Test Case: 732 | Input/Output: [(86 18 96 79) 18]
Test Case: 733 | Input/Output: [(6 23 -11 -21) -21]
Test Case: 734 | Input/Output: [(46 17 -97 64) -97]
Test Case: 735 | Input/Output: [(3 45 20 -23) -23]
Test Case: 736 | Input/Output: [(-79 40 76 -90) -90]
Test Case: 737 | Input/Output: [(-49 66 21 55) -49]
Test Case: 738 | Input/Output: [(-88 79 -81 98) -88]
Test Case: 739 | Input/Output: [(36 81 94 -21) -21]
Test Case: 740 | Input/Output: [(33 -23 -44 47) -44]
Test Case: 741 | Input/Output: [(-49 84 48 43) -49]
Test Case: 742 | Input/Output: [(-56 5 -56 -100) -100]
Test Case: 743 | Input/Output: [(-52 87 -37 -60) -60]
Test Case: 744 | Input/Output: [(-20 54 -75 8) -75]
Test Case: 745 | Input/Output: [(15 -31 -49 -17) -49]
Test Case: 746 | Input/Output: [(68 -26 42 -64) -64]
Test Case: 747 | Input/Output: [(-2 -61 -48 22) -61]
Test Case: 748 | Input/Output: [(-11 15 49 -71) -71]
Test Case: 749 | Input/Output: [(51 -18 69 -93) -93]
Test Case: 750 | Input/Output: [(-4 -5 -50 98) -50]
Test Case: 751 | Input/Output: [(-50 80 -43 35) -50]
Test Case: 752 | Input/Output: [(20 -99 80 8) -99]
Test Case: 753 | Input/Output: [(-88 -1 60 15) -88]
Test Case: 754 | Input/Output: [(72 -34 11 -16) -34]
Test Case: 755 | Input/Output: [(-64 63 -66 -62) -66]
Test Case: 756 | Input/Output: [(76 -77 64 -82) -82]
Test Case: 757 | Input/Output: [(-87 26 -57 32) -87]
Test Case: 758 | Input/Output: [(60 34 15 -50) -50]
Test Case: 759 | Input/Output: [(-16 85 -19 -58) -58]
Test Case: 760 | Input/Output: [(15 -34 80 88) -34]
Test Case: 761 | Input/Output: [(-98 -45 44 -47) -98]
Test Case: 762 | Input/Output: [(43 90 20 -22) -22]
Test Case: 763 | Input/Output: [(9 -59 11 -21) -59]
Test Case: 764 | Input/Output: [(34 -10 90 -20) -20]
Test Case: 765 | Input/Output: [(-84 -41 11 78) -84]
Test Case: 766 | Input/Output: [(-21 57 85 78) -21]
Test Case: 767 | Input/Output: [(86 89 82 -50) -50]
Test Case: 768 | Input/Output: [(82 -83 71 78) -83]
Test Case: 769 | Input/Output: [(81 91 -15 30) -15]
Test Case: 770 | Input/Output: [(97 51 -54 -33) -54]
Test Case: 771 | Input/Output: [(-63 79 67 -11) -63]
Test Case: 772 | Input/Output: [(-65 4 -39 14) -65]
Test Case: 773 | Input/Output: [(-82 29 21 64) -82]
Test Case: 774 | Input/Output: [(-36 24 -47 44) -47]
Test Case: 775 | Input/Output: [(-19 100 8 29) -19]
Test Case: 776 | Input/Output: [(-13 46 87 82) -13]
Test Case: 777 | Input/Output: [(66 -52 85 80) -52]
Test Case: 778 | Input/Output: [(78 -24 -27 26) -27]
Test Case: 779 | Input/Output: [(35 -61 40 -20) -61]
Test Case: 780 | Input/Output: [(-30 7 -36 -77) -77]
Test Case: 781 | Input/Output: [(38 -46 -34 14) -46]
Test Case: 782 | Input/Output: [(-34 -42 68 -85) -85]
Test Case: 783 | Input/Output: [(80 65 -84 66) -84]
Test Case: 784 | Input/Output: [(-5 92 -48 54) -48]
Test Case: 785 | Input/Output: [(-89 -2 -9 -11) -89]
Test Case: 786 | Input/Output: [(-77 25 90 -76) -77]
Test Case: 787 | Input/Output: [(90 -96 56 52) -96]
Test Case: 788 | Input/Output: [(-52 14 46 -49) -52]
Test Case: 789 | Input/Output: [(90 9 -31 -25) -31]
Test Case: 790 | Input/Output: [(-58 -65 -32 71) -65]
Test Case: 791 | Input/Output: [(-7 -4 -3 81) -7]
Test Case: 792 | Input/Output: [(35 -90 46 -23) -90]
Test Case: 793 | Input/Output: [(34 -53 -44 -2) -53]
Test Case: 794 | Input/Output: [(-63 -12 12 33) -63]
Test Case: 795 | Input/Output: [(-96 -5 32 99) -96]
Test Case: 796 | Input/Output: [(-25 4 -69 -100) -100]
Test Case: 797 | Input/Output: [(46 25 -100 26) -100]
Test Case: 798 | Input/Output: [(53 37 85 20) 20]
Test Case: 799 | Input/Output: [(-3 -40 75 -77) -77]
Test Case: 800 | Input/Output: [(7 39 22 -21) -21]
Test Case: 801 | Input/Output: [(52 -61 55 76) -61]
Test Case: 802 | Input/Output: [(36 -80 -68 -48) -80]
Test Case: 803 | Input/Output: [(-42 -36 -65 -22) -65]
Test Case: 804 | Input/Output: [(70 82 -20 2) -20]
Test Case: 805 | Input/Output: [(77 61 25 -27) -27]
Test Case: 806 | Input/Output: [(2 -74 30 49) -74]
Test Case: 807 | Input/Output: [(-2 -20 61 16) -20]
Test Case: 808 | Input/Output: [(11 -3 -27 -63) -63]
Test Case: 809 | Input/Output: [(-54 -92 -8 0) -92]
Test Case: 810 | Input/Output: [(-95 -93 -66 -22) -95]
Test Case: 811 | Input/Output: [(77 80 -89 57) -89]
Test Case: 812 | Input/Output: [(-73 42 98 19) -73]
Test Case: 813 | Input/Output: [(87 -12 -21 6) -21]
Test Case: 814 | Input/Output: [(-41 -47 -35 -55) -55]
Test Case: 815 | Input/Output: [(97 -38 72 22) -38]
Test Case: 816 | Input/Output: [(-37 -1 -95 45) -95]
Test Case: 817 | Input/Output: [(6 22 -49 -77) -77]
Test Case: 818 | Input/Output: [(-100 46 78 -32) -100]
Test Case: 819 | Input/Output: [(-74 -100 -32 -38) -100]
Test Case: 820 | Input/Output: [(27 2 50 -41) -41]
Test Case: 821 | Input/Output: [(23 -79 63 82) -79]
Test Case: 822 | Input/Output: [(65 35 82 -77) -77]
Test Case: 823 | Input/Output: [(97 -74 -73 -71) -74]
Test Case: 824 | Input/Output: [(-7 24 62 -1) -7]
Test Case: 825 | Input/Output: [(78 -5 77 -48) -48]
Test Case: 826 | Input/Output: [(44 29 -9 -83) -83]
Test Case: 827 | Input/Output: [(-61 65 77 -91) -91]
Test Case: 828 | Input/Output: [(-73 91 -50 98) -73]
Test Case: 829 | Input/Output: [(46 -33 49 38) -33]
Test Case: 830 | Input/Output: [(42 73 -94 -62) -94]
Test Case: 831 | Input/Output: [(74 5 93 -26) -26]
Test Case: 832 | Input/Output: [(-38 -59 70 96) -59]
Test Case: 833 | Input/Output: [(-71 -80 -68 20) -80]
Test Case: 834 | Input/Output: [(88 -45 61 -52) -52]
Test Case: 835 | Input/Output: [(-60 53 26 -69) -69]
Test Case: 836 | Input/Output: [(70 83 53 75) 53]
Test Case: 837 | Input/Output: [(66 -24 -91 34) -91]
Test Case: 838 | Input/Output: [(45 -9 -64 30) -64]
Test Case: 839 | Input/Output: [(-50 -93 72 -11) -93]
Test Case: 840 | Input/Output: [(42 84 40 -42) -42]
Test Case: 841 | Input/Output: [(38 22 -18 4) -18]
Test Case: 842 | Input/Output: [(-26 -70 -53 -35) -70]
Test Case: 843 | Input/Output: [(27 -57 -10 -18) -57]
Test Case: 844 | Input/Output: [(-29 -19 23 -41) -41]
Test Case: 845 | Input/Output: [(-76 -30 -75 -9) -76]
Test Case: 846 | Input/Output: [(-12 -44 59 50) -44]
Test Case: 847 | Input/Output: [(96 66 15 57) 15]
Test Case: 848 | Input/Output: [(-18 -8 -1 -84) -84]
Test Case: 849 | Input/Output: [(41 -58 -27 -88) -88]
Test Case: 850 | Input/Output: [(48 -65 28 55) -65]
Test Case: 851 | Input/Output: [(-72 -81 -61 -83) -83]
Test Case: 852 | Input/Output: [(-15 100 2 -61) -61]
Test Case: 853 | Input/Output: [(51 66 -66 83) -66]
Test Case: 854 | Input/Output: [(-75 7 -91 48) -91]
Test Case: 855 | Input/Output: [(61 -93 98 -84) -93]
Test Case: 856 | Input/Output: [(52 55 26 -92) -92]
Test Case: 857 | Input/Output: [(-18 0 70 21) -18]
Test Case: 858 | Input/Output: [(48 93 45 -45) -45]
Test Case: 859 | Input/Output: [(-10 -19 43 -81) -81]
Test Case: 860 | Input/Output: [(5 29 8 -11) -11]
Test Case: 861 | Input/Output: [(55 96 -91 57) -91]
Test Case: 862 | Input/Output: [(100 -90 -100 -62) -100]
Test Case: 863 | Input/Output: [(-88 -85 -60 -54) -88]
Test Case: 864 | Input/Output: [(-36 9 63 -98) -98]
Test Case: 865 | Input/Output: [(-16 3 -65 18) -65]
Test Case: 866 | Input/Output: [(82 91 8 41) 8]
Test Case: 867 | Input/Output: [(84 -14 -1 14) -14]
Test Case: 868 | Input/Output: [(78 -80 19 -26) -80]
Test Case: 869 | Input/Output: [(-21 16 -18 -46) -46]
Test Case: 870 | Input/Output: [(99 -16 37 17) -16]
Test Case: 871 | Input/Output: [(84 -42 -62 85) -62]
Test Case: 872 | Input/Output: [(-60 55 -59 96) -60]
Test Case: 873 | Input/Output: [(-65 -39 19 -70) -70]
Test Case: 874 | Input/Output: [(40 0 -76 -91) -91]
Test Case: 875 | Input/Output: [(85 -31 -16 -87) -87]
Test Case: 876 | Input/Output: [(69 92 71 -58) -58]
Test Case: 877 | Input/Output: [(12 -35 98 50) -35]
Test Case: 878 | Input/Output: [(91 72 84 -95) -95]
Test Case: 879 | Input/Output: [(5 -70 -64 48) -70]
Test Case: 880 | Input/Output: [(-39 35 72 -89) -89]
Test Case: 881 | Input/Output: [(96 -54 -44 -8) -54]
Test Case: 882 | Input/Output: [(63 29 -50 -73) -73]
Test Case: 883 | Input/Output: [(-3 34 71 -63) -63]
Test Case: 884 | Input/Output: [(10 57 -46 21) -46]
Test Case: 885 | Input/Output: [(84 -38 89 31) -38]
Test Case: 886 | Input/Output: [(-51 27 -31 -22) -51]
Test Case: 887 | Input/Output: [(0 -33 53 -84) -84]
Test Case: 888 | Input/Output: [(-78 57 -28 86) -78]
Test Case: 889 | Input/Output: [(25 40 -28 -97) -97]
Test Case: 890 | Input/Output: [(96 36 -54 27) -54]
Test Case: 891 | Input/Output: [(51 -32 -4 1) -32]
Test Case: 892 | Input/Output: [(-100 24 92 60) -100]
Test Case: 893 | Input/Output: [(-87 90 -8 98) -87]
Test Case: 894 | Input/Output: [(-25 88 49 29) -25]
Test Case: 895 | Input/Output: [(31 -74 -49 -58) -74]
Test Case: 896 | Input/Output: [(-88 57 -52 67) -88]
Test Case: 897 | Input/Output: [(30 48 9 -46) -46]
Test Case: 898 | Input/Output: [(76 25 78 36) 25]
Test Case: 899 | Input/Output: [(52 -92 94 92) -92]
Test Case: 900 | Input/Output: [(30 -87 -29 -15) -87]
Test Case: 901 | Input/Output: [(14 39 80 56) 14]
Test Case: 902 | Input/Output: [(-45 -62 99 -29) -62]
Test Case: 903 | Input/Output: [(99 -90 -77 -61) -90]
Test Case: 904 | Input/Output: [(-66 -84 75 44) -84]
Test Case: 905 | Input/Output: [(-48 66 26 46) -48]
Test Case: 906 | Input/Output: [(3 41 -5 -32) -32]
Test Case: 907 | Input/Output: [(34 66 55 79) 34]
Test Case: 908 | Input/Output: [(-100 57 -8 -69) -100]
Test Case: 909 | Input/Output: [(-23 -80 -68 -65) -80]
Test Case: 910 | Input/Output: [(47 51 -64 95) -64]
Test Case: 911 | Input/Output: [(-59 1 -81 -98) -98]
Test Case: 912 | Input/Output: [(-83 45 16 95) -83]
Test Case: 913 | Input/Output: [(-32 90 -39 34) -39]
Test Case: 914 | Input/Output: [(-42 -23 38 62) -42]
Test Case: 915 | Input/Output: [(-91 -29 70 78) -91]
Test Case: 916 | Input/Output: [(-44 -7 68 16) -44]
Test Case: 917 | Input/Output: [(-61 20 36 51) -61]
Test Case: 918 | Input/Output: [(100 48 -17 -38) -38]
Test Case: 919 | Input/Output: [(-26 -24 50 7) -26]
Test Case: 920 | Input/Output: [(-71 70 -40 31) -71]
Test Case: 921 | Input/Output: [(-46 20 -98 -60) -98]
Test Case: 922 | Input/Output: [(92 81 -49 43) -49]
Test Case: 923 | Input/Output: [(77 71 63 -66) -66]
Test Case: 924 | Input/Output: [(34 80 45 7) 7]
Test Case: 925 | Input/Output: [(-100 -40 12 -82) -100]
Test Case: 926 | Input/Output: [(80 84 -72 -56) -72]
Test Case: 927 | Input/Output: [(16 16 -57 58) -57]
Test Case: 928 | Input/Output: [(37 54 -16 -26) -26]
Test Case: 929 | Input/Output: [(7 22 12 -25) -25]
Test Case: 930 | Input/Output: [(46 62 11 37) 11]
Test Case: 931 | Input/Output: [(48 -66 89 9) -66]
Test Case: 932 | Input/Output: [(91 87 -70 47) -70]
Test Case: 933 | Input/Output: [(3 -87 58 59) -87]
Test Case: 934 | Input/Output: [(-54 73 81 59) -54]
Test Case: 935 | Input/Output: [(-72 15 78 27) -72]
Test Case: 936 | Input/Output: [(-65 51 -55 -26) -65]
Test Case: 937 | Input/Output: [(-65 32 -26 -60) -65]
Test Case: 938 | Input/Output: [(74 79 75 99) 74]
Test Case: 939 | Input/Output: [(22 -77 69 70) -77]
Test Case: 940 | Input/Output: [(-93 30 -85 61) -93]
Test Case: 941 | Input/Output: [(86 17 97 75) 17]
Test Case: 942 | Input/Output: [(96 43 49 -24) -24]
Test Case: 943 | Input/Output: [(24 -63 89 20) -63]
Test Case: 944 | Input/Output: [(-23 99 31 14) -23]
Test Case: 945 | Input/Output: [(51 94 -1 97) -1]
Test Case: 946 | Input/Output: [(-96 33 30 -65) -96]
Test Case: 947 | Input/Output: [(73 73 22 50) 22]
Test Case: 948 | Input/Output: [(-97 74 -8 20) -97]
Test Case: 949 | Input/Output: [(70 49 61 63) 49]
Test Case: 950 | Input/Output: [(-71 85 4 -58) -71]
Test Case: 951 | Input/Output: [(-86 -24 -12 -74) -86]
Test Case: 952 | Input/Output: [(81 -33 -68 48) -68]
Test Case: 953 | Input/Output: [(-54 -17 47 -29) -54]
Test Case: 954 | Input/Output: [(-37 -91 55 25) -91]
Test Case: 955 | Input/Output: [(82 -53 -1 -83) -83]
Test Case: 956 | Input/Output: [(36 -78 66 -7) -78]
Test Case: 957 | Input/Output: [(19 -76 -41 92) -76]
Test Case: 958 | Input/Output: [(-27 -71 70 -98) -98]
Test Case: 959 | Input/Output: [(-83 -84 -41 100) -84]
Test Case: 960 | Input/Output: [(-9 -94 70 -39) -94]
Test Case: 961 | Input/Output: [(7 -22 90 25) -22]
Test Case: 962 | Input/Output: [(14 99 -75 50) -75]
Test Case: 963 | Input/Output: [(51 29 -73 -52) -73]
Test Case: 964 | Input/Output: [(-92 1 66 31) -92]
Test Case: 965 | Input/Output: [(11 0 -69 40) -69]
Test Case: 966 | Input/Output: [(-16 -62 34 -20) -62]
Test Case: 967 | Input/Output: [(10 23 -3 -9) -9]
Test Case: 968 | Input/Output: [(10 42 -2 92) -2]
Test Case: 969 | Input/Output: [(-50 -94 -78 -56) -94]
Test Case: 970 | Input/Output: [(3 10 41 36) 3]
Test Case: 971 | Input/Output: [(-29 -58 79 -99) -99]
Test Case: 972 | Input/Output: [(-50 70 -21 76) -50]
Test Case: 973 | Input/Output: [(-29 26 -9 -48) -48]
Test Case: 974 | Input/Output: [(10 89 88 -61) -61]
Test Case: 975 | Input/Output: [(54 -50 43 -43) -50]
Test Case: 976 | Input/Output: [(-83 54 -51 80) -83]
Test Case: 977 | Input/Output: [(17 -2 -89 -56) -89]
Test Case: 978 | Input/Output: [(-49 -28 -63 -83) -83]
Test Case: 979 | Input/Output: [(75 -65 65 16) -65]
Test Case: 980 | Input/Output: [(-68 56 55 81) -68]
Test Case: 981 | Input/Output: [(-46 -50 -44 -6) -50]
Test Case: 982 | Input/Output: [(90 0 7 70) 0]
Test Case: 983 | Input/Output: [(19 70 15 -76) -76]
Test Case: 984 | Input/Output: [(-96 -36 28 -6) -96]
Test Case: 985 | Input/Output: [(-19 -9 -23 88) -23]
Test Case: 986 | Input/Output: [(80 97 -42 49) -42]
Test Case: 987 | Input/Output: [(-92 -16 -7 49) -92]
Test Case: 988 | Input/Output: [(-7 -70 94 -98) -98]
Test Case: 989 | Input/Output: [(2 -77 32 -95) -95]
Test Case: 990 | Input/Output: [(-43 28 -56 3) -56]
Test Case: 991 | Input/Output: [(54 26 -38 21) -38]
Test Case: 992 | Input/Output: [(-49 -24 44 48) -49]
Test Case: 993 | Input/Output: [(-4 -85 -22 -50) -85]
Test Case: 994 | Input/Output: [(93 86 -34 -99) -99]
Test Case: 995 | Input/Output: [(-24 -53 67 -82) -82]
Test Case: 996 | Input/Output: [(-68 -37 -57 -64) -68]
Test Case: 997 | Input/Output: [(31 -56 -58 -23) -58]
Test Case: 998 | Input/Output: [(-94 23 -19 -20) -94]
Test Case: 999 | Input/Output: [(60 80 47 -16) -16]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -14 -68 -55 31 -11 97 -120 83 -123 -98 -22 104 55 57 -23 18
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[48 48 37 48] 37] [[78 78 78 -14] -14] [[98 -40 -40 -40] -40] [[1 1 56 1] 1] [[35 35 35 -67] -67] [[19 40 40 40] 19] [[-34 -34 -34 -82] -82] [[-60 73 -60 -60] -60] [[77 -17 77 77] -17] [[-32 -79 -32 -32] -79] [(-23 -23 -23 -23) -23] [(62 62 62 62) 62] [(79 79 79 79) 79] [(80 80 80 80) 80] [(-19 -19 -19 -19) -19] [(54 82 28 51) 28] [(1 10 78 56) 1] [(37 85 3 14) 3] [(20 72 15 45) 15] [(61 59 51 25) 25] [(63 34 38 50) 34] [(67 86 44 51) 44] [(71 19 40 61) 19] [(100 86 65 41) 41] [(51 28 74 16) 16] [(44 50 63 92) 44] [(64 76 31 29) 29] [(10 37 99 48) 10] [(95 98 63 98) 63] [(83 13 87 100) 13] [(59 77 74 7) 7] [(5 61 69 47) 5] [(7 1 23 38) 1] [(70 99 89 42) 42] [(64 61 5 91) 5] [(33 -52 -50 -40) -52] [(68 23 -39 58) -39] [(19 47 -62 -76) -76] [(10 73 88 -36) -36] [(9 74 82 -76) -76] [(17 79 -28 87) -28] [(-64 75 -2 -35) -64] [(-49 -95 15 -80) -95] [(37 -48 -91 -31) -91] [(-21 -70 83 44) -70] [(-83 71 3 42) -83] [(-88 3 -18 9) -88] [(37 -55 96 -40) -55] [(-30 49 -53 -98) -98] [(74 -8 53 -94) -94] [(55 6 96 -10) -10] [(71 -64 18 50) -64] [(-40 -77 -9 -44) -77] [(72 -86 44 -92) -92] [(50 48 -38 -37) -38] [(-60 -44 45 -37) -60] [(-93 -17 -71 -8) -93] [(-1 41 74 100) -1] [(54 -60 94 49) -60] [(69 -10 -50 51) -50] [(-78 -87 71 -10) -87] [(-77 -73 21 -43) -77] [(98 -59 -76 64) -76] [(57 -92 -6 22) -92] [(-41 36 68 52) -41] [(-14 90 -58 1) -58] [(47 86 63 78) 47] [(-27 -33 23 89) -33] [(-97 -1 53 39) -97] [(-94 78 -51 34) -94] [(12 76 92 -36) -36] [(6 -87 -76 -74) -87] [(-24 58 7 89) -24] [(24 79 47 7) 7] [(17 26 -73 53) -73] [(-51 89 -9 -58) -58] [(-54 -81 12 -73) -81] [(-39 80 58 -55) -55] [(-50 79 46 16) -50] [(39 96 56 -67) -67] [(-57 13 -37 80) -57] [(24 81 -59 22) -59] [(76 78 71 -66) -66] [(-24 21 -53 -39) -53] [(-8 -32 26 39) -32] [(-65 83 64 3) -65] [(46 -30 76 -15) -30] [(-75 87 29 92) -75] [(-58 -87 -77 -94) -94] [(-90 4 -12 -53) -90] [(-69 66 -49 90) -69] [(74 19 54 2) 2] [(30 -24 73 -75) -75] [(-73 4 -68 77) -73] [(68 34 56 -79) -79])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 56                 
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: 77                 
Correct output: -79                 | Program output: -32                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 51                 
Correct output: 34                  | Program output: 38                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 40                 
Correct output: 41                  | Program output: 65                 
Correct output: 16                  | Program output: 74                 
Correct output: 44                  | Program output: 63                 
Correct output: 29                  | Program output: 31                 
Correct output: 10                  | Program output: 99                 
Correct output: 63                  | Program output: 63                 
Correct output: 13                  | Program output: 87                 
Correct output: 7                   | Program output: 74                 
Correct output: 5                   | Program output: 69                 
Correct output: 1                   | Program output: 23                 
Correct output: 42                  | Program output: 89                 
Correct output: 5                   | Program output: 5                  
Correct output: -52                 | Program output: -50                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -62                
Correct output: -36                 | Program output: 88                 
Correct output: -76                 | Program output: 82                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -2                 
Correct output: -95                 | Program output: 15                 
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: 83                 
Correct output: -83                 | Program output: 3                  
Correct output: -88                 | Program output: -18                
Correct output: -55                 | Program output: 96                 
Correct output: -98                 | Program output: -53                
Correct output: -94                 | Program output: 53                 
Correct output: -10                 | Program output: 96                 
Correct output: -64                 | Program output: 18                 
Correct output: -77                 | Program output: -9                 
Correct output: -92                 | Program output: 44                 
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: 45                 
Correct output: -93                 | Program output: -71                
Correct output: -1                  | Program output: 74                 
Correct output: -60                 | Program output: 94                 
Correct output: -50                 | Program output: -50                
Correct output: -87                 | Program output: 71                 
Correct output: -77                 | Program output: 21                 
Correct output: -76                 | Program output: -76                
Correct output: -92                 | Program output: -6                 
Correct output: -41                 | Program output: 68                 
Correct output: -58                 | Program output: -58                
Correct output: 47                  | Program output: 63                 
Correct output: -33                 | Program output: 23                 
Correct output: -97                 | Program output: 53                 
Correct output: -94                 | Program output: -51                
Correct output: -36                 | Program output: 92                 
Correct output: -87                 | Program output: -76                
Correct output: -24                 | Program output: 7                  
Correct output: 7                   | Program output: 47                 
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -9                 
Correct output: -81                 | Program output: 12                 
Correct output: -55                 | Program output: 58                 
Correct output: -50                 | Program output: 46                 
Correct output: -67                 | Program output: 56                 
Correct output: -57                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 71                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 26                 
Correct output: -65                 | Program output: 64                 
Correct output: -30                 | Program output: 76                 
Correct output: -75                 | Program output: 29                 
Correct output: -94                 | Program output: -77                
Correct output: -90                 | Program output: -12                
Correct output: -69                 | Program output: -49                
Correct output: 2                   | Program output: 54                 
Correct output: -75                 | Program output: 73                 
Correct output: -73                 | Program output: -68                
Correct output: -79                 | Program output: 56                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_div} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_269} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction tagged_542} {:close 0, :instruction integer_flush} {:close 1, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (exec_do*count (integer_swap exec_when (integer_yank exec_dup_items) integer_dup_times) boolean_frominteger boolean_yankdup exec_k_when_autoconstructing () () integer_flush integer_yankdup exec_empty exec_dup_items exec_yank integer_yankdup integer_eq integer_dup_items exec_do*while (integer_dup_times) boolean_yank integer_max integer_yank boolean_pop exec_do*range (boolean_rot in3) boolean_invert_first_then_and boolean_dup exec_while (integer_div) print_integer boolean_rot exec_yank print_boolean integer_mod integer_gt integer_div boolean_yankdup integer_yank exec_s (integer_dup_items exec_shove (boolean_yank exec_do*range (in3 exec_rot (exec_do*range (exec_yank integer_sub) boolean_swap exec_yank exec_s_when_autoconstructing () (exec_flush) (in1 integer_add exec_eq integer_lt tagged_269 integer_shove exec_rot (exec_yank boolean_flush exec_shove (boolean_swap boolean_yankdup) integer_pop tagged_542) (integer_flush in4) (integer_mult) boolean_yankdup exec_while (integer_shove exec_if (exec_yank exec_do*count (boolean_yankdup)) ()))) () ()))) () ())
Lexicase best errors: [1 1 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 105
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_div} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_269} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction tagged_542} {:close 0, :instruction integer_flush} {:close 1, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (exec_do*count (integer_swap exec_when (integer_yank exec_dup_items) integer_dup_times) boolean_frominteger boolean_yankdup exec_k_when_autoconstructing () () integer_flush integer_yankdup exec_empty exec_dup_items exec_yank integer_yankdup integer_eq integer_dup_items exec_do*while (integer_dup_times) boolean_yank integer_max integer_yank boolean_pop exec_do*range (boolean_rot in3) boolean_invert_first_then_and boolean_dup exec_while (integer_div) print_integer boolean_rot exec_yank print_boolean integer_mod integer_gt integer_div boolean_yankdup integer_yank exec_s (integer_dup_items exec_shove (boolean_yank exec_do*range (in3 exec_rot (exec_do*range (exec_yank integer_sub) boolean_swap exec_yank exec_s_when_autoconstructing () (exec_flush) (in1 integer_add exec_eq integer_lt tagged_269 integer_shove exec_rot (exec_yank boolean_flush exec_shove (boolean_swap boolean_yankdup) integer_pop tagged_542) (integer_flush in4) (integer_mult) boolean_yankdup exec_while (integer_shove exec_if (exec_yank exec_do*count (boolean_yankdup)) ()))) () ()))) () ())
Zero cases best errors: [1 1 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 105
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 3 3 3 1000 1000 3 14 3 1000)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (0 3 3 3 0 0 3 14 3 0)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_empty} {:close 0, :instruction 18} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -59} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop})
Best program: (exec_s_when_autoconstructing () (exec_when (in3 integer_dup exec_when (print_integer integer_yank) integer_sub) exec_do*count (boolean_swap integer_div integer_empty) 18 boolean_dup_items) (in4 exec_eq in1 boolean_or exec_k (boolean_yank integer_lte integer_pop exec_dup_times (integer_add integer_min boolean_and) exec_k_when_autoconstructing (-59 integer_stackdepth integer_yank) (exec_y_when_autoconstructing () boolean_dup boolean_dup_items integer_add exec_flush) boolean_stackdepth boolean_dup_times) (boolean_invert_second_then_and in4) integer_mod in2 boolean_pop))
Errors: [1 1 0 0 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 42
Size: 55
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 9.971
Median total errors in population: 10
Error averages by case: (1.0 0.997 0.997 0.997 1.0 1.0 0.997 0.986 0.997 1.0)
Error minima by case: (1 0 0 0 1 1 0 0 0 1)
Average genome size in population (length): 50.119
Average program size in population (points): 69.123
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 491792
--- Timings ---
Current time: 1559584254380 milliseconds
Total Time:           2.9 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.8 seconds, 26.8%
Fitness Testing:      2.0 seconds, 69.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: 73                 
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 82                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 85                 
Correct output: 15                  | Program output: 72                 
Correct output: 25                  | Program output: 59                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 86                 
Correct output: 16                  | Program output: 28                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 76                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 77                 
Correct output: 5                   | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 99                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: 47                 
Correct output: -36                 | Program output: 73                 
Correct output: -76                 | Program output: 74                 
Correct output: -28                 | Program output: 79                 
Correct output: -64                 | Program output: 75                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 71                 
Correct output: -88                 | Program output: 3                  
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: 49                 
Correct output: -94                 | Program output: -8                 
Correct output: -10                 | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -86                
Correct output: -38                 | Program output: 48                 
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -17                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: 90                 
Correct output: 47                  | Program output: 86                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: 78                 
Correct output: -36                 | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 58                 
Correct output: 7                   | Program output: 79                 
Correct output: -73                 | Program output: 26                 
Correct output: -58                 | Program output: 89                 
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: 80                 
Correct output: -50                 | Program output: 79                 
Correct output: -67                 | Program output: 96                 
Correct output: -57                 | Program output: 13                 
Correct output: -59                 | Program output: 81                 
Correct output: -66                 | Program output: 78                 
Correct output: -53                 | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 83                 
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 87                 
Correct output: -94                 | Program output: -87                
Correct output: -90                 | Program output: 4                  
Correct output: -69                 | Program output: 66                 
Correct output: 2                   | Program output: 19                 
Correct output: -75                 | Program output: -24                
Correct output: -73                 | Program output: 4                  
Correct output: -79                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor integer_mult boolean_yank exec_dup_items print_integer) boolean_swap exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (exec_s_when_autoconstructing (print_boolean exec_s (print_integer) () ()) () ()) () ())) ())) () ()))))
Lexicase best errors: [0 1 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 65
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor integer_mult boolean_yank exec_dup_items print_integer) boolean_swap exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (exec_s_when_autoconstructing (print_boolean exec_s (print_integer) () ()) () ()) () ())) ())) () ()))))
Zero cases best errors: [0 1 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 65
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (308 6 463 770 6 568 104 100 6 100)
Population mean number of elite cases: 2.43
Count of perfect (error zero) individuals by case: (308 6 463 770 6 568 104 100 6 100)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor integer_mult boolean_yank exec_dup_items print_integer) boolean_swap exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (exec_s_when_autoconstructing (print_boolean exec_s (print_integer) () ()) () ()) () ())) ())) () ()))))
Errors: [0 1 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 65
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 7.569
Median total errors in population: 7
Error averages by case: (0.692 0.994 0.537 0.23 0.994 0.432 0.896 0.9 0.994 0.9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.228
Average program size in population (points): 75.37
Average percent parens in population: 0.274
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.497
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1195374
--- Timings ---
Current time: 1559584257366 milliseconds
Total Time:           6.2 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.5 seconds, 39.6%
Fitness Testing:      2.9 seconds, 47.3%
Report:               0.7 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: 73                 
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 82                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 85                 
Correct output: 15                  | Program output: 72                 
Correct output: 25                  | Program output: 59                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 86                 
Correct output: 16                  | Program output: 28                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 76                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 77                 
Correct output: 5                   | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 99                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: 47                 
Correct output: -36                 | Program output: 73                 
Correct output: -76                 | Program output: 74                 
Correct output: -28                 | Program output: 79                 
Correct output: -64                 | Program output: 75                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 71                 
Correct output: -88                 | Program output: 3                  
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: 49                 
Correct output: -94                 | Program output: -8                 
Correct output: -10                 | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -86                
Correct output: -38                 | Program output: 48                 
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -17                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: 90                 
Correct output: 47                  | Program output: 86                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: 78                 
Correct output: -36                 | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 58                 
Correct output: 7                   | Program output: 79                 
Correct output: -73                 | Program output: 26                 
Correct output: -58                 | Program output: 89                 
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: 80                 
Correct output: -50                 | Program output: 79                 
Correct output: -67                 | Program output: 96                 
Correct output: -57                 | Program output: 13                 
Correct output: -59                 | Program output: 81                 
Correct output: -66                 | Program output: 78                 
Correct output: -53                 | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 83                 
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 87                 
Correct output: -94                 | Program output: -87                
Correct output: -90                 | Program output: 4                  
Correct output: -69                 | Program output: 66                 
Correct output: 2                   | Program output: 19                 
Correct output: -75                 | Program output: -24                
Correct output: -73                 | Program output: 4                  
Correct output: -79                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction tagged_721} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction 86} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and})
Lexicase best program: (in2 integer_min print_integer integer_yank boolean_swap exec_yank exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq integer_max exec_do*while (boolean_shove) boolean_invert_first_then_and integer_div boolean_invert_first_then_and integer_empty exec_eq boolean_invert_second_then_and print_boolean) boolean_invert_second_then_and exec_empty in3 integer_dup_times boolean_eq exec_pop () exec_do*while (exec_shove (in4 integer_mult) integer_pop boolean_rot integer_gt) boolean_dup integer_inc in1 exec_do*while (boolean_dup_items) exec_y () exec_dup_items integer_stackdepth exec_rot (exec_s_when_autoconstructing (exec_shove (exec_y_when_autoconstructing (exec_y_when_autoconstructing () exec_dup (integer_lt integer_pop) print_exec (exec_stackdepth) integer_gt) print_exec (exec_k_when_autoconstructing () (exec_dup_times (exec_stackdepth) tagged_721) exec_y () exec_yank print_newline 86 boolean_invert_second_then_and in4 boolean_empty integer_rot integer_shove boolean_eq) exec_k_when_autoconstructing (integer_yankdup) (boolean_yank) in1 integer_lt boolean_and boolean_and)) () ()) () ())
Lexicase best errors: [0 1 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 106
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction tagged_721} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction 86} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and})
Zero cases best program: (in2 integer_min print_integer integer_yank boolean_swap exec_yank exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq integer_max exec_do*while (boolean_shove) boolean_invert_first_then_and integer_div boolean_invert_first_then_and integer_empty exec_eq boolean_invert_second_then_and print_boolean) boolean_invert_second_then_and exec_empty in3 integer_dup_times boolean_eq exec_pop () exec_do*while (exec_shove (in4 integer_mult) integer_pop boolean_rot integer_gt) boolean_dup integer_inc in1 exec_do*while (boolean_dup_items) exec_y () exec_dup_items integer_stackdepth exec_rot (exec_s_when_autoconstructing (exec_shove (exec_y_when_autoconstructing (exec_y_when_autoconstructing () exec_dup (integer_lt integer_pop) print_exec (exec_stackdepth) integer_gt) print_exec (exec_k_when_autoconstructing () (exec_dup_times (exec_stackdepth) tagged_721) exec_y () exec_yank print_newline 86 boolean_invert_second_then_and in4 boolean_empty integer_rot integer_shove boolean_eq) exec_k_when_autoconstructing (integer_yankdup) (boolean_yank) in1 integer_lt boolean_and boolean_and)) () ()) () ())
Zero cases best errors: [0 1 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 106
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (798 331 331 376 1000 372 332 1000 1000 373)
Population mean number of elite cases: 5.91
Count of perfect (error zero) individuals by case: (798 331 331 376 0 372 332 0 0 373)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor integer_mult boolean_yank exec_dup_items print_integer) boolean_swap exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (exec_s_when_autoconstructing (exec_s (exec_s (print_integer) () ()) () ()) () ()) () ())) ())) () ()))))
Errors: [0 1 1 0 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 39
Size: 68
Percent parens: 0.426
--- Population Statistics ---
Average total errors in population: 7.087
Median total errors in population: 6
Error averages by case: (0.202 0.669 0.669 0.624 1.0 0.628 0.668 1.0 1.0 0.627)
Error minima by case: (0 0 0 0 1 0 0 1 1 0)
Average genome size in population (length): 64.209
Average program size in population (points): 90.513
Average percent parens in population: 0.293
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.898
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2097814
--- Timings ---
Current time: 1559584260840 milliseconds
Total Time:           9.7 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.5 seconds, 46.9%
Fitness Testing:      3.9 seconds, 40.7%
Report:               1.1 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: 77                 
Correct output: -79                 | Program output: -32                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 51                 
Correct output: 1                   | Program output: 56                 
Correct output: 3                   | Program output: 14                 
Correct output: 15                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 50                 
Correct output: 44                  | Program output: 51                 
Correct output: 19                  | Program output: 61                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 92                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 48                 
Correct output: 63                  | Program output: 98                 
Correct output: 13                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 1                   | Program output: 38                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 91                 
Correct output: -52                 | Program output: -40                
Correct output: -39                 | Program output: 58                 
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 87                 
Correct output: -64                 | Program output: -35                
Correct output: -95                 | Program output: -80                
Correct output: -91                 | Program output: -31                
Correct output: -70                 | Program output: 44                 
Correct output: -83                 | Program output: 42                 
Correct output: -88                 | Program output: 9                  
Correct output: -55                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: 50                 
Correct output: -77                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -37                
Correct output: -60                 | Program output: -37                
Correct output: -93                 | Program output: -8                 
Correct output: -1                  | Program output: 100                
Correct output: -60                 | Program output: 49                 
Correct output: -50                 | Program output: 51                 
Correct output: -87                 | Program output: -10                
Correct output: -77                 | Program output: -43                
Correct output: -76                 | Program output: 64                 
Correct output: -92                 | Program output: 22                 
Correct output: -41                 | Program output: 52                 
Correct output: -58                 | Program output: 1                  
Correct output: 47                  | Program output: 78                 
Correct output: -33                 | Program output: 89                 
Correct output: -97                 | Program output: 39                 
Correct output: -94                 | Program output: 34                 
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -74                
Correct output: -24                 | Program output: 89                 
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 53                 
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -73                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: 80                 
Correct output: -59                 | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -39                
Correct output: -32                 | Program output: 39                 
Correct output: -65                 | Program output: 3                  
Correct output: -30                 | Program output: -15                
Correct output: -75                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -53                
Correct output: -69                 | Program output: 90                 
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 77                 
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_s (boolean_rot integer_pop) (boolean_swap exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div boolean_stackdepth exec_yankdup in4 exec_when (print_integer exec_s_when_autoconstructing (exec_when () exec_dup (integer_lte exec_shove (boolean_yank) exec_rot () (exec_if (exec_eq exec_yank exec_do*times () integer_eq exec_s_when_autoconstructing (integer_stackdepth integer_yank) (exec_y_when_autoconstructing () boolean_dup boolean_dup_items integer_add exec_flush) (boolean_stackdepth boolean_dup_times) boolean_invert_second_then_and in4) (integer_mod in2 boolean_pop)) ())) () ())) ()) ())
Lexicase best errors: [1 0 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_s (boolean_rot integer_pop) (boolean_swap exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div boolean_stackdepth exec_yankdup in4 exec_when (print_integer exec_s_when_autoconstructing (exec_when () exec_dup (integer_lte exec_shove (boolean_yank) exec_rot () (exec_if (exec_eq exec_yank exec_do*times () integer_eq exec_s_when_autoconstructing (integer_stackdepth integer_yank) (exec_y_when_autoconstructing () boolean_dup boolean_dup_items integer_add exec_flush) (boolean_stackdepth boolean_dup_times) boolean_invert_second_then_and in4) (integer_mod in2 boolean_pop)) ())) () ())) ()) ())
Zero cases best errors: [1 0 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 795 1000 783 1000 421 364 1000 783 365)
Population mean number of elite cases: 7.51
Count of perfect (error zero) individuals by case: (0 795 0 783 0 421 364 0 783 365)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction 42} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_269} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction tagged_542} {:close 0, :instruction integer_flush} {:close 1, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup})
Best program: (integer_mod exec_do*times () integer_mod exec_k (integer_dup integer_pop integer_max boolean_not integer_mult boolean_and integer_shove integer_dec integer_swap) (exec_stackdepth integer_lt integer_mod boolean_xor boolean_invert_first_then_and exec_while () integer_sub) boolean_flush exec_dup (print_boolean integer_dup integer_dec integer_lt boolean_yankdup boolean_yankdup exec_y_when_autoconstructing () integer_flush boolean_eq boolean_rot) exec_pop () integer_dup_times boolean_empty integer_dec 42 exec_k_when_autoconstructing (boolean_not exec_shove (integer_dup_times exec_dup (print_integer integer_div) integer_lt exec_y (exec_noop) integer_flush) integer_sub) (exec_do*count (boolean_and boolean_and) print_integer boolean_rot integer_lt tagged_269 integer_shove exec_rot (exec_yank boolean_flush exec_shove (boolean_swap boolean_yankdup) integer_pop tagged_542) (integer_flush in4) (integer_mult) boolean_yankdup exec_while (integer_shove exec_if (exec_yank exec_do*count (boolean_yankdup)) ())))
Errors: [1 0 1 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 75
Size: 97
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 6.489
Median total errors in population: 6
Error averages by case: (1.0 0.205 1.0 0.217 1.0 0.579 0.636 1.0 0.217 0.635)
Error minima by case: (1 0 1 0 1 0 0 1 0 0)
Average genome size in population (length): 63.397
Average program size in population (points): 90.363
Average percent parens in population: 0.302
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.3795
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2974170
--- Timings ---
Current time: 1559584264705 milliseconds
Total Time:          13.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.8 seconds, 51.3%
Fitness Testing:      4.8 seconds, 36.6%
Report:               1.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: 77                 
Correct output: -79                 | Program output: -32                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 51                 
Correct output: 1                   | Program output: 56                 
Correct output: 3                   | Program output: 14                 
Correct output: 15                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 50                 
Correct output: 44                  | Program output: 51                 
Correct output: 19                  | Program output: 61                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 92                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 48                 
Correct output: 63                  | Program output: 98                 
Correct output: 13                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 1                   | Program output: 38                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 91                 
Correct output: -52                 | Program output: -40                
Correct output: -39                 | Program output: 58                 
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 87                 
Correct output: -64                 | Program output: -35                
Correct output: -95                 | Program output: -80                
Correct output: -91                 | Program output: -31                
Correct output: -70                 | Program output: 44                 
Correct output: -83                 | Program output: 42                 
Correct output: -88                 | Program output: 9                  
Correct output: -55                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: 50                 
Correct output: -77                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -37                
Correct output: -60                 | Program output: -37                
Correct output: -93                 | Program output: -8                 
Correct output: -1                  | Program output: 100                
Correct output: -60                 | Program output: 49                 
Correct output: -50                 | Program output: 51                 
Correct output: -87                 | Program output: -10                
Correct output: -77                 | Program output: -43                
Correct output: -76                 | Program output: 64                 
Correct output: -92                 | Program output: 22                 
Correct output: -41                 | Program output: 52                 
Correct output: -58                 | Program output: 1                  
Correct output: 47                  | Program output: 78                 
Correct output: -33                 | Program output: 89                 
Correct output: -97                 | Program output: 39                 
Correct output: -94                 | Program output: 34                 
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -74                
Correct output: -24                 | Program output: 89                 
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 53                 
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -73                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: 80                 
Correct output: -59                 | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -39                
Correct output: -32                 | Program output: 39                 
Correct output: -65                 | Program output: 3                  
Correct output: -30                 | Program output: -15                
Correct output: -75                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -53                
Correct output: -69                 | Program output: 90                 
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 77                 
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction 42} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction tagged_542} {:close 0, :instruction integer_flush} {:close 1, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (integer_mod exec_do*times () integer_mod exec_k (integer_dup integer_pop integer_max boolean_not integer_mult boolean_and integer_shove integer_dec integer_swap) (exec_stackdepth integer_lt integer_mod boolean_xor boolean_invert_first_then_and exec_while () integer_sub) boolean_flush exec_dup (print_boolean integer_dup integer_dec integer_lt boolean_yankdup exec_y_when_autoconstructing () integer_flush boolean_eq boolean_rot) exec_pop () integer_dup_times boolean_empty integer_dec 42 exec_k_when_autoconstructing (boolean_not exec_shove (integer_dup_times exec_dup (print_integer integer_div) integer_lt exec_y (exec_noop) integer_flush) integer_sub) (exec_do*count (boolean_and boolean_and) print_integer boolean_rot boolean_dup_items) boolean_rot exec_yank integer_dec exec_do*while (integer_inc exec_empty exec_dup_times (integer_pop exec_when () boolean_dup_times) tagged_542) integer_flush in4 integer_mult boolean_yankdup exec_while (integer_shove exec_if (exec_yank exec_do*count (boolean_yankdup)) ()))
Lexicase best errors: [1 1 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 96
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction 42} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction tagged_542} {:close 0, :instruction integer_flush} {:close 1, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (integer_mod exec_do*times () integer_mod exec_k (integer_dup integer_pop integer_max boolean_not integer_mult boolean_and integer_shove integer_dec integer_swap) (exec_stackdepth integer_lt integer_mod boolean_xor boolean_invert_first_then_and exec_while () integer_sub) boolean_flush exec_dup (print_boolean integer_dup integer_dec integer_lt boolean_yankdup exec_y_when_autoconstructing () integer_flush boolean_eq boolean_rot) exec_pop () integer_dup_times boolean_empty integer_dec 42 exec_k_when_autoconstructing (boolean_not exec_shove (integer_dup_times exec_dup (print_integer integer_div) integer_lt exec_y (exec_noop) integer_flush) integer_sub) (exec_do*count (boolean_and boolean_and) print_integer boolean_rot boolean_dup_items) boolean_rot exec_yank integer_dec exec_do*while (integer_inc exec_empty exec_dup_times (integer_pop exec_when () boolean_dup_times) tagged_542) integer_flush in4 integer_mult boolean_yankdup exec_while (integer_shove exec_if (exec_yank exec_do*count (boolean_yankdup)) ()))
Zero cases best errors: [1 1 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 96
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 281 2 502 502 1 282 2 1 500)
Population mean number of elite cases: 2.08
Count of perfect (error zero) individuals by case: (2 281 2 502 502 1 282 2 1 500)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_155} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_512} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_boolean})
Best program: (exec_s (boolean_rot integer_pop) (boolean_swap exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div boolean_stackdepth exec_yankdup in4 exec_when (print_integer exec_s_when_autoconstructing (exec_when () exec_dup (integer_lte exec_shove (boolean_yank) exec_rot () (exec_if (exec_k_when_autoconstructing (exec_yank exec_do*times () integer_eq exec_s_when_autoconstructing (integer_mod exec_empty integer_max tag_boolean_15 exec_y_when_autoconstructing (exec_shove () exec_k (boolean_xor integer_rot exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (exec_dup_items boolean_dup) integer_empty exec_dup_times (exec_dup_items integer_lte) print_newline in3 boolean_flush integer_eq exec_do*while (in1 exec_do*times (exec_do*count (tag_boolean_155 integer_flush exec_s (tag_integer_512 exec_dup_items) (print_boolean) ()))))) ()) ())) () ()) ()) ()) ())) () ())) ()) ())
Errors: [1 1 1 0 0 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 62
Size: 103
Percent parens: 0.398
--- Population Statistics ---
Average total errors in population: 7.925
Median total errors in population: 15/2
Error averages by case: (0.998 0.719 0.998 0.498 0.498 0.999 0.718 0.998 0.999 0.5)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.835
Average program size in population (points): 92.404
Average percent parens in population: 0.299
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.801125
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3798028
--- Timings ---
Current time: 1559584268012 milliseconds
Total Time:          16.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.8 seconds, 52.5%
Fitness Testing:      5.7 seconds, 33.8%
Report:               2.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: 98                 
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: 77                 
Correct output: -79                 | Program output: -32                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 37                 
Correct output: 15                  | Program output: 20                 
Correct output: 25                  | Program output: 61                 
Correct output: 34                  | Program output: 63                 
Correct output: 44                  | Program output: 67                 
Correct output: 19                  | Program output: 71                 
Correct output: 41                  | Program output: 100                
Correct output: 16                  | Program output: 51                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 64                 
Correct output: 10                  | Program output: 10                 
Correct output: 63                  | Program output: 95                 
Correct output: 13                  | Program output: 83                 
Correct output: 7                   | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 7                  
Correct output: 42                  | Program output: 70                 
Correct output: 5                   | Program output: 64                 
Correct output: -52                 | Program output: 33                 
Correct output: -39                 | Program output: 68                 
Correct output: -76                 | Program output: 19                 
Correct output: -36                 | Program output: 10                 
Correct output: -76                 | Program output: 9                  
Correct output: -28                 | Program output: 17                 
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -49                
Correct output: -91                 | Program output: 37                 
Correct output: -70                 | Program output: -21                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: 37                 
Correct output: -98                 | Program output: -30                
Correct output: -94                 | Program output: 74                 
Correct output: -10                 | Program output: 55                 
Correct output: -64                 | Program output: 71                 
Correct output: -77                 | Program output: -40                
Correct output: -92                 | Program output: 72                 
Correct output: -38                 | Program output: 50                 
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: 54                 
Correct output: -50                 | Program output: 69                 
Correct output: -87                 | Program output: -78                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: 98                 
Correct output: -92                 | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -14                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: 12                 
Correct output: -87                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: 7                   | Program output: 24                 
Correct output: -73                 | Program output: 17                 
Correct output: -58                 | Program output: -51                
Correct output: -81                 | Program output: -54                
Correct output: -55                 | Program output: -39                
Correct output: -50                 | Program output: -50                
Correct output: -67                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -59                 | Program output: 24                 
Correct output: -66                 | Program output: 76                 
Correct output: -53                 | Program output: -24                
Correct output: -32                 | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -30                 | Program output: 46                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -69                
Correct output: 2                   | Program output: 74                 
Correct output: -75                 | Program output: 30                 
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction 42} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_gt} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction tagged_721} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction tagged_721} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction 86} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_mod exec_do*times () integer_mod exec_k (integer_dup integer_pop integer_max boolean_not integer_mult boolean_and integer_shove integer_dec integer_swap) (exec_stackdepth integer_lt integer_mod boolean_xor boolean_yankdup exec_while () integer_sub) boolean_flush exec_dup (print_boolean integer_dup integer_dec in4 boolean_yankdup exec_y_when_autoconstructing () integer_flush boolean_eq boolean_rot) exec_pop () integer_dup_times boolean_empty integer_dec 42 exec_k_when_autoconstructing (boolean_not exec_shove (integer_dup_times exec_dup (print_integer integer_gt boolean_dup integer_inc in1) exec_do*while (boolean_dup_items) exec_y () exec_dup_items integer_stackdepth exec_rot (exec_s_when_autoconstructing (exec_shove (exec_y_when_autoconstructing (exec_y_when_autoconstructing () exec_dup (integer_lt integer_pop) print_exec (exec_do*count () integer_gt) print_exec (exec_k_when_autoconstructing () (exec_dup_times (exec_stackdepth) tagged_721) exec_y () exec_yank exec_dup_times (exec_stackdepth) tagged_721) exec_y () exec_yank print_newline 86 boolean_invert_second_then_and in4 boolean_empty integer_rot integer_shove boolean_eq) exec_k_when_autoconstructing (integer_yankdup) (boolean_yank) in1 integer_lt boolean_and boolean_and)) () ()) () ())) ())
Lexicase best errors: [0 1 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 124
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction 42} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_gt} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction tagged_721} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction tagged_721} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction 86} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_mod exec_do*times () integer_mod exec_k (integer_dup integer_pop integer_max boolean_not integer_mult boolean_and integer_shove integer_dec integer_swap) (exec_stackdepth integer_lt integer_mod boolean_xor boolean_yankdup exec_while () integer_sub) boolean_flush exec_dup (print_boolean integer_dup integer_dec in4 boolean_yankdup exec_y_when_autoconstructing () integer_flush boolean_eq boolean_rot) exec_pop () integer_dup_times boolean_empty integer_dec 42 exec_k_when_autoconstructing (boolean_not exec_shove (integer_dup_times exec_dup (print_integer integer_gt boolean_dup integer_inc in1) exec_do*while (boolean_dup_items) exec_y () exec_dup_items integer_stackdepth exec_rot (exec_s_when_autoconstructing (exec_shove (exec_y_when_autoconstructing (exec_y_when_autoconstructing () exec_dup (integer_lt integer_pop) print_exec (exec_do*count () integer_gt) print_exec (exec_k_when_autoconstructing () (exec_dup_times (exec_stackdepth) tagged_721) exec_y () exec_yank exec_dup_times (exec_stackdepth) tagged_721) exec_y () exec_yank print_newline 86 boolean_invert_second_then_and in4 boolean_empty integer_rot integer_shove boolean_eq) exec_k_when_autoconstructing (integer_yankdup) (boolean_yank) in1 integer_lt boolean_and boolean_and)) () ()) () ())) ())
Zero cases best errors: [0 1 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 124
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (624 130 255 238 167 239 661 239 131 254)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (624 130 255 238 167 239 661 239 131 254)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_155} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_512} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_boolean})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor integer_mult boolean_stackdepth exec_yankdup in4 exec_when (print_integer exec_s_when_autoconstructing (exec_when () exec_dup (integer_lte exec_shove (boolean_yank) exec_rot (exec_if (exec_eq exec_yank exec_do*times () integer_eq exec_s_when_autoconstructing (integer_mod exec_empty integer_max tag_boolean_15 exec_y_when_autoconstructing (exec_shove () exec_k (boolean_xor integer_rot exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap boolean_dup) integer_empty exec_dup_times (exec_dup_items integer_lte) print_newline in3 boolean_swap integer_eq exec_do*while (in1 exec_do*times (exec_do*count (tag_boolean_155 integer_flush exec_s (tag_integer_512 exec_dup_items) (print_boolean) ()))))) ()) ())) () ()) ()) () ())) () ())))))
Errors: [0 1 1 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 62
Size: 98
Percent parens: 0.367
--- Population Statistics ---
Average total errors in population: 7.062
Median total errors in population: 7
Error averages by case: (0.376 0.87 0.745 0.762 0.833 0.761 0.339 0.761 0.869 0.746)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.097
Average program size in population (points): 101.041
Average percent parens in population: 0.306
Minimum age in population: 5.0
Maximum age in population: 8.875
Average age in population: 7.193375
Median age in population: 7.15625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4700261
--- Timings ---
Current time: 1559584271419 milliseconds
Total Time:          20.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.0 seconds, 54.2%
Fitness Testing:      6.5 seconds, 32.3%
Report:               2.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: 73                 
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 82                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 85                 
Correct output: 15                  | Program output: 72                 
Correct output: 25                  | Program output: 59                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 86                 
Correct output: 16                  | Program output: 28                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 76                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 77                 
Correct output: 5                   | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 99                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: 47                 
Correct output: -36                 | Program output: 73                 
Correct output: -76                 | Program output: 74                 
Correct output: -28                 | Program output: 79                 
Correct output: -64                 | Program output: 75                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 71                 
Correct output: -88                 | Program output: 3                  
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: 49                 
Correct output: -94                 | Program output: -8                 
Correct output: -10                 | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -86                
Correct output: -38                 | Program output: 48                 
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -17                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: 90                 
Correct output: 47                  | Program output: 86                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: 78                 
Correct output: -36                 | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 58                 
Correct output: 7                   | Program output: 79                 
Correct output: -73                 | Program output: 26                 
Correct output: -58                 | Program output: 89                 
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: 80                 
Correct output: -50                 | Program output: 79                 
Correct output: -67                 | Program output: 96                 
Correct output: -57                 | Program output: 13                 
Correct output: -59                 | Program output: 81                 
Correct output: -66                 | Program output: 78                 
Correct output: -53                 | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 83                 
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 87                 
Correct output: -94                 | Program output: -87                
Correct output: -90                 | Program output: 4                  
Correct output: -69                 | Program output: 66                 
Correct output: 2                   | Program output: 19                 
Correct output: -75                 | Program output: -24                
Correct output: -73                 | Program output: 4                  
Correct output: -79                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction -16} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items})
Lexicase best program: (in2 integer_min print_integer exec_do*while (boolean_swap) integer_empty exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq integer_max exec_do*while (boolean_shove) boolean_invert_first_then_and integer_div boolean_invert_first_then_and integer_empty exec_eq boolean_invert_second_then_and exec_stackdepth) boolean_invert_second_then_and exec_empty in3 integer_dup_times boolean_eq exec_pop () -16 exec_shove (in4 integer_mult) integer_pop boolean_rot exec_y () exec_dup_items)
Lexicase best errors: [1 1 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 47
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction -16} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items})
Zero cases best program: (in2 integer_min print_integer exec_do*while (boolean_swap) integer_empty exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq integer_max exec_do*while (boolean_shove) boolean_invert_first_then_and integer_div boolean_invert_first_then_and integer_empty exec_eq boolean_invert_second_then_and exec_stackdepth) boolean_invert_second_then_and exec_empty in3 integer_dup_times boolean_eq exec_pop () -16 exec_shove (in4 integer_mult) integer_pop boolean_rot exec_y () exec_dup_items)
Zero cases best errors: [1 1 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 188 288 111 288 192 112 188 111 110)
Population mean number of elite cases: 1.78
Count of perfect (error zero) individuals by case: (188 188 288 111 288 192 112 188 111 110)
Population mean number of perfect (error zero) cases: 1.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_eq integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor integer_mult boolean_yank exec_dup_items print_integer) boolean_swap exec_dup_times () exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (boolean_eq) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (exec_s_when_autoconstructing (print_boolean exec_s (print_integer) () ()) () ()) () ())) ())) () ()))
Errors: [1 1 1 0 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 39
Size: 64
Percent parens: 0.391
--- Population Statistics ---
Average total errors in population: 8.224
Median total errors in population: 8
Error averages by case: (0.812 0.812 0.712 0.889 0.712 0.808 0.888 0.812 0.889 0.89)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.359
Average program size in population (points): 103.22
Average percent parens in population: 0.309
Minimum age in population: 6.5
Maximum age in population: 10.34375
Average age in population: 8.6375625
Median age in population: 8.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5615415
--- Timings ---
Current time: 1559584275000 milliseconds
Total Time:          23.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.3 seconds, 55.7%
Fitness Testing:      7.4 seconds, 31.2%
Report:               3.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: 77                 
Correct output: -79                 | Program output: -32                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 51                 
Correct output: 1                   | Program output: 56                 
Correct output: 3                   | Program output: 14                 
Correct output: 15                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 50                 
Correct output: 44                  | Program output: 51                 
Correct output: 19                  | Program output: 61                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 92                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 48                 
Correct output: 63                  | Program output: 98                 
Correct output: 13                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 1                   | Program output: 38                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 91                 
Correct output: -52                 | Program output: -40                
Correct output: -39                 | Program output: 58                 
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 87                 
Correct output: -64                 | Program output: -35                
Correct output: -95                 | Program output: -80                
Correct output: -91                 | Program output: -31                
Correct output: -70                 | Program output: 44                 
Correct output: -83                 | Program output: 42                 
Correct output: -88                 | Program output: 9                  
Correct output: -55                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: 50                 
Correct output: -77                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -37                
Correct output: -60                 | Program output: -37                
Correct output: -93                 | Program output: -8                 
Correct output: -1                  | Program output: 100                
Correct output: -60                 | Program output: 49                 
Correct output: -50                 | Program output: 51                 
Correct output: -87                 | Program output: -10                
Correct output: -77                 | Program output: -43                
Correct output: -76                 | Program output: 64                 
Correct output: -92                 | Program output: 22                 
Correct output: -41                 | Program output: 52                 
Correct output: -58                 | Program output: 1                  
Correct output: 47                  | Program output: 78                 
Correct output: -33                 | Program output: 89                 
Correct output: -97                 | Program output: 39                 
Correct output: -94                 | Program output: 34                 
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -74                
Correct output: -24                 | Program output: 89                 
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 53                 
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -73                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: 80                 
Correct output: -59                 | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -39                
Correct output: -32                 | Program output: 39                 
Correct output: -65                 | Program output: 3                  
Correct output: -30                 | Program output: -15                
Correct output: -75                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -53                
Correct output: -69                 | Program output: 90                 
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 77                 
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_155} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_512} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_boolean})
Lexicase best program: (integer_gte boolean_dup integer_shove in4 integer_div boolean_stackdepth exec_rot (in4 integer_add print_integer exec_s_when_autoconstructing (exec_when () exec_dup (integer_lte exec_shove (boolean_or) exec_rot () (exec_if (exec_eq exec_yank exec_do*times () integer_eq exec_s_when_autoconstructing (integer_mod boolean_eq) (boolean_flush) (exec_do*while (exec_shove (in4 exec_k (boolean_flush integer_rot exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap boolean_dup) integer_empty exec_dup_times (exec_dup_items integer_lte) print_newline exec_do*range (boolean_flush integer_fromboolean exec_do*while (in1 exec_do*times (exec_do*count (tag_boolean_155 integer_fromboolean exec_s (tag_integer_512 exec_dup_items) (print_boolean) ())))))) ()) ())))) ()) ())) () ()) () ())
Lexicase best errors: [0 1 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.387
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_155} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_512} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_boolean})
Zero cases best program: (integer_gte boolean_dup integer_shove in4 integer_div boolean_stackdepth exec_rot (in4 integer_add print_integer exec_s_when_autoconstructing (exec_when () exec_dup (integer_lte exec_shove (boolean_or) exec_rot () (exec_if (exec_eq exec_yank exec_do*times () integer_eq exec_s_when_autoconstructing (integer_mod boolean_eq) (boolean_flush) (exec_do*while (exec_shove (in4 exec_k (boolean_flush integer_rot exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap boolean_dup) integer_empty exec_dup_times (exec_dup_items integer_lte) print_newline exec_do*range (boolean_flush integer_fromboolean exec_do*while (in1 exec_do*times (exec_do*count (tag_boolean_155 integer_fromboolean exec_s (tag_integer_512 exec_dup_items) (print_boolean) ())))))) ()) ())))) ()) ())) () ()) () ())
Zero cases best errors: [0 1 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.387
--- Lexicase Population Statistics ---
Count of elite individuals by case: (75 149 149 366 75 75 74 368 75 149)
Population mean number of elite cases: 1.55
Count of perfect (error zero) individuals by case: (75 149 149 366 75 75 74 368 75 149)
Population mean number of perfect (error zero) cases: 1.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_15} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction tagged_721} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction 86} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and})
Best program: (exec_s (boolean_rot integer_pop) (boolean_swap exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div boolean_stackdepth exec_rot (in4 integer_add print_integer exec_s_when_autoconstructing (exec_when () exec_dup (integer_lte exec_shove (boolean_yank) exec_rot () (exec_if (exec_eq exec_yank exec_do*times () integer_eq exec_s_when_autoconstructing (integer_mod exec_empty integer_max tag_boolean_15 boolean_invert_second_then_and exec_empty in3 integer_dup_times) () (boolean_eq) exec_pop () exec_do*while (exec_shove (in4 integer_mult) integer_pop boolean_rot integer_gt boolean_dup integer_inc integer_add) exec_do*while (boolean_dup_items) exec_y () exec_dup_items exec_yankdup exec_rot (exec_s_when_autoconstructing (exec_shove (exec_y_when_autoconstructing (exec_y_when_autoconstructing () exec_dup (integer_lt integer_pop) print_exec (exec_stackdepth) integer_gt) print_exec (exec_k_when_autoconstructing () (exec_dup_times (integer_add) tagged_721) exec_y () exec_yank print_newline 86 boolean_invert_second_then_and in4 boolean_empty integer_rot integer_shove boolean_eq) exec_k_when_autoconstructing (integer_yankdup) (boolean_yank) in1 integer_lt boolean_and boolean_and)) () ()) () ()) ()) ())) () ()) () ()) ()) ())
Errors: [0 1 1 1 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 86
Size: 134
Percent parens: 0.358
--- Population Statistics ---
Average total errors in population: 8.445
Median total errors in population: 8
Error averages by case: (0.925 0.851 0.851 0.634 0.925 0.925 0.926 0.632 0.925 0.851)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.396
Average program size in population (points): 97.899
Average percent parens in population: 0.301
Minimum age in population: 8.125
Maximum age in population: 12.03125
Average age in population: 10.127328125
Median age in population: 10.15625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6569647
--- Timings ---
Current time: 1559584279338 milliseconds
Total Time:          27.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.8 seconds, 57.1%
Fitness Testing:      8.4 seconds, 30.3%
Report:               3.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 37                 
Correct output: 15                  | Program output: 20                 
Correct output: 25                  | Program output: 59                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 86                 
Correct output: 16                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 64                 
Correct output: 10                  | Program output: 10                 
Correct output: 63                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 70                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: 19                 
Correct output: -36                 | Program output: 10                 
Correct output: -76                 | Program output: 9                  
Correct output: -28                 | Program output: 17                 
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -30                
Correct output: -94                 | Program output: -8                 
Correct output: -10                 | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -86                
Correct output: -38                 | Program output: 48                 
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -14                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: -24                
Correct output: 7                   | Program output: 24                 
Correct output: -73                 | Program output: 17                 
Correct output: -58                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -39                
Correct output: -50                 | Program output: -50                
Correct output: -67                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -59                 | Program output: 24                 
Correct output: -66                 | Program output: 76                 
Correct output: -53                 | Program output: -24                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -69                
Correct output: 2                   | Program output: 19                 
Correct output: -75                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())) ())) () ())))))
Lexicase best errors: [0 0 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 78
Percent parens: 0.359
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())) ())) () ())))))
Zero cases best errors: [0 0 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 78
Percent parens: 0.359
--- Lexicase Population Statistics ---
Count of elite individuals by case: (481 467 1 467 401 399 481 401 481 400)
Population mean number of elite cases: 3.98
Count of perfect (error zero) individuals by case: (481 467 1 467 401 399 481 401 481 400)
Population mean number of perfect (error zero) cases: 3.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq boolean_shove in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())) ())) () ())))))
Errors: [0 0 1 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 50
Size: 78
Percent parens: 0.359
--- Population Statistics ---
Average total errors in population: 6.021
Median total errors in population: 6
Error averages by case: (0.519 0.533 0.999 0.533 0.599 0.601 0.519 0.599 0.519 0.6)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.332
Average program size in population (points): 87.036
Average percent parens in population: 0.352
Minimum age in population: 9.25
Maximum age in population: 13.28125
Average age in population: 11.5693046875
Median age in population: 11.66015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 229
Genome diversity (% unique genomes):	 0.657
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 230
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7589367
--- Timings ---
Current time: 1559584283040 milliseconds
Total Time:          31.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.8 seconds, 56.5%
Fitness Testing:      9.3 seconds, 29.6%
Report:               4.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 37                 
Correct output: 15                  | Program output: 20                 
Correct output: 25                  | Program output: 59                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 86                 
Correct output: 16                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 64                 
Correct output: 10                  | Program output: 10                 
Correct output: 63                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 70                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: 19                 
Correct output: -36                 | Program output: 10                 
Correct output: -76                 | Program output: 9                  
Correct output: -28                 | Program output: 17                 
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -30                
Correct output: -94                 | Program output: -8                 
Correct output: -10                 | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -86                
Correct output: -38                 | Program output: 48                 
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -14                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: -24                
Correct output: 7                   | Program output: 24                 
Correct output: -73                 | Program output: 17                 
Correct output: -58                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -39                
Correct output: -50                 | Program output: -50                
Correct output: -67                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -59                 | Program output: 24                 
Correct output: -66                 | Program output: 76                 
Correct output: -53                 | Program output: -24                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -69                
Correct output: 2                   | Program output: 19                 
Correct output: -75                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_s (boolean_rot in3) (boolean_swap exec_rot (integer_gte boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and boolean_shove exec_s (print_integer) () ()) () ())) ())) () ())) () ()) ())
Lexicase best errors: [0 0 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 79
Percent parens: 0.392
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_s (boolean_rot in3) (boolean_swap exec_rot (integer_gte boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and boolean_shove exec_s (print_integer) () ()) () ())) ())) () ())) () ()) ())
Zero cases best errors: [0 0 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 79
Percent parens: 0.392
--- Lexicase Population Statistics ---
Count of elite individuals by case: (885 569 169 570 169 375 319 318 375 319)
Population mean number of elite cases: 4.07
Count of perfect (error zero) individuals by case: (885 569 169 570 169 375 319 318 375 319)
Population mean number of perfect (error zero) cases: 4.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot in2 exec_do*while (exec_rot (boolean_invert_first_then_and boolean_shove exec_s (print_integer) () ()) () ()))) ())) ())) () ()))))))
Errors: [0 0 1 0 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 48
Size: 81
Percent parens: 0.407
--- Population Statistics ---
Average total errors in population: 5.932
Median total errors in population: 5
Error averages by case: (0.115 0.431 0.831 0.43 0.831 0.625 0.681 0.682 0.625 0.681)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.817
Average program size in population (points): 85.616
Average percent parens in population: 0.360
Minimum age in population: 10.875
Maximum age in population: 14.5625
Average age in population: 12.97742578125
Median age in population: 13.05078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8677170
--- Timings ---
Current time: 1559584286675 milliseconds
Total Time:          35.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.7 seconds, 56.1%
Fitness Testing:     10.3 seconds, 29.4%
Report:               5.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 37                 
Correct output: 15                  | Program output: 20                 
Correct output: 25                  | Program output: 59                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 86                 
Correct output: 16                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 64                 
Correct output: 10                  | Program output: 10                 
Correct output: 63                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 70                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: 19                 
Correct output: -36                 | Program output: 10                 
Correct output: -76                 | Program output: 9                  
Correct output: -28                 | Program output: 17                 
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -30                
Correct output: -94                 | Program output: -8                 
Correct output: -10                 | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -86                
Correct output: -38                 | Program output: 48                 
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -14                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: -24                
Correct output: 7                   | Program output: 24                 
Correct output: -73                 | Program output: 17                 
Correct output: -58                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -39                
Correct output: -50                 | Program output: -50                
Correct output: -67                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -59                 | Program output: 24                 
Correct output: -66                 | Program output: 76                 
Correct output: -53                 | Program output: -24                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -69                
Correct output: 2                   | Program output: 19                 
Correct output: -75                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () integer_empty exec_empty) integer_mod integer_flush boolean_eq) integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())) ())) () ())))
Lexicase best errors: [0 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 74
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () integer_empty exec_empty) integer_mod integer_flush boolean_eq) integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())) ())) () ())))
Zero cases best errors: [0 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 74
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (318 302 318 267 318 638 302 317 638 318)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (318 302 318 267 318 638 302 317 638 318)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty) (exec_empty) integer_mod integer_flush boolean_eq) integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing (boolean_empty) (tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_xor integer_shove in2) exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())) ())) () ()))))
Errors: [0 1 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 78
Percent parens: 0.359
--- Population Statistics ---
Average total errors in population: 6.264
Median total errors in population: 6
Error averages by case: (0.682 0.698 0.682 0.733 0.682 0.362 0.698 0.683 0.362 0.682)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.459
Average program size in population (points): 83.874
Average percent parens in population: 0.363
Minimum age in population: 11.875
Maximum age in population: 16.203125
Average age in population: 14.402666015625
Median age in population: 14.490234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 9816912
--- Timings ---
Current time: 1559584290529 milliseconds
Total Time:          39.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.8 seconds, 55.9%
Fitness Testing:     11.4 seconds, 29.2%
Report:               5.7 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 37                 
Correct output: 15                  | Program output: 20                 
Correct output: 25                  | Program output: 59                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 86                 
Correct output: 16                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 64                 
Correct output: 10                  | Program output: 10                 
Correct output: 63                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 70                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: 19                 
Correct output: -36                 | Program output: 10                 
Correct output: -76                 | Program output: 9                  
Correct output: -28                 | Program output: 17                 
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -30                
Correct output: -94                 | Program output: -8                 
Correct output: -10                 | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -86                
Correct output: -38                 | Program output: 48                 
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -14                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: -24                
Correct output: 7                   | Program output: 24                 
Correct output: -73                 | Program output: 17                 
Correct output: -58                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -39                
Correct output: -50                 | Program output: -50                
Correct output: -67                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -59                 | Program output: 24                 
Correct output: -66                 | Program output: 76                 
Correct output: -53                 | Program output: -24                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -69                
Correct output: 2                   | Program output: 19                 
Correct output: -75                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop (exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (boolean_stackdepth exec_swap (integer_mult exec_k_when_autoconstructing (boolean_empty) (tag_boolean_956 exec_if (integer_dup_items exec_y_when_autoconstructing () integer_rot) (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ()))) ())) () ()))))))
Lexicase best errors: [0 0 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.359
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop (exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (boolean_stackdepth exec_swap (integer_mult exec_k_when_autoconstructing (boolean_empty) (tag_boolean_956 exec_if (integer_dup_items exec_y_when_autoconstructing () integer_rot) (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ()))) ())) () ()))))))
Zero cases best errors: [0 0 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.359
--- Lexicase Population Statistics ---
Count of elite individuals by case: (826 911 822 78 822 917 78 603 78 78)
Population mean number of elite cases: 5.21
Count of perfect (error zero) individuals by case: (826 911 822 78 822 917 78 603 78 78)
Population mean number of perfect (error zero) cases: 5.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove) (in2 exec_do*while (exec_rot (boolean_invert_first_then_and boolean_shove exec_s (print_integer) () ()) () ())))) () ()) ())))))
Errors: [0 0 0 1 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 43
Size: 69
Percent parens: 0.377
--- Population Statistics ---
Average total errors in population: 4.787
Median total errors in population: 4
Error averages by case: (0.174 0.089 0.178 0.922 0.178 0.083 0.922 0.397 0.922 0.922)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.037
Average program size in population (points): 81.032
Average percent parens in population: 0.358
Minimum age in population: 13.75
Maximum age in population: 17.6689453125
Average age in population: 15.9121748046875
Median age in population: 15.9599609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 11151981
--- Timings ---
Current time: 1559584294850 milliseconds
Total Time:          43.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.6 seconds, 56.2%
Fitness Testing:     12.6 seconds, 28.9%
Report:               6.4 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 37                 
Correct output: 15                  | Program output: 20                 
Correct output: 25                  | Program output: 59                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 86                 
Correct output: 16                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 64                 
Correct output: 10                  | Program output: 10                 
Correct output: 63                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 70                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: 19                 
Correct output: -36                 | Program output: 10                 
Correct output: -76                 | Program output: 9                  
Correct output: -28                 | Program output: 17                 
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -30                
Correct output: -94                 | Program output: -8                 
Correct output: -10                 | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -86                
Correct output: -38                 | Program output: 48                 
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -14                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: -24                
Correct output: 7                   | Program output: 24                 
Correct output: -73                 | Program output: 17                 
Correct output: -58                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -39                
Correct output: -50                 | Program output: -50                
Correct output: -67                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -59                 | Program output: 24                 
Correct output: -66                 | Program output: 76                 
Correct output: -53                 | Program output: -24                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -69                
Correct output: 2                   | Program output: 19                 
Correct output: -75                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod exec_noop boolean_eq) integer_max exec_do*while (exec_dup_times (integer_max boolean_eq) integer_max in2) exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())) ())) () ())))))
Lexicase best errors: [1 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 84
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod exec_noop boolean_eq) integer_max exec_do*while (exec_dup_times (integer_max boolean_eq) integer_max in2) exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())) ())) () ())))))
Zero cases best errors: [1 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 84
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (427 458 467 467 425 458 458 423 458 467)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (427 458 467 467 425 458 458 423 458 467)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_empty integer_swap integer_empty exec_empty) integer_mod integer_flush boolean_eq) integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (exec_rot (exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (boolean_yank) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_rot (boolean_invert_first_then_and boolean_shove exec_s (print_integer) () ()) () ()) ()) () ())) () ())))
Errors: [1 0 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 44
Size: 72
Percent parens: 0.389
--- Population Statistics ---
Average total errors in population: 5.492
Median total errors in population: 7
Error averages by case: (0.573 0.542 0.533 0.533 0.575 0.542 0.542 0.577 0.542 0.533)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.517
Average program size in population (points): 82.919
Average percent parens in population: 0.356
Minimum age in population: 14.75
Maximum age in population: 19.31494140625
Average age in population: 17.340951171875
Median age in population: 17.379638671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 12154482
--- Timings ---
Current time: 1559584298572 milliseconds
Total Time:          47.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.7 seconds, 56.6%
Fitness Testing:     13.5 seconds, 28.7%
Report:               6.8 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 51                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 14                 
Correct output: 15                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 79                 
Correct output: -64                 | Program output: -35                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 42                 
Correct output: -88                 | Program output: 3                  
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -37                
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -17                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: 1                  
Correct output: 47                  | Program output: 78                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: 34                 
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 58                 
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 26                 
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: 13                 
Correct output: -59                 | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -39                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 3                  
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 87                 
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -53                
Correct output: -69                 | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 4                  
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_mod exec_do*times () integer_mod exec_k (boolean_swap exec_rot (integer_gte boolean_dup) () (integer_shove in4 integer_div boolean_stackdepth exec_rot (in4 integer_add in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and) () ()))) ())) () ())) ())) ())
Lexicase best errors: [0 1 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 76
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_mod exec_do*times () integer_mod exec_k (boolean_swap exec_rot (integer_gte boolean_dup) () (integer_shove in4 integer_div boolean_stackdepth exec_rot (in4 integer_add in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and) () ()))) ())) () ())) ())) ())
Zero cases best errors: [0 1 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 76
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (346 532 346 532 346 350 1 1 1 350)
Population mean number of elite cases: 2.81
Count of perfect (error zero) individuals by case: (346 532 346 532 346 350 1 1 1 350)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () in4 integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) boolean_eq) integer_max exec_do*while (exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())) ()) ())) () ())))))
Errors: [0 1 0 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 58
Size: 89
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 7.195
Median total errors in population: 8
Error averages by case: (0.654 0.468 0.654 0.468 0.654 0.65 0.999 0.999 0.999 0.65)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.113
Average program size in population (points): 82.504
Average percent parens in population: 0.355
Minimum age in population: 15.984375
Maximum age in population: 20.900390625
Average age in population: 18.8591494140625
Median age in population: 18.9903564453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 13320767
--- Timings ---
Current time: 1559584302217 milliseconds
Total Time:          50.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.6 seconds, 56.3%
Fitness Testing:     14.6 seconds, 28.7%
Report:               7.5 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 51                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 14                 
Correct output: 15                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 79                 
Correct output: -64                 | Program output: -35                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 42                 
Correct output: -88                 | Program output: 3                  
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -37                
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -17                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: 1                  
Correct output: 47                  | Program output: 78                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: 34                 
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 58                 
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 26                 
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: 13                 
Correct output: -59                 | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -39                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 3                  
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 87                 
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -53                
Correct output: -69                 | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 4                  
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_s (boolean_rot integer_pop) (boolean_swap exec_rot (integer_gte boolean_dup integer_shove in4 integer_div boolean_stackdepth exec_rot (in4 integer_add in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_dup_times () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_lte exec_shove (boolean_yank) exec_rot () (exec_if (exec_eq exec_yank exec_do*times () exec_dup_times (exec_s_when_autoconstructing (exec_if (integer_dup_items) (exec_y_when_autoconstructing () exec_shove (boolean_swap) exec_yankdup exec_stackdepth boolean_not boolean_invert_second_then_and in2 exec_do*while (exec_rot (boolean_invert_first_then_and) () ()))) () ())) ()) ())) () ()) () ()) ())
Lexicase best errors: [1 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 81
Percent parens: 0.407
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_s (boolean_rot integer_pop) (boolean_swap exec_rot (integer_gte boolean_dup integer_shove in4 integer_div boolean_stackdepth exec_rot (in4 integer_add in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_dup_times () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_lte exec_shove (boolean_yank) exec_rot () (exec_if (exec_eq exec_yank exec_do*times () exec_dup_times (exec_s_when_autoconstructing (exec_if (integer_dup_items) (exec_y_when_autoconstructing () exec_shove (boolean_swap) exec_yankdup exec_stackdepth boolean_not boolean_invert_second_then_and in2 exec_do*while (exec_rot (boolean_invert_first_then_and) () ()))) () ())) ()) ())) () ()) () ()) ())
Zero cases best errors: [1 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 81
Percent parens: 0.407
--- Lexicase Population Statistics ---
Count of elite individuals by case: (251 424 893 424 424 418 187 187 424 883)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (251 424 893 424 424 418 187 187 424 883)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while (exec_dup_times (boolean_dup_items exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing (integer_eq integer_gte) (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 boolean_or exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ()) ())))) ()))))
Errors: [1 0 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 57
Size: 84
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 5.485
Median total errors in population: 6
Error averages by case: (0.749 0.576 0.107 0.576 0.576 0.582 0.813 0.813 0.576 0.117)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.324
Average program size in population (points): 85.241
Average percent parens in population: 0.362
Minimum age in population: 16.984375
Maximum age in population: 22.2686767578125
Average age in population: 20.47701904296875
Median age in population: 20.5224609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 14454399
--- Timings ---
Current time: 1559584305822 milliseconds
Total Time:          54.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.5 seconds, 56.1%
Fitness Testing:     15.6 seconds, 28.7%
Report:               8.2 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 37                 
Correct output: 15                  | Program output: 20                 
Correct output: 25                  | Program output: 59                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 86                 
Correct output: 16                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 64                 
Correct output: 10                  | Program output: 10                 
Correct output: 63                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 70                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: 19                 
Correct output: -36                 | Program output: 10                 
Correct output: -76                 | Program output: 9                  
Correct output: -28                 | Program output: 17                 
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -30                
Correct output: -94                 | Program output: -8                 
Correct output: -10                 | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -86                
Correct output: -38                 | Program output: 48                 
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -14                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: -24                
Correct output: 7                   | Program output: 24                 
Correct output: -73                 | Program output: 17                 
Correct output: -58                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -39                
Correct output: -50                 | Program output: -50                
Correct output: -67                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -59                 | Program output: 24                 
Correct output: -66                 | Program output: 76                 
Correct output: -53                 | Program output: -24                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -69                
Correct output: 2                   | Program output: 19                 
Correct output: -75                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction 42} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_empty) (exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod exec_yankdup exec_stackdepth boolean_not exec_y (in2 exec_pop () integer_dup_times boolean_empty) integer_dec 42 exec_k_when_autoconstructing (boolean_not exec_shove (integer_dup_times exec_dup (print_integer integer_div) integer_lt boolean_invert_first_then_and print_boolean exec_eq print_integer)) ()))) ()))))
Lexicase best errors: [0 0 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction 42} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_empty) (exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod exec_yankdup exec_stackdepth boolean_not exec_y (in2 exec_pop () integer_dup_times boolean_empty) integer_dec 42 exec_k_when_autoconstructing (boolean_not exec_shove (integer_dup_times exec_dup (print_integer integer_div) integer_lt boolean_invert_first_then_and print_boolean exec_eq print_integer)) ()))) ()))))
Zero cases best errors: [0 0 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (240 240 91 537 240 537 240 531 537 240)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (240 240 91 537 240 537 240 531 537 240)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction 42} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min})
Best program: (exec_s (boolean_rot integer_pop) (boolean_swap exec_rot (integer_gte exec_do*while (boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max integer_div) exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () boolean_empty boolean_swap) 42 exec_k_when_autoconstructing (boolean_not exec_when (integer_dup_times exec_dup (print_integer integer_div) integer_lt integer_min)) ()) ())) () ())) () ()) ())
Errors: [0 0 1 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 51
Size: 79
Percent parens: 0.354
--- Population Statistics ---
Average total errors in population: 6.567
Median total errors in population: 6
Error averages by case: (0.76 0.76 0.909 0.463 0.76 0.463 0.76 0.469 0.463 0.76)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.839
Average program size in population (points): 84.563
Average percent parens in population: 0.362
Minimum age in population: 18.8756103515625
Maximum age in population: 23.83978271484375
Average age in population: 21.86530926513672
Median age in population: 21.9219970703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 15523242
--- Timings ---
Current time: 1559584309547 milliseconds
Total Time:          58.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.5 seconds, 56.0%
Fitness Testing:     16.5 seconds, 28.5%
Report:               8.9 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 51                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 14                 
Correct output: 15                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 79                 
Correct output: -64                 | Program output: -35                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 42                 
Correct output: -88                 | Program output: 3                  
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -37                
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -17                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: 1                  
Correct output: 47                  | Program output: 78                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: 34                 
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 58                 
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 26                 
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: 13                 
Correct output: -59                 | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -39                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 3                  
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 87                 
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -53                
Correct output: -69                 | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 4                  
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction tag_boolean_15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap exec_dup (exec_when (exec_shove (boolean_yank) exec_rot (exec_if (exec_eq exec_yank exec_do*times () integer_eq exec_s_when_autoconstructing (integer_mod exec_empty) (integer_max tag_boolean_15) (exec_y_when_autoconstructing (integer_empty exec_empty) integer_lte boolean_shove boolean_yank) exec_rot () (exec_if (exec_eq exec_yank exec_do*times () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items print_newline integer_eq boolean_dup_items) boolean_empty) (tag_boolean_956 exec_if (exec_when () exec_y_when_autoconstructing () integer_rot boolean_swap) (exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ()))) ())) ()) ()) ()) () ()))) ()))))
Lexicase best errors: [0 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 113
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction tag_boolean_15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq boolean_eq integer_pop in1 boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap exec_dup (exec_when (exec_shove (boolean_yank) exec_rot (exec_if (exec_eq exec_yank exec_do*times () integer_eq exec_s_when_autoconstructing (integer_mod exec_empty) (integer_max tag_boolean_15) (exec_y_when_autoconstructing (integer_empty exec_empty) integer_lte boolean_shove boolean_yank) exec_rot () (exec_if (exec_eq exec_yank exec_do*times () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items print_newline integer_eq boolean_dup_items) boolean_empty) (tag_boolean_956 exec_if (exec_when () exec_y_when_autoconstructing () integer_rot boolean_swap) (exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ()))) ())) ()) ()) ()) () ()))) ()))))
Zero cases best errors: [0 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 113
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (466 348 466 85 348 348 466 347 919 467)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (466 348 466 85 348 348 466 347 919 467)
Population mean number of perfect (error zero) cases: 4.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 2, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div boolean_empty in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop (exec_k_when_autoconstructing (integer_swap integer_empty exec_empty integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) () exec_y_when_autoconstructing () integer_rot boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())) ()) ())) () ()))))) ()))))
Errors: [1 0 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 57
Size: 90
Percent parens: 0.367
--- Population Statistics ---
Average total errors in population: 5.74
Median total errors in population: 5
Error averages by case: (0.534 0.652 0.534 0.915 0.652 0.652 0.534 0.653 0.081 0.533)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.606
Average program size in population (points): 83.596
Average percent parens in population: 0.358
Minimum age in population: 20.4697265625
Maximum age in population: 25.24227905273438
Average age in population: 23.35213250732422
Median age in population: 23.42364501953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 16719311
--- Timings ---
Current time: 1559584313581 milliseconds
Total Time:          62.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.7 seconds, 55.9%
Fitness Testing:     17.6 seconds, 28.4%
Report:               9.6 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 51                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 14                 
Correct output: 15                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 79                 
Correct output: -64                 | Program output: -35                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 42                 
Correct output: -88                 | Program output: 3                  
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -37                
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -17                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: 1                  
Correct output: 47                  | Program output: 78                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: 34                 
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 58                 
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 26                 
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: 13                 
Correct output: -59                 | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -39                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 3                  
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 87                 
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -53                
Correct output: -69                 | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 4                  
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap integer_gte exec_yank integer_pop exec_rot (in4 integer_add in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) integer_mod integer_flush boolean_eq) (integer_max print_integer exec_do*while (print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (print_newline integer_eq boolean_dup_items) (boolean_empty) tag_boolean_956 exec_if (exec_when () exec_y_when_autoconstructing () integer_rot boolean_swap) (exec_yankdup exec_stackdepth boolean_not integer_shove in2 boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ()))) () ()))) ())) () ()))) ())))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 114
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap integer_gte exec_yank integer_pop exec_rot (in4 integer_add in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) integer_mod integer_flush boolean_eq) (integer_max print_integer exec_do*while (print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (print_newline integer_eq boolean_dup_items) (boolean_empty) tag_boolean_956 exec_if (exec_when () exec_y_when_autoconstructing () integer_rot boolean_swap) (exec_yankdup exec_stackdepth boolean_not integer_shove in2 boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ()))) () ()))) ())) () ()))) ())))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 114
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (887 886 366 883 880 366 93 897 899 880)
Population mean number of elite cases: 7.04
Count of perfect (error zero) individuals by case: (887 886 366 883 880 366 93 897 899 880)
Population mean number of perfect (error zero) cases: 7.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 boolean_pop boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while (exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (boolean_xor) integer_rot boolean_swap) (exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean print_integer) () ()))) ())) () ()))) ()))))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 57
Size: 86
Percent parens: 0.337
--- Population Statistics ---
Average total errors in population: 2.963
Median total errors in population: 3
Error averages by case: (0.113 0.114 0.634 0.117 0.12 0.634 0.907 0.103 0.101 0.12)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.469
Average program size in population (points): 83.266
Average percent parens in population: 0.356
Minimum age in population: 21.89892578125
Maximum age in population: 26.83045959472656
Average age in population: 24.80036260986328
Median age in population: 24.86769866943359
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.009
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 17905615
--- Timings ---
Current time: 1559584317348 milliseconds
Total Time:          65.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.7 seconds, 55.8%
Fitness Testing:     18.7 seconds, 28.3%
Report:              10.4 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 65                 
Correct output: 16                  | Program output: 28                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 31                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 74                 
Correct output: 5                   | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 89                 
Correct output: 5                   | Program output: 5                  
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -62                
Correct output: -36                 | Program output: 73                 
Correct output: -76                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 3                  
Correct output: -88                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -53                
Correct output: -94                 | Program output: -8                 
Correct output: -10                 | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -86                
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -71                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: -58                
Correct output: 47                  | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: -51                
Correct output: -36                 | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 7                  
Correct output: 7                   | Program output: 47                 
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -9                 
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: 58                 
Correct output: -50                 | Program output: 46                 
Correct output: -67                 | Program output: 56                 
Correct output: -57                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 71                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 64                 
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 29                 
Correct output: -94                 | Program output: -87                
Correct output: -90                 | Program output: -12                
Correct output: -69                 | Program output: -49                
Correct output: 2                   | Program output: 19                 
Correct output: -75                 | Program output: -24                
Correct output: -73                 | Program output: -68                
Correct output: -79                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot () (integer_gte boolean_dup) (integer_shove in3 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop ()) exec_k_when_autoconstructing (integer_dup_items integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while (exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (in3 exec_k_when_autoconstructing (integer_eq exec_k_when_autoconstructing () (boolean_empty tag_boolean_956 exec_if (integer_dup_items) (boolean_xor) integer_rot boolean_swap) boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())) ()) ())) () ()))))))
Lexicase best errors: [1 0 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 87
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot () (integer_gte boolean_dup) (integer_shove in3 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop ()) exec_k_when_autoconstructing (integer_dup_items integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while (exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (in3 exec_k_when_autoconstructing (integer_eq exec_k_when_autoconstructing () (boolean_empty tag_boolean_956 exec_if (integer_dup_items) (boolean_xor) integer_rot boolean_swap) boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())) ()) ())) () ()))))))
Zero cases best errors: [1 0 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 87
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 286 591 1000 896 1000 286 286 891 591)
Population mean number of elite cases: 6.83
Count of perfect (error zero) individuals by case: (0 286 591 0 896 0 286 286 891 591)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_dup (exec_do*range (exec_do*while (boolean_dup) integer_shove in3 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while (exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (boolean_xor) integer_rot boolean_swap) (exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ()))) ())) () ())))))
Errors: [1 0 1 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 51
Size: 80
Percent parens: 0.363
--- Population Statistics ---
Average total errors in population: 6.173
Median total errors in population: 6
Error averages by case: (1.0 0.714 0.409 1.0 0.104 1.0 0.714 0.714 0.109 0.409)
Error minima by case: (1 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 54.424
Average program size in population (points): 85.378
Average percent parens in population: 0.361
Minimum age in population: 23.0538330078125
Maximum age in population: 28.17972564697266
Average age in population: 26.35762143707275
Median age in population: 26.41613006591797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 19031418
--- Timings ---
Current time: 1559584321239 milliseconds
Total Time:          69.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.9 seconds, 55.8%
Fitness Testing:     19.7 seconds, 28.2%
Report:              11.1 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 65                 
Correct output: 16                  | Program output: 28                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 31                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 74                 
Correct output: 5                   | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 89                 
Correct output: 5                   | Program output: 5                  
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -62                
Correct output: -36                 | Program output: 73                 
Correct output: -76                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 3                  
Correct output: -88                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -53                
Correct output: -94                 | Program output: -8                 
Correct output: -10                 | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -86                
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -71                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: -58                
Correct output: 47                  | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: -51                
Correct output: -36                 | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 7                  
Correct output: 7                   | Program output: 47                 
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -9                 
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: 58                 
Correct output: -50                 | Program output: 46                 
Correct output: -67                 | Program output: 56                 
Correct output: -57                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 71                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 64                 
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 29                 
Correct output: -94                 | Program output: -87                
Correct output: -90                 | Program output: -12                
Correct output: -69                 | Program output: -49                
Correct output: 2                   | Program output: 19                 
Correct output: -75                 | Program output: -24                
Correct output: -73                 | Program output: -68                
Correct output: -79                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (integer_mod exec_do*times () integer_mod exec_k (integer_max exec_rot (integer_gte boolean_dup) () (integer_shove in4 integer_div boolean_stackdepth exec_rot (in4 integer_add in3 integer_min print_integer exec_do*while (boolean_swap integer_empty) integer_mod integer_empty exec_empty) (integer_lte exec_shove (boolean_yank) exec_rot () (exec_if (exec_eq exec_yank exec_do*times () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items print_newline integer_eq boolean_dup_items) boolean_empty) (tag_boolean_956 exec_if (exec_when () exec_y_when_autoconstructing () integer_max boolean_swap) (exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (exec_stackdepth exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ()) () ()))) ())) ()) ()) ())) ())
Lexicase best errors: [1 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 96
Percent parens: 0.385
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (integer_mod exec_do*times () integer_mod exec_k (integer_max exec_rot (integer_gte boolean_dup) () (integer_shove in4 integer_div boolean_stackdepth exec_rot (in4 integer_add in3 integer_min print_integer exec_do*while (boolean_swap integer_empty) integer_mod integer_empty exec_empty) (integer_lte exec_shove (boolean_yank) exec_rot () (exec_if (exec_eq exec_yank exec_do*times () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items print_newline integer_eq boolean_dup_items) boolean_empty) (tag_boolean_956 exec_if (exec_when () exec_y_when_autoconstructing () integer_max boolean_swap) (exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (exec_stackdepth exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ()) () ()))) ())) ()) ()) ())) ())
Zero cases best errors: [1 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 96
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 502 685 555 503 884 556 678 687 889)
Population mean number of elite cases: 6.94
Count of perfect (error zero) individuals by case: (0 502 685 555 503 884 556 678 687 889)
Population mean number of perfect (error zero) cases: 5.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot () (integer_gte boolean_dup) (integer_shove in3 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop ()) exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while (exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (in3 exec_k_when_autoconstructing (integer_eq exec_k_when_autoconstructing () (boolean_empty tag_boolean_956 exec_if (integer_dup_items) (boolean_xor) integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())) ()) ())) () ()))))))
Errors: [1 1 0 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 57
Size: 89
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 4.061
Median total errors in population: 3
Error averages by case: (1.0 0.498 0.315 0.445 0.497 0.116 0.444 0.322 0.313 0.111)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.679
Average program size in population (points): 91.407
Average percent parens in population: 0.367
Minimum age in population: 24.72021484375
Maximum age in population: 29.7105598449707
Average age in population: 28.20242593765259
Median age in population: 28.12710762023926
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 159
Genome diversity (% unique genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 19969482
--- Timings ---
Current time: 1559584325070 milliseconds
Total Time:          73.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.2 seconds, 56.0%
Fitness Testing:     20.5 seconds, 27.9%
Report:              11.8 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 65                 
Correct output: 16                  | Program output: 28                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 31                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 74                 
Correct output: 5                   | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 89                 
Correct output: 5                   | Program output: 5                  
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -62                
Correct output: -36                 | Program output: 73                 
Correct output: -76                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 3                  
Correct output: -88                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -53                
Correct output: -94                 | Program output: -8                 
Correct output: -10                 | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -86                
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -71                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: -58                
Correct output: 47                  | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: -51                
Correct output: -36                 | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 7                  
Correct output: 7                   | Program output: 47                 
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -9                 
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: 58                 
Correct output: -50                 | Program output: 46                 
Correct output: -67                 | Program output: 56                 
Correct output: -57                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 71                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 64                 
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 29                 
Correct output: -94                 | Program output: -87                
Correct output: -90                 | Program output: -12                
Correct output: -69                 | Program output: -49                
Correct output: 2                   | Program output: 19                 
Correct output: -75                 | Program output: -24                
Correct output: -73                 | Program output: -68                
Correct output: -79                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction in2})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while (exec_dup_times (boolean_invert_first_then_and integer_max integer_dup_items exec_yank integer_dup_items print_newline integer_eq boolean_dup_items) boolean_empty) tag_boolean_956 boolean_shove exec_when () integer_eq exec_k_when_autoconstructing (exec_dup_items exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () exec_stackdepth boolean_not integer_shove in2)) ()) ()))))
Lexicase best errors: [1 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 77
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction in2})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while (exec_dup_times (boolean_invert_first_then_and integer_max integer_dup_items exec_yank integer_dup_items print_newline integer_eq boolean_dup_items) boolean_empty) tag_boolean_956 boolean_shove exec_when () integer_eq exec_k_when_autoconstructing (exec_dup_items exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () exec_stackdepth boolean_not integer_shove in2)) ()) ()))))
Zero cases best errors: [1 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 77
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 543 1000 538 543 541 1000 673 507 875)
Population mean number of elite cases: 7.22
Count of perfect (error zero) individuals by case: (0 543 0 538 543 541 0 673 507 875)
Population mean number of perfect (error zero) cases: 4.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (exec_s (boolean_rot exec_empty exec_do*range (exec_do*while (boolean_invert_second_then_and exec_do*while (boolean_eq integer_pop exec_rot () (integer_gte boolean_dup) (integer_shove in3 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max exec_do*while (exec_dup_times () exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (boolean_xor) integer_rot boolean_swap) (exec_yankdup exec_if (exec_when () exec_y_when_autoconstructing () integer_rot boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and) () ())) ())) ())) () ())))))) () ())
Errors: [1 0 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 62
Size: 98
Percent parens: 0.367
--- Population Statistics ---
Average total errors in population: 5.78
Median total errors in population: 4
Error averages by case: (1.0 0.457 1.0 0.462 0.457 0.459 1.0 0.327 0.493 0.125)
Error minima by case: (1 0 1 0 0 0 1 0 0 0)
Average genome size in population (length): 57.312
Average program size in population (points): 90.58
Average percent parens in population: 0.365
Minimum age in population: 26.679931640625
Maximum age in population: 31.47903442382812
Average age in population: 29.65263060379028
Median age in population: 29.68221855163574
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 20917172
--- Timings ---
Current time: 1559584328557 milliseconds
Total Time:          77.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.1 seconds, 55.9%
Fitness Testing:     21.4 seconds, 27.8%
Report:              12.5 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 51                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 14                 
Correct output: 15                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 79                 
Correct output: -64                 | Program output: -35                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 42                 
Correct output: -88                 | Program output: 3                  
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -37                
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -17                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: 1                  
Correct output: 47                  | Program output: 78                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: 34                 
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 58                 
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 26                 
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: 13                 
Correct output: -59                 | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -39                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 3                  
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 87                 
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -53                
Correct output: -69                 | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 4                  
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_k (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap exec_while (exec_empty) integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_s_when_autoconstructing (integer_max exec_do*while (exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq integer_rot boolean_swap) (exec_yankdup boolean_stackdepth boolean_not integer_shove boolean_not integer_shove in2 exec_do*while (boolean_dup_times) in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())))) () ()))) () ())))) ()))) ())
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 92
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_k (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap exec_while (exec_empty) integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_s_when_autoconstructing (integer_max exec_do*while (exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq integer_rot boolean_swap) (exec_yankdup boolean_stackdepth boolean_not integer_shove boolean_not integer_shove in2 exec_do*while (boolean_dup_times) in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ())))) () ()))) () ())))) ()))) ())
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 92
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (845 845 454 456 845 917 2 833 457 456)
Population mean number of elite cases: 6.11
Count of perfect (error zero) individuals by case: (845 845 454 456 845 917 2 833 457 456)
Population mean number of perfect (error zero) cases: 6.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 1, :instruction exec_if} {:close 1, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod exec_do*range (integer_dup_items print_newline integer_eq boolean_yank) boolean_empty) tag_boolean_956 exec_if () (exec_when () exec_y_when_autoconstructing () integer_max boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (exec_do*while (exec_s (print_integer) () ())) () ())) () ())) ())))))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 55
Size: 84
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 3.89
Median total errors in population: 5
Error averages by case: (0.155 0.155 0.546 0.544 0.155 0.083 0.998 0.167 0.543 0.544)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.911
Average program size in population (points): 85.588
Average percent parens in population: 0.356
Minimum age in population: 28.4466552734375
Maximum age in population: 32.91385841369629
Average age in population: 31.07134417152405
Median age in population: 31.15108346939087
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.836
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 22065572
--- Timings ---
Current time: 1559584332194 milliseconds
Total Time:          80.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.0 seconds, 55.8%
Fitness Testing:     22.4 seconds, 27.8%
Report:              13.2 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 51                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 14                 
Correct output: 15                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 79                 
Correct output: -64                 | Program output: -35                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 42                 
Correct output: -88                 | Program output: 3                  
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -37                
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -17                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: 1                  
Correct output: 47                  | Program output: 78                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: 34                 
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 58                 
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 26                 
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: 13                 
Correct output: -59                 | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -39                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 3                  
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 87                 
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -53                
Correct output: -69                 | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 4                  
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_mod exec_do*times () integer_mod integer_gt boolean_swap exec_rot (integer_gte boolean_dup) () (integer_shove in4 integer_div boolean_stackdepth exec_rot (in4 integer_add in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (boolean_shove exec_do*range (integer_dup_items exec_swap (boolean_empty tag_boolean_956 exec_dup_times (exec_s_when_autoconstructing (integer_lte integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup boolean_stackdepth boolean_not integer_shove boolean_not integer_shove in2 exec_do*while (exec_rot (exec_s (boolean_dup_times) () ()) () ())) ()) () ())) ()))) ()))
Lexicase best errors: [0 1 1 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 90
Percent parens: 0.356
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_mod exec_do*times () integer_mod integer_gt boolean_swap exec_rot (integer_gte boolean_dup) () (integer_shove in4 integer_div boolean_stackdepth exec_rot (in4 integer_add in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (boolean_shove exec_do*range (integer_dup_items exec_swap (boolean_empty tag_boolean_956 exec_dup_times (exec_s_when_autoconstructing (integer_lte integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup boolean_stackdepth boolean_not integer_shove boolean_not integer_shove in2 exec_do*while (exec_rot (exec_s (boolean_dup_times) () ()) () ())) ()) () ())) ()))) ()))
Zero cases best errors: [0 1 1 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 90
Percent parens: 0.356
--- Lexicase Population Statistics ---
Count of elite individuals by case: (713 2 151 713 713 2 2 706 2 151)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (713 2 151 713 713 2 2 706 2 151)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 2, :instruction boolean_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup})
Best program: (integer_gte boolean_dup integer_shove in4 integer_div boolean_stackdepth exec_rot (in4 exec_s_when_autoconstructing (in2 integer_min print_integer exec_do*while (boolean_swap in2 exec_do*while () exec_dup_times (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing () (exec_noop tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing (integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_shove (exec_s_when_autoconstructing (exec_do*range (integer_dup_items exec_swap (integer_eq integer_eq exec_k_when_autoconstructing (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (boolean_xor) integer_rot boolean_swap) (exec_yankdup exec_stackdepth boolean_not integer_shove in2 integer_rot boolean_swap) exec_yankdup) ())) () ())))) ())) () ()))) () ()) () ())
Errors: [0 1 1 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 60
Size: 94
Percent parens: 0.362
--- Population Statistics ---
Average total errors in population: 6.845
Median total errors in population: 6
Error averages by case: (0.287 0.998 0.849 0.287 0.287 0.998 0.998 0.294 0.998 0.849)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.352
Average program size in population (points): 84.194
Average percent parens in population: 0.352
Minimum age in population: 29.90515899658203
Maximum age in population: 34.42892599105835
Average age in population: 32.65098392915726
Median age in population: 32.68802261352539
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 23211697
--- Timings ---
Current time: 1559584335821 milliseconds
Total Time:          84.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.0 seconds, 55.7%
Fitness Testing:     23.4 seconds, 27.8%
Report:              13.9 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 37                 
Correct output: 15                  | Program output: 20                 
Correct output: 25                  | Program output: 59                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 86                 
Correct output: 16                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 64                 
Correct output: 10                  | Program output: 10                 
Correct output: 63                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 70                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: 19                 
Correct output: -36                 | Program output: 10                 
Correct output: -76                 | Program output: 9                  
Correct output: -28                 | Program output: 17                 
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -30                
Correct output: -94                 | Program output: -8                 
Correct output: -10                 | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -86                
Correct output: -38                 | Program output: 48                 
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -14                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: -24                
Correct output: 7                   | Program output: 24                 
Correct output: -73                 | Program output: 17                 
Correct output: -58                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -39                
Correct output: -50                 | Program output: -50                
Correct output: -67                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -59                 | Program output: 24                 
Correct output: -66                 | Program output: 76                 
Correct output: -53                 | Program output: -24                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -69                
Correct output: 2                   | Program output: 19                 
Correct output: -75                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) integer_empty exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ()))) ())) ())))))) ()) ())))))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 96
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) integer_empty exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean exec_s (print_integer) () ()) () ()))) ())) ())))))) ()) ())))))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 96
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 355 880 708 722 189 317 722 506 189)
Population mean number of elite cases: 4.90
Count of perfect (error zero) individuals by case: (313 355 880 708 722 189 317 722 506 189)
Population mean number of perfect (error zero) cases: 4.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot () (integer_gte boolean_dup integer_shove in1 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max integer_dup_items exec_swap (integer_eq exec_k_when_autoconstructing (integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (boolean_xor) integer_rot boolean_swap) (exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and print_boolean) (exec_s (print_integer) () ()) ()))) ()) ()))))
Errors: [1 1 0 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 53
Size: 79
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 5.099
Median total errors in population: 5
Error averages by case: (0.687 0.645 0.12 0.292 0.278 0.811 0.683 0.278 0.494 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.794
Average program size in population (points): 93.38
Average percent parens in population: 0.356
Minimum age in population: 31.38072776794434
Maximum age in population: 35.89239454269409
Average age in population: 33.99769034647942
Median age in population: 34.09763860702515
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 24335988
--- Timings ---
Current time: 1559584339936 milliseconds
Total Time:          88.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.3 seconds, 55.8%
Fitness Testing:     24.4 seconds, 27.6%
Report:              14.6 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 48                 
Correct output: -14                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 35                 
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 37                 
Correct output: 15                  | Program output: 20                 
Correct output: 25                  | Program output: 59                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 86                 
Correct output: 16                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 64                 
Correct output: 10                  | Program output: 10                 
Correct output: 63                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 70                 
Correct output: 5                   | Program output: 61                 
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: 23                 
Correct output: -76                 | Program output: 19                 
Correct output: -36                 | Program output: 10                 
Correct output: -76                 | Program output: 9                  
Correct output: -28                 | Program output: 17                 
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -30                
Correct output: -94                 | Program output: -8                 
Correct output: -10                 | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -86                
Correct output: -38                 | Program output: 48                 
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -14                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: -24                
Correct output: 7                   | Program output: 24                 
Correct output: -73                 | Program output: 17                 
Correct output: -58                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -39                
Correct output: -50                 | Program output: -50                
Correct output: -67                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -59                 | Program output: 24                 
Correct output: -66                 | Program output: 76                 
Correct output: -53                 | Program output: -24                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -69                
Correct output: 2                   | Program output: 19                 
Correct output: -75                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot () (integer_gte boolean_dup integer_shove in1 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush integer_eq exec_k_when_autoconstructing () (boolean_empty tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and) () ())))) ())))))))
Lexicase best errors: [0 1 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 73
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot () (integer_gte boolean_dup integer_shove in1 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush integer_eq exec_k_when_autoconstructing () (boolean_empty tag_boolean_956 exec_if (integer_dup_items) (exec_y_when_autoconstructing () integer_rot boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (boolean_invert_first_then_and) () ())))) ())))))))
Zero cases best errors: [0 1 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 73
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (832 231 231 834 358 358 231 170 358 358)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (832 231 231 834 358 358 231 170 358 358)
Population mean number of perfect (error zero) cases: 3.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot () (integer_gte boolean_dup integer_shove in1 integer_div boolean_xor in2 integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_empty) (integer_mod integer_flush boolean_eq) integer_max integer_dup_items exec_swap (integer_eq boolean_dup integer_eq exec_k_when_autoconstructing () (boolean_empty) tag_boolean_956 exec_if (integer_dup_items) (boolean_xor) integer_rot boolean_swap) (exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_mult print_boolean) (exec_s (print_integer) () ()) ()))) ())))))
Errors: [0 1 1 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 80
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.039
Median total errors in population: 5
Error averages by case: (0.168 0.769 0.769 0.166 0.642 0.642 0.769 0.83 0.642 0.642)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.382
Average program size in population (points): 90.378
Average percent parens in population: 0.351
Minimum age in population: 33.17961025238037
Maximum age in population: 37.42424762248993
Average age in population: 35.34114313542843
Median age in population: 35.38031613826752
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 25372217
--- Timings ---
Current time: 1559584343554 milliseconds
Total Time:          92.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.3 seconds, 55.7%
Fitness Testing:     25.4 seconds, 27.6%
Report:              15.3 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -35                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 3                  
Correct output: -88                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -71                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: -58                
Correct output: 47                  | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 3                  
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -68                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) integer_empty exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))) ())) ())))))) ()) ()))))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 95
Percent parens: 0.358
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) integer_empty exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))) ())) ())))))) ()) ()))))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 95
Percent parens: 0.358
--- Lexicase Population Statistics ---
Count of elite individuals by case: (881 446 883 8 882 879 881 881 9 885)
Population mean number of elite cases: 6.64
Count of perfect (error zero) individuals by case: (881 446 883 8 882 879 881 881 9 885)
Population mean number of perfect (error zero) cases: 6.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) integer_empty exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))) ())) ())))))) ()) ()))))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 61
Size: 95
Percent parens: 0.358
--- Population Statistics ---
Average total errors in population: 3.365
Median total errors in population: 3
Error averages by case: (0.119 0.554 0.117 0.992 0.118 0.121 0.119 0.119 0.991 0.115)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.823
Average program size in population (points): 84.436
Average percent parens in population: 0.348
Minimum age in population: 34.17961025238037
Maximum age in population: 38.7486087679863
Average age in population: 37.0784036039114
Median age in population: 37.15794435143471
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.01
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 26640230
--- Timings ---
Current time: 1559584347802 milliseconds
Total Time:          96.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.7 seconds, 55.8%
Fitness Testing:     26.5 seconds, 27.5%
Report:              16.0 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -35                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 3                  
Correct output: -88                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -71                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: -58                
Correct output: 47                  | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 3                  
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -68                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) integer_empty exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))) ())) ())))))) ()) ()))))
Lexicase best errors: [0 0 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 95
Percent parens: 0.358
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) integer_empty exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))) ())) ())))))) ()) ()))))
Zero cases best errors: [0 0 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 95
Percent parens: 0.358
--- Lexicase Population Statistics ---
Count of elite individuals by case: (499 913 298 913 604 297 500 500 297 499)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (499 913 298 913 604 297 500 500 297 499)
Population mean number of perfect (error zero) cases: 5.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_y (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) integer_empty exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))) ())) ())))))) ()) ()))))
Errors: [0 0 1 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 61
Size: 95
Percent parens: 0.358
--- Population Statistics ---
Average total errors in population: 4.68
Median total errors in population: 5
Error averages by case: (0.501 0.087 0.702 0.087 0.396 0.703 0.5 0.5 0.703 0.501)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.501
Average program size in population (points): 89.825
Average percent parens in population: 0.347
Minimum age in population: 36.49021655321121
Maximum age in population: 40.20016381144524
Average age in population: 38.719685672611
Median age in population: 38.73299384117126
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 28052505
--- Timings ---
Current time: 1559584351645 milliseconds
Total Time:         100.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.6 seconds, 55.5%
Fitness Testing:     27.7 seconds, 27.7%
Report:              16.7 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -35                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 3                  
Correct output: -88                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -71                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: -58                
Correct output: 47                  | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 3                  
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -68                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_or integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_empty exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) integer_empty exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))) ()) ())))))) ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 94
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_or integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_empty exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) integer_empty exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))) ()) ())))))) ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 94
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (544 553 544 553 922 553 340 910 556 910)
Population mean number of elite cases: 6.39
Count of perfect (error zero) individuals by case: (544 553 544 553 922 553 340 910 556 910)
Population mean number of perfect (error zero) cases: 6.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_yankdup boolean_flush exec_pop (boolean_swap integer_inc) integer_empty exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))) ())) ())))))) ()) ()))))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 62
Size: 96
Percent parens: 0.354
--- Population Statistics ---
Average total errors in population: 3.615
Median total errors in population: 1
Error averages by case: (0.456 0.447 0.456 0.447 0.078 0.447 0.66 0.09 0.444 0.09)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.033
Average program size in population (points): 88.726
Average percent parens in population: 0.344
Minimum age in population: 37.61956596374512
Maximum age in population: 41.93042801320553
Average age in population: 40.16508321100473
Median age in population: 40.19768384844065
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.009
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 29437867
--- Timings ---
Current time: 1559584355526 milliseconds
Total Time:         104.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.5 seconds, 55.3%
Fitness Testing:     28.9 seconds, 27.8%
Report:              17.5 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 37                 
Correct output: 63                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -35                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 3                  
Correct output: -88                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -44                
Correct output: -93                 | Program output: -71                
Correct output: -1                  | Program output: 41                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: 36                 
Correct output: -58                 | Program output: -58                
Correct output: 47                  | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -1                 
Correct output: -94                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: 3                  
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -68                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_do*range (boolean_swap integer_inc) boolean_not exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_dup_times (print_integer)) () ()))) ())) ())))))) ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 93
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_do*range (boolean_swap integer_inc) boolean_not exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_dup_times (print_integer)) () ()))) ())) ())))))) ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 93
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (905 904 888 544 544 544 336 337 899 899)
Population mean number of elite cases: 6.80
Count of perfect (error zero) individuals by case: (905 904 888 544 544 544 336 337 899 899)
Population mean number of perfect (error zero) cases: 6.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty integer_add exec_do*while (boolean_eq integer_pop exec_rot () (integer_gte boolean_dup integer_shove in1 integer_div boolean_xor integer_div in3 in2 integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap exec_if (integer_dup_items) (exec_y_when_autoconstructing (integer_rot boolean_swap integer_inc) integer_empty integer_pop boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ())))) ())) ())))))) ())))
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 73
Size: 107
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 3.2
Median total errors in population: 2
Error averages by case: (0.095 0.096 0.112 0.456 0.456 0.456 0.664 0.663 0.101 0.101)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.192
Average program size in population (points): 82.831
Average percent parens in population: 0.339
Minimum age in population: 38.61956596374512
Maximum age in population: 43.64123579114676
Average age in population: 41.94272944401205
Median age in population: 42.02256141602993
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.009
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 30625791
--- Timings ---
Current time: 1559584359154 milliseconds
Total Time:         107.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.4 seconds, 55.2%
Fitness Testing:     30.0 seconds, 27.8%
Report:              18.2 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 217
Test mean error for best: 0.21700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: 77                 
Correct output: -79                 | Program output: -32                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 38                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 40                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 63                  | Program output: 63                 
Correct output: 13                  | Program output: 83                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -52                 | Program output: -50                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -80                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -21                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: 18                 
Correct output: -77                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: 49                 
Correct output: -50                 | Program output: -50                
Correct output: -87                 | Program output: -78                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -92                 | Program output: -6                 
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -58                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -73                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: -50                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -30                 | Program output: -15                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -69                
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_y (boolean_eq integer_yank exec_rot (integer_gte integer_max) (integer_shove in4 integer_div in3 in1 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items integer_flush integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) integer_empty exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove print_integer)) ()))) ()))))))) ()) ()))))
Lexicase best errors: [1 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 95
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_y (boolean_eq integer_yank exec_rot (integer_gte integer_max) (integer_shove in4 integer_div in3 in1 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items integer_flush integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) integer_empty exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth boolean_not integer_shove print_integer)) ()))) ()))))))) ()) ()))))
Zero cases best errors: [1 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 95
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (565 652 904 564 652 652 547 552 547 558)
Population mean number of elite cases: 6.19
Count of perfect (error zero) individuals by case: (565 652 904 564 652 652 547 552 547 558)
Population mean number of perfect (error zero) cases: 6.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_y (boolean_eq integer_yank exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in1 integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_max exec_do*while (exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc) integer_empty exec_dup_times (boolean_swap) exec_yankdup exec_stackdepth)) ())) ()))))) ()) ()))))
Errors: [1 0 0 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 46
Size: 70
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 3.807
Median total errors in population: 3
Error averages by case: (0.435 0.348 0.096 0.436 0.348 0.348 0.453 0.448 0.453 0.442)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.514
Average program size in population (points): 86.862
Average percent parens in population: 0.345
Minimum age in population: 40.82121989130974
Maximum age in population: 45.05209305137396
Average age in population: 43.65653619502112
Median age in population: 43.60512993484735
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 31879146
--- Timings ---
Current time: 1559584363004 milliseconds
Total Time:         111.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.4 seconds, 55.1%
Fitness Testing:     31.1 seconds, 27.9%
Report:              18.9 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 63                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -58                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: -24                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: -50                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -69                
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 98
Percent parens: 0.347
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 98
Percent parens: 0.347
--- Lexicase Population Statistics ---
Count of elite individuals by case: (624 929 598 933 625 593 914 905 598 625)
Population mean number of elite cases: 7.34
Count of perfect (error zero) individuals by case: (624 929 598 933 625 593 914 905 598 625)
Population mean number of perfect (error zero) cases: 7.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 64
Size: 98
Percent parens: 0.347
--- Population Statistics ---
Average total errors in population: 2.656
Median total errors in population: 2
Error averages by case: (0.376 0.071 0.402 0.067 0.375 0.407 0.086 0.095 0.402 0.375)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.171
Average program size in population (points): 86.191
Average percent parens in population: 0.344
Minimum age in population: 42.39539164304733
Maximum age in population: 46.99659903533757
Average age in population: 45.12865265671536
Median age in population: 45.20261038653553
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 33078975
--- Timings ---
Current time: 1559584366706 milliseconds
Total Time:         115.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.3 seconds, 55.0%
Fitness Testing:     32.2 seconds, 27.9%
Report:              19.6 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 30
Successful program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 98


Auto-simplifying with starting size: 98
step: 0
program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 500
program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 1000
program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 1500
program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 2000
program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 2500
program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 3000
program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 3500
program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 4000
program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 4500
program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 5000
program: (exec_empty exec_do*range (exec_do*while (integer_swap exec_do*while (boolean_eq integer_pop exec_rot (integer_gte boolean_dup) (integer_shove in4 integer_div in3 in2 integer_min in1 integer_min integer_min boolean_invert_second_then_and integer_min print_integer exec_do*while (boolean_swap integer_empty) exec_pop () exec_k_when_autoconstructing (integer_swap integer_empty exec_s () (integer_mod integer_flush boolean_eq) (integer_max exec_do*while () exec_dup_times (exec_do*times (exec_do*range (integer_dup_items exec_swap (integer_eq boolean_xor exec_do*while (exec_rot () (boolean_rot exec_shove (exec_flush exec_pop (boolean_swap integer_inc integer_empty exec_dup_times (boolean_swap exec_yankdup exec_stackdepth boolean_not integer_shove in2 exec_do*while (exec_rot (integer_inc print_boolean exec_s (print_integer) () ()) () ()))))) ())) ()))))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: 62                  | Program output: 62                 
Correct output: 79                  | Program output: 79                 
Correct output: 80                  | Program output: 80                 
Correct output: -19                 | Program output: -19                
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 63                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -52                 | Program output: -52                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -58                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: -24                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -55                
Correct output: -50                 | Program output: -50                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -30                 | Program output: -30                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -69                
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
;;******************************
