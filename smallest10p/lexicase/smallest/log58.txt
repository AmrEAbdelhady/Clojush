Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[64 -75 -75 -75] -75] [[-99 72 72 72] -99] [[-80 -80 -80 -32] -80] [[0 0 0 -11] -11] [[1 13 1 1] 1] [[-56 -56 -56 -41] -56] [[54 -76 -76 -76] -76] [[74 74 -66 74] -66] [[-98 -98 -98 92] -98] [[-47 -47 -55 -47] -55] [(-15 -15 -15 -15) -15] [(-72 -72 -72 -72) -72] [(-33 -33 -33 -33) -33] [(-7 -7 -7 -7) -7] [(-11 -11 -11 -11) -11] [(58 47 75 97) 47] [(67 28 63 44) 28] [(55 95 34 1) 1] [(67 71 55 62) 55] [(60 96 62 73) 60] [(81 7 49 60) 7] [(12 12 23 36) 12] [(42 74 75 56) 42] [(95 87 28 39) 28] [(37 47 7 24) 7] [(32 26 76 9) 9] [(89 37 58 77) 37] [(92 58 40 92) 40] [(74 70 6 87) 6] [(40 26 100 55) 26] [(43 1 33 51) 1] [(13 88 42 25) 13] [(91 90 26 15) 15] [(78 93 74 79) 74] [(5 93 71 88) 5] [(29 -64 -14 32) -64] [(57 94 -18 6) -18] [(55 49 92 1) 1] [(-88 68 87 -42) -88] [(11 -69 -67 13) -69] [(9 6 16 85) 6] [(-78 -55 -11 99) -78] [(30 33 -28 97) -28] [(77 32 91 -48) -48] [(60 -18 -97 24) -97] [(-29 14 -20 62) -29] [(-13 28 -20 45) -20] [(11 94 -69 -86) -86] [(68 94 -10 19) -10] [(34 -68 -47 -44) -68] [(-30 -77 -6 41) -77] [(12 92 -14 93) -14] [(-15 67 72 -54) -54] [(-95 -43 -84 1) -95] [(80 -86 -10 -5) -86] [(94 69 28 -41) -41] [(62 -63 65 -51) -63] [(-47 -12 -17 -42) -47] [(-54 -24 98 -95) -95] [(86 56 -11 -83) -83] [(-4 -20 -11 4) -20] [(-14 80 37 58) -14] [(-73 56 79 60) -73] [(72 25 23 -80) -80] [(32 -98 -50 64) -98] [(89 -29 50 79) -29] [(5 -79 81 5) -79] [(-49 -29 15 -82) -82] [(-50 -98 -94 -6) -98] [(6 -28 10 -39) -39] [(32 -12 -45 -38) -45] [(10 90 31 81) 10] [(65 -3 -54 66) -54] [(-83 -40 -39 -15) -83] [(39 27 66 -43) -43] [(86 -7 87 21) -7] [(96 -66 80 52) -66] [(-48 37 -64 -34) -64] [(42 -14 96 80) -14] [(47 38 12 46) 12] [(15 41 33 10) 10] [(15 43 16 -9) -9] [(98 -35 -77 -7) -77] [(7 -58 -3 31) -58] [(-38 83 51 34) -38] [(92 -14 -86 -54) -86] [(94 -55 -72 88) -72] [(5 -9 -17 88) -17] [(90 7 42 17) 7] [(37 62 -54 68) -54] [(23 -63 90 -58) -63] [(-54 24 67 17) -54] [(7 -61 -82 95) -82] [(97 5 -91 -90) -91] [(44 -69 -61 -47) -69])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[64 -75 -75 -75] -75]
Train Case:   6 | Input/Output: [[-99 72 72 72] -99]
Train Case:   7 | Input/Output: [[-80 -80 -80 -32] -80]
Train Case:   8 | Input/Output: [[0 0 0 -11] -11]
Train Case:   9 | Input/Output: [[1 13 1 1] 1]
Train Case:  10 | Input/Output: [[-56 -56 -56 -41] -56]
Train Case:  11 | Input/Output: [[54 -76 -76 -76] -76]
Train Case:  12 | Input/Output: [[74 74 -66 74] -66]
Train Case:  13 | Input/Output: [[-98 -98 -98 92] -98]
Train Case:  14 | Input/Output: [[-47 -47 -55 -47] -55]
Train Case:  15 | Input/Output: [(-15 -15 -15 -15) -15]
Train Case:  16 | Input/Output: [(-72 -72 -72 -72) -72]
Train Case:  17 | Input/Output: [(-33 -33 -33 -33) -33]
Train Case:  18 | Input/Output: [(-7 -7 -7 -7) -7]
Train Case:  19 | Input/Output: [(-11 -11 -11 -11) -11]
Train Case:  20 | Input/Output: [(58 47 75 97) 47]
Train Case:  21 | Input/Output: [(67 28 63 44) 28]
Train Case:  22 | Input/Output: [(55 95 34 1) 1]
Train Case:  23 | Input/Output: [(67 71 55 62) 55]
Train Case:  24 | Input/Output: [(60 96 62 73) 60]
Train Case:  25 | Input/Output: [(81 7 49 60) 7]
Train Case:  26 | Input/Output: [(12 12 23 36) 12]
Train Case:  27 | Input/Output: [(42 74 75 56) 42]
Train Case:  28 | Input/Output: [(95 87 28 39) 28]
Train Case:  29 | Input/Output: [(37 47 7 24) 7]
Train Case:  30 | Input/Output: [(32 26 76 9) 9]
Train Case:  31 | Input/Output: [(89 37 58 77) 37]
Train Case:  32 | Input/Output: [(92 58 40 92) 40]
Train Case:  33 | Input/Output: [(74 70 6 87) 6]
Train Case:  34 | Input/Output: [(40 26 100 55) 26]
Train Case:  35 | Input/Output: [(43 1 33 51) 1]
Train Case:  36 | Input/Output: [(13 88 42 25) 13]
Train Case:  37 | Input/Output: [(91 90 26 15) 15]
Train Case:  38 | Input/Output: [(78 93 74 79) 74]
Train Case:  39 | Input/Output: [(5 93 71 88) 5]
Train Case:  40 | Input/Output: [(29 -64 -14 32) -64]
Train Case:  41 | Input/Output: [(57 94 -18 6) -18]
Train Case:  42 | Input/Output: [(55 49 92 1) 1]
Train Case:  43 | Input/Output: [(-88 68 87 -42) -88]
Train Case:  44 | Input/Output: [(11 -69 -67 13) -69]
Train Case:  45 | Input/Output: [(9 6 16 85) 6]
Train Case:  46 | Input/Output: [(-78 -55 -11 99) -78]
Train Case:  47 | Input/Output: [(30 33 -28 97) -28]
Train Case:  48 | Input/Output: [(77 32 91 -48) -48]
Train Case:  49 | Input/Output: [(60 -18 -97 24) -97]
Train Case:  50 | Input/Output: [(-29 14 -20 62) -29]
Train Case:  51 | Input/Output: [(-13 28 -20 45) -20]
Train Case:  52 | Input/Output: [(11 94 -69 -86) -86]
Train Case:  53 | Input/Output: [(68 94 -10 19) -10]
Train Case:  54 | Input/Output: [(34 -68 -47 -44) -68]
Train Case:  55 | Input/Output: [(-30 -77 -6 41) -77]
Train Case:  56 | Input/Output: [(12 92 -14 93) -14]
Train Case:  57 | Input/Output: [(-15 67 72 -54) -54]
Train Case:  58 | Input/Output: [(-95 -43 -84 1) -95]
Train Case:  59 | Input/Output: [(80 -86 -10 -5) -86]
Train Case:  60 | Input/Output: [(94 69 28 -41) -41]
Train Case:  61 | Input/Output: [(62 -63 65 -51) -63]
Train Case:  62 | Input/Output: [(-47 -12 -17 -42) -47]
Train Case:  63 | Input/Output: [(-54 -24 98 -95) -95]
Train Case:  64 | Input/Output: [(86 56 -11 -83) -83]
Train Case:  65 | Input/Output: [(-4 -20 -11 4) -20]
Train Case:  66 | Input/Output: [(-14 80 37 58) -14]
Train Case:  67 | Input/Output: [(-73 56 79 60) -73]
Train Case:  68 | Input/Output: [(72 25 23 -80) -80]
Train Case:  69 | Input/Output: [(32 -98 -50 64) -98]
Train Case:  70 | Input/Output: [(89 -29 50 79) -29]
Train Case:  71 | Input/Output: [(5 -79 81 5) -79]
Train Case:  72 | Input/Output: [(-49 -29 15 -82) -82]
Train Case:  73 | Input/Output: [(-50 -98 -94 -6) -98]
Train Case:  74 | Input/Output: [(6 -28 10 -39) -39]
Train Case:  75 | Input/Output: [(32 -12 -45 -38) -45]
Train Case:  76 | Input/Output: [(10 90 31 81) 10]
Train Case:  77 | Input/Output: [(65 -3 -54 66) -54]
Train Case:  78 | Input/Output: [(-83 -40 -39 -15) -83]
Train Case:  79 | Input/Output: [(39 27 66 -43) -43]
Train Case:  80 | Input/Output: [(86 -7 87 21) -7]
Train Case:  81 | Input/Output: [(96 -66 80 52) -66]
Train Case:  82 | Input/Output: [(-48 37 -64 -34) -64]
Train Case:  83 | Input/Output: [(42 -14 96 80) -14]
Train Case:  84 | Input/Output: [(47 38 12 46) 12]
Train Case:  85 | Input/Output: [(15 41 33 10) 10]
Train Case:  86 | Input/Output: [(15 43 16 -9) -9]
Train Case:  87 | Input/Output: [(98 -35 -77 -7) -77]
Train Case:  88 | Input/Output: [(7 -58 -3 31) -58]
Train Case:  89 | Input/Output: [(-38 83 51 34) -38]
Train Case:  90 | Input/Output: [(92 -14 -86 -54) -86]
Train Case:  91 | Input/Output: [(94 -55 -72 88) -72]
Train Case:  92 | Input/Output: [(5 -9 -17 88) -17]
Train Case:  93 | Input/Output: [(90 7 42 17) 7]
Train Case:  94 | Input/Output: [(37 62 -54 68) -54]
Train Case:  95 | Input/Output: [(23 -63 90 -58) -63]
Train Case:  96 | Input/Output: [(-54 24 67 17) -54]
Train Case:  97 | Input/Output: [(7 -61 -82 95) -82]
Train Case:  98 | Input/Output: [(97 5 -91 -90) -91]
Train Case:  99 | Input/Output: [(44 -69 -61 -47) -69]
Test Case:   0 | Input/Output: [[-85 27 -85 -85] -85]
Test Case:   1 | Input/Output: [[77 77 -83 77] -83]
Test Case:   2 | Input/Output: [[19 30 19 19] 19]
Test Case:   3 | Input/Output: [[87 87 100 87] 87]
Test Case:   4 | Input/Output: [[-43 -43 -43 23] -43]
Test Case:   5 | Input/Output: [[78 78 78 -60] -60]
Test Case:   6 | Input/Output: [[44 -5 44 44] -5]
Test Case:   7 | Input/Output: [[21 21 -40 21] -40]
Test Case:   8 | Input/Output: [[74 74 74 -61] -61]
Test Case:   9 | Input/Output: [[53 95 95 95] 53]
Test Case:  10 | Input/Output: [[-100 100 100 100] -100]
Test Case:  11 | Input/Output: [[-66 -66 -34 -66] -66]
Test Case:  12 | Input/Output: [[-47 -55 -55 -55] -55]
Test Case:  13 | Input/Output: [[7 7 7 34] 7]
Test Case:  14 | Input/Output: [[99 99 99 26] 26]
Test Case:  15 | Input/Output: [[-27 -27 -27 -17] -27]
Test Case:  16 | Input/Output: [[-66 -66 -48 -66] -66]
Test Case:  17 | Input/Output: [[82 -33 -33 -33] -33]
Test Case:  18 | Input/Output: [[-81 27 27 27] -81]
Test Case:  19 | Input/Output: [[-95 61 -95 -95] -95]
Test Case:  20 | Input/Output: [[27 -69 27 27] -69]
Test Case:  21 | Input/Output: [[25 75 75 75] 25]
Test Case:  22 | Input/Output: [[-71 -71 -71 -71] -71]
Test Case:  23 | Input/Output: [[23 39 39 39] 23]
Test Case:  24 | Input/Output: [[64 64 -84 64] -84]
Test Case:  25 | Input/Output: [[39 24 24 24] 24]
Test Case:  26 | Input/Output: [[2 36 36 36] 2]
Test Case:  27 | Input/Output: [[9 9 -29 9] -29]
Test Case:  28 | Input/Output: [[81 81 81 -74] -74]
Test Case:  29 | Input/Output: [[55 40 40 40] 40]
Test Case:  30 | Input/Output: [[36 -62 -62 -62] -62]
Test Case:  31 | Input/Output: [[32 32 32 68] 32]
Test Case:  32 | Input/Output: [[-25 -47 -25 -25] -47]
Test Case:  33 | Input/Output: [[19 -48 -48 -48] -48]
Test Case:  34 | Input/Output: [[78 78 78 -34] -34]
Test Case:  35 | Input/Output: [[64 -4 64 64] -4]
Test Case:  36 | Input/Output: [[-95 -95 7 -95] -95]
Test Case:  37 | Input/Output: [[-85 -85 -85 -71] -85]
Test Case:  38 | Input/Output: [[84 84 84 -76] -76]
Test Case:  39 | Input/Output: [[-21 -21 -43 -21] -43]
Test Case:  40 | Input/Output: [[-62 -62 -62 -76] -76]
Test Case:  41 | Input/Output: [[-93 -93 -93 79] -93]
Test Case:  42 | Input/Output: [[73 43 43 43] 43]
Test Case:  43 | Input/Output: [[45 45 45 27] 27]
Test Case:  44 | Input/Output: [[54 37 54 54] 37]
Test Case:  45 | Input/Output: [[-17 -56 -17 -17] -56]
Test Case:  46 | Input/Output: [[51 -63 51 51] -63]
Test Case:  47 | Input/Output: [[60 60 60 17] 17]
Test Case:  48 | Input/Output: [[-77 -77 -77 -92] -92]
Test Case:  49 | Input/Output: [[59 59 -11 59] -11]
Test Case:  50 | Input/Output: [[-35 8 -35 -35] -35]
Test Case:  51 | Input/Output: [[-72 51 -72 -72] -72]
Test Case:  52 | Input/Output: [[58 58 54 58] 54]
Test Case:  53 | Input/Output: [[-46 -46 -46 -58] -58]
Test Case:  54 | Input/Output: [[-99 -14 -99 -99] -99]
Test Case:  55 | Input/Output: [[-75 -75 99 -75] -75]
Test Case:  56 | Input/Output: [[55 10 55 55] 10]
Test Case:  57 | Input/Output: [[-74 -87 -74 -74] -87]
Test Case:  58 | Input/Output: [[-34 -34 -34 16] -34]
Test Case:  59 | Input/Output: [[-34 -41 -34 -34] -41]
Test Case:  60 | Input/Output: [[-45 -45 -45 -49] -49]
Test Case:  61 | Input/Output: [[41 -55 41 41] -55]
Test Case:  62 | Input/Output: [[-87 -87 -87 -25] -87]
Test Case:  63 | Input/Output: [[-58 -58 -72 -58] -72]
Test Case:  64 | Input/Output: [[2 -78 2 2] -78]
Test Case:  65 | Input/Output: [[-1 -50 -50 -50] -50]
Test Case:  66 | Input/Output: [[13 -59 -59 -59] -59]
Test Case:  67 | Input/Output: [[98 98 98 32] 32]
Test Case:  68 | Input/Output: [[-2 -2 -2 -96] -96]
Test Case:  69 | Input/Output: [[-81 -81 -81 78] -81]
Test Case:  70 | Input/Output: [[69 -44 69 69] -44]
Test Case:  71 | Input/Output: [[-3 -3 -32 -3] -32]
Test Case:  72 | Input/Output: [[-47 -83 -83 -83] -83]
Test Case:  73 | Input/Output: [[6 86 6 6] 6]
Test Case:  74 | Input/Output: [[37 -96 37 37] -96]
Test Case:  75 | Input/Output: [[-60 76 -60 -60] -60]
Test Case:  76 | Input/Output: [[-6 -6 -6 -85] -85]
Test Case:  77 | Input/Output: [[35 35 45 35] 35]
Test Case:  78 | Input/Output: [[-17 -17 -17 70] -17]
Test Case:  79 | Input/Output: [[32 -8 32 32] -8]
Test Case:  80 | Input/Output: [[-12 -12 -12 83] -12]
Test Case:  81 | Input/Output: [[-91 16 -91 -91] -91]
Test Case:  82 | Input/Output: [[-84 -84 91 -84] -84]
Test Case:  83 | Input/Output: [[15 60 15 15] 15]
Test Case:  84 | Input/Output: [[74 -58 74 74] -58]
Test Case:  85 | Input/Output: [[11 11 11 44] 11]
Test Case:  86 | Input/Output: [[24 -15 24 24] -15]
Test Case:  87 | Input/Output: [[-15 -70 -15 -15] -70]
Test Case:  88 | Input/Output: [[50 71 50 50] 50]
Test Case:  89 | Input/Output: [[-96 -25 -96 -96] -96]
Test Case:  90 | Input/Output: [[-66 -66 -66 -92] -92]
Test Case:  91 | Input/Output: [[37 37 -35 37] -35]
Test Case:  92 | Input/Output: [[-65 -65 -65 3] -65]
Test Case:  93 | Input/Output: [[-97 -97 -69 -97] -97]
Test Case:  94 | Input/Output: [[-30 -30 -30 20] -30]
Test Case:  95 | Input/Output: [[99 -91 -91 -91] -91]
Test Case:  96 | Input/Output: [[-80 -63 -63 -63] -80]
Test Case:  97 | Input/Output: [[25 43 25 25] 25]
Test Case:  98 | Input/Output: [[-39 -51 -51 -51] -51]
Test Case:  99 | Input/Output: [[46 -61 46 46] -61]
Test Case: 100 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 101 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 102 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 103 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 104 | Input/Output: [(62 62 62 62) 62]
Test Case: 105 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 106 | Input/Output: [(10 10 10 10) 10]
Test Case: 107 | Input/Output: [(79 79 79 79) 79]
Test Case: 108 | Input/Output: [(14 14 14 14) 14]
Test Case: 109 | Input/Output: [(69 69 69 69) 69]
Test Case: 110 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 111 | Input/Output: [(84 84 84 84) 84]
Test Case: 112 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 113 | Input/Output: [(31 31 31 31) 31]
Test Case: 114 | Input/Output: [(9 9 9 9) 9]
Test Case: 115 | Input/Output: [(50 50 50 50) 50]
Test Case: 116 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 117 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 118 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 119 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 120 | Input/Output: [(48 48 48 48) 48]
Test Case: 121 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 122 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 123 | Input/Output: [(52 52 52 52) 52]
Test Case: 124 | Input/Output: [(48 48 48 48) 48]
Test Case: 125 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 126 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 127 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 128 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 129 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 130 | Input/Output: [(53 53 53 53) 53]
Test Case: 131 | Input/Output: [(53 53 53 53) 53]
Test Case: 132 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 133 | Input/Output: [(46 46 46 46) 46]
Test Case: 134 | Input/Output: [(100 100 100 100) 100]
Test Case: 135 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 136 | Input/Output: [(33 33 33 33) 33]
Test Case: 137 | Input/Output: [(90 90 90 90) 90]
Test Case: 138 | Input/Output: [(13 13 13 13) 13]
Test Case: 139 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 140 | Input/Output: [(89 89 89 89) 89]
Test Case: 141 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 142 | Input/Output: [(20 20 20 20) 20]
Test Case: 143 | Input/Output: [(49 49 49 49) 49]
Test Case: 144 | Input/Output: [(98 98 98 98) 98]
Test Case: 145 | Input/Output: [(77 77 77 77) 77]
Test Case: 146 | Input/Output: [(56 56 56 56) 56]
Test Case: 147 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 148 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 149 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 150 | Input/Output: [(88 88 88 88) 88]
Test Case: 151 | Input/Output: [(75 75 75 75) 75]
Test Case: 152 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 153 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 154 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 155 | Input/Output: [(41 41 41 41) 41]
Test Case: 156 | Input/Output: [(49 49 49 49) 49]
Test Case: 157 | Input/Output: [(22 22 22 22) 22]
Test Case: 158 | Input/Output: [(99 99 99 99) 99]
Test Case: 159 | Input/Output: [(70 70 70 70) 70]
Test Case: 160 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 161 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 162 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 163 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 164 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 165 | Input/Output: [(93 93 93 93) 93]
Test Case: 166 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 167 | Input/Output: [(58 58 58 58) 58]
Test Case: 168 | Input/Output: [(16 16 16 16) 16]
Test Case: 169 | Input/Output: [(79 79 79 79) 79]
Test Case: 170 | Input/Output: [(97 97 97 97) 97]
Test Case: 171 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 172 | Input/Output: [(88 88 88 88) 88]
Test Case: 173 | Input/Output: [(59 59 59 59) 59]
Test Case: 174 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 175 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 176 | Input/Output: [(26 26 26 26) 26]
Test Case: 177 | Input/Output: [(64 64 64 64) 64]
Test Case: 178 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 179 | Input/Output: [(23 23 23 23) 23]
Test Case: 180 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 181 | Input/Output: [(38 38 38 38) 38]
Test Case: 182 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 183 | Input/Output: [(16 16 16 16) 16]
Test Case: 184 | Input/Output: [(52 52 52 52) 52]
Test Case: 185 | Input/Output: [(83 83 83 83) 83]
Test Case: 186 | Input/Output: [(72 72 72 72) 72]
Test Case: 187 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 188 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 189 | Input/Output: [(31 31 31 31) 31]
Test Case: 190 | Input/Output: [(85 85 85 85) 85]
Test Case: 191 | Input/Output: [(14 14 14 14) 14]
Test Case: 192 | Input/Output: [(70 70 70 70) 70]
Test Case: 193 | Input/Output: [(26 26 26 26) 26]
Test Case: 194 | Input/Output: [(94 94 94 94) 94]
Test Case: 195 | Input/Output: [(23 23 23 23) 23]
Test Case: 196 | Input/Output: [(12 12 12 12) 12]
Test Case: 197 | Input/Output: [(33 33 33 33) 33]
Test Case: 198 | Input/Output: [(18 18 18 18) 18]
Test Case: 199 | Input/Output: [(41 41 41 41) 41]
Test Case: 200 | Input/Output: [(2 89 76 14) 2]
Test Case: 201 | Input/Output: [(35 79 43 38) 35]
Test Case: 202 | Input/Output: [(73 8 65 30) 8]
Test Case: 203 | Input/Output: [(29 78 25 45) 25]
Test Case: 204 | Input/Output: [(30 39 20 87) 20]
Test Case: 205 | Input/Output: [(14 78 85 65) 14]
Test Case: 206 | Input/Output: [(30 33 88 0) 0]
Test Case: 207 | Input/Output: [(60 36 86 43) 36]
Test Case: 208 | Input/Output: [(38 49 31 27) 27]
Test Case: 209 | Input/Output: [(46 99 0 87) 0]
Test Case: 210 | Input/Output: [(2 55 67 1) 1]
Test Case: 211 | Input/Output: [(47 44 3 36) 3]
Test Case: 212 | Input/Output: [(27 56 74 7) 7]
Test Case: 213 | Input/Output: [(62 76 31 54) 31]
Test Case: 214 | Input/Output: [(92 25 57 0) 0]
Test Case: 215 | Input/Output: [(43 53 51 92) 43]
Test Case: 216 | Input/Output: [(97 62 72 4) 4]
Test Case: 217 | Input/Output: [(29 46 16 24) 16]
Test Case: 218 | Input/Output: [(80 16 95 11) 11]
Test Case: 219 | Input/Output: [(91 49 86 29) 29]
Test Case: 220 | Input/Output: [(92 31 61 14) 14]
Test Case: 221 | Input/Output: [(61 15 6 66) 6]
Test Case: 222 | Input/Output: [(12 86 75 0) 0]
Test Case: 223 | Input/Output: [(41 75 99 35) 35]
Test Case: 224 | Input/Output: [(15 88 88 71) 15]
Test Case: 225 | Input/Output: [(47 71 39 35) 35]
Test Case: 226 | Input/Output: [(12 53 9 65) 9]
Test Case: 227 | Input/Output: [(25 88 63 13) 13]
Test Case: 228 | Input/Output: [(68 91 68 18) 18]
Test Case: 229 | Input/Output: [(54 11 34 65) 11]
Test Case: 230 | Input/Output: [(69 43 67 77) 43]
Test Case: 231 | Input/Output: [(27 87 39 99) 27]
Test Case: 232 | Input/Output: [(3 56 46 15) 3]
Test Case: 233 | Input/Output: [(63 11 32 33) 11]
Test Case: 234 | Input/Output: [(78 18 43 44) 18]
Test Case: 235 | Input/Output: [(67 5 100 69) 5]
Test Case: 236 | Input/Output: [(60 27 17 12) 12]
Test Case: 237 | Input/Output: [(43 94 94 68) 43]
Test Case: 238 | Input/Output: [(21 67 6 55) 6]
Test Case: 239 | Input/Output: [(38 38 87 65) 38]
Test Case: 240 | Input/Output: [(32 19 39 6) 6]
Test Case: 241 | Input/Output: [(2 50 87 20) 2]
Test Case: 242 | Input/Output: [(95 98 34 78) 34]
Test Case: 243 | Input/Output: [(43 29 91 2) 2]
Test Case: 244 | Input/Output: [(82 24 79 45) 24]
Test Case: 245 | Input/Output: [(60 15 30 18) 15]
Test Case: 246 | Input/Output: [(79 4 52 21) 4]
Test Case: 247 | Input/Output: [(59 61 14 84) 14]
Test Case: 248 | Input/Output: [(7 30 92 71) 7]
Test Case: 249 | Input/Output: [(0 8 81 8) 0]
Test Case: 250 | Input/Output: [(100 79 60 73) 60]
Test Case: 251 | Input/Output: [(38 54 32 62) 32]
Test Case: 252 | Input/Output: [(88 22 78 90) 22]
Test Case: 253 | Input/Output: [(16 33 65 37) 16]
Test Case: 254 | Input/Output: [(17 67 87 76) 17]
Test Case: 255 | Input/Output: [(71 98 58 3) 3]
Test Case: 256 | Input/Output: [(7 64 9 6) 6]
Test Case: 257 | Input/Output: [(90 1 36 66) 1]
Test Case: 258 | Input/Output: [(45 26 13 85) 13]
Test Case: 259 | Input/Output: [(29 20 40 53) 20]
Test Case: 260 | Input/Output: [(62 98 10 74) 10]
Test Case: 261 | Input/Output: [(31 50 66 25) 25]
Test Case: 262 | Input/Output: [(73 94 34 88) 34]
Test Case: 263 | Input/Output: [(100 19 59 57) 19]
Test Case: 264 | Input/Output: [(30 37 73 1) 1]
Test Case: 265 | Input/Output: [(77 73 79 69) 69]
Test Case: 266 | Input/Output: [(56 91 91 88) 56]
Test Case: 267 | Input/Output: [(58 7 56 20) 7]
Test Case: 268 | Input/Output: [(64 61 15 96) 15]
Test Case: 269 | Input/Output: [(7 89 83 68) 7]
Test Case: 270 | Input/Output: [(47 58 43 3) 3]
Test Case: 271 | Input/Output: [(63 62 32 83) 32]
Test Case: 272 | Input/Output: [(52 7 57 97) 7]
Test Case: 273 | Input/Output: [(36 56 83 87) 36]
Test Case: 274 | Input/Output: [(19 38 64 63) 19]
Test Case: 275 | Input/Output: [(37 33 25 45) 25]
Test Case: 276 | Input/Output: [(91 60 56 26) 26]
Test Case: 277 | Input/Output: [(10 19 47 26) 10]
Test Case: 278 | Input/Output: [(74 49 84 40) 40]
Test Case: 279 | Input/Output: [(14 24 93 26) 14]
Test Case: 280 | Input/Output: [(13 14 41 70) 13]
Test Case: 281 | Input/Output: [(47 23 69 89) 23]
Test Case: 282 | Input/Output: [(56 25 14 11) 11]
Test Case: 283 | Input/Output: [(25 21 28 93) 21]
Test Case: 284 | Input/Output: [(43 31 35 19) 19]
Test Case: 285 | Input/Output: [(80 35 38 4) 4]
Test Case: 286 | Input/Output: [(62 33 99 71) 33]
Test Case: 287 | Input/Output: [(97 68 38 34) 34]
Test Case: 288 | Input/Output: [(78 94 89 72) 72]
Test Case: 289 | Input/Output: [(99 13 96 10) 10]
Test Case: 290 | Input/Output: [(36 91 68 94) 36]
Test Case: 291 | Input/Output: [(15 33 41 14) 14]
Test Case: 292 | Input/Output: [(90 0 16 14) 0]
Test Case: 293 | Input/Output: [(83 23 1 41) 1]
Test Case: 294 | Input/Output: [(7 13 85 73) 7]
Test Case: 295 | Input/Output: [(12 53 78 8) 8]
Test Case: 296 | Input/Output: [(39 38 87 22) 22]
Test Case: 297 | Input/Output: [(73 2 16 23) 2]
Test Case: 298 | Input/Output: [(33 3 17 47) 3]
Test Case: 299 | Input/Output: [(23 18 57 23) 18]
Test Case: 300 | Input/Output: [(70 88 81 61) 61]
Test Case: 301 | Input/Output: [(80 48 56 0) 0]
Test Case: 302 | Input/Output: [(14 23 96 20) 14]
Test Case: 303 | Input/Output: [(91 30 73 87) 30]
Test Case: 304 | Input/Output: [(92 24 18 50) 18]
Test Case: 305 | Input/Output: [(39 1 3 39) 1]
Test Case: 306 | Input/Output: [(88 13 73 38) 13]
Test Case: 307 | Input/Output: [(1 65 2 6) 1]
Test Case: 308 | Input/Output: [(32 52 82 36) 32]
Test Case: 309 | Input/Output: [(33 40 85 41) 33]
Test Case: 310 | Input/Output: [(87 27 67 34) 27]
Test Case: 311 | Input/Output: [(9 41 58 67) 9]
Test Case: 312 | Input/Output: [(95 38 83 53) 38]
Test Case: 313 | Input/Output: [(14 88 93 69) 14]
Test Case: 314 | Input/Output: [(84 81 43 88) 43]
Test Case: 315 | Input/Output: [(76 15 80 40) 15]
Test Case: 316 | Input/Output: [(27 53 39 70) 27]
Test Case: 317 | Input/Output: [(89 60 27 1) 1]
Test Case: 318 | Input/Output: [(70 49 76 8) 8]
Test Case: 319 | Input/Output: [(16 78 77 36) 16]
Test Case: 320 | Input/Output: [(60 44 33 12) 12]
Test Case: 321 | Input/Output: [(60 65 78 12) 12]
Test Case: 322 | Input/Output: [(96 61 37 86) 37]
Test Case: 323 | Input/Output: [(66 37 68 94) 37]
Test Case: 324 | Input/Output: [(45 47 18 67) 18]
Test Case: 325 | Input/Output: [(100 46 11 14) 11]
Test Case: 326 | Input/Output: [(96 43 17 68) 17]
Test Case: 327 | Input/Output: [(22 24 68 96) 22]
Test Case: 328 | Input/Output: [(31 30 69 43) 30]
Test Case: 329 | Input/Output: [(13 71 11 29) 11]
Test Case: 330 | Input/Output: [(88 90 95 43) 43]
Test Case: 331 | Input/Output: [(2 15 50 99) 2]
Test Case: 332 | Input/Output: [(16 46 92 8) 8]
Test Case: 333 | Input/Output: [(38 64 96 44) 38]
Test Case: 334 | Input/Output: [(35 27 9 96) 9]
Test Case: 335 | Input/Output: [(36 18 8 72) 8]
Test Case: 336 | Input/Output: [(45 37 58 70) 37]
Test Case: 337 | Input/Output: [(21 83 45 98) 21]
Test Case: 338 | Input/Output: [(68 11 33 72) 11]
Test Case: 339 | Input/Output: [(30 3 50 99) 3]
Test Case: 340 | Input/Output: [(72 26 97 77) 26]
Test Case: 341 | Input/Output: [(55 45 15 73) 15]
Test Case: 342 | Input/Output: [(1 74 20 11) 1]
Test Case: 343 | Input/Output: [(38 99 19 76) 19]
Test Case: 344 | Input/Output: [(49 100 72 56) 49]
Test Case: 345 | Input/Output: [(66 28 91 96) 28]
Test Case: 346 | Input/Output: [(100 10 44 97) 10]
Test Case: 347 | Input/Output: [(67 65 67 29) 29]
Test Case: 348 | Input/Output: [(84 9 72 60) 9]
Test Case: 349 | Input/Output: [(23 28 70 19) 19]
Test Case: 350 | Input/Output: [(71 29 20 1) 1]
Test Case: 351 | Input/Output: [(10 94 42 9) 9]
Test Case: 352 | Input/Output: [(93 99 19 42) 19]
Test Case: 353 | Input/Output: [(8 49 54 11) 8]
Test Case: 354 | Input/Output: [(86 96 98 48) 48]
Test Case: 355 | Input/Output: [(28 61 48 77) 28]
Test Case: 356 | Input/Output: [(79 38 50 83) 38]
Test Case: 357 | Input/Output: [(57 8 53 70) 8]
Test Case: 358 | Input/Output: [(23 64 39 61) 23]
Test Case: 359 | Input/Output: [(81 78 39 8) 8]
Test Case: 360 | Input/Output: [(60 70 72 73) 60]
Test Case: 361 | Input/Output: [(100 0 48 36) 0]
Test Case: 362 | Input/Output: [(20 48 1 65) 1]
Test Case: 363 | Input/Output: [(8 27 19 16) 8]
Test Case: 364 | Input/Output: [(53 44 56 98) 44]
Test Case: 365 | Input/Output: [(99 95 23 11) 11]
Test Case: 366 | Input/Output: [(46 38 20 26) 20]
Test Case: 367 | Input/Output: [(71 95 28 36) 28]
Test Case: 368 | Input/Output: [(10 70 10 86) 10]
Test Case: 369 | Input/Output: [(40 54 36 55) 36]
Test Case: 370 | Input/Output: [(17 37 55 72) 17]
Test Case: 371 | Input/Output: [(20 74 95 34) 20]
Test Case: 372 | Input/Output: [(54 80 78 95) 54]
Test Case: 373 | Input/Output: [(75 3 69 35) 3]
Test Case: 374 | Input/Output: [(54 80 6 31) 6]
Test Case: 375 | Input/Output: [(65 29 73 79) 29]
Test Case: 376 | Input/Output: [(95 91 42 42) 42]
Test Case: 377 | Input/Output: [(80 76 8 54) 8]
Test Case: 378 | Input/Output: [(96 100 55 10) 10]
Test Case: 379 | Input/Output: [(43 65 8 10) 8]
Test Case: 380 | Input/Output: [(17 71 56 96) 17]
Test Case: 381 | Input/Output: [(12 9 53 51) 9]
Test Case: 382 | Input/Output: [(61 36 2 78) 2]
Test Case: 383 | Input/Output: [(39 74 88 13) 13]
Test Case: 384 | Input/Output: [(76 62 70 82) 62]
Test Case: 385 | Input/Output: [(75 51 26 85) 26]
Test Case: 386 | Input/Output: [(23 62 40 86) 23]
Test Case: 387 | Input/Output: [(86 79 35 74) 35]
Test Case: 388 | Input/Output: [(83 48 74 1) 1]
Test Case: 389 | Input/Output: [(36 46 2 46) 2]
Test Case: 390 | Input/Output: [(92 85 42 76) 42]
Test Case: 391 | Input/Output: [(48 60 62 3) 3]
Test Case: 392 | Input/Output: [(40 59 32 27) 27]
Test Case: 393 | Input/Output: [(7 30 22 10) 7]
Test Case: 394 | Input/Output: [(39 52 47 18) 18]
Test Case: 395 | Input/Output: [(79 54 59 45) 45]
Test Case: 396 | Input/Output: [(23 5 43 29) 5]
Test Case: 397 | Input/Output: [(82 30 85 92) 30]
Test Case: 398 | Input/Output: [(79 66 2 65) 2]
Test Case: 399 | Input/Output: [(52 67 35 54) 35]
Test Case: 400 | Input/Output: [(-58 -16 -66 -94) -94]
Test Case: 401 | Input/Output: [(-74 -79 66 30) -79]
Test Case: 402 | Input/Output: [(87 49 19 -100) -100]
Test Case: 403 | Input/Output: [(-69 -100 33 26) -100]
Test Case: 404 | Input/Output: [(-78 79 -48 -22) -78]
Test Case: 405 | Input/Output: [(-45 73 -85 13) -85]
Test Case: 406 | Input/Output: [(-29 -76 18 86) -76]
Test Case: 407 | Input/Output: [(-6 -99 -93 -1) -99]
Test Case: 408 | Input/Output: [(-7 -97 25 -89) -97]
Test Case: 409 | Input/Output: [(-17 -96 68 -64) -96]
Test Case: 410 | Input/Output: [(-40 71 54 -64) -64]
Test Case: 411 | Input/Output: [(28 80 1 -46) -46]
Test Case: 412 | Input/Output: [(39 100 22 -80) -80]
Test Case: 413 | Input/Output: [(71 87 -27 -43) -43]
Test Case: 414 | Input/Output: [(89 -10 1 -20) -20]
Test Case: 415 | Input/Output: [(-83 -75 -66 -71) -83]
Test Case: 416 | Input/Output: [(-34 -62 -95 72) -95]
Test Case: 417 | Input/Output: [(57 49 83 -41) -41]
Test Case: 418 | Input/Output: [(-59 -47 16 72) -59]
Test Case: 419 | Input/Output: [(35 62 76 -30) -30]
Test Case: 420 | Input/Output: [(-23 -27 84 -70) -70]
Test Case: 421 | Input/Output: [(90 56 -15 69) -15]
Test Case: 422 | Input/Output: [(-49 -2 57 43) -49]
Test Case: 423 | Input/Output: [(20 -68 -57 60) -68]
Test Case: 424 | Input/Output: [(-68 80 -11 49) -68]
Test Case: 425 | Input/Output: [(97 -31 -4 -29) -31]
Test Case: 426 | Input/Output: [(-7 74 72 -80) -80]
Test Case: 427 | Input/Output: [(98 -89 31 -36) -89]
Test Case: 428 | Input/Output: [(-88 -80 83 11) -88]
Test Case: 429 | Input/Output: [(-6 -55 92 -15) -55]
Test Case: 430 | Input/Output: [(-92 50 -86 99) -92]
Test Case: 431 | Input/Output: [(83 88 84 -21) -21]
Test Case: 432 | Input/Output: [(63 96 -9 -1) -9]
Test Case: 433 | Input/Output: [(-20 -75 91 56) -75]
Test Case: 434 | Input/Output: [(-69 70 43 87) -69]
Test Case: 435 | Input/Output: [(-79 95 -95 -91) -95]
Test Case: 436 | Input/Output: [(-48 62 -25 -43) -48]
Test Case: 437 | Input/Output: [(95 85 -57 -19) -57]
Test Case: 438 | Input/Output: [(87 47 78 -75) -75]
Test Case: 439 | Input/Output: [(67 -43 -62 60) -62]
Test Case: 440 | Input/Output: [(36 -13 -28 37) -28]
Test Case: 441 | Input/Output: [(83 -59 -64 53) -64]
Test Case: 442 | Input/Output: [(46 33 47 -91) -91]
Test Case: 443 | Input/Output: [(-81 -53 -6 -59) -81]
Test Case: 444 | Input/Output: [(-67 82 -53 -100) -100]
Test Case: 445 | Input/Output: [(42 -29 18 8) -29]
Test Case: 446 | Input/Output: [(-92 -4 74 77) -92]
Test Case: 447 | Input/Output: [(74 -93 89 52) -93]
Test Case: 448 | Input/Output: [(14 34 22 79) 14]
Test Case: 449 | Input/Output: [(3 -93 -6 94) -93]
Test Case: 450 | Input/Output: [(83 -88 -76 50) -88]
Test Case: 451 | Input/Output: [(-55 89 -39 9) -55]
Test Case: 452 | Input/Output: [(83 40 32 -20) -20]
Test Case: 453 | Input/Output: [(44 -7 -6 1) -7]
Test Case: 454 | Input/Output: [(32 84 96 -58) -58]
Test Case: 455 | Input/Output: [(-49 92 44 -86) -86]
Test Case: 456 | Input/Output: [(-62 54 94 -18) -62]
Test Case: 457 | Input/Output: [(-36 -57 21 15) -57]
Test Case: 458 | Input/Output: [(64 -58 39 15) -58]
Test Case: 459 | Input/Output: [(-77 -6 -44 -57) -77]
Test Case: 460 | Input/Output: [(84 90 -49 70) -49]
Test Case: 461 | Input/Output: [(-7 21 -68 79) -68]
Test Case: 462 | Input/Output: [(-3 -66 71 45) -66]
Test Case: 463 | Input/Output: [(55 91 -97 32) -97]
Test Case: 464 | Input/Output: [(56 78 43 7) 7]
Test Case: 465 | Input/Output: [(15 54 23 -47) -47]
Test Case: 466 | Input/Output: [(93 -69 57 71) -69]
Test Case: 467 | Input/Output: [(-91 10 15 44) -91]
Test Case: 468 | Input/Output: [(-22 -8 -87 94) -87]
Test Case: 469 | Input/Output: [(95 -79 83 -11) -79]
Test Case: 470 | Input/Output: [(38 -45 -77 93) -77]
Test Case: 471 | Input/Output: [(2 71 -31 -78) -78]
Test Case: 472 | Input/Output: [(-79 33 77 -62) -79]
Test Case: 473 | Input/Output: [(-97 -73 62 92) -97]
Test Case: 474 | Input/Output: [(-52 48 -29 2) -52]
Test Case: 475 | Input/Output: [(-85 50 -56 -75) -85]
Test Case: 476 | Input/Output: [(53 42 -54 -1) -54]
Test Case: 477 | Input/Output: [(73 -43 -13 -36) -43]
Test Case: 478 | Input/Output: [(-81 -78 26 -49) -81]
Test Case: 479 | Input/Output: [(1 -50 25 -72) -72]
Test Case: 480 | Input/Output: [(-76 -50 -39 77) -76]
Test Case: 481 | Input/Output: [(-3 -50 64 90) -50]
Test Case: 482 | Input/Output: [(2 36 -45 -60) -60]
Test Case: 483 | Input/Output: [(-67 -90 -18 -22) -90]
Test Case: 484 | Input/Output: [(48 10 -61 26) -61]
Test Case: 485 | Input/Output: [(82 17 57 34) 17]
Test Case: 486 | Input/Output: [(-24 -29 36 -64) -64]
Test Case: 487 | Input/Output: [(-75 61 -12 -33) -75]
Test Case: 488 | Input/Output: [(-90 -36 23 80) -90]
Test Case: 489 | Input/Output: [(29 -77 20 -67) -77]
Test Case: 490 | Input/Output: [(-1 98 -65 43) -65]
Test Case: 491 | Input/Output: [(-77 -90 87 -59) -90]
Test Case: 492 | Input/Output: [(99 90 -32 -76) -76]
Test Case: 493 | Input/Output: [(-96 -81 -50 34) -96]
Test Case: 494 | Input/Output: [(66 59 76 -44) -44]
Test Case: 495 | Input/Output: [(-93 -43 93 75) -93]
Test Case: 496 | Input/Output: [(-13 -99 -17 6) -99]
Test Case: 497 | Input/Output: [(5 21 13 69) 5]
Test Case: 498 | Input/Output: [(48 -37 17 -14) -37]
Test Case: 499 | Input/Output: [(94 -100 99 58) -100]
Test Case: 500 | Input/Output: [(-64 27 -21 71) -64]
Test Case: 501 | Input/Output: [(37 53 85 91) 37]
Test Case: 502 | Input/Output: [(-24 -64 -92 -51) -92]
Test Case: 503 | Input/Output: [(24 -16 94 -57) -57]
Test Case: 504 | Input/Output: [(-91 31 -41 14) -91]
Test Case: 505 | Input/Output: [(-15 -63 60 -54) -63]
Test Case: 506 | Input/Output: [(27 66 44 50) 27]
Test Case: 507 | Input/Output: [(-47 -95 -66 -29) -95]
Test Case: 508 | Input/Output: [(-78 73 41 -41) -78]
Test Case: 509 | Input/Output: [(-37 89 -73 -59) -73]
Test Case: 510 | Input/Output: [(80 83 -38 53) -38]
Test Case: 511 | Input/Output: [(-81 -71 -69 -45) -81]
Test Case: 512 | Input/Output: [(8 -23 -20 41) -23]
Test Case: 513 | Input/Output: [(17 48 88 68) 17]
Test Case: 514 | Input/Output: [(-20 -12 14 57) -20]
Test Case: 515 | Input/Output: [(-82 -95 85 -9) -95]
Test Case: 516 | Input/Output: [(-17 36 -20 -87) -87]
Test Case: 517 | Input/Output: [(35 49 -44 -35) -44]
Test Case: 518 | Input/Output: [(25 -89 -71 87) -89]
Test Case: 519 | Input/Output: [(34 22 97 -67) -67]
Test Case: 520 | Input/Output: [(22 55 4 -49) -49]
Test Case: 521 | Input/Output: [(-34 91 57 39) -34]
Test Case: 522 | Input/Output: [(-32 -73 -26 10) -73]
Test Case: 523 | Input/Output: [(-69 88 8 18) -69]
Test Case: 524 | Input/Output: [(21 -18 -74 -46) -74]
Test Case: 525 | Input/Output: [(-36 35 10 73) -36]
Test Case: 526 | Input/Output: [(77 27 55 -92) -92]
Test Case: 527 | Input/Output: [(-66 60 78 55) -66]
Test Case: 528 | Input/Output: [(51 -6 36 18) -6]
Test Case: 529 | Input/Output: [(19 -89 -75 34) -89]
Test Case: 530 | Input/Output: [(-83 77 -56 2) -83]
Test Case: 531 | Input/Output: [(35 61 18 61) 18]
Test Case: 532 | Input/Output: [(-62 41 -83 56) -83]
Test Case: 533 | Input/Output: [(-83 -90 -45 39) -90]
Test Case: 534 | Input/Output: [(-47 16 -5 -51) -51]
Test Case: 535 | Input/Output: [(42 59 65 28) 28]
Test Case: 536 | Input/Output: [(13 69 -24 26) -24]
Test Case: 537 | Input/Output: [(-12 -94 10 47) -94]
Test Case: 538 | Input/Output: [(-71 -23 -29 -77) -77]
Test Case: 539 | Input/Output: [(-97 -72 -51 77) -97]
Test Case: 540 | Input/Output: [(80 -82 -20 -10) -82]
Test Case: 541 | Input/Output: [(84 -53 -69 -75) -75]
Test Case: 542 | Input/Output: [(-35 64 -44 -85) -85]
Test Case: 543 | Input/Output: [(69 55 -15 -6) -15]
Test Case: 544 | Input/Output: [(-5 52 -79 4) -79]
Test Case: 545 | Input/Output: [(-99 -99 21 -35) -99]
Test Case: 546 | Input/Output: [(97 -37 24 12) -37]
Test Case: 547 | Input/Output: [(-51 -74 -18 -39) -74]
Test Case: 548 | Input/Output: [(27 -24 -60 91) -60]
Test Case: 549 | Input/Output: [(78 71 -21 -51) -51]
Test Case: 550 | Input/Output: [(-13 -98 -88 -57) -98]
Test Case: 551 | Input/Output: [(-75 -86 31 -69) -86]
Test Case: 552 | Input/Output: [(-74 96 -17 69) -74]
Test Case: 553 | Input/Output: [(51 -95 1 99) -95]
Test Case: 554 | Input/Output: [(59 59 -81 74) -81]
Test Case: 555 | Input/Output: [(-93 29 30 -65) -93]
Test Case: 556 | Input/Output: [(-98 3 -23 11) -98]
Test Case: 557 | Input/Output: [(37 49 -57 -26) -57]
Test Case: 558 | Input/Output: [(78 46 33 -69) -69]
Test Case: 559 | Input/Output: [(94 42 81 74) 42]
Test Case: 560 | Input/Output: [(53 -49 -8 -91) -91]
Test Case: 561 | Input/Output: [(29 60 -44 -92) -92]
Test Case: 562 | Input/Output: [(8 -29 3 0) -29]
Test Case: 563 | Input/Output: [(2 18 -7 -95) -95]
Test Case: 564 | Input/Output: [(9 -55 20 73) -55]
Test Case: 565 | Input/Output: [(76 92 34 -62) -62]
Test Case: 566 | Input/Output: [(26 76 -39 -4) -39]
Test Case: 567 | Input/Output: [(-37 -59 -10 70) -59]
Test Case: 568 | Input/Output: [(-53 -57 -12 -35) -57]
Test Case: 569 | Input/Output: [(30 84 61 95) 30]
Test Case: 570 | Input/Output: [(29 53 -5 70) -5]
Test Case: 571 | Input/Output: [(7 30 91 12) 7]
Test Case: 572 | Input/Output: [(54 -34 -87 62) -87]
Test Case: 573 | Input/Output: [(99 25 -72 99) -72]
Test Case: 574 | Input/Output: [(-16 71 -58 -19) -58]
Test Case: 575 | Input/Output: [(-74 -46 64 -90) -90]
Test Case: 576 | Input/Output: [(17 13 -77 -54) -77]
Test Case: 577 | Input/Output: [(-56 60 8 -33) -56]
Test Case: 578 | Input/Output: [(-27 -14 28 44) -27]
Test Case: 579 | Input/Output: [(-29 -42 39 -50) -50]
Test Case: 580 | Input/Output: [(-50 -35 -3 -3) -50]
Test Case: 581 | Input/Output: [(76 -39 -39 -47) -47]
Test Case: 582 | Input/Output: [(42 -88 -28 100) -88]
Test Case: 583 | Input/Output: [(-52 20 -27 47) -52]
Test Case: 584 | Input/Output: [(54 -98 87 32) -98]
Test Case: 585 | Input/Output: [(-53 -46 -47 -1) -53]
Test Case: 586 | Input/Output: [(58 -86 -12 -62) -86]
Test Case: 587 | Input/Output: [(5 -24 7 -23) -24]
Test Case: 588 | Input/Output: [(72 86 -63 83) -63]
Test Case: 589 | Input/Output: [(-46 35 -51 78) -51]
Test Case: 590 | Input/Output: [(73 22 76 -68) -68]
Test Case: 591 | Input/Output: [(95 -70 -3 93) -70]
Test Case: 592 | Input/Output: [(-84 28 -78 -63) -84]
Test Case: 593 | Input/Output: [(-96 -51 -26 -79) -96]
Test Case: 594 | Input/Output: [(-74 77 -5 -77) -77]
Test Case: 595 | Input/Output: [(59 -56 -12 91) -56]
Test Case: 596 | Input/Output: [(37 29 -95 56) -95]
Test Case: 597 | Input/Output: [(5 -84 -4 -98) -98]
Test Case: 598 | Input/Output: [(65 -90 -58 -74) -90]
Test Case: 599 | Input/Output: [(-23 33 -24 36) -24]
Test Case: 600 | Input/Output: [(70 -47 -58 62) -58]
Test Case: 601 | Input/Output: [(-37 -90 87 93) -90]
Test Case: 602 | Input/Output: [(-93 84 -34 -79) -93]
Test Case: 603 | Input/Output: [(72 -70 -94 -16) -94]
Test Case: 604 | Input/Output: [(-76 2 -66 -77) -77]
Test Case: 605 | Input/Output: [(-61 -85 -85 71) -85]
Test Case: 606 | Input/Output: [(91 85 -51 75) -51]
Test Case: 607 | Input/Output: [(-61 -81 88 -22) -81]
Test Case: 608 | Input/Output: [(95 89 61 -64) -64]
Test Case: 609 | Input/Output: [(14 -32 48 100) -32]
Test Case: 610 | Input/Output: [(20 -71 -41 -75) -75]
Test Case: 611 | Input/Output: [(91 -22 35 96) -22]
Test Case: 612 | Input/Output: [(-77 91 -63 2) -77]
Test Case: 613 | Input/Output: [(39 -50 -64 -67) -67]
Test Case: 614 | Input/Output: [(-60 41 49 -23) -60]
Test Case: 615 | Input/Output: [(-68 54 -75 -33) -75]
Test Case: 616 | Input/Output: [(-31 4 -35 -58) -58]
Test Case: 617 | Input/Output: [(-3 39 67 -46) -46]
Test Case: 618 | Input/Output: [(51 -85 -18 -64) -85]
Test Case: 619 | Input/Output: [(-76 -60 -51 -30) -76]
Test Case: 620 | Input/Output: [(-2 -57 29 -41) -57]
Test Case: 621 | Input/Output: [(96 48 69 16) 16]
Test Case: 622 | Input/Output: [(55 78 -96 -96) -96]
Test Case: 623 | Input/Output: [(-21 -16 -1 78) -21]
Test Case: 624 | Input/Output: [(80 46 -56 -52) -56]
Test Case: 625 | Input/Output: [(98 -77 -76 -86) -86]
Test Case: 626 | Input/Output: [(18 -18 28 -44) -44]
Test Case: 627 | Input/Output: [(-59 81 -77 -14) -77]
Test Case: 628 | Input/Output: [(23 98 -59 -56) -59]
Test Case: 629 | Input/Output: [(99 20 -85 -88) -88]
Test Case: 630 | Input/Output: [(75 79 81 -62) -62]
Test Case: 631 | Input/Output: [(-28 73 89 3) -28]
Test Case: 632 | Input/Output: [(-40 88 -45 -8) -45]
Test Case: 633 | Input/Output: [(-12 -23 52 -12) -23]
Test Case: 634 | Input/Output: [(42 -45 97 69) -45]
Test Case: 635 | Input/Output: [(-42 5 24 -46) -46]
Test Case: 636 | Input/Output: [(98 -43 -88 -51) -88]
Test Case: 637 | Input/Output: [(-92 -42 -36 -63) -92]
Test Case: 638 | Input/Output: [(-48 65 -12 -56) -56]
Test Case: 639 | Input/Output: [(36 -48 -82 48) -82]
Test Case: 640 | Input/Output: [(-23 -31 -83 22) -83]
Test Case: 641 | Input/Output: [(43 37 -49 -20) -49]
Test Case: 642 | Input/Output: [(-57 60 83 24) -57]
Test Case: 643 | Input/Output: [(-52 85 -6 75) -52]
Test Case: 644 | Input/Output: [(49 65 -65 -15) -65]
Test Case: 645 | Input/Output: [(71 88 33 51) 33]
Test Case: 646 | Input/Output: [(-4 85 64 -6) -6]
Test Case: 647 | Input/Output: [(73 -92 -72 36) -92]
Test Case: 648 | Input/Output: [(-21 -69 4 -94) -94]
Test Case: 649 | Input/Output: [(-40 -72 93 -18) -72]
Test Case: 650 | Input/Output: [(-52 42 40 58) -52]
Test Case: 651 | Input/Output: [(-71 75 -36 -57) -71]
Test Case: 652 | Input/Output: [(-72 25 -36 -96) -96]
Test Case: 653 | Input/Output: [(-3 -73 1 -74) -74]
Test Case: 654 | Input/Output: [(8 -39 -71 -23) -71]
Test Case: 655 | Input/Output: [(-56 66 54 9) -56]
Test Case: 656 | Input/Output: [(49 -99 -17 -42) -99]
Test Case: 657 | Input/Output: [(21 -14 35 60) -14]
Test Case: 658 | Input/Output: [(74 -12 54 -79) -79]
Test Case: 659 | Input/Output: [(58 64 -62 7) -62]
Test Case: 660 | Input/Output: [(65 -17 3 -49) -49]
Test Case: 661 | Input/Output: [(30 64 -92 -5) -92]
Test Case: 662 | Input/Output: [(-62 -62 35 -28) -62]
Test Case: 663 | Input/Output: [(88 -48 17 -49) -49]
Test Case: 664 | Input/Output: [(40 -82 40 -92) -92]
Test Case: 665 | Input/Output: [(-83 67 34 61) -83]
Test Case: 666 | Input/Output: [(13 -70 -9 -65) -70]
Test Case: 667 | Input/Output: [(-20 1 65 4) -20]
Test Case: 668 | Input/Output: [(17 26 94 65) 17]
Test Case: 669 | Input/Output: [(15 -47 21 40) -47]
Test Case: 670 | Input/Output: [(-68 56 16 42) -68]
Test Case: 671 | Input/Output: [(-67 -89 70 -89) -89]
Test Case: 672 | Input/Output: [(94 -23 12 5) -23]
Test Case: 673 | Input/Output: [(13 -43 99 66) -43]
Test Case: 674 | Input/Output: [(-31 35 -54 -98) -98]
Test Case: 675 | Input/Output: [(44 77 -10 -54) -54]
Test Case: 676 | Input/Output: [(71 -51 -98 75) -98]
Test Case: 677 | Input/Output: [(85 22 -82 -61) -82]
Test Case: 678 | Input/Output: [(37 -2 0 -33) -33]
Test Case: 679 | Input/Output: [(-94 8 -6 65) -94]
Test Case: 680 | Input/Output: [(-27 11 -60 -90) -90]
Test Case: 681 | Input/Output: [(-63 -42 -65 48) -65]
Test Case: 682 | Input/Output: [(-18 -22 -36 9) -36]
Test Case: 683 | Input/Output: [(78 53 17 -43) -43]
Test Case: 684 | Input/Output: [(-37 88 -1 -82) -82]
Test Case: 685 | Input/Output: [(23 14 -53 -26) -53]
Test Case: 686 | Input/Output: [(-38 100 75 -14) -38]
Test Case: 687 | Input/Output: [(-35 -72 -22 -11) -72]
Test Case: 688 | Input/Output: [(44 -88 -34 0) -88]
Test Case: 689 | Input/Output: [(-20 -27 -6 -57) -57]
Test Case: 690 | Input/Output: [(42 84 -6 -95) -95]
Test Case: 691 | Input/Output: [(-94 -43 -15 90) -94]
Test Case: 692 | Input/Output: [(-44 7 -70 47) -70]
Test Case: 693 | Input/Output: [(-36 25 -45 59) -45]
Test Case: 694 | Input/Output: [(76 -91 89 16) -91]
Test Case: 695 | Input/Output: [(72 5 33 82) 5]
Test Case: 696 | Input/Output: [(-45 -87 -38 63) -87]
Test Case: 697 | Input/Output: [(-50 -8 -75 62) -75]
Test Case: 698 | Input/Output: [(-45 -18 -70 80) -70]
Test Case: 699 | Input/Output: [(-88 -64 14 28) -88]
Test Case: 700 | Input/Output: [(-18 -74 -20 14) -74]
Test Case: 701 | Input/Output: [(-59 -99 -15 95) -99]
Test Case: 702 | Input/Output: [(82 -95 31 51) -95]
Test Case: 703 | Input/Output: [(71 -5 93 77) -5]
Test Case: 704 | Input/Output: [(-97 18 90 92) -97]
Test Case: 705 | Input/Output: [(-33 -52 -61 -94) -94]
Test Case: 706 | Input/Output: [(-7 83 -35 -97) -97]
Test Case: 707 | Input/Output: [(-94 -42 40 74) -94]
Test Case: 708 | Input/Output: [(2 -57 -4 7) -57]
Test Case: 709 | Input/Output: [(-43 21 -20 -47) -47]
Test Case: 710 | Input/Output: [(12 -20 2 -43) -43]
Test Case: 711 | Input/Output: [(-76 37 83 -38) -76]
Test Case: 712 | Input/Output: [(26 -46 84 32) -46]
Test Case: 713 | Input/Output: [(-2 34 -60 72) -60]
Test Case: 714 | Input/Output: [(33 92 34 -31) -31]
Test Case: 715 | Input/Output: [(25 14 -52 20) -52]
Test Case: 716 | Input/Output: [(-44 -72 -51 14) -72]
Test Case: 717 | Input/Output: [(74 12 94 59) 12]
Test Case: 718 | Input/Output: [(77 -64 -78 100) -78]
Test Case: 719 | Input/Output: [(-42 34 36 16) -42]
Test Case: 720 | Input/Output: [(-24 82 -19 93) -24]
Test Case: 721 | Input/Output: [(-41 68 9 -89) -89]
Test Case: 722 | Input/Output: [(94 96 -56 3) -56]
Test Case: 723 | Input/Output: [(1 40 -45 100) -45]
Test Case: 724 | Input/Output: [(-14 -11 38 -61) -61]
Test Case: 725 | Input/Output: [(35 -75 82 -62) -75]
Test Case: 726 | Input/Output: [(61 20 -2 -21) -21]
Test Case: 727 | Input/Output: [(12 -73 60 -49) -73]
Test Case: 728 | Input/Output: [(0 -49 -6 -78) -78]
Test Case: 729 | Input/Output: [(5 100 75 -82) -82]
Test Case: 730 | Input/Output: [(-4 -73 -51 -91) -91]
Test Case: 731 | Input/Output: [(55 -60 -63 -66) -66]
Test Case: 732 | Input/Output: [(-81 4 -49 13) -81]
Test Case: 733 | Input/Output: [(-79 -11 -61 -24) -79]
Test Case: 734 | Input/Output: [(72 -47 -46 21) -47]
Test Case: 735 | Input/Output: [(-32 -81 75 -38) -81]
Test Case: 736 | Input/Output: [(-98 -30 38 -62) -98]
Test Case: 737 | Input/Output: [(86 -12 100 48) -12]
Test Case: 738 | Input/Output: [(-78 93 19 -7) -78]
Test Case: 739 | Input/Output: [(53 -18 13 -70) -70]
Test Case: 740 | Input/Output: [(80 65 78 38) 38]
Test Case: 741 | Input/Output: [(98 -44 44 -34) -44]
Test Case: 742 | Input/Output: [(-81 92 95 59) -81]
Test Case: 743 | Input/Output: [(43 25 -38 -92) -92]
Test Case: 744 | Input/Output: [(67 -51 -40 -37) -51]
Test Case: 745 | Input/Output: [(-7 -17 -83 43) -83]
Test Case: 746 | Input/Output: [(68 -38 49 -92) -92]
Test Case: 747 | Input/Output: [(52 81 51 4) 4]
Test Case: 748 | Input/Output: [(-60 -77 -41 -77) -77]
Test Case: 749 | Input/Output: [(15 -28 -100 -37) -100]
Test Case: 750 | Input/Output: [(-37 -99 75 37) -99]
Test Case: 751 | Input/Output: [(1 -23 48 66) -23]
Test Case: 752 | Input/Output: [(-90 -94 -3 66) -94]
Test Case: 753 | Input/Output: [(23 -96 48 6) -96]
Test Case: 754 | Input/Output: [(30 -18 71 31) -18]
Test Case: 755 | Input/Output: [(87 60 -84 35) -84]
Test Case: 756 | Input/Output: [(-27 7 -93 39) -93]
Test Case: 757 | Input/Output: [(-67 41 14 71) -67]
Test Case: 758 | Input/Output: [(-13 -38 5 50) -38]
Test Case: 759 | Input/Output: [(31 -97 -20 31) -97]
Test Case: 760 | Input/Output: [(33 -3 39 -29) -29]
Test Case: 761 | Input/Output: [(-49 -19 63 99) -49]
Test Case: 762 | Input/Output: [(60 -39 -84 96) -84]
Test Case: 763 | Input/Output: [(63 -14 -15 -91) -91]
Test Case: 764 | Input/Output: [(21 96 100 85) 21]
Test Case: 765 | Input/Output: [(-13 53 80 -76) -76]
Test Case: 766 | Input/Output: [(-93 -56 17 -88) -93]
Test Case: 767 | Input/Output: [(-56 -65 -40 -48) -65]
Test Case: 768 | Input/Output: [(-1 -10 -70 -13) -70]
Test Case: 769 | Input/Output: [(-36 -58 66 73) -58]
Test Case: 770 | Input/Output: [(-13 54 -23 -82) -82]
Test Case: 771 | Input/Output: [(-43 -70 100 6) -70]
Test Case: 772 | Input/Output: [(-12 -5 -77 -52) -77]
Test Case: 773 | Input/Output: [(42 35 96 -95) -95]
Test Case: 774 | Input/Output: [(77 44 92 53) 44]
Test Case: 775 | Input/Output: [(62 -27 -73 -11) -73]
Test Case: 776 | Input/Output: [(92 7 -56 21) -56]
Test Case: 777 | Input/Output: [(-3 -12 99 -53) -53]
Test Case: 778 | Input/Output: [(-97 79 58 -35) -97]
Test Case: 779 | Input/Output: [(-7 84 22 37) -7]
Test Case: 780 | Input/Output: [(-99 80 -77 57) -99]
Test Case: 781 | Input/Output: [(46 25 59 59) 25]
Test Case: 782 | Input/Output: [(-23 89 74 -66) -66]
Test Case: 783 | Input/Output: [(-61 74 94 70) -61]
Test Case: 784 | Input/Output: [(76 100 95 -7) -7]
Test Case: 785 | Input/Output: [(56 -27 -91 -44) -91]
Test Case: 786 | Input/Output: [(28 27 -16 -46) -46]
Test Case: 787 | Input/Output: [(69 11 -99 33) -99]
Test Case: 788 | Input/Output: [(-15 32 -32 40) -32]
Test Case: 789 | Input/Output: [(-68 -26 4 -17) -68]
Test Case: 790 | Input/Output: [(-23 -65 9 -85) -85]
Test Case: 791 | Input/Output: [(-51 -38 9 -50) -51]
Test Case: 792 | Input/Output: [(57 -4 48 -47) -47]
Test Case: 793 | Input/Output: [(-25 -84 -92 28) -92]
Test Case: 794 | Input/Output: [(7 -100 52 48) -100]
Test Case: 795 | Input/Output: [(-75 -94 71 -42) -94]
Test Case: 796 | Input/Output: [(86 -51 75 -19) -51]
Test Case: 797 | Input/Output: [(55 57 -54 10) -54]
Test Case: 798 | Input/Output: [(-12 -46 -94 -1) -94]
Test Case: 799 | Input/Output: [(-30 -41 64 10) -41]
Test Case: 800 | Input/Output: [(80 -23 49 -55) -55]
Test Case: 801 | Input/Output: [(51 -77 -72 -88) -88]
Test Case: 802 | Input/Output: [(8 66 -37 -19) -37]
Test Case: 803 | Input/Output: [(55 -88 73 -22) -88]
Test Case: 804 | Input/Output: [(67 47 -70 -50) -70]
Test Case: 805 | Input/Output: [(95 14 12 -52) -52]
Test Case: 806 | Input/Output: [(-53 96 -54 85) -54]
Test Case: 807 | Input/Output: [(-10 -100 17 64) -100]
Test Case: 808 | Input/Output: [(-41 47 -68 -17) -68]
Test Case: 809 | Input/Output: [(77 17 -50 27) -50]
Test Case: 810 | Input/Output: [(-98 -83 33 83) -98]
Test Case: 811 | Input/Output: [(10 93 -80 90) -80]
Test Case: 812 | Input/Output: [(-90 45 -13 80) -90]
Test Case: 813 | Input/Output: [(63 -31 -33 -20) -33]
Test Case: 814 | Input/Output: [(50 -63 -48 60) -63]
Test Case: 815 | Input/Output: [(86 -47 -40 -25) -47]
Test Case: 816 | Input/Output: [(16 37 -13 32) -13]
Test Case: 817 | Input/Output: [(82 29 -92 -33) -92]
Test Case: 818 | Input/Output: [(79 17 -56 -55) -56]
Test Case: 819 | Input/Output: [(-74 40 -15 8) -74]
Test Case: 820 | Input/Output: [(-11 95 -81 31) -81]
Test Case: 821 | Input/Output: [(-100 -90 -65 -40) -100]
Test Case: 822 | Input/Output: [(51 99 98 11) 11]
Test Case: 823 | Input/Output: [(-48 -82 -20 -19) -82]
Test Case: 824 | Input/Output: [(82 73 44 41) 41]
Test Case: 825 | Input/Output: [(52 -84 -26 65) -84]
Test Case: 826 | Input/Output: [(-22 -4 -60 -70) -70]
Test Case: 827 | Input/Output: [(66 31 46 12) 12]
Test Case: 828 | Input/Output: [(19 -28 -71 30) -71]
Test Case: 829 | Input/Output: [(-58 26 23 -17) -58]
Test Case: 830 | Input/Output: [(-100 14 -73 -32) -100]
Test Case: 831 | Input/Output: [(78 3 -2 -68) -68]
Test Case: 832 | Input/Output: [(-41 -69 11 51) -69]
Test Case: 833 | Input/Output: [(66 -70 55 88) -70]
Test Case: 834 | Input/Output: [(-68 -98 -68 6) -98]
Test Case: 835 | Input/Output: [(-42 28 38 -68) -68]
Test Case: 836 | Input/Output: [(64 -58 17 49) -58]
Test Case: 837 | Input/Output: [(-36 -65 42 -77) -77]
Test Case: 838 | Input/Output: [(53 -15 -28 -14) -28]
Test Case: 839 | Input/Output: [(-49 -63 36 13) -63]
Test Case: 840 | Input/Output: [(-2 82 64 37) -2]
Test Case: 841 | Input/Output: [(72 9 73 -64) -64]
Test Case: 842 | Input/Output: [(76 13 78 18) 13]
Test Case: 843 | Input/Output: [(8 76 9 20) 8]
Test Case: 844 | Input/Output: [(-21 -87 78 11) -87]
Test Case: 845 | Input/Output: [(-4 -58 46 -67) -67]
Test Case: 846 | Input/Output: [(67 -16 -19 -95) -95]
Test Case: 847 | Input/Output: [(-36 33 -7 14) -36]
Test Case: 848 | Input/Output: [(98 -50 57 -41) -50]
Test Case: 849 | Input/Output: [(94 11 49 -41) -41]
Test Case: 850 | Input/Output: [(19 55 -86 37) -86]
Test Case: 851 | Input/Output: [(96 44 47 -22) -22]
Test Case: 852 | Input/Output: [(30 47 47 -73) -73]
Test Case: 853 | Input/Output: [(-27 -58 -28 -42) -58]
Test Case: 854 | Input/Output: [(-82 26 44 97) -82]
Test Case: 855 | Input/Output: [(-90 33 78 -86) -90]
Test Case: 856 | Input/Output: [(-23 -53 -68 -17) -68]
Test Case: 857 | Input/Output: [(42 -25 6 0) -25]
Test Case: 858 | Input/Output: [(-8 -49 33 -90) -90]
Test Case: 859 | Input/Output: [(14 -80 94 19) -80]
Test Case: 860 | Input/Output: [(-62 -38 24 71) -62]
Test Case: 861 | Input/Output: [(-29 -65 57 -29) -65]
Test Case: 862 | Input/Output: [(64 92 -16 -83) -83]
Test Case: 863 | Input/Output: [(-65 -20 -64 28) -65]
Test Case: 864 | Input/Output: [(77 -18 22 -27) -27]
Test Case: 865 | Input/Output: [(90 24 83 8) 8]
Test Case: 866 | Input/Output: [(36 79 75 -39) -39]
Test Case: 867 | Input/Output: [(47 23 16 -41) -41]
Test Case: 868 | Input/Output: [(-85 -91 13 61) -91]
Test Case: 869 | Input/Output: [(15 14 -82 80) -82]
Test Case: 870 | Input/Output: [(96 41 -40 -60) -60]
Test Case: 871 | Input/Output: [(-96 -10 21 1) -96]
Test Case: 872 | Input/Output: [(-17 49 -84 12) -84]
Test Case: 873 | Input/Output: [(56 -90 64 100) -90]
Test Case: 874 | Input/Output: [(98 32 -64 16) -64]
Test Case: 875 | Input/Output: [(-97 12 -31 -86) -97]
Test Case: 876 | Input/Output: [(14 18 77 -6) -6]
Test Case: 877 | Input/Output: [(-75 -11 24 59) -75]
Test Case: 878 | Input/Output: [(-45 -42 -5 -77) -77]
Test Case: 879 | Input/Output: [(-90 -75 -51 75) -90]
Test Case: 880 | Input/Output: [(31 -87 -54 25) -87]
Test Case: 881 | Input/Output: [(-94 0 -71 -17) -94]
Test Case: 882 | Input/Output: [(90 -25 -31 -1) -31]
Test Case: 883 | Input/Output: [(90 -36 89 -26) -36]
Test Case: 884 | Input/Output: [(98 -67 24 -61) -67]
Test Case: 885 | Input/Output: [(68 -6 1 79) -6]
Test Case: 886 | Input/Output: [(80 -44 -63 -9) -63]
Test Case: 887 | Input/Output: [(8 16 -51 87) -51]
Test Case: 888 | Input/Output: [(-21 -49 -79 13) -79]
Test Case: 889 | Input/Output: [(72 43 -39 24) -39]
Test Case: 890 | Input/Output: [(-38 -26 39 57) -38]
Test Case: 891 | Input/Output: [(-37 81 63 -3) -37]
Test Case: 892 | Input/Output: [(12 73 -49 94) -49]
Test Case: 893 | Input/Output: [(-82 -11 -70 -58) -82]
Test Case: 894 | Input/Output: [(-79 -11 -94 28) -94]
Test Case: 895 | Input/Output: [(20 -48 -67 26) -67]
Test Case: 896 | Input/Output: [(42 54 76 98) 42]
Test Case: 897 | Input/Output: [(-92 70 -33 -95) -95]
Test Case: 898 | Input/Output: [(46 -26 -19 24) -26]
Test Case: 899 | Input/Output: [(77 -85 -20 86) -85]
Test Case: 900 | Input/Output: [(-92 -67 -54 79) -92]
Test Case: 901 | Input/Output: [(-22 -27 -46 13) -46]
Test Case: 902 | Input/Output: [(82 -37 15 -26) -37]
Test Case: 903 | Input/Output: [(18 43 56 -42) -42]
Test Case: 904 | Input/Output: [(-2 -39 -4 16) -39]
Test Case: 905 | Input/Output: [(-32 23 37 -17) -32]
Test Case: 906 | Input/Output: [(65 41 13 -15) -15]
Test Case: 907 | Input/Output: [(-69 60 -24 -13) -69]
Test Case: 908 | Input/Output: [(-55 -23 32 73) -55]
Test Case: 909 | Input/Output: [(48 -49 -70 34) -70]
Test Case: 910 | Input/Output: [(74 -54 -28 -31) -54]
Test Case: 911 | Input/Output: [(26 -10 -33 -5) -33]
Test Case: 912 | Input/Output: [(40 -16 -45 -59) -59]
Test Case: 913 | Input/Output: [(-58 36 4 -13) -58]
Test Case: 914 | Input/Output: [(-66 32 83 -14) -66]
Test Case: 915 | Input/Output: [(-60 -78 45 -39) -78]
Test Case: 916 | Input/Output: [(43 6 93 -95) -95]
Test Case: 917 | Input/Output: [(22 -98 0 -54) -98]
Test Case: 918 | Input/Output: [(-98 75 70 -94) -98]
Test Case: 919 | Input/Output: [(-14 -84 69 34) -84]
Test Case: 920 | Input/Output: [(18 -52 74 -1) -52]
Test Case: 921 | Input/Output: [(-50 -73 25 -38) -73]
Test Case: 922 | Input/Output: [(21 94 -47 -37) -47]
Test Case: 923 | Input/Output: [(-55 -81 -65 8) -81]
Test Case: 924 | Input/Output: [(54 -100 -96 40) -100]
Test Case: 925 | Input/Output: [(65 -17 34 -6) -17]
Test Case: 926 | Input/Output: [(-1 -79 -100 30) -100]
Test Case: 927 | Input/Output: [(93 44 -41 -17) -41]
Test Case: 928 | Input/Output: [(21 -15 -45 -80) -80]
Test Case: 929 | Input/Output: [(64 -41 -49 -24) -49]
Test Case: 930 | Input/Output: [(28 -69 57 97) -69]
Test Case: 931 | Input/Output: [(31 -53 -94 -82) -94]
Test Case: 932 | Input/Output: [(93 46 61 -75) -75]
Test Case: 933 | Input/Output: [(-71 -45 -76 22) -76]
Test Case: 934 | Input/Output: [(-96 31 15 98) -96]
Test Case: 935 | Input/Output: [(69 67 46 -61) -61]
Test Case: 936 | Input/Output: [(-48 73 -29 -10) -48]
Test Case: 937 | Input/Output: [(-29 -25 62 -60) -60]
Test Case: 938 | Input/Output: [(75 19 11 -68) -68]
Test Case: 939 | Input/Output: [(65 -11 -33 -90) -90]
Test Case: 940 | Input/Output: [(-86 53 61 17) -86]
Test Case: 941 | Input/Output: [(-8 -24 -55 2) -55]
Test Case: 942 | Input/Output: [(-66 4 -34 -90) -90]
Test Case: 943 | Input/Output: [(-89 85 -48 13) -89]
Test Case: 944 | Input/Output: [(35 56 18 -57) -57]
Test Case: 945 | Input/Output: [(-2 -77 -90 41) -90]
Test Case: 946 | Input/Output: [(-2 -75 -50 -22) -75]
Test Case: 947 | Input/Output: [(-16 -89 -68 -94) -94]
Test Case: 948 | Input/Output: [(22 100 -49 -33) -49]
Test Case: 949 | Input/Output: [(81 -39 -76 -17) -76]
Test Case: 950 | Input/Output: [(66 63 -85 71) -85]
Test Case: 951 | Input/Output: [(17 54 100 -77) -77]
Test Case: 952 | Input/Output: [(10 -34 34 10) -34]
Test Case: 953 | Input/Output: [(-14 -90 -9 99) -90]
Test Case: 954 | Input/Output: [(-65 -53 51 57) -65]
Test Case: 955 | Input/Output: [(47 62 -14 35) -14]
Test Case: 956 | Input/Output: [(81 69 -92 -21) -92]
Test Case: 957 | Input/Output: [(13 83 -67 63) -67]
Test Case: 958 | Input/Output: [(-63 -23 60 -7) -63]
Test Case: 959 | Input/Output: [(90 -73 64 -28) -73]
Test Case: 960 | Input/Output: [(21 -27 63 -20) -27]
Test Case: 961 | Input/Output: [(32 45 71 -34) -34]
Test Case: 962 | Input/Output: [(-62 -85 66 95) -85]
Test Case: 963 | Input/Output: [(-38 -50 80 -24) -50]
Test Case: 964 | Input/Output: [(-15 30 62 -64) -64]
Test Case: 965 | Input/Output: [(-38 -60 70 -23) -60]
Test Case: 966 | Input/Output: [(-31 73 -65 62) -65]
Test Case: 967 | Input/Output: [(-26 -79 88 -78) -79]
Test Case: 968 | Input/Output: [(-25 22 28 -95) -95]
Test Case: 969 | Input/Output: [(99 41 -26 86) -26]
Test Case: 970 | Input/Output: [(1 21 55 78) 1]
Test Case: 971 | Input/Output: [(3 -72 -2 57) -72]
Test Case: 972 | Input/Output: [(-44 45 -41 -54) -54]
Test Case: 973 | Input/Output: [(-75 78 -73 -99) -99]
Test Case: 974 | Input/Output: [(4 15 100 68) 4]
Test Case: 975 | Input/Output: [(-44 -86 9 73) -86]
Test Case: 976 | Input/Output: [(-57 -85 45 -43) -85]
Test Case: 977 | Input/Output: [(90 -34 99 -35) -35]
Test Case: 978 | Input/Output: [(13 -54 -21 90) -54]
Test Case: 979 | Input/Output: [(81 -43 32 -42) -43]
Test Case: 980 | Input/Output: [(68 -67 50 12) -67]
Test Case: 981 | Input/Output: [(86 -17 -47 73) -47]
Test Case: 982 | Input/Output: [(-80 -60 -70 96) -80]
Test Case: 983 | Input/Output: [(86 -2 8 25) -2]
Test Case: 984 | Input/Output: [(-58 94 -30 -51) -58]
Test Case: 985 | Input/Output: [(-14 88 -36 98) -36]
Test Case: 986 | Input/Output: [(39 -26 98 22) -26]
Test Case: 987 | Input/Output: [(38 -33 45 25) -33]
Test Case: 988 | Input/Output: [(-71 67 -60 -100) -100]
Test Case: 989 | Input/Output: [(22 40 77 -93) -93]
Test Case: 990 | Input/Output: [(-38 92 93 -19) -38]
Test Case: 991 | Input/Output: [(-88 33 53 59) -88]
Test Case: 992 | Input/Output: [(-89 41 -78 17) -89]
Test Case: 993 | Input/Output: [(-50 -73 19 86) -73]
Test Case: 994 | Input/Output: [(56 -96 -89 52) -96]
Test Case: 995 | Input/Output: [(9 -85 -100 22) -100]
Test Case: 996 | Input/Output: [(65 66 49 5) 5]
Test Case: 997 | Input/Output: [(-75 22 -98 -85) -98]
Test Case: 998 | Input/Output: [(-69 40 78 -37) -69]
Test Case: 999 | Input/Output: [(92 -62 -91 56) -91]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -22 -92 7 -30 -24 46 -34 -119 -70 70 101 -127 -45 -29 17 15
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[64 -75 -75 -75] -75] [[-99 72 72 72] -99] [[-80 -80 -80 -32] -80] [[0 0 0 -11] -11] [[1 13 1 1] 1] [[-56 -56 -56 -41] -56] [[54 -76 -76 -76] -76] [[74 74 -66 74] -66] [[-98 -98 -98 92] -98] [[-47 -47 -55 -47] -55] [(-15 -15 -15 -15) -15] [(-72 -72 -72 -72) -72] [(-33 -33 -33 -33) -33] [(-7 -7 -7 -7) -7] [(-11 -11 -11 -11) -11] [(58 47 75 97) 47] [(67 28 63 44) 28] [(55 95 34 1) 1] [(67 71 55 62) 55] [(60 96 62 73) 60] [(81 7 49 60) 7] [(12 12 23 36) 12] [(42 74 75 56) 42] [(95 87 28 39) 28] [(37 47 7 24) 7] [(32 26 76 9) 9] [(89 37 58 77) 37] [(92 58 40 92) 40] [(74 70 6 87) 6] [(40 26 100 55) 26] [(43 1 33 51) 1] [(13 88 42 25) 13] [(91 90 26 15) 15] [(78 93 74 79) 74] [(5 93 71 88) 5] [(29 -64 -14 32) -64] [(57 94 -18 6) -18] [(55 49 92 1) 1] [(-88 68 87 -42) -88] [(11 -69 -67 13) -69] [(9 6 16 85) 6] [(-78 -55 -11 99) -78] [(30 33 -28 97) -28] [(77 32 91 -48) -48] [(60 -18 -97 24) -97] [(-29 14 -20 62) -29] [(-13 28 -20 45) -20] [(11 94 -69 -86) -86] [(68 94 -10 19) -10] [(34 -68 -47 -44) -68] [(-30 -77 -6 41) -77] [(12 92 -14 93) -14] [(-15 67 72 -54) -54] [(-95 -43 -84 1) -95] [(80 -86 -10 -5) -86] [(94 69 28 -41) -41] [(62 -63 65 -51) -63] [(-47 -12 -17 -42) -47] [(-54 -24 98 -95) -95] [(86 56 -11 -83) -83] [(-4 -20 -11 4) -20] [(-14 80 37 58) -14] [(-73 56 79 60) -73] [(72 25 23 -80) -80] [(32 -98 -50 64) -98] [(89 -29 50 79) -29] [(5 -79 81 5) -79] [(-49 -29 15 -82) -82] [(-50 -98 -94 -6) -98] [(6 -28 10 -39) -39] [(32 -12 -45 -38) -45] [(10 90 31 81) 10] [(65 -3 -54 66) -54] [(-83 -40 -39 -15) -83] [(39 27 66 -43) -43] [(86 -7 87 21) -7] [(96 -66 80 52) -66] [(-48 37 -64 -34) -64] [(42 -14 96 80) -14] [(47 38 12 46) 12] [(15 41 33 10) 10] [(15 43 16 -9) -9] [(98 -35 -77 -7) -77] [(7 -58 -3 31) -58] [(-38 83 51 34) -38] [(92 -14 -86 -54) -86] [(94 -55 -72 88) -72] [(5 -9 -17 88) -17] [(90 7 42 17) 7] [(37 62 -54 68) -54] [(23 -63 90 -58) -63] [(-54 24 67 17) -54] [(7 -61 -82 95) -82] [(97 5 -91 -90) -91] [(44 -69 -61 -47) -69])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 75                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 62                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 23                 
Correct output: 42                  | Program output: 75                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 76                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 100                
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 42                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 71                 
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: 87                 
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 16                 
Correct output: -78                 | Program output: -11                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 91                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -20                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -6                 
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: 72                 
Correct output: -95                 | Program output: -84                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 65                 
Correct output: -47                 | Program output: -17                
Correct output: -95                 | Program output: 98                 
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: 37                 
Correct output: -73                 | Program output: 79                 
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 81                 
Correct output: -82                 | Program output: 15                 
Correct output: -98                 | Program output: -94                
Correct output: -39                 | Program output: 10                 
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 31                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -39                
Correct output: -43                 | Program output: 66                 
Correct output: -7                  | Program output: 87                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: 96                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 33                 
Correct output: -9                  | Program output: 16                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: 51                 
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 90                 
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction 27} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction tag_boolean_938} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_noop print_integer boolean_yank boolean_and exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_empty exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 exec_dup (boolean_shove in3 integer_empty) exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) boolean_invert_second_then_and print_boolean exec_while (boolean_swap boolean_invert_first_then_and exec_do*while (boolean_dup integer_max boolean_xor boolean_flush integer_dup integer_eq integer_sub in1 exec_rot (integer_mod boolean_xor exec_rot () (integer_yankdup exec_eq) (integer_lt exec_yank in3 integer_eq integer_min integer_fromboolean integer_gte) exec_y_when_autoconstructing (exec_do*times (boolean_invert_first_then_and) integer_dec exec_stackdepth boolean_dup_times) exec_s_when_autoconstructing (boolean_flush boolean_swap 27 integer_fromboolean exec_do*times () integer_eq exec_yank exec_rot (exec_yank) (integer_stackdepth) (exec_k (tag_boolean_938) (boolean_invert_second_then_and integer_inc boolean_stackdepth) exec_eq) integer_dup_items) (exec_do*times (boolean_not integer_gt)) ()) () ()))))) () ()) () ()) () ()) () ())
Lexicase best errors: [0 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 138
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction 27} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction tag_boolean_938} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_noop print_integer boolean_yank boolean_and exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_empty exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 exec_dup (boolean_shove in3 integer_empty) exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) boolean_invert_second_then_and print_boolean exec_while (boolean_swap boolean_invert_first_then_and exec_do*while (boolean_dup integer_max boolean_xor boolean_flush integer_dup integer_eq integer_sub in1 exec_rot (integer_mod boolean_xor exec_rot () (integer_yankdup exec_eq) (integer_lt exec_yank in3 integer_eq integer_min integer_fromboolean integer_gte) exec_y_when_autoconstructing (exec_do*times (boolean_invert_first_then_and) integer_dec exec_stackdepth boolean_dup_times) exec_s_when_autoconstructing (boolean_flush boolean_swap 27 integer_fromboolean exec_do*times () integer_eq exec_yank exec_rot (exec_yank) (integer_stackdepth) (exec_k (tag_boolean_938) (boolean_invert_second_then_and integer_inc boolean_stackdepth) exec_eq) integer_dup_items) (exec_do*times (boolean_not integer_gt)) ()) () ()))))) () ()) () ()) () ()) () ())
Zero cases best errors: [0 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 138
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 4 2 4 1 6 1 1 1 1)
Population mean number of elite cases: 0.02
Count of perfect (error zero) individuals by case: (1 4 2 4 1 6 1 1 1 1)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction 27} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction tag_boolean_938} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt})
Best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_noop print_integer boolean_yank boolean_and exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_empty exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 exec_dup (boolean_shove in3 integer_empty) exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) boolean_invert_second_then_and print_boolean exec_while (boolean_swap boolean_invert_first_then_and exec_do*while (boolean_dup integer_max boolean_xor boolean_flush integer_dup integer_eq integer_sub in1 exec_rot (integer_mod boolean_xor exec_rot () (integer_yankdup exec_eq) (integer_lt exec_yank in3 integer_eq integer_min integer_fromboolean integer_gte) exec_y_when_autoconstructing (exec_do*times (boolean_invert_first_then_and) integer_dec exec_stackdepth boolean_dup_times) exec_s_when_autoconstructing (boolean_flush boolean_swap 27 integer_fromboolean exec_do*times () integer_eq exec_yank exec_rot (exec_yank) (integer_stackdepth) (exec_k (tag_boolean_938) (boolean_invert_second_then_and integer_inc boolean_stackdepth) exec_eq) integer_dup_items) (exec_do*times (boolean_not integer_gt)) ()) () ()))))) () ()) () ()) () ()) () ())
Errors: [0 1 1 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 97
Size: 138
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 9.978
Median total errors in population: 10
Error averages by case: (0.999 0.996 0.998 0.996 0.999 0.994 0.999 0.999 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.916
Average program size in population (points): 68.727
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 466367
--- Timings ---
Current time: 1559583670081 milliseconds
Total Time:           2.3 seconds
Initialization:       0.1 seconds,  4.7%
Reproduction:         0.8 seconds, 34.4%
Fitness Testing:      1.4 seconds, 60.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 75                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 62                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 23                 
Correct output: 42                  | Program output: 75                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 76                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 100                
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 42                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 71                 
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: 87                 
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 16                 
Correct output: -78                 | Program output: -11                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 91                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -20                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -6                 
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: 72                 
Correct output: -95                 | Program output: -84                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 65                 
Correct output: -47                 | Program output: -17                
Correct output: -95                 | Program output: 98                 
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: 37                 
Correct output: -73                 | Program output: 79                 
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 81                 
Correct output: -82                 | Program output: 15                 
Correct output: -98                 | Program output: -94                
Correct output: -39                 | Program output: 10                 
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 31                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -39                
Correct output: -43                 | Program output: 66                 
Correct output: -7                  | Program output: 87                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: 96                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 33                 
Correct output: -9                  | Program output: 16                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: 51                 
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 90                 
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction 27} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction tag_boolean_938} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_noop print_integer boolean_yank boolean_and exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_empty exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 exec_dup (boolean_shove in3 integer_empty) exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) boolean_invert_second_then_and print_boolean exec_while (boolean_swap boolean_invert_first_then_and exec_do*while (boolean_dup integer_max boolean_xor boolean_flush integer_dup integer_eq integer_sub in1 exec_rot (integer_mod boolean_xor exec_rot () (integer_yankdup exec_eq) (integer_lt exec_yank in3 integer_eq integer_min integer_fromboolean integer_gte) exec_y_when_autoconstructing (exec_do*times (boolean_invert_first_then_and) integer_dec exec_stackdepth boolean_dup_times) exec_s_when_autoconstructing (boolean_flush boolean_swap 27 integer_fromboolean exec_do*times () integer_eq exec_yank exec_rot (exec_yank) (integer_stackdepth) (exec_k (tag_boolean_938) (boolean_invert_second_then_and integer_inc boolean_stackdepth) exec_eq) integer_dup_items) (exec_do*times (boolean_not integer_gt)) ()) () ()))))) () ()) () ()) () ()) () ())
Lexicase best errors: [1 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 138
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction 27} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction tag_boolean_938} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_noop print_integer boolean_yank boolean_and exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_empty exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 exec_dup (boolean_shove in3 integer_empty) exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) boolean_invert_second_then_and print_boolean exec_while (boolean_swap boolean_invert_first_then_and exec_do*while (boolean_dup integer_max boolean_xor boolean_flush integer_dup integer_eq integer_sub in1 exec_rot (integer_mod boolean_xor exec_rot () (integer_yankdup exec_eq) (integer_lt exec_yank in3 integer_eq integer_min integer_fromboolean integer_gte) exec_y_when_autoconstructing (exec_do*times (boolean_invert_first_then_and) integer_dec exec_stackdepth boolean_dup_times) exec_s_when_autoconstructing (boolean_flush boolean_swap 27 integer_fromboolean exec_do*times () integer_eq exec_yank exec_rot (exec_yank) (integer_stackdepth) (exec_k (tag_boolean_938) (boolean_invert_second_then_and integer_inc boolean_stackdepth) exec_eq) integer_dup_items) (exec_do*times (boolean_not integer_gt)) ()) () ()))))) () ()) () ()) () ()) () ())
Zero cases best errors: [1 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 138
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (104 884 493 692 104 493 884 493 87 493)
Population mean number of elite cases: 4.73
Count of perfect (error zero) individuals by case: (104 884 493 692 104 493 884 493 87 493)
Population mean number of perfect (error zero) cases: 4.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction 27} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction tag_boolean_938} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt})
Best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_noop print_integer boolean_yank boolean_and exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_empty exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 exec_dup (boolean_shove in3 integer_empty) exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_not) boolean_invert_first_then_and in1) boolean_invert_second_then_and print_boolean exec_while (boolean_swap boolean_invert_first_then_and exec_do*while (boolean_dup integer_max boolean_xor boolean_flush integer_dup boolean_dup integer_sub in1 exec_rot (integer_mod boolean_xor exec_rot () (integer_yankdup exec_eq) (integer_lt exec_yank in3 integer_eq integer_min integer_fromboolean integer_gte) exec_y_when_autoconstructing (exec_do*times (boolean_invert_first_then_and) integer_dec exec_stackdepth boolean_dup_times) exec_s_when_autoconstructing (boolean_flush boolean_swap 27 integer_fromboolean exec_do*times () integer_eq exec_yank exec_rot (exec_yank) (integer_stackdepth) (exec_k (tag_boolean_938) (boolean_invert_second_then_and integer_inc boolean_stackdepth) exec_eq) integer_dup_items) (exec_do*times (boolean_not integer_gt)) ()) () ()))))) () ()) () ()) () ()) () ())
Errors: [1 0 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 97
Size: 138
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 5.273
Median total errors in population: 6
Error averages by case: (0.896 0.116 0.507 0.308 0.896 0.507 0.116 0.507 0.913 0.507)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.585
Average program size in population (points): 103.01
Average percent parens in population: 0.293
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.518
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 991087
--- Timings ---
Current time: 1559583672813 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.4 seconds, 48.2%
Fitness Testing:      2.0 seconds, 38.4%
Report:               0.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 64                 
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: 54                 
Correct output: -66                 | Program output: 74                 
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 67                 
Correct output: 1                   | Program output: 55                 
Correct output: 55                  | Program output: 67                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 81                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 95                 
Correct output: 7                   | Program output: 37                 
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 89                 
Correct output: 40                  | Program output: 92                 
Correct output: 6                   | Program output: 74                 
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 91                 
Correct output: 74                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: 29                 
Correct output: -18                 | Program output: 57                 
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: 11                 
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: 30                 
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: 60                 
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -13                
Correct output: -86                 | Program output: 11                 
Correct output: -10                 | Program output: 68                 
Correct output: -68                 | Program output: 34                 
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: 12                 
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: 80                 
Correct output: -41                 | Program output: 94                 
Correct output: -63                 | Program output: 62                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: 86                 
Correct output: -20                 | Program output: -4                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 72                 
Correct output: -98                 | Program output: 32                 
Correct output: -29                 | Program output: 89                 
Correct output: -79                 | Program output: 5                  
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -50                
Correct output: -39                 | Program output: 6                  
Correct output: -45                 | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: 86                 
Correct output: -66                 | Program output: 96                 
Correct output: -64                 | Program output: -48                
Correct output: -14                 | Program output: 42                 
Correct output: 12                  | Program output: 47                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: 98                 
Correct output: -58                 | Program output: 7                  
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: 92                 
Correct output: -72                 | Program output: 94                 
Correct output: -17                 | Program output: 5                  
Correct output: 7                   | Program output: 90                 
Correct output: -54                 | Program output: 37                 
Correct output: -63                 | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: 7                  
Correct output: -91                 | Program output: 97                 
Correct output: -69                 | Program output: 44                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 exec_dup (boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (exec_yank) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ())))) () ()) () ()) () ()) () ()))
Lexicase best errors: [1 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 92
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 exec_dup (boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (exec_yank) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ())))) () ()) () ()) () ()) () ()))
Zero cases best errors: [1 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 92
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (124 125 789 1 585 1 586 711 1 1)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (124 125 789 1 585 1 586 711 1 1)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 exec_dup (boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (exec_yank) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ())))) () ()) () ()) () ()) () ()))
Errors: [1 1 0 0 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 58
Size: 92
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 7.076
Median total errors in population: 6
Error averages by case: (0.876 0.875 0.211 0.999 0.415 0.999 0.414 0.289 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.466
Average program size in population (points): 106.307
Average percent parens in population: 0.305
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9725
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1439848
--- Timings ---
Current time: 1559583676150 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.8 seconds, 57.1%
Fitness Testing:      2.4 seconds, 29.0%
Report:               1.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 732
Test mean error for best: 0.73200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: 1                  
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 1                  
Correct output: 28                  | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 55                  | Program output: 1                  
Correct output: 60                  | Program output: 1                  
Correct output: 7                   | Program output: 1                  
Correct output: 12                  | Program output: 1                  
Correct output: 42                  | Program output: 1                  
Correct output: 28                  | Program output: 1                  
Correct output: 7                   | Program output: 1                  
Correct output: 9                   | Program output: 1                  
Correct output: 37                  | Program output: 1                  
Correct output: 40                  | Program output: 1                  
Correct output: 6                   | Program output: 1                  
Correct output: 26                  | Program output: 1                  
Correct output: 1                   | Program output: 0                  
Correct output: 13                  | Program output: 1                  
Correct output: 15                  | Program output: 1                  
Correct output: 74                  | Program output: 1                  
Correct output: 5                   | Program output: 1                  
Correct output: -64                 | Program output: -64                
Correct output: -18                 | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: 0                  
Correct output: -69                 | Program output: -69                
Correct output: 6                   | Program output: 1                  
Correct output: -78                 | Program output: -55                
Correct output: -28                 | Program output: 1                  
Correct output: -48                 | Program output: 0                  
Correct output: -97                 | Program output: -18                
Correct output: -29                 | Program output: 1                  
Correct output: -20                 | Program output: 1                  
Correct output: -86                 | Program output: 0                  
Correct output: -10                 | Program output: 1                  
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: -77                
Correct output: -14                 | Program output: 1                  
Correct output: -54                 | Program output: 0                  
Correct output: -95                 | Program output: -43                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: 0                  
Correct output: -63                 | Program output: -63                
Correct output: -47                 | Program output: -12                
Correct output: -95                 | Program output: -24                
Correct output: -83                 | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: 1                  
Correct output: -80                 | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -29                 | Program output: -29                
Correct output: -79                 | Program output: -79                
Correct output: -82                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: -28                
Correct output: -45                 | Program output: -12                
Correct output: 10                  | Program output: 1                  
Correct output: -54                 | Program output: -3                 
Correct output: -83                 | Program output: -40                
Correct output: -43                 | Program output: 0                  
Correct output: -7                  | Program output: -7                 
Correct output: -66                 | Program output: -66                
Correct output: -64                 | Program output: 0                  
Correct output: -14                 | Program output: -14                
Correct output: 12                  | Program output: 1                  
Correct output: 10                  | Program output: 1                  
Correct output: -9                  | Program output: 0                  
Correct output: -77                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: 1                  
Correct output: -86                 | Program output: -14                
Correct output: -72                 | Program output: -55                
Correct output: -17                 | Program output: -9                 
Correct output: 7                   | Program output: 1                  
Correct output: -54                 | Program output: 1                  
Correct output: -63                 | Program output: -63                
Correct output: -54                 | Program output: 1                  
Correct output: -82                 | Program output: -61                
Correct output: -91                 | Program output: 0                  
Correct output: -69                 | Program output: -69                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction exec_k})
Lexicase best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and exec_do*count (integer_swap exec_shove (print_integer exec_pop (exec_do*count (integer_mod) boolean_or integer_yankdup exec_k_when_autoconstructing (integer_dup_times) (exec_if (integer_flush integer_lte) (integer_div) integer_fromboolean exec_s (integer_empty integer_rot) (integer_mod boolean_swap exec_do*count (exec_do*times (boolean_dup_items)) exec_do*count (exec_do*while (integer_fromboolean boolean_not integer_lt boolean_dup_times exec_empty in4 exec_k () ()))) ())))))))
Lexicase best errors: [1 1 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 60
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction exec_k})
Zero cases best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and exec_do*count (integer_swap exec_shove (print_integer exec_pop (exec_do*count (integer_mod) boolean_or integer_yankdup exec_k_when_autoconstructing (integer_dup_times) (exec_if (integer_flush integer_lte) (integer_div) integer_fromboolean exec_s (integer_empty integer_rot) (integer_mod boolean_swap exec_do*count (exec_do*times (boolean_dup_items)) exec_do*count (exec_do*while (integer_fromboolean boolean_not integer_lt boolean_dup_times exec_empty in4 exec_k () ()))) ())))))))
Zero cases best errors: [1 1 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 60
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (449 256 6 933 207 256 933 207 918 918)
Population mean number of elite cases: 5.08
Count of perfect (error zero) individuals by case: (449 256 6 933 207 256 933 207 918 918)
Population mean number of perfect (error zero) cases: 5.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_k})
Best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and exec_do*count (integer_swap exec_shove (print_integer exec_pop (exec_do*count (integer_mod boolean_or integer_yankdup exec_k_when_autoconstructing (integer_dup_times) (exec_if (integer_flush integer_lte) (integer_div integer_fromboolean boolean_swap) exec_do*while (in1 integer_lt boolean_dup_times exec_empty in4 exec_k () ())))))))))
Errors: [1 1 1 0 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 45
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.917
Median total errors in population: 5
Error averages by case: (0.551 0.744 0.994 0.067 0.793 0.744 0.067 0.793 0.082 0.082)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.962
Average program size in population (points): 89.807
Average percent parens in population: 0.348
Minimum age in population: 3.0
Maximum age in population: 5.75
Average age in population: 4.60875
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 219
Genome diversity (% unique genomes):	 0.651
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 222
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1845856
--- Timings ---
Current time: 1559583679240 milliseconds
Total Time:          11.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.8 seconds, 60.2%
Fitness Testing:      2.9 seconds, 25.2%
Report:               1.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 75                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 62                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 23                 
Correct output: 42                  | Program output: 75                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 76                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 100                
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 42                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 71                 
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: 87                 
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 16                 
Correct output: -78                 | Program output: -11                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 91                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -20                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -6                 
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: 72                 
Correct output: -95                 | Program output: -84                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 65                 
Correct output: -47                 | Program output: -17                
Correct output: -95                 | Program output: 98                 
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: 37                 
Correct output: -73                 | Program output: 79                 
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 81                 
Correct output: -82                 | Program output: 15                 
Correct output: -98                 | Program output: -94                
Correct output: -39                 | Program output: 10                 
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 31                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -39                
Correct output: -43                 | Program output: 66                 
Correct output: -7                  | Program output: 87                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: 96                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 33                 
Correct output: -9                  | Program output: 16                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: 51                 
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 90                 
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction 27} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_938} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_noop print_integer boolean_yank boolean_and exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor) (exec_empty boolean_empty exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 exec_dup (boolean_shove in3 integer_empty exec_pop () in1 exec_when (integer_empty) exec_flush) integer_dup exec_if (boolean_shove boolean_yank) (boolean_invert_first_then_and in1) boolean_invert_second_then_and print_boolean exec_while (boolean_swap boolean_invert_first_then_and exec_do*while (boolean_dup integer_max boolean_xor boolean_flush integer_dup integer_eq integer_sub in1 exec_rot (integer_mod boolean_xor exec_rot () (integer_yankdup exec_eq) (integer_lt exec_y_when_autoconstructing (exec_do*times (boolean_invert_first_then_and) integer_dec exec_stackdepth boolean_dup_times exec_s_when_autoconstructing (boolean_flush boolean_swap 27 integer_fromboolean exec_do*times () integer_eq exec_yank exec_rot (exec_yank) (integer_stackdepth) (exec_k (tag_boolean_938 boolean_invert_second_then_and integer_inc exec_pop () exec_eq) () integer_dup_items) exec_do*times (boolean_not integer_gt)) () ()))) () ())))))) ()) () ()) () ()) () ())
Lexicase best errors: [0 1 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 133
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction 27} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_938} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_noop print_integer boolean_yank boolean_and exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor) (exec_empty boolean_empty exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 exec_dup (boolean_shove in3 integer_empty exec_pop () in1 exec_when (integer_empty) exec_flush) integer_dup exec_if (boolean_shove boolean_yank) (boolean_invert_first_then_and in1) boolean_invert_second_then_and print_boolean exec_while (boolean_swap boolean_invert_first_then_and exec_do*while (boolean_dup integer_max boolean_xor boolean_flush integer_dup integer_eq integer_sub in1 exec_rot (integer_mod boolean_xor exec_rot () (integer_yankdup exec_eq) (integer_lt exec_y_when_autoconstructing (exec_do*times (boolean_invert_first_then_and) integer_dec exec_stackdepth boolean_dup_times exec_s_when_autoconstructing (boolean_flush boolean_swap 27 integer_fromboolean exec_do*times () integer_eq exec_yank exec_rot (exec_yank) (integer_stackdepth) (exec_k (tag_boolean_938 boolean_invert_second_then_and integer_inc exec_pop () exec_eq) () integer_dup_items) exec_do*times (boolean_not integer_gt)) () ()))) () ())))))) ()) () ()) () ()) () ())
Zero cases best errors: [0 1 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 133
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (340 127 339 793 317 134 339 925 134 130)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (340 127 339 793 317 134 339 925 134 130)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor -17 exec_s (boolean_xor exec_empty boolean_shove in3 integer_empty) (exec_pop () exec_dup (exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (exec_yank) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ())) ()) () ()) () ()) () ()) () ()))
Errors: [0 1 0 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 55
Size: 89
Percent parens: 0.382
--- Population Statistics ---
Average total errors in population: 6.422
Median total errors in population: 7
Error averages by case: (0.66 0.873 0.661 0.207 0.683 0.866 0.661 0.075 0.866 0.87)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.789
Average program size in population (points): 79.226
Average percent parens in population: 0.340
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.957375
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2399099
--- Timings ---
Current time: 1559583682553 milliseconds
Total Time:          14.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.2 seconds, 61.8%
Fitness Testing:      3.4 seconds, 22.7%
Report:               2.2 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 552
Test mean error for best: 0.55200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 67                 
Correct output: 1                   | Program output: 55                 
Correct output: 55                  | Program output: 67                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 81                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 95                 
Correct output: 7                   | Program output: 37                 
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 89                 
Correct output: 40                  | Program output: 92                 
Correct output: 6                   | Program output: 74                 
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 91                 
Correct output: 74                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 94                 
Correct output: -63                 | Program output: 62                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 72                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 89                 
Correct output: -79                 | Program output: 5                  
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -50                
Correct output: -39                 | Program output: 6                  
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: 86                 
Correct output: -66                 | Program output: 96                 
Correct output: -64                 | Program output: -48                
Correct output: -14                 | Program output: 42                 
Correct output: 12                  | Program output: 47                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 90                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ()))) () ()) () ()) () ()) () ()))
Lexicase best errors: [0 0 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 91
Percent parens: 0.363
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ()))) () ()) () ()) () ()) () ()))
Zero cases best errors: [0 0 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 91
Percent parens: 0.363
--- Lexicase Population Statistics ---
Count of elite individuals by case: (904 184 142 185 1 191 371 185 142 186)
Population mean number of elite cases: 2.49
Count of perfect (error zero) individuals by case: (904 184 142 185 1 191 371 185 142 186)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ()))) () ()) () ()) () ()) () ()))
Errors: [0 0 1 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 58
Size: 91
Percent parens: 0.363
--- Population Statistics ---
Average total errors in population: 7.509
Median total errors in population: 8
Error averages by case: (0.096 0.816 0.858 0.815 0.999 0.809 0.629 0.815 0.858 0.814)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.214
Average program size in population (points): 80.181
Average percent parens in population: 0.341
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.7406875
Median age in population: 7.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2821268
--- Timings ---
Current time: 1559583685463 milliseconds
Total Time:          17.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.3 seconds, 63.4%
Fitness Testing:      3.8 seconds, 21.3%
Report:               2.6 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 552
Test mean error for best: 0.55200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 67                 
Correct output: 1                   | Program output: 55                 
Correct output: 55                  | Program output: 67                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 81                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 95                 
Correct output: 7                   | Program output: 37                 
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 89                 
Correct output: 40                  | Program output: 92                 
Correct output: 6                   | Program output: 74                 
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 91                 
Correct output: 74                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 94                 
Correct output: -63                 | Program output: 62                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 72                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 89                 
Correct output: -79                 | Program output: 5                  
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -50                
Correct output: -39                 | Program output: 6                  
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: 86                 
Correct output: -66                 | Program output: 96                 
Correct output: -64                 | Program output: -48                
Correct output: -14                 | Program output: 42                 
Correct output: 12                  | Program output: 47                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 90                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ()))) () ()) () ()) () ()) () ()))
Lexicase best errors: [0 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 91
Percent parens: 0.363
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ()))) () ()) () ()) () ()) () ()))
Zero cases best errors: [0 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 91
Percent parens: 0.363
--- Lexicase Population Statistics ---
Count of elite individuals by case: (701 250 117 423 119 440 251 7 906 458)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (701 250 117 423 119 440 251 7 906 458)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ()))) () ()) () ()) () ()) () ()))
Errors: [0 1 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 58
Size: 91
Percent parens: 0.363
--- Population Statistics ---
Average total errors in population: 6.328
Median total errors in population: 6
Error averages by case: (0.299 0.75 0.883 0.577 0.881 0.56 0.749 0.993 0.094 0.542)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.515
Average program size in population (points): 79.332
Average percent parens in population: 0.350
Minimum age in population: 6.75
Maximum age in population: 10.71875
Average age in population: 9.4604375
Median age in population: 9.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 209
Genome diversity (% unique genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 209
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.006
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3240701
--- Timings ---
Current time: 1559583688464 milliseconds
Total Time:          20.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.5 seconds, 64.7%
Fitness Testing:      4.2 seconds, 20.2%
Report:               3.0 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 463
Test mean error for best: 0.46300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 62                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 5                  
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -94                
Correct output: -39                 | Program output: 6                  
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: 86                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) ()) ()))) ()))) () ()) () ()) () ()))
Lexicase best errors: [0 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.346
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) ()) ()))) ()))) () ()) () ()) () ()))
Zero cases best errors: [0 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.346
--- Lexicase Population Statistics ---
Count of elite individuals by case: (67 431 244 186 229 187 906 229 249 209)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (67 431 244 186 229 187 906 229 249 209)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor boolean_yank boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ()))) () ()) () ()) () ()) () ()))
Errors: [0 0 1 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 58
Size: 91
Percent parens: 0.363
--- Population Statistics ---
Average total errors in population: 7.063
Median total errors in population: 7
Error averages by case: (0.933 0.569 0.756 0.814 0.771 0.813 0.094 0.771 0.751 0.791)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.6
Average program size in population (points): 76.167
Average percent parens in population: 0.348
Minimum age in population: 7.75
Maximum age in population: 12.625
Average age in population: 11.258078125
Median age in population: 11.1328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.007
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3691465
--- Timings ---
Current time: 1559583691119 milliseconds
Total Time:          23.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.3 seconds, 65.1%
Fitness Testing:      4.6 seconds, 19.7%
Report:               3.4 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 569
Test mean error for best: 0.56900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 75                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 62                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 23                 
Correct output: 42                  | Program output: 75                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 76                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 100                
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 42                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 71                 
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 16                 
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 91                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: 72                 
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 65                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: 37                 
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 81                 
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -50                
Correct output: -39                 | Program output: 10                 
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 31                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 66                 
Correct output: -7                  | Program output: 87                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -48                
Correct output: -14                 | Program output: 96                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 33                 
Correct output: -9                  | Program output: 16                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 90                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_yankdup exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ()))) () ()) () ()) () ()) () ()))
Lexicase best errors: [0 0 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 91
Percent parens: 0.363
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_yankdup exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ()))) () ()) () ()) () ()) () ()))
Zero cases best errors: [0 0 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 91
Percent parens: 0.363
--- Lexicase Population Statistics ---
Count of elite individuals by case: (452 385 185 8 857 185 183 599 408 816)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (452 385 185 8 857 185 183 599 408 816)
Population mean number of perfect (error zero) cases: 4.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())))) ()))) () ()) () ()) () ()) () ()) () ()) () ()))
Errors: [0 0 1 1 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 63
Size: 100
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 5.922
Median total errors in population: 6
Error averages by case: (0.548 0.615 0.815 0.992 0.143 0.815 0.817 0.401 0.592 0.184)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.836
Average program size in population (points): 80.435
Average percent parens in population: 0.342
Minimum age in population: 10.625
Maximum age in population: 14.125
Average age in population: 12.6996953125
Median age in population: 12.78125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.007
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4117220
--- Timings ---
Current time: 1559583693848 milliseconds
Total Time:          26.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.2 seconds, 65.7%
Fitness Testing:      5.0 seconds, 19.2%
Report:               3.8 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 463
Test mean error for best: 0.46300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 62                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 5                  
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -94                
Correct output: -39                 | Program output: 6                  
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: 86                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (integer_yank exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush) ()) ()))) ()))) () ()) () ()) () ()) () ()))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 84
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (integer_yank exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush) ()) ()))) ()))) () ()) () ()) () ()) () ()))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 84
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 534 913 862 274 822 444 233 855 172)
Population mean number of elite cases: 5.46
Count of perfect (error zero) individuals by case: (350 534 913 862 274 822 444 233 855 172)
Population mean number of perfect (error zero) cases: 5.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_yankdup exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ()))) () ()) () ()) () ()) () ()))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 58
Size: 91
Percent parens: 0.363
--- Population Statistics ---
Average total errors in population: 4.541
Median total errors in population: 4
Error averages by case: (0.65 0.466 0.087 0.138 0.726 0.178 0.556 0.767 0.145 0.828)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.237
Average program size in population (points): 77.78
Average percent parens in population: 0.340
Minimum age in population: 12.1328125
Maximum age in population: 15.78125
Average age in population: 14.43584375
Median age in population: 14.33984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 156
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.009
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4501987
--- Timings ---
Current time: 1559583696476 milliseconds
Total Time:          28.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.0 seconds, 66.0%
Fitness Testing:      5.4 seconds, 18.8%
Report:               4.3 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 463
Test mean error for best: 0.46300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 62                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 5                  
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -94                
Correct output: -39                 | Program output: 6                  
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: 86                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty exec_s (exec_rot (exec_empty integer_dup_times boolean_and exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline integer_eq exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())))) ()) () ()) () ()) () ()) () ()))
Lexicase best errors: [0 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 79
Percent parens: 0.367
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty exec_s (exec_rot (exec_empty integer_dup_times boolean_and exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline integer_eq exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())))) ()) () ()) () ()) () ()) () ()))
Zero cases best errors: [0 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 79
Percent parens: 0.367
--- Lexicase Population Statistics ---
Count of elite individuals by case: (894 834 58 476 22 472 472 281 273 518)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (894 834 58 476 22 472 472 281 273 518)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Best program: (boolean_dup_times exec_swap () (boolean_dup_times exec_noop exec_yankdup exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_or exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ()) ()))) ()))) () ()) () ())))
Errors: [0 0 1 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 67
Size: 105
Percent parens: 0.362
--- Population Statistics ---
Average total errors in population: 5.7
Median total errors in population: 6
Error averages by case: (0.106 0.166 0.942 0.524 0.978 0.528 0.528 0.719 0.727 0.482)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.447
Average program size in population (points): 80.574
Average percent parens in population: 0.348
Minimum age in population: 13.375
Maximum age in population: 17.390625
Average age in population: 15.75300390625
Median age in population: 15.828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4912479
--- Timings ---
Current time: 1559583699065 milliseconds
Total Time:          31.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.9 seconds, 66.4%
Fitness Testing:      5.8 seconds, 18.4%
Report:               4.7 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 463
Test mean error for best: 0.46300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 62                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 5                  
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -94                
Correct output: -39                 | Program output: 6                  
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: 86                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank integer_gte) (exec_s (exec_rot (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and) ())) ()))) ())) () ()) () ()))
Lexicase best errors: [1 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 86
Percent parens: 0.337
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank integer_gte) (exec_s (exec_rot (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and) ())) ()))) ())) () ()) () ()))
Zero cases best errors: [1 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 86
Percent parens: 0.337
--- Lexicase Population Statistics ---
Count of elite individuals by case: (250 287 383 285 449 320 461 462 815 324)
Population mean number of elite cases: 4.04
Count of perfect (error zero) individuals by case: (250 287 383 285 449 320 461 462 815 324)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor exec_empty boolean_yankdup exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))) ()))) () ()) () ()) () ()) () ()))
Errors: [1 1 0 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 58
Size: 91
Percent parens: 0.363
--- Population Statistics ---
Average total errors in population: 5.964
Median total errors in population: 6
Error averages by case: (0.75 0.713 0.617 0.715 0.551 0.68 0.539 0.538 0.185 0.676)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.164
Average program size in population (points): 79.282
Average percent parens in population: 0.341
Minimum age in population: 14.59375
Maximum age in population: 19.1640625
Average age in population: 17.8185751953125
Median age in population: 17.98046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.008
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5369530
--- Timings ---
Current time: 1559583701743 milliseconds
Total Time:          34.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.7 seconds, 66.7%
Fitness Testing:      6.2 seconds, 18.2%
Report:               5.0 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 463
Test mean error for best: 0.46300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 62                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 5                  
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -94                
Correct output: -39                 | Program output: 6                  
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: 86                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor boolean_yank boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (boolean_yank) (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) integer_stackdepth exec_rot (integer_fromboolean) () ()))) ()))) () ()) () ()) () ()) () ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 88
Percent parens: 0.341
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_xor boolean_yank boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (boolean_yank) (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) integer_stackdepth exec_rot (integer_fromboolean) () ()))) ()))) () ()) () ()) () ()) () ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 88
Percent parens: 0.341
--- Lexicase Population Statistics ---
Count of elite individuals by case: (362 352 339 350 625 812 142 120 440 14)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (362 352 339 350 625 812 142 120 440 14)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Best program: (exec_noop exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor exec_swap (exec_s (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) exec_do*count (exec_rot (integer_fromboolean) () ()))) ()))) () ()) ()) () ()) () ()) () ()))
Errors: [0 0 0 0 0 0 1 1 1 1]
Total: 4
Mean: 0.4
Genome size: 52
Size: 82
Percent parens: 0.366
--- Population Statistics ---
Average total errors in population: 6.444
Median total errors in population: 7
Error averages by case: (0.638 0.648 0.661 0.65 0.375 0.188 0.858 0.88 0.56 0.986)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.869
Average program size in population (points): 84.525
Average percent parens in population: 0.338
Minimum age in population: 16.25
Maximum age in population: 20.95654296875
Average age in population: 19.220671875
Median age in population: 19.188720703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.007
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5799236
--- Timings ---
Current time: 1559583704463 milliseconds
Total Time:          36.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.6 seconds, 66.9%
Fitness Testing:      6.6 seconds, 18.0%
Report:               5.5 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 463
Test mean error for best: 0.46300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 62                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 5                  
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -94                
Correct output: -39                 | Program output: 6                  
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: 86                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (integer_yank exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) boolean_invert_second_then_and)) ()))) () ()) () ()) () ()) () ()) () ()))
Lexicase best errors: [0 0 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 91
Percent parens: 0.352
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (integer_yank exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) boolean_invert_second_then_and)) ()))) () ()) () ()) () ()) () ()) () ()))
Zero cases best errors: [0 0 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 91
Percent parens: 0.352
--- Lexicase Population Statistics ---
Count of elite individuals by case: (438 590 399 411 373 418 424 430 790 371)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (438 590 399 411 373 418 424 430 790 371)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean})
Best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_shove exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_y_when_autoconstructing (integer_fromboolean))) ()))) ()))) () ()) () ()) () ()) () ()))
Errors: [0 0 1 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 58
Size: 89
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 5.356
Median total errors in population: 5
Error averages by case: (0.562 0.41 0.601 0.589 0.627 0.582 0.576 0.57 0.21 0.629)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.236
Average program size in population (points): 81.73
Average percent parens in population: 0.335
Minimum age in population: 17.53515625
Maximum age in population: 22.673828125
Average age in population: 20.84748217773438
Median age in population: 20.9820556640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.754
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6264619
--- Timings ---
Current time: 1559583707183 milliseconds
Total Time:          39.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.5 seconds, 67.1%
Fitness Testing:      7.0 seconds, 17.8%
Report:               5.9 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 463
Test mean error for best: 0.46300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 62                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 5                  
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -94                
Correct output: -39                 | Program output: 6                  
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: 86                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_dup_times exec_swap () (integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_y_when_autoconstructing (boolean_or integer_yankdup integer_add integer_dup_times) exec_if (integer_flush integer_lte) (integer_div integer_fromboolean exec_do*while () integer_lt boolean_xor exec_empty boolean_and) exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (boolean_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush) (integer_flush boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and)))) ())))))
Lexicase best errors: [1 0 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 85
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_dup_times exec_swap () (integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_y_when_autoconstructing (boolean_or integer_yankdup integer_add integer_dup_times) exec_if (integer_flush integer_lte) (integer_div integer_fromboolean exec_do*while () integer_lt boolean_xor exec_empty boolean_and) exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (boolean_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () (exec_yankdup boolean_or exec_flush) (integer_flush boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and)))) ())))))
Zero cases best errors: [1 0 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 85
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (54 448 821 43 664 1000 44 445 445 448)
Population mean number of elite cases: 4.41
Count of perfect (error zero) individuals by case: (54 448 821 43 664 0 44 445 445 448)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_shove exec_empty boolean_and exec_y_when_autoconstructing () exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_do*while () exec_yankdup boolean_or exec_flush integer_flush tag_boolean_180) (integer_stackdepth exec_rot (integer_fromboolean) () ())))) ())) () ()) () ()) () ()) () ()))
Errors: [1 0 0 1 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 58
Size: 89
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 6.588
Median total errors in population: 7
Error averages by case: (0.946 0.552 0.179 0.957 0.336 1.0 0.956 0.555 0.555 0.552)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 55.096
Average program size in population (points): 83.358
Average percent parens in population: 0.338
Minimum age in population: 19.623046875
Maximum age in population: 24.3291015625
Average age in population: 22.28918994140625
Median age in population: 22.32427978515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6675696
--- Timings ---
Current time: 1559583709843 milliseconds
Total Time:          42.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.4 seconds, 67.3%
Fitness Testing:      7.4 seconds, 17.6%
Report:               6.3 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 13                 
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: 74                 
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 47                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 95                 
Correct output: 55                  | Program output: 71                 
Correct output: 60                  | Program output: 96                 
Correct output: 7                   | Program output: 7                  
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 74                 
Correct output: 28                  | Program output: 87                 
Correct output: 7                   | Program output: 47                 
Correct output: 9                   | Program output: 26                 
Correct output: 37                  | Program output: 37                 
Correct output: 40                  | Program output: 58                 
Correct output: 6                   | Program output: 70                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 88                 
Correct output: 15                  | Program output: 90                 
Correct output: 74                  | Program output: 93                 
Correct output: 5                   | Program output: 93                 
Correct output: -64                 | Program output: -64                
Correct output: -18                 | Program output: 94                 
Correct output: 1                   | Program output: 49                 
Correct output: -88                 | Program output: 68                 
Correct output: -69                 | Program output: -69                
Correct output: 6                   | Program output: 6                  
Correct output: -78                 | Program output: -55                
Correct output: -28                 | Program output: 33                 
Correct output: -48                 | Program output: 32                 
Correct output: -97                 | Program output: -18                
Correct output: -29                 | Program output: 14                 
Correct output: -20                 | Program output: 28                 
Correct output: -86                 | Program output: 94                 
Correct output: -10                 | Program output: 94                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: -77                
Correct output: -14                 | Program output: 92                 
Correct output: -54                 | Program output: 67                 
Correct output: -95                 | Program output: -43                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: 69                 
Correct output: -63                 | Program output: -63                
Correct output: -47                 | Program output: -12                
Correct output: -95                 | Program output: -24                
Correct output: -83                 | Program output: 56                 
Correct output: -20                 | Program output: -20                
Correct output: -14                 | Program output: 80                 
Correct output: -73                 | Program output: 56                 
Correct output: -80                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -29                 | Program output: -29                
Correct output: -79                 | Program output: -79                
Correct output: -82                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: -28                
Correct output: -45                 | Program output: -12                
Correct output: 10                  | Program output: 90                 
Correct output: -54                 | Program output: -3                 
Correct output: -83                 | Program output: -40                
Correct output: -43                 | Program output: 27                 
Correct output: -7                  | Program output: -7                 
Correct output: -66                 | Program output: -66                
Correct output: -64                 | Program output: 37                 
Correct output: -14                 | Program output: -14                
Correct output: 12                  | Program output: 38                 
Correct output: 10                  | Program output: 41                 
Correct output: -9                  | Program output: 43                 
Correct output: -77                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: 83                 
Correct output: -86                 | Program output: -14                
Correct output: -72                 | Program output: -55                
Correct output: -17                 | Program output: -9                 
Correct output: 7                   | Program output: 7                  
Correct output: -54                 | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -54                 | Program output: 24                 
Correct output: -82                 | Program output: -61                
Correct output: -91                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 exec_y_when_autoconstructing (boolean_or integer_yankdup integer_add integer_dup_times) exec_if (integer_flush integer_lte) (integer_div integer_fromboolean boolean_eq) integer_lt boolean_xor exec_shove (in2 boolean_rot integer_empty exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and integer_eq) (exec_rot () (exec_noop print_integer -17 exec_s (boolean_xor exec_empty boolean_empty exec_y_when_autoconstructing (integer_gt integer_dec in1 exec_dup (boolean_shove integer_stackdepth integer_empty) exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if (boolean_shove boolean_yank) (boolean_invert_first_then_and in1)) boolean_invert_second_then_and) () ()) ()) ())))
Lexicase best errors: [0 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 86
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 exec_y_when_autoconstructing (boolean_or integer_yankdup integer_add integer_dup_times) exec_if (integer_flush integer_lte) (integer_div integer_fromboolean boolean_eq) integer_lt boolean_xor exec_shove (in2 boolean_rot integer_empty exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and integer_eq) (exec_rot () (exec_noop print_integer -17 exec_s (boolean_xor exec_empty boolean_empty exec_y_when_autoconstructing (integer_gt integer_dec in1 exec_dup (boolean_shove integer_stackdepth integer_empty) exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if (boolean_shove boolean_yank) (boolean_invert_first_then_and in1)) boolean_invert_second_then_and) () ()) ()) ())))
Zero cases best errors: [0 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 86
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (25 140 138 503 281 868 524 896 511 896)
Population mean number of elite cases: 4.78
Count of perfect (error zero) individuals by case: (25 140 138 503 281 868 524 896 511 896)
Population mean number of perfect (error zero) cases: 4.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean})
Best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and integer_empty integer_gt in2 boolean_rot integer_empty exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times integer_lte) (integer_inc integer_max integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (integer_lt) (exec_yankdup boolean_or exec_flush integer_flush boolean_dup_times) integer_stackdepth exec_rot (integer_fromboolean) () ())) ()))
Errors: [0 0 0 1 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 45
Size: 59
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 5.218
Median total errors in population: 4
Error averages by case: (0.975 0.86 0.862 0.497 0.719 0.132 0.476 0.104 0.489 0.104)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.346
Average program size in population (points): 80.005
Average percent parens in population: 0.331
Minimum age in population: 21.0673828125
Maximum age in population: 25.8994140625
Average age in population: 23.88800311279297
Median age in population: 23.950439453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7090210
--- Timings ---
Current time: 1559583712386 milliseconds
Total Time:          44.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.2 seconds, 67.4%
Fitness Testing:      7.8 seconds, 17.5%
Report:               6.7 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 463
Test mean error for best: 0.46300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 62                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 5                  
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -94                
Correct output: -39                 | Program output: 6                  
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: 86                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (integer_yank exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () () ()) ()))) ()))) () ()) () ()) () ()) () ()))
Lexicase best errors: [0 1 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 80
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (integer_yank exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (exec_s () () ()) ()))) ()))) () ()) () ()) () ()) () ()))
Zero cases best errors: [0 1 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 80
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (377 480 483 897 378 341 341 4 897 348)
Population mean number of elite cases: 4.55
Count of perfect (error zero) individuals by case: (377 480 483 897 378 341 341 4 897 348)
Population mean number of perfect (error zero) cases: 4.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (print_boolean exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max integer_inc integer_max exec_pop (boolean_pop exec_while (boolean_not boolean_or exec_pop () in1 exec_when (integer_empty exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) boolean_invert_second_then_and)))) ())) () ()) () ()))
Errors: [0 1 1 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 49
Size: 71
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 5.454
Median total errors in population: 6
Error averages by case: (0.623 0.52 0.517 0.103 0.622 0.659 0.659 0.996 0.103 0.652)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.505
Average program size in population (points): 75.666
Average percent parens in population: 0.316
Minimum age in population: 22.765869140625
Maximum age in population: 27.4267578125
Average age in population: 25.56544586181641
Median age in population: 25.62216186523438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7515721
--- Timings ---
Current time: 1559583714961 milliseconds
Total Time:          47.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.0 seconds, 67.6%
Fitness Testing:      8.2 seconds, 17.4%
Report:               7.0 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 463
Test mean error for best: 0.46300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 62                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 5                  
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -94                
Correct output: -39                 | Program output: 6                  
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: 86                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times) (boolean_and integer_eq exec_rot (exec_noop boolean_xor exec_swap (exec_s () (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while () boolean_not boolean_or print_newline exec_if (exec_s (exec_yankdup boolean_or integer_dup_items integer_flush tag_boolean_180 integer_stackdepth exec_do*range (integer_fromboolean)) () ()) ()))) ()))) ()) ()) () ()) ()) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 91
Percent parens: 0.363
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_180} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times) (boolean_and integer_eq exec_rot (exec_noop boolean_xor exec_swap (exec_s () (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_while () boolean_not boolean_or print_newline exec_if (exec_s (exec_yankdup boolean_or integer_dup_items integer_flush tag_boolean_180 integer_stackdepth exec_do*range (integer_fromboolean)) () ()) ()))) ()))) ()) ()) () ()) ()) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 91
Percent parens: 0.363
--- Lexicase Population Statistics ---
Count of elite individuals by case: (468 513 513 575 465 731 469 113 113 469)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (468 513 513 575 465 731 469 113 113 469)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_noop boolean_xor -17 exec_s (boolean_shove exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup boolean_yankdup) integer_add integer_max exec_pop (integer_empty) exec_pop () in1 exec_s (integer_empty) (exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and))) ()))) () ()) () ()) () ()))
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 51
Size: 78
Percent parens: 0.346
--- Population Statistics ---
Average total errors in population: 5.571
Median total errors in population: 6
Error averages by case: (0.532 0.487 0.487 0.425 0.535 0.269 0.531 0.887 0.887 0.531)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.882
Average program size in population (points): 80.099
Average percent parens in population: 0.325
Minimum age in population: 23.765869140625
Maximum age in population: 29.12249755859375
Average age in population: 27.02579493713379
Median age in population: 27.12279510498047
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.761
Total error diversity:				 0.009
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7918358
--- Timings ---
Current time: 1559583717567 milliseconds
Total Time:          50.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.9 seconds, 67.8%
Fitness Testing:      8.6 seconds, 17.2%
Report:               7.3 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 463
Test mean error for best: 0.46300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 62                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 5                  
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -94                
Correct output: -39                 | Program output: 6                  
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: 86                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction exec_k})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor exec_swap (exec_s (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_when (integer_pop exec_when (exec_dup_times (exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 exec_dup (integer_rot in3 integer_empty) exec_pop () in1 exec_empty in4 exec_k () ()))))))))) () ()) ()) () ()) () ()) () ()))
Lexicase best errors: [1 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 82
Percent parens: 0.378
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction exec_k})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor exec_swap (exec_s (boolean_xor exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_when (integer_pop exec_when (exec_dup_times (exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 exec_dup (integer_rot in3 integer_empty) exec_pop () in1 exec_empty in4 exec_k () ()))))))))) () ()) ()) () ()) () ()) () ()))
Zero cases best errors: [1 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 82
Percent parens: 0.378
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 4 10 599 597 900 154 597 884 786)
Population mean number of elite cases: 4.53
Count of perfect (error zero) individuals by case: (4 4 10 599 597 900 154 597 884 786)
Population mean number of perfect (error zero) cases: 4.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline})
Best program: (exec_noop exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_empty integer_dup_times boolean_and integer_eq exec_rot (exec_noop boolean_xor -17 exec_s (boolean_shove exec_empty boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (exec_when (exec_dup_times (integer_yankdup integer_lte exec_pop (integer_max exec_pop (boolean_pop exec_while (boolean_not)) boolean_or print_newline)))))) ()))) () ()) () ()) () ()) () ()))
Errors: [1 1 1 0 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 56
Size: 85
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 5.465
Median total errors in population: 4
Error averages by case: (0.996 0.996 0.99 0.401 0.403 0.1 0.846 0.403 0.116 0.214)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.584
Average program size in population (points): 79.764
Average percent parens in population: 0.339
Minimum age in population: 24.765869140625
Maximum age in population: 30.5999755859375
Average age in population: 28.68473925018311
Median age in population: 28.81771850585938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.007
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 8308074
--- Timings ---
Current time: 1559583720219 milliseconds
Total Time:          52.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.8 seconds, 68.0%
Fitness Testing:      9.0 seconds, 17.1%
Report:               7.7 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 531
Test mean error for best: 0.53100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 3                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: 74                 
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 67                 
Correct output: 1                   | Program output: 55                 
Correct output: 55                  | Program output: 67                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 81                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 95                 
Correct output: 7                   | Program output: 37                 
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 89                 
Correct output: 40                  | Program output: 92                 
Correct output: 6                   | Program output: 74                 
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 91                 
Correct output: 74                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -64                
Correct output: -18                 | Program output: 57                 
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -55                
Correct output: -28                 | Program output: 30                 
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -18                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -13                
Correct output: -86                 | Program output: 11                 
Correct output: -10                 | Program output: 68                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: -77                
Correct output: -14                 | Program output: 12                 
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -43                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: 94                 
Correct output: -63                 | Program output: -63                
Correct output: -47                 | Program output: -12                
Correct output: -95                 | Program output: -24                
Correct output: -83                 | Program output: 86                 
Correct output: -20                 | Program output: -20                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 72                 
Correct output: -98                 | Program output: -98                
Correct output: -29                 | Program output: -29                
Correct output: -79                 | Program output: -79                
Correct output: -82                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: -28                
Correct output: -45                 | Program output: -12                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -3                 
Correct output: -83                 | Program output: -40                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: -7                 
Correct output: -66                 | Program output: -66                
Correct output: -64                 | Program output: -48                
Correct output: -14                 | Program output: -14                
Correct output: 12                  | Program output: 47                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -14                
Correct output: -72                 | Program output: -55                
Correct output: -17                 | Program output: -9                 
Correct output: 7                   | Program output: 90                 
Correct output: -54                 | Program output: 37                 
Correct output: -63                 | Program output: -63                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -61                
Correct output: -91                 | Program output: 97                 
Correct output: -69                 | Program output: -69                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and integer_empty in2 integer_rot boolean_and integer_empty exec_shove (exec_shove (boolean_rot integer_empty exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and integer_eq) (exec_rot () (integer_empty) (exec_pop () in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and)) ())) ()))))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 72
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and integer_empty in2 integer_rot boolean_and integer_empty exec_shove (exec_shove (boolean_rot integer_empty exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and integer_eq) (exec_rot () (integer_empty) (exec_pop () in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and)) ())) ()))))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 72
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (276 222 275 226 2 225 923 276 226 363)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (276 222 275 226 2 225 923 276 226 363)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and integer_empty in2 integer_rot boolean_and integer_empty exec_shove (exec_shove (boolean_rot integer_empty exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and integer_eq) (exec_rot () (integer_empty) (exec_pop () in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and)) ())) ()))))
Errors: [0 1 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 50
Size: 72
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.986
Median total errors in population: 7
Error averages by case: (0.724 0.778 0.725 0.774 0.998 0.775 0.077 0.724 0.774 0.637)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.864
Average program size in population (points): 75.026
Average percent parens in population: 0.307
Minimum age in population: 27.2659912109375
Maximum age in population: 32.422119140625
Average age in population: 30.96817359161377
Median age in population: 31.04727935791016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.145
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8690233
--- Timings ---
Current time: 1559583722814 milliseconds
Total Time:          55.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.6 seconds, 68.2%
Fitness Testing:      9.4 seconds, 16.9%
Report:               8.1 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 532
Test mean error for best: 0.53200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 3                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 75                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 62                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 23                 
Correct output: 42                  | Program output: 75                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 76                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 100                
Correct output: 1                   | Program output: 0                  
Correct output: 13                  | Program output: 42                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: 87                 
Correct output: -69                 | Program output: -69                
Correct output: 6                   | Program output: 16                 
Correct output: -78                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 91                 
Correct output: -97                 | Program output: -18                
Correct output: -29                 | Program output: -20                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: -77                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: 72                 
Correct output: -95                 | Program output: -43                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: -63                
Correct output: -47                 | Program output: -12                
Correct output: -95                 | Program output: -24                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -20                
Correct output: -14                 | Program output: 37                 
Correct output: -73                 | Program output: 79                 
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -98                
Correct output: -29                 | Program output: -29                
Correct output: -79                 | Program output: -79                
Correct output: -82                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: -28                
Correct output: -45                 | Program output: -12                
Correct output: 10                  | Program output: 31                 
Correct output: -54                 | Program output: -3                 
Correct output: -83                 | Program output: -40                
Correct output: -43                 | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: -66                 | Program output: -66                
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: -14                
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 33                 
Correct output: -9                  | Program output: 16                 
Correct output: -77                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: 51                 
Correct output: -86                 | Program output: -14                
Correct output: -72                 | Program output: -55                
Correct output: -17                 | Program output: -9                 
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and integer_empty exec_shove (in3 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup boolean_yankdup) integer_add integer_max exec_pop (exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and)))) ()))) () ())))
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 83
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and integer_empty exec_shove (in3 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup boolean_yankdup) integer_add integer_max exec_pop (exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and)))) ()))) () ())))
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 83
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (726 537 134 255 568 896 543 131 164 543)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (726 537 134 255 568 896 543 131 164 543)
Population mean number of perfect (error zero) cases: 4.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and integer_empty exec_shove (in3 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup boolean_yankdup) integer_add integer_max exec_pop (exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and)))) ()))) () ())))
Errors: [0 0 0 1 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 59
Size: 83
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 5.503
Median total errors in population: 4
Error averages by case: (0.274 0.463 0.866 0.745 0.432 0.104 0.457 0.869 0.836 0.457)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.837
Average program size in population (points): 73.498
Average percent parens in population: 0.307
Minimum age in population: 28.2659912109375
Maximum age in population: 33.68059158325195
Average age in population: 32.49379812431335
Median age in population: 32.44802284240723
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 216
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 216
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.009
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 9053893
--- Timings ---
Current time: 1559583725430 milliseconds
Total Time:          57.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.5 seconds, 68.3%
Fitness Testing:      9.7 seconds, 16.8%
Report:               8.5 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 561
Test mean error for best: 0.56100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: 72                 
Correct output: -80                 | Program output: -32                
Correct output: -11                 | Program output: -11                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -41                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: 74                 
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 75                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 62                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 23                 
Correct output: 42                  | Program output: 75                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 76                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 100                
Correct output: 1                   | Program output: 50                 
Correct output: 13                  | Program output: 42                 
Correct output: 15                  | Program output: 15                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 71                 
Correct output: -64                 | Program output: 32                 
Correct output: -18                 | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -42                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 16                 
Correct output: -78                 | Program output: -11                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -20                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -86                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -44                
Correct output: -77                 | Program output: -6                 
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: 1                  
Correct output: -86                 | Program output: -5                 
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -51                
Correct output: -47                 | Program output: -42                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -20                 | Program output: 4                  
Correct output: -14                 | Program output: 37                 
Correct output: -73                 | Program output: 79                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 4                  
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -6                 
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: -38                
Correct output: 10                  | Program output: 31                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: 87                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -34                
Correct output: -14                 | Program output: 96                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 9                  
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -7                 
Correct output: -58                 | Program output: 30                 
Correct output: -38                 | Program output: 51                 
Correct output: -86                 | Program output: -54                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -58                
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -90                
Correct output: -69                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 integer_mod integer_rot boolean_and integer_empty exec_shove (in3 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup boolean_yankdup) integer_add integer_max exec_pop (exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and)))) ()))) () ())))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 83
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 integer_mod integer_rot boolean_and integer_empty exec_shove (in3 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup boolean_yankdup) integer_add integer_max exec_pop (exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and)))) ()))) () ())))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 83
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (924 890 919 919 169 26 671 221 173 212)
Population mean number of elite cases: 5.12
Count of perfect (error zero) individuals by case: (924 890 919 919 169 26 671 221 173 212)
Population mean number of perfect (error zero) cases: 5.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 integer_mod integer_rot boolean_and integer_empty exec_shove (in3 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup boolean_yankdup) integer_add integer_max exec_pop (exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and)))) ()))) () ())))
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 59
Size: 83
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 4.876
Median total errors in population: 5
Error averages by case: (0.076 0.11 0.081 0.081 0.831 0.974 0.329 0.779 0.827 0.788)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.771
Average program size in population (points): 79.654
Average percent parens in population: 0.299
Minimum age in population: 30.68002319335938
Maximum age in population: 35.42146301269531
Average age in population: 33.10270820808411
Median age in population: 32.95832061767578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 191
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.009
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9474461
--- Timings ---
Current time: 1559583728086 milliseconds
Total Time:          60.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.3 seconds, 68.4%
Fitness Testing:     10.1 seconds, 16.7%
Report:               8.9 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 463
Test mean error for best: 0.46300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -14                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -67                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -47                
Correct output: -77                 | Program output: -30                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -10                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: 62                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -54                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -50                
Correct output: -29                 | Program output: 50                 
Correct output: -79                 | Program output: 5                  
Correct output: -82                 | Program output: -49                
Correct output: -98                 | Program output: -94                
Correct output: -39                 | Program output: 6                  
Correct output: -45                 | Program output: -45                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: 86                 
Correct output: -66                 | Program output: 80                 
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer integer_shove boolean_and) (exec_s (exec_rot (exec_do*while (exec_do*while (in1 integer_lt integer_max in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (boolean_and) (integer_dec exec_rot (exec_empty integer_dup_times boolean_and integer_eq) (exec_rot (integer_empty) (exec_pop () in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush exec_dup_times (exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) boolean_invert_second_then_and) ()) ()) ()) ()))))) ())) () ()) () ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 101
Percent parens: 0.366
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer integer_shove boolean_and) (exec_s (exec_rot (exec_do*while (exec_do*while (in1 integer_lt integer_max in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup exec_pop (boolean_pop exec_while (boolean_not) boolean_or print_newline exec_if (boolean_and) (integer_dec exec_rot (exec_empty integer_dup_times boolean_and integer_eq) (exec_rot (integer_empty) (exec_pop () in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush exec_dup_times (exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) boolean_invert_second_then_and) ()) ()) ()) ()))))) ())) () ()) () ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 101
Percent parens: 0.366
--- Lexicase Population Statistics ---
Count of elite individuals by case: (647 545 560 343 893 72 70 440 144 555)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (647 545 560 343 893 72 70 440 144 555)
Population mean number of perfect (error zero) cases: 4.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (exec_noop integer_fromboolean exec_yank in3 boolean_rot integer_empty exec_swap (print_integer boolean_yank boolean_and) (exec_s (exec_rot (exec_s (exec_s (exec_rot (exec_empty integer_dup_times boolean_and exec_do*while (in1 integer_lt boolean_shove in3 integer_empty) exec_pop () in1 exec_if (integer_pop exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_or print_newline exec_if (exec_s () (exec_when (exec_dup_times (integer_yankdup integer_lte) integer_inc integer_max exec_pop (boolean_pop exec_dup (boolean_shove integer_stackdepth integer_empty) exec_pop () integer_min exec_yankdup integer_empty) exec_flush integer_empty) exec_flush integer_dup exec_if () (boolean_shove boolean_yank) boolean_invert_first_then_and in1) (boolean_invert_second_then_and)) ()))) ()) () ()) () ()) () ()) () ()) () ()))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 65
Size: 102
Percent parens: 0.363
--- Population Statistics ---
Average total errors in population: 5.731
Median total errors in population: 5
Error averages by case: (0.353 0.455 0.44 0.657 0.107 0.928 0.93 0.56 0.856 0.445)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.834
Average program size in population (points): 79.298
Average percent parens in population: 0.296
Minimum age in population: 32.25675201416016
Maximum age in population: 36.60806083679199
Average age in population: 34.20599396657944
Median age in population: 34.13061904907227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 166
Genome diversity (% unique genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.01
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.16
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9925231
--- Timings ---
Current time: 1559583730729 milliseconds
Total Time:          63.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.2 seconds, 68.5%
Fitness Testing:     10.5 seconds, 16.7%
Report:               9.3 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 3                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 75                 
Correct output: 28                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 55                  | Program output: 62                 
Correct output: 60                  | Program output: 62                 
Correct output: 7                   | Program output: 60                 
Correct output: 12                  | Program output: 23                 
Correct output: 42                  | Program output: 75                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 37                  | Program output: 77                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 100                
Correct output: 1                   | Program output: 0                  
Correct output: 13                  | Program output: 42                 
Correct output: 15                  | Program output: 15                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -18                 | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: 87                 
Correct output: -69                 | Program output: -69                
Correct output: 6                   | Program output: 16                 
Correct output: -78                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -18                
Correct output: -29                 | Program output: -20                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -86                
Correct output: -10                 | Program output: 19                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: -77                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -43                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -63                
Correct output: -47                 | Program output: -12                
Correct output: -95                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -20                 | Program output: -20                
Correct output: -14                 | Program output: 37                 
Correct output: -73                 | Program output: 79                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -29                 | Program output: -29                
Correct output: -79                 | Program output: -79                
Correct output: -82                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: -28                
Correct output: -45                 | Program output: -12                
Correct output: 10                  | Program output: 31                 
Correct output: -54                 | Program output: -3                 
Correct output: -83                 | Program output: -40                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -66                 | Program output: -66                
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: -14                
Correct output: 12                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: 51                 
Correct output: -86                 | Program output: -14                
Correct output: -72                 | Program output: -55                
Correct output: -17                 | Program output: -9                 
Correct output: 7                   | Program output: 17                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -61                
Correct output: -91                 | Program output: -90                
Correct output: -69                 | Program output: -69                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove})
Lexicase best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and exec_noop in4 in2 integer_rot boolean_and integer_empty exec_shove (in3 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ())))) () ())))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove})
Zero cases best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and exec_noop in4 in2 integer_rot boolean_and integer_empty exec_shove (in3 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ())))) () ())))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 63 202 62 622 710 891 911 886 99)
Population mean number of elite cases: 4.45
Count of perfect (error zero) individuals by case: (6 63 202 62 622 710 891 911 886 99)
Population mean number of perfect (error zero) cases: 4.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove})
Best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and integer_empty exec_shove (in3 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (exec_do*while (exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ())))) () ())))
Errors: [1 0 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 47
Size: 67
Percent parens: 0.299
--- Population Statistics ---
Average total errors in population: 5.548
Median total errors in population: 5
Error averages by case: (0.994 0.937 0.798 0.938 0.378 0.29 0.109 0.089 0.114 0.901)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.815
Average program size in population (points): 81.255
Average percent parens in population: 0.336
Minimum age in population: 33.76553344726562
Maximum age in population: 38.04478478431702
Average age in population: 36.14389367413521
Median age in population: 36.20770502090454
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.008
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 10286798
--- Timings ---
Current time: 1559583733328 milliseconds
Total Time:          65.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.1 seconds, 68.6%
Fitness Testing:     10.9 seconds, 16.6%
Report:               9.6 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 362
Test mean error for best: 0.36200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 3                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: 74                 
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 55                  | Program output: 62                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 37                  | Program output: 77                 
Correct output: 40                  | Program output: 92                 
Correct output: 6                   | Program output: 74                 
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 15                 
Correct output: 74                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -64                
Correct output: -18                 | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -55                
Correct output: -28                 | Program output: 30                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -18                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -13                
Correct output: -86                 | Program output: -86                
Correct output: -10                 | Program output: 19                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: -77                
Correct output: -14                 | Program output: 12                 
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -43                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -63                
Correct output: -47                 | Program output: -12                
Correct output: -95                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -20                 | Program output: -20                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -29                 | Program output: -29                
Correct output: -79                 | Program output: -79                
Correct output: -82                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: -28                
Correct output: -45                 | Program output: -12                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -3                 
Correct output: -83                 | Program output: -40                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -66                 | Program output: -66                
Correct output: -64                 | Program output: -48                
Correct output: -14                 | Program output: -14                
Correct output: 12                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -14                
Correct output: -72                 | Program output: -55                
Correct output: -17                 | Program output: -9                 
Correct output: 7                   | Program output: 17                 
Correct output: -54                 | Program output: 37                 
Correct output: -63                 | Program output: -63                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -61                
Correct output: -91                 | Program output: -90                
Correct output: -69                 | Program output: -69                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove})
Lexicase best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and integer_empty exec_shove (in3 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 66
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove})
Zero cases best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and integer_empty exec_shove (in3 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 66
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (687 301 566 563 578 570 565 299 58 234)
Population mean number of elite cases: 4.42
Count of perfect (error zero) individuals by case: (687 301 566 563 578 570 565 299 58 234)
Population mean number of perfect (error zero) cases: 4.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove})
Best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and integer_empty exec_shove (in3 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())))
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 47
Size: 66
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 5.579
Median total errors in population: 5
Error averages by case: (0.313 0.699 0.434 0.437 0.422 0.43 0.435 0.701 0.942 0.766)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.811
Average program size in population (points): 71.233
Average percent parens in population: 0.299
Minimum age in population: 34.77034378051758
Maximum age in population: 39.53683614730835
Average age in population: 37.6288459789753
Median age in population: 37.71850454807281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.009
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.17
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 10669824
--- Timings ---
Current time: 1559583735913 milliseconds
Total Time:          68.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.9 seconds, 68.7%
Fitness Testing:     11.2 seconds, 16.4%
Report:              10.0 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 416
Test mean error for best: 0.41600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 1
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 3                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -64                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -1824              
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: -77                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -43                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: -63                
Correct output: -47                 | Program output: -12                
Correct output: -95                 | Program output: -24                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -20                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -98                
Correct output: -29                 | Program output: -2979              
Correct output: -79                 | Program output: -79                
Correct output: -82                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: -28                
Correct output: -45                 | Program output: -12                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -3                 
Correct output: -83                 | Program output: -40                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: -721               
Correct output: -66                 | Program output: -6652              
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: -14                
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -14                
Correct output: -72                 | Program output: -5588              
Correct output: -17                 | Program output: -9                 
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove})
Lexicase best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 77
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove})
Zero cases best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 77
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (430 430 767 791 45 768 447 73 421 767)
Population mean number of elite cases: 4.94
Count of perfect (error zero) individuals by case: (430 430 767 791 45 768 447 73 421 767)
Population mean number of perfect (error zero) cases: 4.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -17} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove})
Best program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 54
Size: 77
Percent parens: 0.299
--- Population Statistics ---
Average total errors in population: 5.061
Median total errors in population: 6
Error averages by case: (0.57 0.57 0.233 0.209 0.955 0.232 0.553 0.927 0.579 0.233)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.344
Average program size in population (points): 67.978
Average percent parens in population: 0.303
Minimum age in population: 37.53412795066833
Maximum age in population: 40.51208490133286
Average age in population: 39.12857326501608
Median age in population: 39.04615005850792
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 235
Genome diversity (% unique genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 236
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.011
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 11023393
--- Timings ---
Current time: 1559583738558 milliseconds
Total Time:          70.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.8 seconds, 68.8%
Fitness Testing:     11.6 seconds, 16.3%
Report:              10.4 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 25
Successful program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 77


Auto-simplifying with starting size: 77
step: 0
program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 77

step: 500
program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 77

step: 1000
program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 77

step: 1500
program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 77

step: 2000
program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 77

step: 2500
program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 77

step: 3000
program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 77

step: 3500
program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 77

step: 4000
program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 77

step: 4500
program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 77

step: 5000
program: (boolean_dup_times exec_swap () (exec_do*range (in4 in2 boolean_invert_second_then_and boolean_and in4 in2 integer_rot boolean_and exec_s_when_autoconstructing (exec_shove (in3 boolean_rot in2 integer_rot boolean_and integer_empty exec_shove (in2 boolean_rot boolean_yankdup exec_noop print_integer boolean_yank boolean_and) integer_dec exec_rot (exec_empty integer_dup_times boolean_and exec_y_when_autoconstructing (boolean_yankdup exec_do*while (in1 integer_lt in1 exec_if (integer_pop exec_noop print_integer -17 exec_s (integer_stackdepth integer_empty) (exec_pop () in1 exec_when (integer_empty) exec_flush integer_dup exec_if () (boolean_shove)) ()) ()))) () ())) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 77

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 416
Test mean error for best: 0.41600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 1
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 3                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -33                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: 47                  | Program output: 58                 
Correct output: 28                  | Program output: 63                 
Correct output: 1                   | Program output: 34                 
Correct output: 55                  | Program output: 55                 
Correct output: 60                  | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 32                 
Correct output: 37                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 40                 
Correct output: 1                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 15                  | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -64                
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: 6                   | Program output: 9                  
Correct output: -78                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: 77                 
Correct output: -97                 | Program output: -1824              
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -86                 | Program output: -69                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: -77                
Correct output: -14                 | Program output: -14                
Correct output: -54                 | Program output: -15                
Correct output: -95                 | Program output: -43                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: 28                 
Correct output: -63                 | Program output: -63                
Correct output: -47                 | Program output: -12                
Correct output: -95                 | Program output: -24                
Correct output: -83                 | Program output: -11                
Correct output: -20                 | Program output: -20                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: 23                 
Correct output: -98                 | Program output: -98                
Correct output: -29                 | Program output: -2979              
Correct output: -79                 | Program output: -79                
Correct output: -82                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: -28                
Correct output: -45                 | Program output: -12                
Correct output: 10                  | Program output: 10                 
Correct output: -54                 | Program output: -3                 
Correct output: -83                 | Program output: -40                
Correct output: -43                 | Program output: 39                 
Correct output: -7                  | Program output: -721               
Correct output: -66                 | Program output: -6652              
Correct output: -64                 | Program output: -64                
Correct output: -14                 | Program output: -14                
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 15                 
Correct output: -9                  | Program output: 15                 
Correct output: -77                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -38                
Correct output: -86                 | Program output: -14                
Correct output: -72                 | Program output: -5588              
Correct output: -17                 | Program output: -9                 
Correct output: 7                   | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
;;******************************
