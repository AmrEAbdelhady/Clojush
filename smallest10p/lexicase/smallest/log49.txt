Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-83 -83 -83 70] -83] [[-29 -55 -55 -55] -55] [[-69 -69 -69 -69] -69] [[-46 -46 69 -46] -46] [[-60 -60 11 -60] -60] [[96 96 78 96] 78] [[53 -71 -71 -71] -71] [[-88 -88 -88 60] -88] [[-23 33 33 33] -23] [[21 -82 21 21] -82] [(94 94 94 94) 94] [(33 33 33 33) 33] [(-3 -3 -3 -3) -3] [(-1 -1 -1 -1) -1] [(-33 -33 -33 -33) -33] [(31 73 6 25) 6] [(100 83 7 64) 7] [(97 28 41 91) 28] [(4 96 33 82) 4] [(85 39 57 35) 35] [(46 4 68 53) 4] [(75 36 86 75) 36] [(11 38 53 26) 11] [(44 100 84 75) 44] [(89 99 94 97) 89] [(46 76 60 60) 46] [(92 40 80 13) 13] [(78 98 73 16) 16] [(74 98 32 36) 32] [(52 50 27 41) 27] [(38 35 90 86) 35] [(92 13 89 4) 4] [(12 68 85 100) 12] [(10 71 68 12) 10] [(13 39 55 72) 13] [(31 -40 45 25) -40] [(71 25 2 -52) -52] [(-30 -9 14 -87) -87] [(3 38 14 82) 3] [(-60 -72 97 -88) -88] [(33 53 2 -7) -7] [(31 66 48 -81) -81] [(-37 22 9 -1) -37] [(86 -39 35 -87) -87] [(-19 -57 95 -44) -57] [(56 -36 -69 55) -69] [(33 -66 97 26) -66] [(-17 80 53 -100) -100] [(-58 9 -87 63) -87] [(-89 39 81 32) -89] [(45 -23 -71 22) -71] [(-17 18 -63 -55) -63] [(-59 22 -82 92) -82] [(-22 -22 -71 20) -71] [(9 -24 -85 96) -85] [(47 17 84 71) 17] [(27 -1 -52 61) -52] [(-37 53 73 88) -37] [(-34 -40 -70 4) -70] [(-15 -44 26 28) -44] [(-87 -30 21 -80) -87] [(64 -97 -34 7) -97] [(-81 -53 -43 43) -81] [(-67 -73 71 -80) -80] [(4 77 -31 -49) -49] [(25 65 -28 95) -28] [(-39 -62 -96 -67) -96] [(-69 -56 49 -30) -69] [(-91 -3 -5 14) -91] [(17 -58 -41 -81) -81] [(-96 19 93 -55) -96] [(-5 20 33 -77) -77] [(-63 -55 70 -78) -78] [(18 -91 -3 -60) -91] [(75 85 75 12) 12] [(37 -16 58 -79) -79] [(0 3 -37 70) -37] [(69 -19 -99 49) -99] [(-64 80 59 29) -64] [(-58 -8 -65 80) -65] [(83 -2 -25 -56) -56] [(-78 -64 94 -77) -78] [(-11 -45 -21 88) -45] [(86 23 -84 36) -84] [(14 -74 75 -98) -98] [(-47 79 -73 -52) -73] [(30 -33 -35 -42) -42] [(-35 -59 -100 3) -100] [(31 -38 -27 -97) -97] [(97 42 -85 -84) -85] [(45 80 -99 -24) -99] [(12 -45 -4 -56) -56] [(68 3 -54 43) -54] [(50 -60 -89 55) -89] [(-47 -19 33 -50) -50])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-83 -83 -83 70] -83]
Train Case:   6 | Input/Output: [[-29 -55 -55 -55] -55]
Train Case:   7 | Input/Output: [[-69 -69 -69 -69] -69]
Train Case:   8 | Input/Output: [[-46 -46 69 -46] -46]
Train Case:   9 | Input/Output: [[-60 -60 11 -60] -60]
Train Case:  10 | Input/Output: [[96 96 78 96] 78]
Train Case:  11 | Input/Output: [[53 -71 -71 -71] -71]
Train Case:  12 | Input/Output: [[-88 -88 -88 60] -88]
Train Case:  13 | Input/Output: [[-23 33 33 33] -23]
Train Case:  14 | Input/Output: [[21 -82 21 21] -82]
Train Case:  15 | Input/Output: [(94 94 94 94) 94]
Train Case:  16 | Input/Output: [(33 33 33 33) 33]
Train Case:  17 | Input/Output: [(-3 -3 -3 -3) -3]
Train Case:  18 | Input/Output: [(-1 -1 -1 -1) -1]
Train Case:  19 | Input/Output: [(-33 -33 -33 -33) -33]
Train Case:  20 | Input/Output: [(31 73 6 25) 6]
Train Case:  21 | Input/Output: [(100 83 7 64) 7]
Train Case:  22 | Input/Output: [(97 28 41 91) 28]
Train Case:  23 | Input/Output: [(4 96 33 82) 4]
Train Case:  24 | Input/Output: [(85 39 57 35) 35]
Train Case:  25 | Input/Output: [(46 4 68 53) 4]
Train Case:  26 | Input/Output: [(75 36 86 75) 36]
Train Case:  27 | Input/Output: [(11 38 53 26) 11]
Train Case:  28 | Input/Output: [(44 100 84 75) 44]
Train Case:  29 | Input/Output: [(89 99 94 97) 89]
Train Case:  30 | Input/Output: [(46 76 60 60) 46]
Train Case:  31 | Input/Output: [(92 40 80 13) 13]
Train Case:  32 | Input/Output: [(78 98 73 16) 16]
Train Case:  33 | Input/Output: [(74 98 32 36) 32]
Train Case:  34 | Input/Output: [(52 50 27 41) 27]
Train Case:  35 | Input/Output: [(38 35 90 86) 35]
Train Case:  36 | Input/Output: [(92 13 89 4) 4]
Train Case:  37 | Input/Output: [(12 68 85 100) 12]
Train Case:  38 | Input/Output: [(10 71 68 12) 10]
Train Case:  39 | Input/Output: [(13 39 55 72) 13]
Train Case:  40 | Input/Output: [(31 -40 45 25) -40]
Train Case:  41 | Input/Output: [(71 25 2 -52) -52]
Train Case:  42 | Input/Output: [(-30 -9 14 -87) -87]
Train Case:  43 | Input/Output: [(3 38 14 82) 3]
Train Case:  44 | Input/Output: [(-60 -72 97 -88) -88]
Train Case:  45 | Input/Output: [(33 53 2 -7) -7]
Train Case:  46 | Input/Output: [(31 66 48 -81) -81]
Train Case:  47 | Input/Output: [(-37 22 9 -1) -37]
Train Case:  48 | Input/Output: [(86 -39 35 -87) -87]
Train Case:  49 | Input/Output: [(-19 -57 95 -44) -57]
Train Case:  50 | Input/Output: [(56 -36 -69 55) -69]
Train Case:  51 | Input/Output: [(33 -66 97 26) -66]
Train Case:  52 | Input/Output: [(-17 80 53 -100) -100]
Train Case:  53 | Input/Output: [(-58 9 -87 63) -87]
Train Case:  54 | Input/Output: [(-89 39 81 32) -89]
Train Case:  55 | Input/Output: [(45 -23 -71 22) -71]
Train Case:  56 | Input/Output: [(-17 18 -63 -55) -63]
Train Case:  57 | Input/Output: [(-59 22 -82 92) -82]
Train Case:  58 | Input/Output: [(-22 -22 -71 20) -71]
Train Case:  59 | Input/Output: [(9 -24 -85 96) -85]
Train Case:  60 | Input/Output: [(47 17 84 71) 17]
Train Case:  61 | Input/Output: [(27 -1 -52 61) -52]
Train Case:  62 | Input/Output: [(-37 53 73 88) -37]
Train Case:  63 | Input/Output: [(-34 -40 -70 4) -70]
Train Case:  64 | Input/Output: [(-15 -44 26 28) -44]
Train Case:  65 | Input/Output: [(-87 -30 21 -80) -87]
Train Case:  66 | Input/Output: [(64 -97 -34 7) -97]
Train Case:  67 | Input/Output: [(-81 -53 -43 43) -81]
Train Case:  68 | Input/Output: [(-67 -73 71 -80) -80]
Train Case:  69 | Input/Output: [(4 77 -31 -49) -49]
Train Case:  70 | Input/Output: [(25 65 -28 95) -28]
Train Case:  71 | Input/Output: [(-39 -62 -96 -67) -96]
Train Case:  72 | Input/Output: [(-69 -56 49 -30) -69]
Train Case:  73 | Input/Output: [(-91 -3 -5 14) -91]
Train Case:  74 | Input/Output: [(17 -58 -41 -81) -81]
Train Case:  75 | Input/Output: [(-96 19 93 -55) -96]
Train Case:  76 | Input/Output: [(-5 20 33 -77) -77]
Train Case:  77 | Input/Output: [(-63 -55 70 -78) -78]
Train Case:  78 | Input/Output: [(18 -91 -3 -60) -91]
Train Case:  79 | Input/Output: [(75 85 75 12) 12]
Train Case:  80 | Input/Output: [(37 -16 58 -79) -79]
Train Case:  81 | Input/Output: [(0 3 -37 70) -37]
Train Case:  82 | Input/Output: [(69 -19 -99 49) -99]
Train Case:  83 | Input/Output: [(-64 80 59 29) -64]
Train Case:  84 | Input/Output: [(-58 -8 -65 80) -65]
Train Case:  85 | Input/Output: [(83 -2 -25 -56) -56]
Train Case:  86 | Input/Output: [(-78 -64 94 -77) -78]
Train Case:  87 | Input/Output: [(-11 -45 -21 88) -45]
Train Case:  88 | Input/Output: [(86 23 -84 36) -84]
Train Case:  89 | Input/Output: [(14 -74 75 -98) -98]
Train Case:  90 | Input/Output: [(-47 79 -73 -52) -73]
Train Case:  91 | Input/Output: [(30 -33 -35 -42) -42]
Train Case:  92 | Input/Output: [(-35 -59 -100 3) -100]
Train Case:  93 | Input/Output: [(31 -38 -27 -97) -97]
Train Case:  94 | Input/Output: [(97 42 -85 -84) -85]
Train Case:  95 | Input/Output: [(45 80 -99 -24) -99]
Train Case:  96 | Input/Output: [(12 -45 -4 -56) -56]
Train Case:  97 | Input/Output: [(68 3 -54 43) -54]
Train Case:  98 | Input/Output: [(50 -60 -89 55) -89]
Train Case:  99 | Input/Output: [(-47 -19 33 -50) -50]
Test Case:   0 | Input/Output: [[-37 7 -37 -37] -37]
Test Case:   1 | Input/Output: [[72 2 72 72] 2]
Test Case:   2 | Input/Output: [[52 47 47 47] 47]
Test Case:   3 | Input/Output: [[-55 -55 -55 59] -55]
Test Case:   4 | Input/Output: [[-35 -35 -2 -35] -35]
Test Case:   5 | Input/Output: [[13 -88 13 13] -88]
Test Case:   6 | Input/Output: [[23 23 23 36] 23]
Test Case:   7 | Input/Output: [[15 54 15 15] 15]
Test Case:   8 | Input/Output: [[-70 -64 -64 -64] -70]
Test Case:   9 | Input/Output: [[-93 -55 -93 -93] -93]
Test Case:  10 | Input/Output: [[-23 -57 -23 -23] -57]
Test Case:  11 | Input/Output: [[22 22 -99 22] -99]
Test Case:  12 | Input/Output: [[-57 -77 -77 -77] -77]
Test Case:  13 | Input/Output: [[21 -12 -12 -12] -12]
Test Case:  14 | Input/Output: [[-42 -42 84 -42] -42]
Test Case:  15 | Input/Output: [[62 49 49 49] 49]
Test Case:  16 | Input/Output: [[24 -2 24 24] -2]
Test Case:  17 | Input/Output: [[47 47 47 39] 39]
Test Case:  18 | Input/Output: [[-59 -35 -59 -59] -59]
Test Case:  19 | Input/Output: [[-77 -77 -77 -71] -77]
Test Case:  20 | Input/Output: [[62 88 62 62] 62]
Test Case:  21 | Input/Output: [[44 81 44 44] 44]
Test Case:  22 | Input/Output: [[36 98 98 98] 36]
Test Case:  23 | Input/Output: [[-85 -85 -85 36] -85]
Test Case:  24 | Input/Output: [[5 -24 -24 -24] -24]
Test Case:  25 | Input/Output: [[-86 -86 -75 -86] -86]
Test Case:  26 | Input/Output: [[-30 63 -30 -30] -30]
Test Case:  27 | Input/Output: [[-54 22 22 22] -54]
Test Case:  28 | Input/Output: [[-42 79 -42 -42] -42]
Test Case:  29 | Input/Output: [[43 -62 43 43] -62]
Test Case:  30 | Input/Output: [[-49 -15 -15 -15] -49]
Test Case:  31 | Input/Output: [[17 17 74 17] 17]
Test Case:  32 | Input/Output: [[4 -23 -23 -23] -23]
Test Case:  33 | Input/Output: [[-54 -34 -54 -54] -54]
Test Case:  34 | Input/Output: [[-83 -83 90 -83] -83]
Test Case:  35 | Input/Output: [[-47 -72 -72 -72] -72]
Test Case:  36 | Input/Output: [[65 65 -3 65] -3]
Test Case:  37 | Input/Output: [[73 73 -76 73] -76]
Test Case:  38 | Input/Output: [[91 84 84 84] 84]
Test Case:  39 | Input/Output: [[3 -73 -73 -73] -73]
Test Case:  40 | Input/Output: [[70 -3 -3 -3] -3]
Test Case:  41 | Input/Output: [[12 12 29 12] 12]
Test Case:  42 | Input/Output: [[21 -47 21 21] -47]
Test Case:  43 | Input/Output: [[-32 -32 -24 -32] -32]
Test Case:  44 | Input/Output: [[-45 -1 -1 -1] -45]
Test Case:  45 | Input/Output: [[-41 -41 -75 -41] -75]
Test Case:  46 | Input/Output: [[-53 -53 3 -53] -53]
Test Case:  47 | Input/Output: [[80 9 9 9] 9]
Test Case:  48 | Input/Output: [[85 75 75 75] 75]
Test Case:  49 | Input/Output: [[-9 73 73 73] -9]
Test Case:  50 | Input/Output: [[44 60 44 44] 44]
Test Case:  51 | Input/Output: [[75 75 75 34] 34]
Test Case:  52 | Input/Output: [[21 8 8 8] 8]
Test Case:  53 | Input/Output: [[15 15 20 15] 15]
Test Case:  54 | Input/Output: [[19 19 92 19] 19]
Test Case:  55 | Input/Output: [[2 2 2 62] 2]
Test Case:  56 | Input/Output: [[69 69 69 -41] -41]
Test Case:  57 | Input/Output: [[-39 -39 -39 -11] -39]
Test Case:  58 | Input/Output: [[58 -24 58 58] -24]
Test Case:  59 | Input/Output: [[91 91 91 26] 26]
Test Case:  60 | Input/Output: [[9 9 9 -39] -39]
Test Case:  61 | Input/Output: [[-71 -94 -71 -71] -94]
Test Case:  62 | Input/Output: [[59 -73 -73 -73] -73]
Test Case:  63 | Input/Output: [[-11 44 -11 -11] -11]
Test Case:  64 | Input/Output: [[-29 -4 -29 -29] -29]
Test Case:  65 | Input/Output: [[-94 -94 81 -94] -94]
Test Case:  66 | Input/Output: [[-24 -8 -24 -24] -24]
Test Case:  67 | Input/Output: [[-4 6 6 6] -4]
Test Case:  68 | Input/Output: [[-12 58 58 58] -12]
Test Case:  69 | Input/Output: [[-13 -13 -5 -13] -13]
Test Case:  70 | Input/Output: [[34 34 34 94] 34]
Test Case:  71 | Input/Output: [[63 63 -10 63] -10]
Test Case:  72 | Input/Output: [[-1 14 14 14] -1]
Test Case:  73 | Input/Output: [[-49 -49 -49 27] -49]
Test Case:  74 | Input/Output: [[82 15 82 82] 15]
Test Case:  75 | Input/Output: [[-85 52 52 52] -85]
Test Case:  76 | Input/Output: [[81 81 81 -31] -31]
Test Case:  77 | Input/Output: [[50 50 37 50] 37]
Test Case:  78 | Input/Output: [[14 14 39 14] 14]
Test Case:  79 | Input/Output: [[-81 -81 -81 -43] -81]
Test Case:  80 | Input/Output: [[88 -9 88 88] -9]
Test Case:  81 | Input/Output: [[4 66 66 66] 4]
Test Case:  82 | Input/Output: [[30 30 30 -92] -92]
Test Case:  83 | Input/Output: [[-32 63 -32 -32] -32]
Test Case:  84 | Input/Output: [[66 22 66 66] 22]
Test Case:  85 | Input/Output: [[13 89 13 13] 13]
Test Case:  86 | Input/Output: [[79 79 40 79] 40]
Test Case:  87 | Input/Output: [[28 80 80 80] 28]
Test Case:  88 | Input/Output: [[56 56 25 56] 25]
Test Case:  89 | Input/Output: [[54 49 49 49] 49]
Test Case:  90 | Input/Output: [[35 35 77 35] 35]
Test Case:  91 | Input/Output: [[-65 76 -65 -65] -65]
Test Case:  92 | Input/Output: [[69 69 61 69] 61]
Test Case:  93 | Input/Output: [[-30 -84 -84 -84] -84]
Test Case:  94 | Input/Output: [[77 77 77 43] 43]
Test Case:  95 | Input/Output: [[82 82 82 40] 40]
Test Case:  96 | Input/Output: [[81 -22 81 81] -22]
Test Case:  97 | Input/Output: [[-97 -15 -15 -15] -97]
Test Case:  98 | Input/Output: [[73 73 38 73] 38]
Test Case:  99 | Input/Output: [[-91 80 80 80] -91]
Test Case: 100 | Input/Output: [(66 66 66 66) 66]
Test Case: 101 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 102 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 103 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 104 | Input/Output: [(59 59 59 59) 59]
Test Case: 105 | Input/Output: [(10 10 10 10) 10]
Test Case: 106 | Input/Output: [(10 10 10 10) 10]
Test Case: 107 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 108 | Input/Output: [(18 18 18 18) 18]
Test Case: 109 | Input/Output: [(8 8 8 8) 8]
Test Case: 110 | Input/Output: [(18 18 18 18) 18]
Test Case: 111 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 112 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 113 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 114 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 115 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 116 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 117 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 118 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 119 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 120 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 121 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 122 | Input/Output: [(3 3 3 3) 3]
Test Case: 123 | Input/Output: [(72 72 72 72) 72]
Test Case: 124 | Input/Output: [(84 84 84 84) 84]
Test Case: 125 | Input/Output: [(86 86 86 86) 86]
Test Case: 126 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 127 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 128 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 129 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 130 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 131 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 132 | Input/Output: [(90 90 90 90) 90]
Test Case: 133 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 134 | Input/Output: [(64 64 64 64) 64]
Test Case: 135 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 136 | Input/Output: [(53 53 53 53) 53]
Test Case: 137 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 138 | Input/Output: [(49 49 49 49) 49]
Test Case: 139 | Input/Output: [(90 90 90 90) 90]
Test Case: 140 | Input/Output: [(91 91 91 91) 91]
Test Case: 141 | Input/Output: [(53 53 53 53) 53]
Test Case: 142 | Input/Output: [(0 0 0 0) 0]
Test Case: 143 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 144 | Input/Output: [(36 36 36 36) 36]
Test Case: 145 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 146 | Input/Output: [(51 51 51 51) 51]
Test Case: 147 | Input/Output: [(0 0 0 0) 0]
Test Case: 148 | Input/Output: [(38 38 38 38) 38]
Test Case: 149 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 150 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 151 | Input/Output: [(19 19 19 19) 19]
Test Case: 152 | Input/Output: [(9 9 9 9) 9]
Test Case: 153 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 154 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 155 | Input/Output: [(94 94 94 94) 94]
Test Case: 156 | Input/Output: [(45 45 45 45) 45]
Test Case: 157 | Input/Output: [(37 37 37 37) 37]
Test Case: 158 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 159 | Input/Output: [(81 81 81 81) 81]
Test Case: 160 | Input/Output: [(35 35 35 35) 35]
Test Case: 161 | Input/Output: [(45 45 45 45) 45]
Test Case: 162 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 163 | Input/Output: [(5 5 5 5) 5]
Test Case: 164 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 165 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 166 | Input/Output: [(40 40 40 40) 40]
Test Case: 167 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 168 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 169 | Input/Output: [(62 62 62 62) 62]
Test Case: 170 | Input/Output: [(23 23 23 23) 23]
Test Case: 171 | Input/Output: [(31 31 31 31) 31]
Test Case: 172 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 173 | Input/Output: [(3 3 3 3) 3]
Test Case: 174 | Input/Output: [(98 98 98 98) 98]
Test Case: 175 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 176 | Input/Output: [(95 95 95 95) 95]
Test Case: 177 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 178 | Input/Output: [(38 38 38 38) 38]
Test Case: 179 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 180 | Input/Output: [(88 88 88 88) 88]
Test Case: 181 | Input/Output: [(46 46 46 46) 46]
Test Case: 182 | Input/Output: [(64 64 64 64) 64]
Test Case: 183 | Input/Output: [(25 25 25 25) 25]
Test Case: 184 | Input/Output: [(66 66 66 66) 66]
Test Case: 185 | Input/Output: [(25 25 25 25) 25]
Test Case: 186 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 187 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 188 | Input/Output: [(24 24 24 24) 24]
Test Case: 189 | Input/Output: [(94 94 94 94) 94]
Test Case: 190 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 191 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 192 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 193 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 194 | Input/Output: [(12 12 12 12) 12]
Test Case: 195 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 196 | Input/Output: [(11 11 11 11) 11]
Test Case: 197 | Input/Output: [(57 57 57 57) 57]
Test Case: 198 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 199 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 200 | Input/Output: [(82 41 36 93) 36]
Test Case: 201 | Input/Output: [(37 35 49 12) 12]
Test Case: 202 | Input/Output: [(80 26 79 43) 26]
Test Case: 203 | Input/Output: [(57 84 83 76) 57]
Test Case: 204 | Input/Output: [(69 68 86 4) 4]
Test Case: 205 | Input/Output: [(46 38 61 95) 38]
Test Case: 206 | Input/Output: [(6 76 82 14) 6]
Test Case: 207 | Input/Output: [(94 36 10 56) 10]
Test Case: 208 | Input/Output: [(97 9 77 23) 9]
Test Case: 209 | Input/Output: [(16 91 40 94) 16]
Test Case: 210 | Input/Output: [(17 80 43 62) 17]
Test Case: 211 | Input/Output: [(53 32 61 50) 32]
Test Case: 212 | Input/Output: [(0 84 50 5) 0]
Test Case: 213 | Input/Output: [(100 27 67 21) 21]
Test Case: 214 | Input/Output: [(0 68 75 45) 0]
Test Case: 215 | Input/Output: [(74 15 21 30) 15]
Test Case: 216 | Input/Output: [(83 7 89 23) 7]
Test Case: 217 | Input/Output: [(74 19 26 93) 19]
Test Case: 218 | Input/Output: [(82 30 2 14) 2]
Test Case: 219 | Input/Output: [(71 79 60 7) 7]
Test Case: 220 | Input/Output: [(13 4 47 1) 1]
Test Case: 221 | Input/Output: [(40 84 74 50) 40]
Test Case: 222 | Input/Output: [(7 35 75 58) 7]
Test Case: 223 | Input/Output: [(5 73 11 100) 5]
Test Case: 224 | Input/Output: [(70 62 50 49) 49]
Test Case: 225 | Input/Output: [(77 58 96 17) 17]
Test Case: 226 | Input/Output: [(37 82 31 93) 31]
Test Case: 227 | Input/Output: [(25 94 12 88) 12]
Test Case: 228 | Input/Output: [(28 90 1 78) 1]
Test Case: 229 | Input/Output: [(69 32 49 12) 12]
Test Case: 230 | Input/Output: [(19 52 56 3) 3]
Test Case: 231 | Input/Output: [(29 47 99 65) 29]
Test Case: 232 | Input/Output: [(68 39 79 77) 39]
Test Case: 233 | Input/Output: [(51 100 41 14) 14]
Test Case: 234 | Input/Output: [(66 3 76 78) 3]
Test Case: 235 | Input/Output: [(61 8 67 0) 0]
Test Case: 236 | Input/Output: [(66 41 96 66) 41]
Test Case: 237 | Input/Output: [(82 57 31 14) 14]
Test Case: 238 | Input/Output: [(37 56 69 89) 37]
Test Case: 239 | Input/Output: [(0 35 58 36) 0]
Test Case: 240 | Input/Output: [(67 32 26 27) 26]
Test Case: 241 | Input/Output: [(60 74 48 69) 48]
Test Case: 242 | Input/Output: [(19 46 41 35) 19]
Test Case: 243 | Input/Output: [(44 61 88 17) 17]
Test Case: 244 | Input/Output: [(54 8 27 21) 8]
Test Case: 245 | Input/Output: [(55 10 99 93) 10]
Test Case: 246 | Input/Output: [(1 37 8 35) 1]
Test Case: 247 | Input/Output: [(83 21 27 6) 6]
Test Case: 248 | Input/Output: [(58 24 55 85) 24]
Test Case: 249 | Input/Output: [(22 46 87 39) 22]
Test Case: 250 | Input/Output: [(59 13 66 41) 13]
Test Case: 251 | Input/Output: [(57 36 1 67) 1]
Test Case: 252 | Input/Output: [(27 3 60 100) 3]
Test Case: 253 | Input/Output: [(94 46 97 55) 46]
Test Case: 254 | Input/Output: [(49 99 58 66) 49]
Test Case: 255 | Input/Output: [(25 30 9 92) 9]
Test Case: 256 | Input/Output: [(61 25 62 87) 25]
Test Case: 257 | Input/Output: [(27 8 12 36) 8]
Test Case: 258 | Input/Output: [(95 48 73 42) 42]
Test Case: 259 | Input/Output: [(50 32 66 26) 26]
Test Case: 260 | Input/Output: [(75 22 40 68) 22]
Test Case: 261 | Input/Output: [(48 9 13 0) 0]
Test Case: 262 | Input/Output: [(95 77 22 70) 22]
Test Case: 263 | Input/Output: [(68 81 49 40) 40]
Test Case: 264 | Input/Output: [(6 40 55 60) 6]
Test Case: 265 | Input/Output: [(61 76 10 77) 10]
Test Case: 266 | Input/Output: [(6 39 48 96) 6]
Test Case: 267 | Input/Output: [(53 37 56 0) 0]
Test Case: 268 | Input/Output: [(27 92 93 53) 27]
Test Case: 269 | Input/Output: [(61 24 84 94) 24]
Test Case: 270 | Input/Output: [(60 64 69 43) 43]
Test Case: 271 | Input/Output: [(98 15 2 5) 2]
Test Case: 272 | Input/Output: [(77 68 55 51) 51]
Test Case: 273 | Input/Output: [(8 24 42 1) 1]
Test Case: 274 | Input/Output: [(43 32 73 98) 32]
Test Case: 275 | Input/Output: [(68 52 72 54) 52]
Test Case: 276 | Input/Output: [(1 88 40 39) 1]
Test Case: 277 | Input/Output: [(90 75 21 69) 21]
Test Case: 278 | Input/Output: [(60 96 11 71) 11]
Test Case: 279 | Input/Output: [(11 44 70 8) 8]
Test Case: 280 | Input/Output: [(90 46 33 82) 33]
Test Case: 281 | Input/Output: [(94 3 12 25) 3]
Test Case: 282 | Input/Output: [(91 99 13 95) 13]
Test Case: 283 | Input/Output: [(16 58 95 64) 16]
Test Case: 284 | Input/Output: [(77 41 25 8) 8]
Test Case: 285 | Input/Output: [(47 28 70 90) 28]
Test Case: 286 | Input/Output: [(62 73 60 67) 60]
Test Case: 287 | Input/Output: [(56 44 1 14) 1]
Test Case: 288 | Input/Output: [(40 32 100 3) 3]
Test Case: 289 | Input/Output: [(63 84 53 50) 50]
Test Case: 290 | Input/Output: [(4 7 62 13) 4]
Test Case: 291 | Input/Output: [(80 95 93 87) 80]
Test Case: 292 | Input/Output: [(96 86 59 16) 16]
Test Case: 293 | Input/Output: [(48 11 74 9) 9]
Test Case: 294 | Input/Output: [(21 73 24 85) 21]
Test Case: 295 | Input/Output: [(45 2 16 93) 2]
Test Case: 296 | Input/Output: [(81 81 22 3) 3]
Test Case: 297 | Input/Output: [(63 87 89 96) 63]
Test Case: 298 | Input/Output: [(2 54 71 88) 2]
Test Case: 299 | Input/Output: [(55 1 39 31) 1]
Test Case: 300 | Input/Output: [(16 12 2 34) 2]
Test Case: 301 | Input/Output: [(66 33 84 60) 33]
Test Case: 302 | Input/Output: [(50 46 82 34) 34]
Test Case: 303 | Input/Output: [(5 77 98 68) 5]
Test Case: 304 | Input/Output: [(13 4 36 25) 4]
Test Case: 305 | Input/Output: [(28 77 15 51) 15]
Test Case: 306 | Input/Output: [(66 47 56 15) 15]
Test Case: 307 | Input/Output: [(39 0 30 77) 0]
Test Case: 308 | Input/Output: [(93 71 5 47) 5]
Test Case: 309 | Input/Output: [(15 10 42 14) 10]
Test Case: 310 | Input/Output: [(56 45 35 53) 35]
Test Case: 311 | Input/Output: [(23 55 80 36) 23]
Test Case: 312 | Input/Output: [(86 4 79 31) 4]
Test Case: 313 | Input/Output: [(4 78 20 95) 4]
Test Case: 314 | Input/Output: [(5 95 79 94) 5]
Test Case: 315 | Input/Output: [(49 34 66 79) 34]
Test Case: 316 | Input/Output: [(71 91 12 19) 12]
Test Case: 317 | Input/Output: [(51 71 92 100) 51]
Test Case: 318 | Input/Output: [(11 15 34 0) 0]
Test Case: 319 | Input/Output: [(91 63 13 66) 13]
Test Case: 320 | Input/Output: [(47 96 64 10) 10]
Test Case: 321 | Input/Output: [(12 91 12 57) 12]
Test Case: 322 | Input/Output: [(69 70 45 41) 41]
Test Case: 323 | Input/Output: [(5 39 32 25) 5]
Test Case: 324 | Input/Output: [(41 83 24 1) 1]
Test Case: 325 | Input/Output: [(52 19 59 65) 19]
Test Case: 326 | Input/Output: [(71 33 82 37) 33]
Test Case: 327 | Input/Output: [(8 33 68 6) 6]
Test Case: 328 | Input/Output: [(16 68 60 99) 16]
Test Case: 329 | Input/Output: [(0 11 12 68) 0]
Test Case: 330 | Input/Output: [(90 34 52 60) 34]
Test Case: 331 | Input/Output: [(36 64 18 66) 18]
Test Case: 332 | Input/Output: [(2 62 97 74) 2]
Test Case: 333 | Input/Output: [(10 69 41 88) 10]
Test Case: 334 | Input/Output: [(63 8 69 76) 8]
Test Case: 335 | Input/Output: [(58 84 43 63) 43]
Test Case: 336 | Input/Output: [(22 95 69 54) 22]
Test Case: 337 | Input/Output: [(57 57 32 24) 24]
Test Case: 338 | Input/Output: [(13 17 34 84) 13]
Test Case: 339 | Input/Output: [(45 77 60 91) 45]
Test Case: 340 | Input/Output: [(65 56 57 95) 56]
Test Case: 341 | Input/Output: [(9 65 84 36) 9]
Test Case: 342 | Input/Output: [(43 25 12 100) 12]
Test Case: 343 | Input/Output: [(63 76 42 16) 16]
Test Case: 344 | Input/Output: [(47 73 16 26) 16]
Test Case: 345 | Input/Output: [(29 89 5 45) 5]
Test Case: 346 | Input/Output: [(53 43 68 80) 43]
Test Case: 347 | Input/Output: [(68 52 34 22) 22]
Test Case: 348 | Input/Output: [(17 37 5 66) 5]
Test Case: 349 | Input/Output: [(78 78 65 2) 2]
Test Case: 350 | Input/Output: [(9 4 17 65) 4]
Test Case: 351 | Input/Output: [(45 62 93 53) 45]
Test Case: 352 | Input/Output: [(59 41 94 66) 41]
Test Case: 353 | Input/Output: [(64 82 97 66) 64]
Test Case: 354 | Input/Output: [(99 89 18 83) 18]
Test Case: 355 | Input/Output: [(43 6 56 16) 6]
Test Case: 356 | Input/Output: [(20 19 84 49) 19]
Test Case: 357 | Input/Output: [(38 29 42 14) 14]
Test Case: 358 | Input/Output: [(0 98 26 34) 0]
Test Case: 359 | Input/Output: [(54 12 41 20) 12]
Test Case: 360 | Input/Output: [(83 90 44 40) 40]
Test Case: 361 | Input/Output: [(65 75 60 16) 16]
Test Case: 362 | Input/Output: [(86 65 40 24) 24]
Test Case: 363 | Input/Output: [(98 91 72 13) 13]
Test Case: 364 | Input/Output: [(39 55 46 13) 13]
Test Case: 365 | Input/Output: [(11 91 70 66) 11]
Test Case: 366 | Input/Output: [(97 31 96 60) 31]
Test Case: 367 | Input/Output: [(27 39 9 51) 9]
Test Case: 368 | Input/Output: [(90 3 9 14) 3]
Test Case: 369 | Input/Output: [(88 97 33 16) 16]
Test Case: 370 | Input/Output: [(11 27 36 83) 11]
Test Case: 371 | Input/Output: [(1 27 77 73) 1]
Test Case: 372 | Input/Output: [(32 39 87 41) 32]
Test Case: 373 | Input/Output: [(24 62 56 55) 24]
Test Case: 374 | Input/Output: [(12 15 84 38) 12]
Test Case: 375 | Input/Output: [(22 61 72 78) 22]
Test Case: 376 | Input/Output: [(74 51 50 65) 50]
Test Case: 377 | Input/Output: [(86 62 0 22) 0]
Test Case: 378 | Input/Output: [(32 44 0 56) 0]
Test Case: 379 | Input/Output: [(42 28 47 90) 28]
Test Case: 380 | Input/Output: [(76 91 6 72) 6]
Test Case: 381 | Input/Output: [(30 85 81 89) 30]
Test Case: 382 | Input/Output: [(22 5 30 38) 5]
Test Case: 383 | Input/Output: [(23 78 74 50) 23]
Test Case: 384 | Input/Output: [(2 55 80 94) 2]
Test Case: 385 | Input/Output: [(51 80 42 64) 42]
Test Case: 386 | Input/Output: [(43 60 7 67) 7]
Test Case: 387 | Input/Output: [(88 8 43 78) 8]
Test Case: 388 | Input/Output: [(70 27 80 58) 27]
Test Case: 389 | Input/Output: [(8 70 61 54) 8]
Test Case: 390 | Input/Output: [(12 45 17 49) 12]
Test Case: 391 | Input/Output: [(46 35 61 37) 35]
Test Case: 392 | Input/Output: [(22 11 61 26) 11]
Test Case: 393 | Input/Output: [(26 97 70 3) 3]
Test Case: 394 | Input/Output: [(15 10 45 22) 10]
Test Case: 395 | Input/Output: [(75 46 86 57) 46]
Test Case: 396 | Input/Output: [(27 0 56 0) 0]
Test Case: 397 | Input/Output: [(84 5 66 17) 5]
Test Case: 398 | Input/Output: [(80 98 6 97) 6]
Test Case: 399 | Input/Output: [(2 41 56 92) 2]
Test Case: 400 | Input/Output: [(88 -10 91 -70) -70]
Test Case: 401 | Input/Output: [(-84 -31 41 7) -84]
Test Case: 402 | Input/Output: [(-61 77 21 -12) -61]
Test Case: 403 | Input/Output: [(-2 18 -63 0) -63]
Test Case: 404 | Input/Output: [(91 -61 -64 62) -64]
Test Case: 405 | Input/Output: [(-64 55 45 60) -64]
Test Case: 406 | Input/Output: [(-73 -37 -46 68) -73]
Test Case: 407 | Input/Output: [(98 40 5 -67) -67]
Test Case: 408 | Input/Output: [(-92 32 -52 -47) -92]
Test Case: 409 | Input/Output: [(-87 -53 43 -25) -87]
Test Case: 410 | Input/Output: [(54 -47 35 -1) -47]
Test Case: 411 | Input/Output: [(-65 43 37 99) -65]
Test Case: 412 | Input/Output: [(-97 -35 12 -6) -97]
Test Case: 413 | Input/Output: [(74 100 -40 95) -40]
Test Case: 414 | Input/Output: [(82 -61 -48 -50) -61]
Test Case: 415 | Input/Output: [(11 0 17 -43) -43]
Test Case: 416 | Input/Output: [(27 48 18 -78) -78]
Test Case: 417 | Input/Output: [(-6 -98 -56 -64) -98]
Test Case: 418 | Input/Output: [(24 15 40 92) 15]
Test Case: 419 | Input/Output: [(-45 -7 -2 -5) -45]
Test Case: 420 | Input/Output: [(-90 37 22 -40) -90]
Test Case: 421 | Input/Output: [(-31 -62 -80 -86) -86]
Test Case: 422 | Input/Output: [(27 21 46 51) 21]
Test Case: 423 | Input/Output: [(28 -50 15 6) -50]
Test Case: 424 | Input/Output: [(-24 -62 -77 88) -77]
Test Case: 425 | Input/Output: [(-10 99 5 95) -10]
Test Case: 426 | Input/Output: [(-35 -70 -69 -32) -70]
Test Case: 427 | Input/Output: [(25 -55 44 69) -55]
Test Case: 428 | Input/Output: [(81 -11 67 45) -11]
Test Case: 429 | Input/Output: [(-89 -2 32 63) -89]
Test Case: 430 | Input/Output: [(28 27 -86 -86) -86]
Test Case: 431 | Input/Output: [(-74 17 -48 -49) -74]
Test Case: 432 | Input/Output: [(47 29 -32 -91) -91]
Test Case: 433 | Input/Output: [(18 37 -34 9) -34]
Test Case: 434 | Input/Output: [(55 1 -85 71) -85]
Test Case: 435 | Input/Output: [(12 93 74 -90) -90]
Test Case: 436 | Input/Output: [(48 75 21 -62) -62]
Test Case: 437 | Input/Output: [(67 18 -36 -10) -36]
Test Case: 438 | Input/Output: [(-6 -70 80 -28) -70]
Test Case: 439 | Input/Output: [(75 -92 25 -26) -92]
Test Case: 440 | Input/Output: [(12 -52 -47 -4) -52]
Test Case: 441 | Input/Output: [(-24 -38 -50 27) -50]
Test Case: 442 | Input/Output: [(-51 -45 -47 24) -51]
Test Case: 443 | Input/Output: [(-46 28 -58 79) -58]
Test Case: 444 | Input/Output: [(-10 -85 72 -89) -89]
Test Case: 445 | Input/Output: [(53 -49 22 -53) -53]
Test Case: 446 | Input/Output: [(74 53 99 -12) -12]
Test Case: 447 | Input/Output: [(96 -34 84 44) -34]
Test Case: 448 | Input/Output: [(-23 81 86 -98) -98]
Test Case: 449 | Input/Output: [(46 -27 -22 13) -27]
Test Case: 450 | Input/Output: [(-55 8 -29 -85) -85]
Test Case: 451 | Input/Output: [(-40 -45 53 -86) -86]
Test Case: 452 | Input/Output: [(76 45 62 -90) -90]
Test Case: 453 | Input/Output: [(-26 98 -45 -52) -52]
Test Case: 454 | Input/Output: [(-12 -12 44 87) -12]
Test Case: 455 | Input/Output: [(-39 -91 68 94) -91]
Test Case: 456 | Input/Output: [(-25 -57 -50 24) -57]
Test Case: 457 | Input/Output: [(63 -81 -32 -13) -81]
Test Case: 458 | Input/Output: [(1 67 72 -52) -52]
Test Case: 459 | Input/Output: [(-13 -24 -33 -85) -85]
Test Case: 460 | Input/Output: [(43 13 65 32) 13]
Test Case: 461 | Input/Output: [(-63 97 -9 -48) -63]
Test Case: 462 | Input/Output: [(-54 -53 -83 19) -83]
Test Case: 463 | Input/Output: [(3 -30 3 20) -30]
Test Case: 464 | Input/Output: [(23 -81 57 -100) -100]
Test Case: 465 | Input/Output: [(17 -2 39 57) -2]
Test Case: 466 | Input/Output: [(8 22 50 -51) -51]
Test Case: 467 | Input/Output: [(-41 -51 -72 -89) -89]
Test Case: 468 | Input/Output: [(-23 -10 -79 99) -79]
Test Case: 469 | Input/Output: [(67 0 5 -55) -55]
Test Case: 470 | Input/Output: [(88 95 -66 -1) -66]
Test Case: 471 | Input/Output: [(-22 22 -30 -47) -47]
Test Case: 472 | Input/Output: [(-55 -99 7 38) -99]
Test Case: 473 | Input/Output: [(16 -90 -33 -34) -90]
Test Case: 474 | Input/Output: [(10 -20 -31 -84) -84]
Test Case: 475 | Input/Output: [(65 25 9 -67) -67]
Test Case: 476 | Input/Output: [(-82 46 -86 60) -86]
Test Case: 477 | Input/Output: [(73 -30 -97 19) -97]
Test Case: 478 | Input/Output: [(-91 88 -29 -32) -91]
Test Case: 479 | Input/Output: [(89 64 -90 99) -90]
Test Case: 480 | Input/Output: [(-82 -49 97 98) -82]
Test Case: 481 | Input/Output: [(68 60 -22 -52) -52]
Test Case: 482 | Input/Output: [(-29 -31 -53 72) -53]
Test Case: 483 | Input/Output: [(-18 49 -76 -3) -76]
Test Case: 484 | Input/Output: [(10 -2 -72 5) -72]
Test Case: 485 | Input/Output: [(-17 -86 -23 3) -86]
Test Case: 486 | Input/Output: [(-89 -44 -49 -93) -93]
Test Case: 487 | Input/Output: [(-20 -25 10 -71) -71]
Test Case: 488 | Input/Output: [(-75 10 -47 -4) -75]
Test Case: 489 | Input/Output: [(-11 38 -45 14) -45]
Test Case: 490 | Input/Output: [(56 11 -26 -52) -52]
Test Case: 491 | Input/Output: [(-43 -2 14 -20) -43]
Test Case: 492 | Input/Output: [(-82 -87 98 62) -87]
Test Case: 493 | Input/Output: [(41 21 81 24) 21]
Test Case: 494 | Input/Output: [(25 -11 23 -77) -77]
Test Case: 495 | Input/Output: [(72 -50 54 -98) -98]
Test Case: 496 | Input/Output: [(56 -64 -31 16) -64]
Test Case: 497 | Input/Output: [(13 -45 -13 88) -45]
Test Case: 498 | Input/Output: [(-62 80 43 52) -62]
Test Case: 499 | Input/Output: [(-55 6 13 -80) -80]
Test Case: 500 | Input/Output: [(83 -91 8 95) -91]
Test Case: 501 | Input/Output: [(53 -30 45 -48) -48]
Test Case: 502 | Input/Output: [(73 -8 -4 -85) -85]
Test Case: 503 | Input/Output: [(17 -63 77 7) -63]
Test Case: 504 | Input/Output: [(22 -32 73 66) -32]
Test Case: 505 | Input/Output: [(18 -2 7 -93) -93]
Test Case: 506 | Input/Output: [(29 -87 52 43) -87]
Test Case: 507 | Input/Output: [(47 97 49 -31) -31]
Test Case: 508 | Input/Output: [(-39 64 -16 100) -39]
Test Case: 509 | Input/Output: [(46 40 -11 92) -11]
Test Case: 510 | Input/Output: [(65 35 27 13) 13]
Test Case: 511 | Input/Output: [(-91 -95 14 98) -95]
Test Case: 512 | Input/Output: [(91 82 18 -85) -85]
Test Case: 513 | Input/Output: [(11 -100 12 -99) -100]
Test Case: 514 | Input/Output: [(-85 -76 6 -87) -87]
Test Case: 515 | Input/Output: [(-64 37 4 89) -64]
Test Case: 516 | Input/Output: [(-8 -69 45 78) -69]
Test Case: 517 | Input/Output: [(-29 11 -98 41) -98]
Test Case: 518 | Input/Output: [(-78 42 23 59) -78]
Test Case: 519 | Input/Output: [(78 -70 75 -23) -70]
Test Case: 520 | Input/Output: [(-38 -27 82 -78) -78]
Test Case: 521 | Input/Output: [(31 13 36 40) 13]
Test Case: 522 | Input/Output: [(-52 -20 94 47) -52]
Test Case: 523 | Input/Output: [(-80 -63 -62 -55) -80]
Test Case: 524 | Input/Output: [(-51 -68 -27 24) -68]
Test Case: 525 | Input/Output: [(-57 19 -98 15) -98]
Test Case: 526 | Input/Output: [(17 -23 9 58) -23]
Test Case: 527 | Input/Output: [(35 -46 81 59) -46]
Test Case: 528 | Input/Output: [(40 88 48 -97) -97]
Test Case: 529 | Input/Output: [(-59 60 -42 -9) -59]
Test Case: 530 | Input/Output: [(-54 23 18 -36) -54]
Test Case: 531 | Input/Output: [(32 -69 -38 89) -69]
Test Case: 532 | Input/Output: [(6 -60 -70 44) -70]
Test Case: 533 | Input/Output: [(1 64 13 93) 1]
Test Case: 534 | Input/Output: [(60 -57 -1 59) -57]
Test Case: 535 | Input/Output: [(-46 -41 18 21) -46]
Test Case: 536 | Input/Output: [(43 4 79 -87) -87]
Test Case: 537 | Input/Output: [(43 62 -51 -5) -51]
Test Case: 538 | Input/Output: [(96 -75 -46 -43) -75]
Test Case: 539 | Input/Output: [(-86 21 -90 -99) -99]
Test Case: 540 | Input/Output: [(47 -97 -79 -99) -99]
Test Case: 541 | Input/Output: [(40 14 -59 -42) -59]
Test Case: 542 | Input/Output: [(29 45 13 37) 13]
Test Case: 543 | Input/Output: [(9 -5 -18 -2) -18]
Test Case: 544 | Input/Output: [(97 76 19 -79) -79]
Test Case: 545 | Input/Output: [(30 25 -24 0) -24]
Test Case: 546 | Input/Output: [(-41 -46 -11 94) -46]
Test Case: 547 | Input/Output: [(15 14 -9 -83) -83]
Test Case: 548 | Input/Output: [(-25 59 -4 50) -25]
Test Case: 549 | Input/Output: [(-87 83 36 -41) -87]
Test Case: 550 | Input/Output: [(61 23 -41 20) -41]
Test Case: 551 | Input/Output: [(38 -2 83 33) -2]
Test Case: 552 | Input/Output: [(-42 76 -34 29) -42]
Test Case: 553 | Input/Output: [(59 -17 74 66) -17]
Test Case: 554 | Input/Output: [(63 -2 -32 -22) -32]
Test Case: 555 | Input/Output: [(-91 -67 28 -54) -91]
Test Case: 556 | Input/Output: [(46 -9 -79 -68) -79]
Test Case: 557 | Input/Output: [(-5 -87 87 81) -87]
Test Case: 558 | Input/Output: [(-46 73 1 -41) -46]
Test Case: 559 | Input/Output: [(86 -75 59 87) -75]
Test Case: 560 | Input/Output: [(-15 19 89 -40) -40]
Test Case: 561 | Input/Output: [(96 56 48 -53) -53]
Test Case: 562 | Input/Output: [(45 -31 89 93) -31]
Test Case: 563 | Input/Output: [(49 70 -48 84) -48]
Test Case: 564 | Input/Output: [(-18 -17 -15 -99) -99]
Test Case: 565 | Input/Output: [(-46 10 -97 61) -97]
Test Case: 566 | Input/Output: [(-84 67 95 40) -84]
Test Case: 567 | Input/Output: [(7 41 -4 -31) -31]
Test Case: 568 | Input/Output: [(34 38 43 77) 34]
Test Case: 569 | Input/Output: [(99 -81 10 80) -81]
Test Case: 570 | Input/Output: [(-44 59 -15 -99) -99]
Test Case: 571 | Input/Output: [(36 82 -96 37) -96]
Test Case: 572 | Input/Output: [(65 -76 36 49) -76]
Test Case: 573 | Input/Output: [(-48 -50 -82 65) -82]
Test Case: 574 | Input/Output: [(68 -45 -87 30) -87]
Test Case: 575 | Input/Output: [(-27 -14 -32 -43) -43]
Test Case: 576 | Input/Output: [(98 -22 90 -19) -22]
Test Case: 577 | Input/Output: [(62 42 22 -33) -33]
Test Case: 578 | Input/Output: [(42 -64 -54 -1) -64]
Test Case: 579 | Input/Output: [(-78 95 -93 66) -93]
Test Case: 580 | Input/Output: [(37 -71 -75 51) -75]
Test Case: 581 | Input/Output: [(-16 -77 53 89) -77]
Test Case: 582 | Input/Output: [(-47 -100 33 -26) -100]
Test Case: 583 | Input/Output: [(18 -67 63 -37) -67]
Test Case: 584 | Input/Output: [(12 58 -7 45) -7]
Test Case: 585 | Input/Output: [(-18 70 -91 0) -91]
Test Case: 586 | Input/Output: [(11 6 71 61) 6]
Test Case: 587 | Input/Output: [(-29 23 -29 -98) -98]
Test Case: 588 | Input/Output: [(-37 -34 45 -34) -37]
Test Case: 589 | Input/Output: [(94 94 -69 4) -69]
Test Case: 590 | Input/Output: [(95 15 -74 -66) -74]
Test Case: 591 | Input/Output: [(1 -48 -66 2) -66]
Test Case: 592 | Input/Output: [(73 74 -70 -8) -70]
Test Case: 593 | Input/Output: [(2 32 97 -12) -12]
Test Case: 594 | Input/Output: [(-57 20 -87 25) -87]
Test Case: 595 | Input/Output: [(83 -3 43 -94) -94]
Test Case: 596 | Input/Output: [(-86 -1 -63 -28) -86]
Test Case: 597 | Input/Output: [(-60 95 5 -56) -60]
Test Case: 598 | Input/Output: [(27 51 -55 70) -55]
Test Case: 599 | Input/Output: [(98 43 35 17) 17]
Test Case: 600 | Input/Output: [(16 -98 -14 -80) -98]
Test Case: 601 | Input/Output: [(-66 -88 -79 29) -88]
Test Case: 602 | Input/Output: [(60 -18 8 56) -18]
Test Case: 603 | Input/Output: [(71 24 -52 7) -52]
Test Case: 604 | Input/Output: [(-54 -15 57 -37) -54]
Test Case: 605 | Input/Output: [(87 67 78 -75) -75]
Test Case: 606 | Input/Output: [(-90 -30 24 15) -90]
Test Case: 607 | Input/Output: [(-44 79 1 -16) -44]
Test Case: 608 | Input/Output: [(26 -11 63 42) -11]
Test Case: 609 | Input/Output: [(-87 -92 -1 -64) -92]
Test Case: 610 | Input/Output: [(-13 77 48 -78) -78]
Test Case: 611 | Input/Output: [(51 67 28 45) 28]
Test Case: 612 | Input/Output: [(23 27 -11 -15) -15]
Test Case: 613 | Input/Output: [(23 43 -64 -69) -69]
Test Case: 614 | Input/Output: [(64 41 -24 -41) -41]
Test Case: 615 | Input/Output: [(37 87 29 -77) -77]
Test Case: 616 | Input/Output: [(67 -27 -72 27) -72]
Test Case: 617 | Input/Output: [(-79 31 -29 -9) -79]
Test Case: 618 | Input/Output: [(56 92 -71 63) -71]
Test Case: 619 | Input/Output: [(33 -6 30 40) -6]
Test Case: 620 | Input/Output: [(50 19 -29 34) -29]
Test Case: 621 | Input/Output: [(-34 -48 -6 -76) -76]
Test Case: 622 | Input/Output: [(-85 100 45 53) -85]
Test Case: 623 | Input/Output: [(-52 -17 13 38) -52]
Test Case: 624 | Input/Output: [(-85 -65 80 11) -85]
Test Case: 625 | Input/Output: [(-18 -71 -24 81) -71]
Test Case: 626 | Input/Output: [(77 45 -66 68) -66]
Test Case: 627 | Input/Output: [(-60 61 -96 52) -96]
Test Case: 628 | Input/Output: [(37 62 16 -58) -58]
Test Case: 629 | Input/Output: [(-86 -4 23 -43) -86]
Test Case: 630 | Input/Output: [(-31 -9 14 -19) -31]
Test Case: 631 | Input/Output: [(96 -51 45 -31) -51]
Test Case: 632 | Input/Output: [(42 71 -79 49) -79]
Test Case: 633 | Input/Output: [(8 -93 -72 -93) -93]
Test Case: 634 | Input/Output: [(-19 78 -52 -62) -62]
Test Case: 635 | Input/Output: [(62 61 -1 30) -1]
Test Case: 636 | Input/Output: [(-22 -78 -1 31) -78]
Test Case: 637 | Input/Output: [(-30 87 42 -38) -38]
Test Case: 638 | Input/Output: [(-8 79 39 64) -8]
Test Case: 639 | Input/Output: [(-51 23 -80 -69) -80]
Test Case: 640 | Input/Output: [(70 30 -93 -13) -93]
Test Case: 641 | Input/Output: [(42 37 1 44) 1]
Test Case: 642 | Input/Output: [(56 -23 9 3) -23]
Test Case: 643 | Input/Output: [(31 -53 76 41) -53]
Test Case: 644 | Input/Output: [(-48 -82 50 -99) -99]
Test Case: 645 | Input/Output: [(-52 -75 59 -67) -75]
Test Case: 646 | Input/Output: [(31 85 25 39) 25]
Test Case: 647 | Input/Output: [(-83 -14 27 -74) -83]
Test Case: 648 | Input/Output: [(66 22 53 69) 22]
Test Case: 649 | Input/Output: [(-87 -95 89 -94) -95]
Test Case: 650 | Input/Output: [(13 -76 36 -1) -76]
Test Case: 651 | Input/Output: [(21 71 -27 48) -27]
Test Case: 652 | Input/Output: [(47 -15 65 96) -15]
Test Case: 653 | Input/Output: [(1 -84 70 69) -84]
Test Case: 654 | Input/Output: [(67 80 -87 18) -87]
Test Case: 655 | Input/Output: [(-34 -45 6 -51) -51]
Test Case: 656 | Input/Output: [(78 69 59 22) 22]
Test Case: 657 | Input/Output: [(8 10 28 52) 8]
Test Case: 658 | Input/Output: [(26 -31 93 -9) -31]
Test Case: 659 | Input/Output: [(-4 -27 -62 -1) -62]
Test Case: 660 | Input/Output: [(-58 -3 -78 48) -78]
Test Case: 661 | Input/Output: [(-14 -72 -16 18) -72]
Test Case: 662 | Input/Output: [(-58 18 -52 51) -58]
Test Case: 663 | Input/Output: [(96 77 88 -62) -62]
Test Case: 664 | Input/Output: [(-5 38 44 12) -5]
Test Case: 665 | Input/Output: [(-60 -86 -32 43) -86]
Test Case: 666 | Input/Output: [(-39 16 71 23) -39]
Test Case: 667 | Input/Output: [(46 -19 92 27) -19]
Test Case: 668 | Input/Output: [(94 24 -13 -66) -66]
Test Case: 669 | Input/Output: [(5 97 -80 49) -80]
Test Case: 670 | Input/Output: [(-4 -5 -96 -62) -96]
Test Case: 671 | Input/Output: [(14 -10 -77 -91) -91]
Test Case: 672 | Input/Output: [(-56 -13 -98 -46) -98]
Test Case: 673 | Input/Output: [(-52 -73 -79 55) -79]
Test Case: 674 | Input/Output: [(19 64 68 -44) -44]
Test Case: 675 | Input/Output: [(-50 -81 19 -61) -81]
Test Case: 676 | Input/Output: [(26 14 100 -98) -98]
Test Case: 677 | Input/Output: [(96 46 45 57) 45]
Test Case: 678 | Input/Output: [(-94 87 -88 -95) -95]
Test Case: 679 | Input/Output: [(42 63 -43 -67) -67]
Test Case: 680 | Input/Output: [(-58 4 -93 -34) -93]
Test Case: 681 | Input/Output: [(-17 -7 -27 -11) -27]
Test Case: 682 | Input/Output: [(68 14 25 -86) -86]
Test Case: 683 | Input/Output: [(-2 13 60 -55) -55]
Test Case: 684 | Input/Output: [(1 -54 -95 -70) -95]
Test Case: 685 | Input/Output: [(-80 -98 15 23) -98]
Test Case: 686 | Input/Output: [(23 -68 -17 -54) -68]
Test Case: 687 | Input/Output: [(66 -3 -98 -75) -98]
Test Case: 688 | Input/Output: [(-86 79 -64 87) -86]
Test Case: 689 | Input/Output: [(33 -2 75 98) -2]
Test Case: 690 | Input/Output: [(56 -17 -63 -99) -99]
Test Case: 691 | Input/Output: [(-82 -1 -40 36) -82]
Test Case: 692 | Input/Output: [(94 -18 -55 6) -55]
Test Case: 693 | Input/Output: [(99 1 -37 22) -37]
Test Case: 694 | Input/Output: [(25 -21 10 37) -21]
Test Case: 695 | Input/Output: [(-26 28 62 26) -26]
Test Case: 696 | Input/Output: [(72 75 -30 64) -30]
Test Case: 697 | Input/Output: [(19 89 -34 -23) -34]
Test Case: 698 | Input/Output: [(77 61 31 98) 31]
Test Case: 699 | Input/Output: [(-95 95 60 -60) -95]
Test Case: 700 | Input/Output: [(30 -95 99 -99) -99]
Test Case: 701 | Input/Output: [(22 58 -55 -28) -55]
Test Case: 702 | Input/Output: [(-83 -60 13 43) -83]
Test Case: 703 | Input/Output: [(-63 9 40 46) -63]
Test Case: 704 | Input/Output: [(-98 17 98 68) -98]
Test Case: 705 | Input/Output: [(66 70 -45 -57) -57]
Test Case: 706 | Input/Output: [(-49 11 -25 68) -49]
Test Case: 707 | Input/Output: [(43 -56 -26 -62) -62]
Test Case: 708 | Input/Output: [(-85 -92 42 -53) -92]
Test Case: 709 | Input/Output: [(54 -34 98 -49) -49]
Test Case: 710 | Input/Output: [(-60 78 -57 95) -60]
Test Case: 711 | Input/Output: [(-21 -21 -93 30) -93]
Test Case: 712 | Input/Output: [(-15 67 -75 -48) -75]
Test Case: 713 | Input/Output: [(70 91 78 22) 22]
Test Case: 714 | Input/Output: [(91 78 68 53) 53]
Test Case: 715 | Input/Output: [(-37 20 -65 42) -65]
Test Case: 716 | Input/Output: [(-29 39 -54 40) -54]
Test Case: 717 | Input/Output: [(-78 -47 31 46) -78]
Test Case: 718 | Input/Output: [(-74 -22 -29 28) -74]
Test Case: 719 | Input/Output: [(-100 -21 -66 -35) -100]
Test Case: 720 | Input/Output: [(74 91 45 -29) -29]
Test Case: 721 | Input/Output: [(-61 49 16 66) -61]
Test Case: 722 | Input/Output: [(85 60 52 -81) -81]
Test Case: 723 | Input/Output: [(50 -82 45 -5) -82]
Test Case: 724 | Input/Output: [(-35 77 -94 -48) -94]
Test Case: 725 | Input/Output: [(-97 72 40 59) -97]
Test Case: 726 | Input/Output: [(28 -54 66 14) -54]
Test Case: 727 | Input/Output: [(21 -85 49 11) -85]
Test Case: 728 | Input/Output: [(-16 -79 -69 69) -79]
Test Case: 729 | Input/Output: [(-82 36 -93 83) -93]
Test Case: 730 | Input/Output: [(-89 63 8 64) -89]
Test Case: 731 | Input/Output: [(-33 99 -74 -3) -74]
Test Case: 732 | Input/Output: [(-30 30 -85 -22) -85]
Test Case: 733 | Input/Output: [(37 -84 24 -19) -84]
Test Case: 734 | Input/Output: [(-35 65 -78 -1) -78]
Test Case: 735 | Input/Output: [(33 -64 47 -91) -91]
Test Case: 736 | Input/Output: [(-96 54 77 -11) -96]
Test Case: 737 | Input/Output: [(-89 64 96 80) -89]
Test Case: 738 | Input/Output: [(35 -74 -3 -25) -74]
Test Case: 739 | Input/Output: [(-81 -38 66 90) -81]
Test Case: 740 | Input/Output: [(-59 38 31 97) -59]
Test Case: 741 | Input/Output: [(93 -74 48 -68) -74]
Test Case: 742 | Input/Output: [(-13 8 -17 -13) -17]
Test Case: 743 | Input/Output: [(-78 -43 -4 -90) -90]
Test Case: 744 | Input/Output: [(31 -55 -13 19) -55]
Test Case: 745 | Input/Output: [(-91 -36 2 64) -91]
Test Case: 746 | Input/Output: [(61 -33 49 -50) -50]
Test Case: 747 | Input/Output: [(39 7 -78 -96) -96]
Test Case: 748 | Input/Output: [(48 38 -21 -43) -43]
Test Case: 749 | Input/Output: [(-6 7 98 -10) -10]
Test Case: 750 | Input/Output: [(40 -15 87 21) -15]
Test Case: 751 | Input/Output: [(32 -34 -86 17) -86]
Test Case: 752 | Input/Output: [(89 -48 13 14) -48]
Test Case: 753 | Input/Output: [(-59 -21 -77 4) -77]
Test Case: 754 | Input/Output: [(-76 -41 10 62) -76]
Test Case: 755 | Input/Output: [(52 3 -18 -75) -75]
Test Case: 756 | Input/Output: [(-44 60 57 13) -44]
Test Case: 757 | Input/Output: [(-50 37 40 -82) -82]
Test Case: 758 | Input/Output: [(94 -61 -2 -80) -80]
Test Case: 759 | Input/Output: [(-65 -7 -4 -30) -65]
Test Case: 760 | Input/Output: [(-47 -44 100 -1) -47]
Test Case: 761 | Input/Output: [(35 -69 52 91) -69]
Test Case: 762 | Input/Output: [(75 -72 32 -100) -100]
Test Case: 763 | Input/Output: [(-7 -66 74 -36) -66]
Test Case: 764 | Input/Output: [(-28 87 -19 68) -28]
Test Case: 765 | Input/Output: [(23 52 14 92) 14]
Test Case: 766 | Input/Output: [(38 92 -73 -68) -73]
Test Case: 767 | Input/Output: [(61 -39 43 98) -39]
Test Case: 768 | Input/Output: [(25 -49 -62 31) -62]
Test Case: 769 | Input/Output: [(27 -34 -29 47) -34]
Test Case: 770 | Input/Output: [(72 70 -20 70) -20]
Test Case: 771 | Input/Output: [(32 -66 -100 -91) -100]
Test Case: 772 | Input/Output: [(24 -27 56 -90) -90]
Test Case: 773 | Input/Output: [(-55 53 -28 24) -55]
Test Case: 774 | Input/Output: [(40 -98 -52 14) -98]
Test Case: 775 | Input/Output: [(-55 -51 57 -91) -91]
Test Case: 776 | Input/Output: [(-39 -88 -50 -53) -88]
Test Case: 777 | Input/Output: [(-73 -59 -42 70) -73]
Test Case: 778 | Input/Output: [(-70 -59 -60 -79) -79]
Test Case: 779 | Input/Output: [(94 74 -51 63) -51]
Test Case: 780 | Input/Output: [(62 92 43 -86) -86]
Test Case: 781 | Input/Output: [(23 62 -64 14) -64]
Test Case: 782 | Input/Output: [(-57 -55 42 -31) -57]
Test Case: 783 | Input/Output: [(-35 2 24 -52) -52]
Test Case: 784 | Input/Output: [(84 -74 61 64) -74]
Test Case: 785 | Input/Output: [(-30 -94 -37 -90) -94]
Test Case: 786 | Input/Output: [(-2 -56 -4 71) -56]
Test Case: 787 | Input/Output: [(-32 18 -50 -61) -61]
Test Case: 788 | Input/Output: [(-93 33 9 -31) -93]
Test Case: 789 | Input/Output: [(9 75 -62 18) -62]
Test Case: 790 | Input/Output: [(39 70 28 -65) -65]
Test Case: 791 | Input/Output: [(93 36 -71 32) -71]
Test Case: 792 | Input/Output: [(-14 -58 39 -25) -58]
Test Case: 793 | Input/Output: [(-31 -30 -65 -32) -65]
Test Case: 794 | Input/Output: [(-10 76 -70 53) -70]
Test Case: 795 | Input/Output: [(-95 -15 55 88) -95]
Test Case: 796 | Input/Output: [(14 85 64 16) 14]
Test Case: 797 | Input/Output: [(-54 68 -91 43) -91]
Test Case: 798 | Input/Output: [(-46 42 45 57) -46]
Test Case: 799 | Input/Output: [(77 -32 77 -8) -32]
Test Case: 800 | Input/Output: [(36 82 -6 -56) -56]
Test Case: 801 | Input/Output: [(-62 -76 51 -45) -76]
Test Case: 802 | Input/Output: [(51 -73 -65 55) -73]
Test Case: 803 | Input/Output: [(-20 -1 -74 35) -74]
Test Case: 804 | Input/Output: [(79 -70 -31 -20) -70]
Test Case: 805 | Input/Output: [(-24 90 -72 -60) -72]
Test Case: 806 | Input/Output: [(54 -86 -51 -10) -86]
Test Case: 807 | Input/Output: [(13 94 61 63) 13]
Test Case: 808 | Input/Output: [(-3 63 60 -78) -78]
Test Case: 809 | Input/Output: [(36 14 -78 -71) -78]
Test Case: 810 | Input/Output: [(-94 -30 -64 10) -94]
Test Case: 811 | Input/Output: [(-97 81 -29 48) -97]
Test Case: 812 | Input/Output: [(-2 28 -4 -73) -73]
Test Case: 813 | Input/Output: [(8 2 78 -57) -57]
Test Case: 814 | Input/Output: [(82 -2 -63 -53) -63]
Test Case: 815 | Input/Output: [(-42 -69 67 54) -69]
Test Case: 816 | Input/Output: [(21 -81 58 -76) -81]
Test Case: 817 | Input/Output: [(-10 4 96 13) -10]
Test Case: 818 | Input/Output: [(-40 100 92 100) -40]
Test Case: 819 | Input/Output: [(26 -73 41 -38) -73]
Test Case: 820 | Input/Output: [(52 42 -8 21) -8]
Test Case: 821 | Input/Output: [(-38 -18 40 80) -38]
Test Case: 822 | Input/Output: [(74 -75 -47 -67) -75]
Test Case: 823 | Input/Output: [(38 -87 41 -59) -87]
Test Case: 824 | Input/Output: [(40 -75 -88 66) -88]
Test Case: 825 | Input/Output: [(-66 -47 -28 -68) -68]
Test Case: 826 | Input/Output: [(17 93 74 31) 17]
Test Case: 827 | Input/Output: [(-21 -33 87 -86) -86]
Test Case: 828 | Input/Output: [(74 -3 82 -100) -100]
Test Case: 829 | Input/Output: [(-3 -10 -37 75) -37]
Test Case: 830 | Input/Output: [(41 -79 -5 -37) -79]
Test Case: 831 | Input/Output: [(-70 -89 -24 59) -89]
Test Case: 832 | Input/Output: [(-59 -50 -49 14) -59]
Test Case: 833 | Input/Output: [(-68 -96 -79 40) -96]
Test Case: 834 | Input/Output: [(64 35 36 -88) -88]
Test Case: 835 | Input/Output: [(-89 -74 15 -59) -89]
Test Case: 836 | Input/Output: [(-32 63 -61 -100) -100]
Test Case: 837 | Input/Output: [(9 -60 64 83) -60]
Test Case: 838 | Input/Output: [(77 -46 -26 -36) -46]
Test Case: 839 | Input/Output: [(74 -65 91 -68) -68]
Test Case: 840 | Input/Output: [(78 -13 -63 -6) -63]
Test Case: 841 | Input/Output: [(-49 -77 -56 -33) -77]
Test Case: 842 | Input/Output: [(86 -72 -21 -10) -72]
Test Case: 843 | Input/Output: [(2 -9 -19 20) -19]
Test Case: 844 | Input/Output: [(-12 83 -34 7) -34]
Test Case: 845 | Input/Output: [(-55 9 63 -5) -55]
Test Case: 846 | Input/Output: [(48 -82 -18 -82) -82]
Test Case: 847 | Input/Output: [(48 -22 -50 6) -50]
Test Case: 848 | Input/Output: [(-72 66 59 -22) -72]
Test Case: 849 | Input/Output: [(52 -66 -48 -90) -90]
Test Case: 850 | Input/Output: [(-18 13 -52 -72) -72]
Test Case: 851 | Input/Output: [(3 36 78 -68) -68]
Test Case: 852 | Input/Output: [(83 100 97 71) 71]
Test Case: 853 | Input/Output: [(-83 41 -82 61) -83]
Test Case: 854 | Input/Output: [(12 16 -66 62) -66]
Test Case: 855 | Input/Output: [(63 -5 68 15) -5]
Test Case: 856 | Input/Output: [(-83 -61 -76 93) -83]
Test Case: 857 | Input/Output: [(93 43 96 78) 43]
Test Case: 858 | Input/Output: [(-42 -44 83 -81) -81]
Test Case: 859 | Input/Output: [(-28 33 8 -28) -28]
Test Case: 860 | Input/Output: [(0 13 54 -20) -20]
Test Case: 861 | Input/Output: [(-93 -21 -66 65) -93]
Test Case: 862 | Input/Output: [(86 94 51 -34) -34]
Test Case: 863 | Input/Output: [(16 -85 -76 1) -85]
Test Case: 864 | Input/Output: [(15 83 89 14) 14]
Test Case: 865 | Input/Output: [(24 -84 -58 -56) -84]
Test Case: 866 | Input/Output: [(-91 83 -84 -21) -91]
Test Case: 867 | Input/Output: [(-34 -66 17 62) -66]
Test Case: 868 | Input/Output: [(-94 -23 39 1) -94]
Test Case: 869 | Input/Output: [(-9 26 -79 -99) -99]
Test Case: 870 | Input/Output: [(27 63 -64 -62) -64]
Test Case: 871 | Input/Output: [(-49 11 91 -80) -80]
Test Case: 872 | Input/Output: [(80 34 -3 65) -3]
Test Case: 873 | Input/Output: [(-14 -87 60 70) -87]
Test Case: 874 | Input/Output: [(92 -28 90 -25) -28]
Test Case: 875 | Input/Output: [(72 -56 -67 -3) -67]
Test Case: 876 | Input/Output: [(-86 -52 -57 -40) -86]
Test Case: 877 | Input/Output: [(-32 64 16 -48) -48]
Test Case: 878 | Input/Output: [(85 -60 20 -9) -60]
Test Case: 879 | Input/Output: [(4 -81 -51 -19) -81]
Test Case: 880 | Input/Output: [(7 -37 -56 12) -56]
Test Case: 881 | Input/Output: [(-22 -64 74 -88) -88]
Test Case: 882 | Input/Output: [(43 -87 -12 -20) -87]
Test Case: 883 | Input/Output: [(44 16 69 76) 16]
Test Case: 884 | Input/Output: [(44 9 58 -69) -69]
Test Case: 885 | Input/Output: [(-6 -91 56 -64) -91]
Test Case: 886 | Input/Output: [(92 0 -8 -43) -43]
Test Case: 887 | Input/Output: [(44 7 -36 81) -36]
Test Case: 888 | Input/Output: [(9 78 13 -6) -6]
Test Case: 889 | Input/Output: [(-55 7 -69 6) -69]
Test Case: 890 | Input/Output: [(30 -60 -12 -63) -63]
Test Case: 891 | Input/Output: [(38 -49 -1 -50) -50]
Test Case: 892 | Input/Output: [(27 88 51 -85) -85]
Test Case: 893 | Input/Output: [(66 100 -83 -31) -83]
Test Case: 894 | Input/Output: [(-32 -18 -56 89) -56]
Test Case: 895 | Input/Output: [(92 -8 -74 -15) -74]
Test Case: 896 | Input/Output: [(49 10 99 -30) -30]
Test Case: 897 | Input/Output: [(73 -45 2 -48) -48]
Test Case: 898 | Input/Output: [(27 -66 95 78) -66]
Test Case: 899 | Input/Output: [(-80 20 87 28) -80]
Test Case: 900 | Input/Output: [(74 14 -65 -26) -65]
Test Case: 901 | Input/Output: [(-11 24 -56 -29) -56]
Test Case: 902 | Input/Output: [(95 -7 -3 70) -7]
Test Case: 903 | Input/Output: [(-96 -53 -45 -46) -96]
Test Case: 904 | Input/Output: [(79 -18 7 4) -18]
Test Case: 905 | Input/Output: [(66 25 65 -6) -6]
Test Case: 906 | Input/Output: [(-37 40 -34 -1) -37]
Test Case: 907 | Input/Output: [(-78 69 29 -22) -78]
Test Case: 908 | Input/Output: [(-82 -59 76 -14) -82]
Test Case: 909 | Input/Output: [(45 -52 -63 49) -63]
Test Case: 910 | Input/Output: [(4 -85 -49 67) -85]
Test Case: 911 | Input/Output: [(41 -14 -8 -24) -24]
Test Case: 912 | Input/Output: [(-80 49 -2 -61) -80]
Test Case: 913 | Input/Output: [(-25 -87 31 23) -87]
Test Case: 914 | Input/Output: [(-95 60 -45 97) -95]
Test Case: 915 | Input/Output: [(-85 -84 -62 -15) -85]
Test Case: 916 | Input/Output: [(-14 -37 11 12) -37]
Test Case: 917 | Input/Output: [(5 -19 87 -68) -68]
Test Case: 918 | Input/Output: [(-90 -29 78 -97) -97]
Test Case: 919 | Input/Output: [(-90 -54 53 -86) -90]
Test Case: 920 | Input/Output: [(-85 -14 84 59) -85]
Test Case: 921 | Input/Output: [(-5 -99 66 -59) -99]
Test Case: 922 | Input/Output: [(-46 -67 25 -3) -67]
Test Case: 923 | Input/Output: [(-19 -18 38 -85) -85]
Test Case: 924 | Input/Output: [(48 -24 35 35) -24]
Test Case: 925 | Input/Output: [(22 38 -91 -9) -91]
Test Case: 926 | Input/Output: [(19 -32 52 -9) -32]
Test Case: 927 | Input/Output: [(98 -59 -66 -97) -97]
Test Case: 928 | Input/Output: [(-30 -17 -20 -4) -30]
Test Case: 929 | Input/Output: [(-30 89 6 32) -30]
Test Case: 930 | Input/Output: [(-23 66 33 36) -23]
Test Case: 931 | Input/Output: [(-16 8 -10 5) -16]
Test Case: 932 | Input/Output: [(-4 69 -77 -41) -77]
Test Case: 933 | Input/Output: [(-37 94 -55 -100) -100]
Test Case: 934 | Input/Output: [(-34 68 56 -35) -35]
Test Case: 935 | Input/Output: [(-28 47 -13 54) -28]
Test Case: 936 | Input/Output: [(77 -73 85 -54) -73]
Test Case: 937 | Input/Output: [(39 37 98 -69) -69]
Test Case: 938 | Input/Output: [(-78 100 -100 49) -100]
Test Case: 939 | Input/Output: [(-89 56 46 -38) -89]
Test Case: 940 | Input/Output: [(-66 1 1 -80) -80]
Test Case: 941 | Input/Output: [(27 83 -79 2) -79]
Test Case: 942 | Input/Output: [(-4 -91 -69 -81) -91]
Test Case: 943 | Input/Output: [(-79 28 70 44) -79]
Test Case: 944 | Input/Output: [(-3 -15 46 12) -15]
Test Case: 945 | Input/Output: [(97 -100 -38 80) -100]
Test Case: 946 | Input/Output: [(-92 -48 -61 -12) -92]
Test Case: 947 | Input/Output: [(65 -4 -21 79) -21]
Test Case: 948 | Input/Output: [(38 -84 8 10) -84]
Test Case: 949 | Input/Output: [(99 40 -33 -11) -33]
Test Case: 950 | Input/Output: [(-28 -62 -37 -56) -62]
Test Case: 951 | Input/Output: [(-40 16 4 -93) -93]
Test Case: 952 | Input/Output: [(48 -46 -18 57) -46]
Test Case: 953 | Input/Output: [(-100 60 94 42) -100]
Test Case: 954 | Input/Output: [(-26 -84 -28 68) -84]
Test Case: 955 | Input/Output: [(74 -93 -65 37) -93]
Test Case: 956 | Input/Output: [(47 -28 -58 -34) -58]
Test Case: 957 | Input/Output: [(-33 8 -86 -73) -86]
Test Case: 958 | Input/Output: [(91 -29 -49 -15) -49]
Test Case: 959 | Input/Output: [(30 24 14 -36) -36]
Test Case: 960 | Input/Output: [(-75 -95 66 -22) -95]
Test Case: 961 | Input/Output: [(96 -33 79 42) -33]
Test Case: 962 | Input/Output: [(-5 -33 94 -7) -33]
Test Case: 963 | Input/Output: [(22 65 -65 22) -65]
Test Case: 964 | Input/Output: [(-18 -70 -40 -28) -70]
Test Case: 965 | Input/Output: [(53 93 71 -68) -68]
Test Case: 966 | Input/Output: [(82 -18 -65 -24) -65]
Test Case: 967 | Input/Output: [(50 -83 -16 39) -83]
Test Case: 968 | Input/Output: [(-35 86 28 4) -35]
Test Case: 969 | Input/Output: [(-55 32 -2 -65) -65]
Test Case: 970 | Input/Output: [(64 25 -93 -62) -93]
Test Case: 971 | Input/Output: [(11 -20 -20 8) -20]
Test Case: 972 | Input/Output: [(-53 -77 53 -87) -87]
Test Case: 973 | Input/Output: [(35 16 23 13) 13]
Test Case: 974 | Input/Output: [(97 91 -67 -9) -67]
Test Case: 975 | Input/Output: [(69 -81 -24 -34) -81]
Test Case: 976 | Input/Output: [(-10 87 -40 -48) -48]
Test Case: 977 | Input/Output: [(-71 85 91 36) -71]
Test Case: 978 | Input/Output: [(99 -54 -46 15) -54]
Test Case: 979 | Input/Output: [(-97 61 58 10) -97]
Test Case: 980 | Input/Output: [(-3 -86 -85 -83) -86]
Test Case: 981 | Input/Output: [(-59 -35 16 -67) -67]
Test Case: 982 | Input/Output: [(-49 -7 -77 -88) -88]
Test Case: 983 | Input/Output: [(6 29 -12 -59) -59]
Test Case: 984 | Input/Output: [(13 -66 12 44) -66]
Test Case: 985 | Input/Output: [(49 61 24 97) 24]
Test Case: 986 | Input/Output: [(-70 -19 18 52) -70]
Test Case: 987 | Input/Output: [(84 -88 -65 -54) -88]
Test Case: 988 | Input/Output: [(10 -58 9 -5) -58]
Test Case: 989 | Input/Output: [(24 42 84 -78) -78]
Test Case: 990 | Input/Output: [(-26 -58 3 79) -58]
Test Case: 991 | Input/Output: [(66 3 25 59) 3]
Test Case: 992 | Input/Output: [(3 42 -89 -8) -89]
Test Case: 993 | Input/Output: [(78 -23 86 8) -23]
Test Case: 994 | Input/Output: [(36 -57 32 14) -57]
Test Case: 995 | Input/Output: [(-13 -79 -66 57) -79]
Test Case: 996 | Input/Output: [(-31 88 14 96) -31]
Test Case: 997 | Input/Output: [(69 69 -86 -74) -86]
Test Case: 998 | Input/Output: [(-6 -45 2 -24) -45]
Test Case: 999 | Input/Output: [(-79 -81 -29 -100) -100]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -104 17 3 -12 -117 17 57 89 -108 -66 -39 -44 13 60 79 60
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-83 -83 -83 70] -83] [[-29 -55 -55 -55] -55] [[-69 -69 -69 -69] -69] [[-46 -46 69 -46] -46] [[-60 -60 11 -60] -60] [[96 96 78 96] 78] [[53 -71 -71 -71] -71] [[-88 -88 -88 60] -88] [[-23 33 33 33] -23] [[21 -82 21 21] -82] [(94 94 94 94) 94] [(33 33 33 33) 33] [(-3 -3 -3 -3) -3] [(-1 -1 -1 -1) -1] [(-33 -33 -33 -33) -33] [(31 73 6 25) 6] [(100 83 7 64) 7] [(97 28 41 91) 28] [(4 96 33 82) 4] [(85 39 57 35) 35] [(46 4 68 53) 4] [(75 36 86 75) 36] [(11 38 53 26) 11] [(44 100 84 75) 44] [(89 99 94 97) 89] [(46 76 60 60) 46] [(92 40 80 13) 13] [(78 98 73 16) 16] [(74 98 32 36) 32] [(52 50 27 41) 27] [(38 35 90 86) 35] [(92 13 89 4) 4] [(12 68 85 100) 12] [(10 71 68 12) 10] [(13 39 55 72) 13] [(31 -40 45 25) -40] [(71 25 2 -52) -52] [(-30 -9 14 -87) -87] [(3 38 14 82) 3] [(-60 -72 97 -88) -88] [(33 53 2 -7) -7] [(31 66 48 -81) -81] [(-37 22 9 -1) -37] [(86 -39 35 -87) -87] [(-19 -57 95 -44) -57] [(56 -36 -69 55) -69] [(33 -66 97 26) -66] [(-17 80 53 -100) -100] [(-58 9 -87 63) -87] [(-89 39 81 32) -89] [(45 -23 -71 22) -71] [(-17 18 -63 -55) -63] [(-59 22 -82 92) -82] [(-22 -22 -71 20) -71] [(9 -24 -85 96) -85] [(47 17 84 71) 17] [(27 -1 -52 61) -52] [(-37 53 73 88) -37] [(-34 -40 -70 4) -70] [(-15 -44 26 28) -44] [(-87 -30 21 -80) -87] [(64 -97 -34 7) -97] [(-81 -53 -43 43) -81] [(-67 -73 71 -80) -80] [(4 77 -31 -49) -49] [(25 65 -28 95) -28] [(-39 -62 -96 -67) -96] [(-69 -56 49 -30) -69] [(-91 -3 -5 14) -91] [(17 -58 -41 -81) -81] [(-96 19 93 -55) -96] [(-5 20 33 -77) -77] [(-63 -55 70 -78) -78] [(18 -91 -3 -60) -91] [(75 85 75 12) 12] [(37 -16 58 -79) -79] [(0 3 -37 70) -37] [(69 -19 -99 49) -99] [(-64 80 59 29) -64] [(-58 -8 -65 80) -65] [(83 -2 -25 -56) -56] [(-78 -64 94 -77) -78] [(-11 -45 -21 88) -45] [(86 23 -84 36) -84] [(14 -74 75 -98) -98] [(-47 79 -73 -52) -73] [(30 -33 -35 -42) -42] [(-35 -59 -100 3) -100] [(31 -38 -27 -97) -97] [(97 42 -85 -84) -85] [(45 80 -99 -24) -99] [(12 -45 -4 -56) -56] [(68 3 -54 43) -54] [(50 -60 -89 55) -89] [(-47 -19 33 -50) -50])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -29                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 31                 
Correct output: 7                   | Program output: 100                
Correct output: 28                  | Program output: 97                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 85                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 92                 
Correct output: 16                  | Program output: 78                 
Correct output: 32                  | Program output: 74                 
Correct output: 27                  | Program output: 52                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 71                 
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 33                 
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 86                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: 56                 
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 45                 
Correct output: -63                 | Program output: -17                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 64                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: 4                  
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -39                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: 18                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: 83                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 86                 
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -47                
Correct output: -42                 | Program output: 30                 
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: 31                 
Correct output: -85                 | Program output: 97                 
Correct output: -99                 | Program output: 45                 
Correct output: -56                 | Program output: 12                 
Correct output: -54                 | Program output: 68                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction -52} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_frominteger integer_shove integer_inc boolean_invert_first_then_and boolean_xor boolean_shove exec_yank boolean_empty integer_lte in1 print_integer boolean_flush exec_do*times (integer_yankdup) integer_rot exec_dup_items exec_if () (integer_stackdepth boolean_or) exec_shove (integer_yankdup) boolean_dup_items -52 exec_swap (integer_inc) (boolean_dup_items) boolean_xor exec_dup (boolean_dup integer_gt in3 boolean_not) integer_rot boolean_dup_items exec_eq integer_inc integer_lte exec_dup () exec_k (boolean_stackdepth) (boolean_or exec_dup (integer_div exec_do*range (integer_sub) boolean_or print_newline) integer_fromboolean integer_dec) integer_yank in2 exec_dup (exec_swap (integer_stackdepth exec_dup (exec_dup_times (boolean_not boolean_empty))) ()))
Lexicase best errors: [0 1 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 76
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction -52} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_frominteger integer_shove integer_inc boolean_invert_first_then_and boolean_xor boolean_shove exec_yank boolean_empty integer_lte in1 print_integer boolean_flush exec_do*times (integer_yankdup) integer_rot exec_dup_items exec_if () (integer_stackdepth boolean_or) exec_shove (integer_yankdup) boolean_dup_items -52 exec_swap (integer_inc) (boolean_dup_items) boolean_xor exec_dup (boolean_dup integer_gt in3 boolean_not) integer_rot boolean_dup_items exec_eq integer_inc integer_lte exec_dup () exec_k (boolean_stackdepth) (boolean_or exec_dup (integer_div exec_do*range (integer_sub) boolean_or print_newline) integer_fromboolean integer_dec) integer_yank in2 exec_dup (exec_swap (integer_stackdepth exec_dup (exec_dup_times (boolean_not boolean_empty))) ()))
Zero cases best errors: [0 1 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 76
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 2 2 2 6 4 2 13 3 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (5 2 2 2 6 4 2 13 3 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 3, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 2, :instruction print_boolean} {:close 1, :instruction -74} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*times})
Best program: (integer_gte integer_gte integer_gte integer_yank boolean_pop exec_k_when_autoconstructing (boolean_invert_first_then_and exec_dup_times (integer_fromboolean integer_rot) integer_dup_times exec_if () ()) (boolean_shove exec_yank boolean_xor) exec_do*count (integer_div in1 boolean_yankdup exec_rot (boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max print_integer integer_min exec_yank print_boolean) () (-74) integer_lt integer_fromboolean) exec_pop () in4 exec_flush integer_div boolean_shove exec_do*times ())) () ()))
Errors: [0 1 1 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 55
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 9.957
Median total errors in population: 10
Error averages by case: (0.995 0.998 0.998 0.998 0.994 0.996 0.998 0.987 0.997 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.771
Average program size in population (points): 69.959
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 477079
--- Timings ---
Current time: 1559583461975 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 29.1%
Fitness Testing:      1.8 seconds, 67.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -29                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 31                 
Correct output: 7                   | Program output: 100                
Correct output: 28                  | Program output: 97                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 85                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 92                 
Correct output: 16                  | Program output: 78                 
Correct output: 32                  | Program output: 74                 
Correct output: 27                  | Program output: 52                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 71                 
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 33                 
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 86                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: 56                 
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 45                 
Correct output: -63                 | Program output: -17                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 64                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: 4                  
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -39                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: 18                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: 83                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 86                 
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -47                
Correct output: -42                 | Program output: 30                 
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: 31                 
Correct output: -85                 | Program output: 97                 
Correct output: -99                 | Program output: 45                 
Correct output: -56                 | Program output: 12                 
Correct output: -54                 | Program output: 68                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_98} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_823} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_10} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction -20} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 1, :instruction tag_exec_187} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_integer_937} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_pop})
Lexicase best program: (tagged_98 integer_shove boolean_dup_items integer_inc integer_yankdup exec_do*count (print_boolean integer_dup_times tagged_823 integer_flush integer_add exec_yankdup exec_s (integer_eq in4 boolean_and) (integer_dup_times integer_dup_items integer_fromboolean boolean_shove exec_when (boolean_eq in1 print_integer exec_swap (integer_lte exec_swap (integer_lte boolean_not integer_shove in4 boolean_shove) (integer_yank) boolean_invert_first_then_and) (exec_k_when_autoconstructing (exec_when (tagged_10) in1 integer_dup_times) (exec_yank boolean_flush boolean_yank)) exec_noop) -20 integer_empty) (exec_k (integer_swap tag_exec_187 () integer_dec exec_stackdepth boolean_invert_first_then_and tag_integer_937 exec_while (boolean_yankdup exec_when (print_integer boolean_dup_items boolean_dup print_boolean exec_yankdup exec_k (in4 in1 exec_eq integer_yankdup in1) (exec_eq exec_empty boolean_pop) boolean_and boolean_dup_items integer_lte integer_fromboolean exec_do*range (boolean_dup_times exec_k_when_autoconstructing (exec_when (boolean_shove integer_fromboolean integer_min integer_sub exec_k (integer_eq) (integer_swap boolean_pop integer_shove) integer_inc) boolean_frominteger exec_do*times (integer_gt exec_if (exec_do*range () integer_pop) ())) ())))) ())))
Lexicase best errors: [0 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 123
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_98} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_823} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_10} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction -20} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 1, :instruction tag_exec_187} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_integer_937} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_pop})
Zero cases best program: (tagged_98 integer_shove boolean_dup_items integer_inc integer_yankdup exec_do*count (print_boolean integer_dup_times tagged_823 integer_flush integer_add exec_yankdup exec_s (integer_eq in4 boolean_and) (integer_dup_times integer_dup_items integer_fromboolean boolean_shove exec_when (boolean_eq in1 print_integer exec_swap (integer_lte exec_swap (integer_lte boolean_not integer_shove in4 boolean_shove) (integer_yank) boolean_invert_first_then_and) (exec_k_when_autoconstructing (exec_when (tagged_10) in1 integer_dup_times) (exec_yank boolean_flush boolean_yank)) exec_noop) -20 integer_empty) (exec_k (integer_swap tag_exec_187 () integer_dec exec_stackdepth boolean_invert_first_then_and tag_integer_937 exec_while (boolean_yankdup exec_when (print_integer boolean_dup_items boolean_dup print_boolean exec_yankdup exec_k (in4 in1 exec_eq integer_yankdup in1) (exec_eq exec_empty boolean_pop) boolean_and boolean_dup_items integer_lte integer_fromboolean exec_do*range (boolean_dup_times exec_k_when_autoconstructing (exec_when (boolean_shove integer_fromboolean integer_min integer_sub exec_k (integer_eq) (integer_swap boolean_pop integer_shove) integer_inc) boolean_frominteger exec_do*times (integer_gt exec_if (exec_do*range () integer_pop) ())) ())))) ())))
Zero cases best errors: [0 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 123
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (417 422 267 267 267 603 104 421 57 417)
Population mean number of elite cases: 3.24
Count of perfect (error zero) individuals by case: (417 422 267 267 267 603 104 421 57 417)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction tag_exec_786} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range})
Best program: (in1 integer_max print_integer integer_dec exec_while (exec_yankdup exec_rot () (tag_exec_786 (integer_shove) boolean_rot integer_dup_items boolean_pop exec_empty exec_do*times () exec_while (exec_s () (exec_when (exec_stackdepth exec_stackdepth exec_if (integer_swap boolean_flush in1 integer_dup_times exec_s_when_autoconstructing (in3) (boolean_rot integer_flush) (integer_min integer_mult integer_dup boolean_yank exec_when (integer_empty exec_k_when_autoconstructing (exec_while (in3 integer_gt) integer_shove) (integer_gt integer_gt boolean_not) integer_dup_items integer_dup_items boolean_flush exec_eq print_integer boolean_rot boolean_or exec_k (integer_mult) (in3) print_integer exec_stackdepth) exec_s_when_autoconstructing (integer_fromboolean boolean_not integer_mod boolean_swap exec_noop exec_yankdup exec_do*range ()) () ())) ())) ())) ()))
Errors: [0 0 1 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 89
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 6.758
Median total errors in population: 7
Error averages by case: (0.583 0.578 0.733 0.733 0.733 0.397 0.896 0.579 0.943 0.583)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.224
Average program size in population (points): 79.537
Average percent parens in population: 0.272
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.509
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 964213
--- Timings ---
Current time: 1559583464483 milliseconds
Total Time:           5.4 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 45.3%
Fitness Testing:      2.4 seconds, 45.3%
Report:               0.4 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline})
Lexicase best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_k_when_autoconstructing (integer_dup_items boolean_and exec_shove (integer_gt in4 boolean_rot) print_integer) (exec_flush exec_pop (integer_mult integer_dup_times) integer_min integer_empty exec_stackdepth integer_max boolean_rot) exec_when () exec_eq integer_max exec_rot () (boolean_invert_second_then_and exec_yank integer_eq print_newline) ())
Lexicase best errors: [1 1 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline})
Zero cases best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_k_when_autoconstructing (integer_dup_items boolean_and exec_shove (integer_gt in4 boolean_rot) print_integer) (exec_flush exec_pop (integer_mult integer_dup_times) integer_min integer_empty exec_stackdepth integer_max boolean_rot) exec_when () exec_eq integer_max exec_rot () (boolean_invert_second_then_and exec_yank integer_eq print_newline) ())
Zero cases best errors: [1 1 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (440 1 880 212 226 226 212 1 212 212)
Population mean number of elite cases: 2.62
Count of perfect (error zero) individuals by case: (440 1 880 212 226 226 212 1 212 212)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_461} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_k} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 1, :instruction exec_eq})
Best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_461 boolean_yank in1) (integer_add exec_dup () boolean_empty) (boolean_yankdup integer_shove tag_boolean_345) exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (exec_when (exec_do*times (integer_dup_items exec_dup_items exec_flush boolean_dup_times) boolean_shove) integer_min boolean_rot) boolean_frominteger integer_empty integer_lte) 37 exec_k (in1) (exec_dup (integer_yankdup integer_inc exec_swap (print_integer integer_dup_items integer_mult) (integer_pop integer_dup_times) integer_max integer_yank boolean_empty) boolean_dup integer_mult exec_s_when_autoconstructing (integer_inc) (integer_sub exec_k_when_autoconstructing (exec_y (integer_lt exec_dup_items integer_add) exec_eq) ()) ())))
Errors: [1 1 0 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 83
Size: 107
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 7.378
Median total errors in population: 8
Error averages by case: (0.56 0.999 0.12 0.788 0.774 0.774 0.788 0.999 0.788 0.788)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.211
Average program size in population (points): 82.333
Average percent parens in population: 0.261
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9765
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1330297
--- Timings ---
Current time: 1559583467139 milliseconds
Total Time:           8.0 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.4 seconds, 55.2%
Fitness Testing:      2.9 seconds, 35.8%
Report:               0.6 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_413} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_k} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop})
Lexicase best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_413 boolean_yank in1) (integer_add integer_dup) (exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup exec_swap (tag_boolean_345) (exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (exec_when (integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) boolean_shove) integer_min boolean_rot) boolean_frominteger integer_empty integer_lte) 37 exec_k (in1) (exec_dup (integer_yankdup integer_inc exec_swap (print_integer integer_dup_items integer_mult) (integer_pop))))))
Lexicase best errors: [1 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 94
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_413} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_k} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop})
Zero cases best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_413 boolean_yank in1) (integer_add integer_dup) (exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup exec_swap (tag_boolean_345) (exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (exec_when (integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) boolean_shove) integer_min boolean_rot) boolean_frominteger integer_empty integer_lte) 37 exec_k (in1) (exec_dup (integer_yankdup integer_inc exec_swap (print_integer integer_dup_items integer_mult) (integer_pop))))))
Zero cases best errors: [1 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 94
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (171 436 443 95 425 523 96 863 177 785)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (171 436 443 95 425 523 96 863 177 785)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_integer_413} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_k} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 1, :instruction exec_eq})
Best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 boolean_yank print_newline tagged_170 boolean_dup_items integer_swap boolean_and exec_yank integer_dup in4 exec_stackdepth print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline integer_mult tag_integer_413 boolean_yank in1 integer_add integer_dup exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (exec_when (integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) boolean_shove) integer_min boolean_rot) boolean_frominteger integer_empty integer_lte) 37 exec_k (in1) (exec_dup (integer_yankdup integer_inc exec_swap (print_integer integer_dup_items integer_mult) (integer_pop integer_dup_times) integer_mult exec_s_when_autoconstructing (integer_inc) (integer_sub exec_k_when_autoconstructing (exec_y (integer_lt exec_dup_items integer_add) exec_eq) ()) ())))
Errors: [1 0 1 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 101
Size: 123
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 5.986
Median total errors in population: 5
Error averages by case: (0.829 0.564 0.557 0.905 0.575 0.477 0.904 0.137 0.823 0.215)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.441
Average program size in population (points): 89.341
Average percent parens in population: 0.226
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.6925
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1667585
--- Timings ---
Current time: 1559583469875 milliseconds
Total Time:          10.7 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.5 seconds, 60.6%
Fitness Testing:      3.3 seconds, 30.5%
Report:               0.9 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_461} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range})
Lexicase best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_461 boolean_yank in1) (integer_add exec_dup () boolean_empty) (boolean_yankdup integer_shove tag_boolean_345) exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt boolean_dup_times integer_fromboolean exec_flush exec_if () (boolean_not) integer_dup_items integer_dup_items boolean_flush exec_eq print_integer boolean_rot boolean_or exec_k (integer_mult) (integer_div print_integer exec_stackdepth) exec_when (integer_fromboolean boolean_not integer_mod boolean_swap exec_noop exec_yankdup exec_do*range ())))
Lexicase best errors: [0 0 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_461} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range})
Zero cases best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_461 boolean_yank in1) (integer_add exec_dup () boolean_empty) (boolean_yankdup integer_shove tag_boolean_345) exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt boolean_dup_times integer_fromboolean exec_flush exec_if () (boolean_not) integer_dup_items integer_dup_items boolean_flush exec_eq print_integer boolean_rot boolean_or exec_k (integer_mult) (integer_div print_integer exec_stackdepth) exec_when (integer_fromboolean boolean_not integer_mod boolean_swap exec_noop exec_yankdup exec_do*range ())))
Zero cases best errors: [0 0 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 297 296 120 297 297 297 694 271 161)
Population mean number of elite cases: 3.03
Count of perfect (error zero) individuals by case: (297 297 296 120 297 297 297 694 271 161)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_k} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 1, :instruction exec_eq})
Best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (exec_when (integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) boolean_shove) exec_flush boolean_rot) boolean_frominteger integer_empty integer_lte) 37 exec_k (in1) (exec_dup (integer_yankdup integer_inc exec_swap (exec_eq integer_dup_items integer_mult) (integer_pop integer_dup_times) integer_max integer_yank boolean_empty) boolean_dup print_integer exec_s_when_autoconstructing (integer_inc) (integer_sub exec_k_when_autoconstructing (exec_y (integer_lt exec_dup_items integer_add) exec_eq) ()) ()))
Errors: [0 0 0 1 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 85
Size: 107
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 6.973
Median total errors in population: 8
Error averages by case: (0.703 0.703 0.704 0.88 0.703 0.703 0.703 0.306 0.729 0.839)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.613
Average program size in population (points): 81.807
Average percent parens in population: 0.241
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 6.01575
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2116650
--- Timings ---
Current time: 1559583472593 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.5 seconds, 63.3%
Fitness Testing:      3.8 seconds, 27.9%
Report:               1.1 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_eq exec_when (boolean_xor) boolean_frominteger boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_eq print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank) boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (integer_shove) ())) ())))
Lexicase best errors: [0 0 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_eq exec_when (boolean_xor) boolean_frominteger boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_eq print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank) boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (integer_shove) ())) ())))
Zero cases best errors: [0 0 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 876 165 884 10 793 632 10 73 71)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (10 876 165 884 10 793 632 10 73 71)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Best program: (integer_eq exec_when (boolean_xor) boolean_frominteger boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank) boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (integer_shove) ())) ()))
Errors: [0 0 1 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 55
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 6.476
Median total errors in population: 6
Error averages by case: (0.99 0.124 0.835 0.116 0.99 0.207 0.368 0.99 0.927 0.929)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.507
Average program size in population (points): 85.084
Average percent parens in population: 0.220
Minimum age in population: 5.0
Maximum age in population: 9.625
Average age in population: 7.48875
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2423528
--- Timings ---
Current time: 1559583475689 milliseconds
Total Time:          16.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.0 seconds, 66.8%
Fitness Testing:      4.1 seconds, 24.7%
Report:               1.3 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: -82                
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 73                 
Correct output: 7                   | Program output: 83                 
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 96                 
Correct output: 35                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 36                  | Program output: 36                 
Correct output: 11                  | Program output: 38                 
Correct output: 44                  | Program output: 100                
Correct output: 89                  | Program output: 99                 
Correct output: 46                  | Program output: 76                 
Correct output: 13                  | Program output: 40                 
Correct output: 16                  | Program output: 98                 
Correct output: 32                  | Program output: 98                 
Correct output: 27                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 13                 
Correct output: 12                  | Program output: 68                 
Correct output: 10                  | Program output: 71                 
Correct output: 13                  | Program output: 39                 
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: 25                 
Correct output: -87                 | Program output: -9                 
Correct output: 3                   | Program output: 38                 
Correct output: -88                 | Program output: -72                
Correct output: -7                  | Program output: 53                 
Correct output: -81                 | Program output: 66                 
Correct output: -37                 | Program output: 22                 
Correct output: -87                 | Program output: -39                
Correct output: -57                 | Program output: -57                
Correct output: -69                 | Program output: -36                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: 80                 
Correct output: -87                 | Program output: 9                  
Correct output: -89                 | Program output: 39                 
Correct output: -71                 | Program output: -23                
Correct output: -63                 | Program output: 18                 
Correct output: -82                 | Program output: 22                 
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: -24                
Correct output: 17                  | Program output: 17                 
Correct output: -52                 | Program output: -1                 
Correct output: -37                 | Program output: 53                 
Correct output: -70                 | Program output: -40                
Correct output: -44                 | Program output: -44                
Correct output: -87                 | Program output: -30                
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: -53                
Correct output: -80                 | Program output: -73                
Correct output: -49                 | Program output: 77                 
Correct output: -28                 | Program output: 65                 
Correct output: -96                 | Program output: -62                
Correct output: -69                 | Program output: -56                
Correct output: -91                 | Program output: -3                 
Correct output: -81                 | Program output: -58                
Correct output: -96                 | Program output: 19                 
Correct output: -77                 | Program output: 20                 
Correct output: -78                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 12                  | Program output: 85                 
Correct output: -79                 | Program output: -16                
Correct output: -37                 | Program output: 3                  
Correct output: -99                 | Program output: -19                
Correct output: -64                 | Program output: 80                 
Correct output: -65                 | Program output: -8                 
Correct output: -56                 | Program output: -2                 
Correct output: -78                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -84                 | Program output: 23                 
Correct output: -98                 | Program output: -74                
Correct output: -73                 | Program output: 79                 
Correct output: -42                 | Program output: -33                
Correct output: -100                | Program output: -59                
Correct output: -97                 | Program output: -38                
Correct output: -85                 | Program output: 42                 
Correct output: -99                 | Program output: 80                 
Correct output: -56                 | Program output: -45                
Correct output: -54                 | Program output: 3                  
Correct output: -89                 | Program output: -60                
Correct output: -50                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_eq exec_when (boolean_xor) boolean_frominteger boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq print_integer exec_do*range (boolean_yankdup boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank) boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (integer_shove) ())) ()))
Lexicase best errors: [0 1 1 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 55
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_eq exec_when (boolean_xor) boolean_frominteger boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq print_integer exec_do*range (boolean_yankdup boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank) boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (integer_shove) ())) ()))
Zero cases best errors: [0 1 1 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (368 192 100 1 157 103 99 157 561 369)
Population mean number of elite cases: 2.11
Count of perfect (error zero) individuals by case: (368 192 100 1 157 103 99 157 561 369)
Population mean number of perfect (error zero) cases: 2.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_823} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_10} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction -20} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_187} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_integer_937} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean})
Best program: (integer_add exec_dup_items integer_dup integer_dup integer_shove boolean_dup_items integer_inc integer_yankdup exec_do*count (print_boolean integer_dup_times tagged_823 integer_flush integer_add exec_yankdup integer_swap integer_eq in4 boolean_and) integer_dup_times integer_dup_items integer_fromboolean boolean_shove exec_when (exec_do*range (in2 print_integer exec_swap (integer_lte boolean_invert_second_then_and integer_lte boolean_not integer_shove in4 boolean_shove) (integer_yank) boolean_invert_first_then_and) exec_y_when_autoconstructing (exec_when (tagged_10) in1 integer_dup_times) exec_yank boolean_flush boolean_yank) exec_noop -20 integer_empty exec_k (integer_swap tag_exec_187 (integer_dec exec_stackdepth boolean_invert_first_then_and tag_integer_937 exec_while (boolean_yankdup exec_when (print_integer boolean_dup_items boolean_dup print_boolean exec_yankdup exec_k (in4 in1 exec_eq integer_yankdup in1) (exec_eq exec_empty boolean_pop) boolean_and boolean_dup_items) integer_lte integer_fromboolean exec_do*range (boolean_dup_times integer_shove exec_when (boolean_shove integer_fromboolean))))) ())
Errors: [1 1 0 1 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 82
Size: 99
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 7.893
Median total errors in population: 8
Error averages by case: (0.632 0.808 0.9 0.999 0.843 0.897 0.901 0.843 0.439 0.631)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.101
Average program size in population (points): 63.274
Average percent parens in population: 0.264
Minimum age in population: 6.0
Maximum age in population: 10.75
Average age in population: 8.8348125
Median age in population: 8.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.004
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2941885
--- Timings ---
Current time: 1559583478649 milliseconds
Total Time:          19.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.1 seconds, 67.6%
Fitness Testing:      4.6 seconds, 23.6%
Report:               1.6 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_eq exec_when (boolean_xor) boolean_frominteger boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () () integer_dup_times) boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (integer_shove) ())) ())
Lexicase best errors: [0 0 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_eq exec_when (boolean_xor) boolean_frominteger boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () () integer_dup_times) boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (integer_shove) ())) ())
Zero cases best errors: [0 0 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 264 180 180 180 253 140 213 213 264)
Population mean number of elite cases: 2.10
Count of perfect (error zero) individuals by case: (214 264 180 180 180 253 140 213 213 264)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup})
Best program: (exec_when (boolean_xor) boolean_frominteger boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank) boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) ()) ()))
Errors: [0 0 1 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 50
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 7.899
Median total errors in population: 9
Error averages by case: (0.786 0.736 0.82 0.82 0.82 0.747 0.86 0.787 0.787 0.736)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.054
Average program size in population (points): 67.984
Average percent parens in population: 0.223
Minimum age in population: 7.0
Maximum age in population: 12.21875
Average age in population: 10.436234375
Median age in population: 10.453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3407499
--- Timings ---
Current time: 1559583481447 milliseconds
Total Time:          22.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.2 seconds, 68.2%
Fitness Testing:      5.0 seconds, 22.5%
Report:               2.0 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_413} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_add exec_dup_items integer_dup integer_dup exec_y_when_autoconstructing (in3 integer_add print_integer integer_swap boolean_dup_times) exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline tagged_170 integer_lt integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_413 boolean_yank in1) (integer_add integer_dup) (exec_stackdepth in1 in1 boolean_yankdup) integer_dup integer_shove)
Lexicase best errors: [0 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 43
Percent parens: 0.140
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_413} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_add exec_dup_items integer_dup integer_dup exec_y_when_autoconstructing (in3 integer_add print_integer integer_swap boolean_dup_times) exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline tagged_170 integer_lt integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_413 boolean_yank in1) (integer_add integer_dup) (exec_stackdepth in1 in1 boolean_yankdup) integer_dup integer_shove)
Zero cases best errors: [0 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 43
Percent parens: 0.140
--- Lexicase Population Statistics ---
Count of elite individuals by case: (282 281 84 281 845 282 281 390 281 282)
Population mean number of elite cases: 3.29
Count of perfect (error zero) individuals by case: (282 281 84 281 845 282 281 390 281 282)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_integer_461} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3})
Best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline integer_dup_times tag_integer_461 boolean_yank in1 integer_add boolean_pop exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3))
Errors: [0 0 1 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 46
Size: 53
Percent parens: 0.132
--- Population Statistics ---
Average total errors in population: 6.711
Median total errors in population: 8
Error averages by case: (0.718 0.719 0.916 0.719 0.155 0.718 0.719 0.61 0.719 0.718)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.627
Average program size in population (points): 62.284
Average percent parens in population: 0.240
Minimum age in population: 8.0
Maximum age in population: 13.6796875
Average age in population: 11.898671875
Median age in population: 12.015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3790141
--- Timings ---
Current time: 1559583484684 milliseconds
Total Time:          25.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.9 seconds, 69.8%
Fitness Testing:      5.4 seconds, 21.1%
Report:               2.2 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 1, :instruction exec_eq})
Lexicase best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (integer_empty integer_dup exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (boolean_stackdepth integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) boolean_shove) exec_flush boolean_rot) boolean_frominteger integer_empty integer_lte 37 exec_y_when_autoconstructing (in1) exec_dup (integer_yankdup integer_inc exec_swap (exec_eq integer_dup_items integer_mult) (integer_pop integer_dup_times) integer_max integer_yank boolean_empty) boolean_dup print_integer exec_s_when_autoconstructing (integer_inc) (integer_sub exec_k_when_autoconstructing (exec_y (integer_lt exec_dup_items integer_add) exec_eq) ()) ())
Lexicase best errors: [1 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 105
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 1, :instruction exec_eq})
Zero cases best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (integer_empty integer_dup exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (boolean_stackdepth integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) boolean_shove) exec_flush boolean_rot) boolean_frominteger integer_empty integer_lte 37 exec_y_when_autoconstructing (in1) exec_dup (integer_yankdup integer_inc exec_swap (exec_eq integer_dup_items integer_mult) (integer_pop integer_dup_times) integer_max integer_yank boolean_empty) boolean_dup print_integer exec_s_when_autoconstructing (integer_inc) (integer_sub exec_k_when_autoconstructing (exec_y (integer_lt exec_dup_items integer_add) exec_eq) ()) ())
Zero cases best errors: [1 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 105
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 86 81 86 747 1000 745 836 1000 747)
Population mean number of elite cases: 6.33
Count of perfect (error zero) individuals by case: (0 86 81 86 747 0 745 836 0 747)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_461} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean})
Best program: (boolean_xor boolean_invert_first_then_and in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_461 boolean_yank in1) (integer_add integer_dup) (exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items integer_eq exec_dup () integer_div) boolean_yankdup integer_shove tag_boolean_345) exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (exec_when (integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) integer_dup) integer_min exec_eq exec_empty boolean_pop) boolean_and boolean_dup_items integer_lte integer_fromboolean exec_do*range (boolean_dup_times integer_shove exec_when (boolean_shove integer_fromboolean))))
Errors: [1 1 1 1 0 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 72
Size: 87
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 6.672
Median total errors in population: 6
Error averages by case: (1.0 0.914 0.919 0.914 0.253 1.0 0.255 0.164 1.0 0.253)
Error minima by case: (1 0 0 0 0 1 0 0 1 0)
Average genome size in population (length): 53.557
Average program size in population (points): 68.052
Average percent parens in population: 0.215
Minimum age in population: 9.0
Maximum age in population: 15.25390625
Average age in population: 13.3758828125
Median age in population: 13.46484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4022191
--- Timings ---
Current time: 1559583487310 milliseconds
Total Time:          28.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.1 seconds, 71.1%
Fitness Testing:      5.7 seconds, 20.0%
Report:               2.4 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_461} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty})
Lexicase best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_461 boolean_yank in1) (integer_add integer_dup) (exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_swap integer_shove tag_boolean_345) exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 in1 integer_dup_times exec_do*range (exec_pop (exec_when (integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) boolean_shove) integer_min boolean_rot) boolean_frominteger integer_empty))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 75
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_461} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty})
Zero cases best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_461 boolean_yank in1) (integer_add integer_dup) (exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_swap integer_shove tag_boolean_345) exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 in1 integer_dup_times exec_do*range (exec_pop (exec_when (integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) boolean_shove) integer_min boolean_rot) boolean_frominteger integer_empty))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 75
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (479 478 480 281 1000 109 870 480 480 480)
Population mean number of elite cases: 5.14
Count of perfect (error zero) individuals by case: (479 478 480 281 0 109 870 480 480 480)
Population mean number of perfect (error zero) cases: 4.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_10} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction -20} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 1, :instruction tag_exec_187} {:close 0, :instruction integer_dec})
Best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times integer_shove integer_gt integer_yankdup exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth in4 boolean_shove integer_yank integer_gt exec_y_when_autoconstructing (exec_when (tagged_10) in1 integer_dup_times) exec_yank boolean_flush boolean_yank exec_noop -20 integer_empty exec_k (integer_swap tag_exec_187 () integer_dec) ())
Errors: [0 0 0 1 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 35
Size: 41
Percent parens: 0.146
--- Population Statistics ---
Average total errors in population: 5.863
Median total errors in population: 8
Error averages by case: (0.521 0.522 0.52 0.719 1.0 0.891 0.13 0.52 0.52 0.52)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 55.518
Average program size in population (points): 70.884
Average percent parens in population: 0.220
Minimum age in population: 11.1875
Maximum age in population: 17.166015625
Average age in population: 14.832041015625
Median age in population: 14.8955078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4386991
--- Timings ---
Current time: 1559583489620 milliseconds
Total Time:          30.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.8 seconds, 71.5%
Fitness Testing:      6.0 seconds, 19.7%
Report:               2.6 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_461} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction -20} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 1, :instruction tag_exec_187} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_integer_937} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range})
Lexicase best program: (integer_add boolean_xor exec_yank in3 integer_add print_integer integer_swap integer_flush exec_noop integer_gt integer_yankdup exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline tagged_170 boolean_dup_items integer_swap boolean_and integer_mod exec_s_when_autoconstructing (tag_integer_461 boolean_yank in1) (integer_add integer_dup) (exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove integer_eq integer_mult boolean_empty boolean_yankdup integer_shove tag_boolean_345) exec_rot () (exec_yankdup print_boolean exec_eq -20 integer_empty exec_k (integer_swap tag_exec_187 () integer_dec exec_stackdepth boolean_invert_first_then_and tag_integer_937 exec_while (boolean_empty exec_when (print_integer boolean_dup_items boolean_dup print_boolean exec_yankdup) exec_k (in4 in1 exec_eq integer_yankdup in1) (exec_eq exec_empty) boolean_pop) boolean_and boolean_dup_items integer_lte integer_fromboolean exec_do*range ()) ()) ())
Lexicase best errors: [1 0 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 97
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_461} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction -20} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 1, :instruction tag_exec_187} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_integer_937} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range})
Zero cases best program: (integer_add boolean_xor exec_yank in3 integer_add print_integer integer_swap integer_flush exec_noop integer_gt integer_yankdup exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline tagged_170 boolean_dup_items integer_swap boolean_and integer_mod exec_s_when_autoconstructing (tag_integer_461 boolean_yank in1) (integer_add integer_dup) (exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove integer_eq integer_mult boolean_empty boolean_yankdup integer_shove tag_boolean_345) exec_rot () (exec_yankdup print_boolean exec_eq -20 integer_empty exec_k (integer_swap tag_exec_187 () integer_dec exec_stackdepth boolean_invert_first_then_and tag_integer_937 exec_while (boolean_empty exec_when (print_integer boolean_dup_items boolean_dup print_boolean exec_yankdup) exec_k (in4 in1 exec_eq integer_yankdup in1) (exec_eq exec_empty) boolean_pop) boolean_and boolean_dup_items integer_lte integer_fromboolean exec_do*range ()) ()) ())
Zero cases best errors: [1 0 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 97
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (116 673 673 116 116 116 1 908 673 673)
Population mean number of elite cases: 4.07
Count of perfect (error zero) individuals by case: (116 673 673 116 116 116 1 908 673 673)
Population mean number of perfect (error zero) cases: 4.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 2, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap exec_y_when_autoconstructing (integer_eq print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank) boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1) (boolean_yankdup) exec_k_when_autoconstructing (integer_shove) ()) ())
Errors: [1 0 0 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 37
Size: 51
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 5.935
Median total errors in population: 5
Error averages by case: (0.884 0.327 0.327 0.884 0.884 0.884 0.999 0.092 0.327 0.327)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.902
Average program size in population (points): 66.274
Average percent parens in population: 0.220
Minimum age in population: 12.1875
Maximum age in population: 18.37109375
Average age in population: 16.328765625
Median age in population: 16.41455078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4642819
--- Timings ---
Current time: 1559583492124 milliseconds
Total Time:          33.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.8 seconds, 72.2%
Fitness Testing:      6.3 seconds, 19.1%
Report:               2.8 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -29                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 31                 
Correct output: 7                   | Program output: 100                
Correct output: 28                  | Program output: 97                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 85                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 92                 
Correct output: 16                  | Program output: 78                 
Correct output: 32                  | Program output: 74                 
Correct output: 27                  | Program output: 52                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 71                 
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 33                 
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 86                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: 56                 
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 45                 
Correct output: -63                 | Program output: -17                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 64                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: 4                  
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -39                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: 18                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: 83                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 86                 
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -47                
Correct output: -42                 | Program output: 30                 
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: 31                 
Correct output: -85                 | Program output: 97                 
Correct output: -99                 | Program output: 45                 
Correct output: -56                 | Program output: 12                 
Correct output: -54                 | Program output: 68                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_413} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction 72} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_k} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and})
Lexicase best program: (boolean_xor exec_yank in1 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup boolean_frominteger exec_s_when_autoconstructing (tag_integer_413 boolean_yank integer_shove) () (boolean_yank integer_dup exec_stackdepth exec_do*times (integer_empty integer_sub 72 integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 boolean_yankdup integer_shove tag_boolean_345) exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (exec_when (integer_swap integer_dup_items exec_dup_items exec_flush boolean_rot) boolean_shove) integer_min boolean_rot) boolean_frominteger integer_empty integer_lte) 37 exec_k (in1) (exec_dup (exec_yankdup integer_inc exec_swap (print_integer integer_dup_items integer_mult) (integer_pop in1) exec_eq exec_empty boolean_pop) boolean_and))
Lexicase best errors: [0 1 1 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 99
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_413} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction 72} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_k} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and})
Zero cases best program: (boolean_xor exec_yank in1 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup boolean_frominteger exec_s_when_autoconstructing (tag_integer_413 boolean_yank integer_shove) () (boolean_yank integer_dup exec_stackdepth exec_do*times (integer_empty integer_sub 72 integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 boolean_yankdup integer_shove tag_boolean_345) exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (exec_when (integer_swap integer_dup_items exec_dup_items exec_flush boolean_rot) boolean_shove) integer_min boolean_rot) boolean_frominteger integer_empty integer_lte) 37 exec_k (in1) (exec_dup (exec_yankdup integer_inc exec_swap (print_integer integer_dup_items integer_mult) (integer_pop in1) exec_eq exec_empty boolean_pop) boolean_and))
Zero cases best errors: [0 1 1 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 99
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (104 398 4 104 104 501 400 4 108 401)
Population mean number of elite cases: 2.13
Count of perfect (error zero) individuals by case: (104 398 4 104 104 501 400 4 108 401)
Population mean number of perfect (error zero) cases: 2.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1})
Best program: (boolean_xor exec_yank in1 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup boolean_frominteger in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items) integer_eq exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (boolean_stackdepth integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) boolean_shove) exec_flush boolean_rot) boolean_frominteger integer_empty integer_lte 37 exec_y_when_autoconstructing (in1))
Errors: [0 1 1 0 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 62
Size: 73
Percent parens: 0.151
--- Population Statistics ---
Average total errors in population: 7.872
Median total errors in population: 6
Error averages by case: (0.896 0.602 0.996 0.896 0.896 0.499 0.6 0.996 0.892 0.599)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.745
Average program size in population (points): 61.07
Average percent parens in population: 0.239
Minimum age in population: 15.2265625
Maximum age in population: 19.685546875
Average age in population: 17.6261484375
Median age in population: 17.711669921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4942125
--- Timings ---
Current time: 1559583494396 milliseconds
Total Time:          35.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.6 seconds, 72.4%
Fitness Testing:      6.6 seconds, 18.7%
Report:               3.0 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_10} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_eq boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_stackdepth exec_k () () exec_yank boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345 print_integer exec_swap (integer_lte boolean_invert_second_then_and integer_lte boolean_not integer_shove in4 boolean_shove integer_yank) (boolean_invert_first_then_and) exec_y_when_autoconstructing (exec_when (tagged_10) in1 integer_dup_times) exec_yank boolean_flush boolean_yank) exec_noop)
Lexicase best errors: [1 1 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_10} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_eq boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_stackdepth exec_k () () exec_yank boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345 print_integer exec_swap (integer_lte boolean_invert_second_then_and integer_lte boolean_not integer_shove in4 boolean_shove integer_yank) (boolean_invert_first_then_and) exec_y_when_autoconstructing (exec_when (tagged_10) in1 integer_dup_times) exec_yank boolean_flush boolean_yank) exec_noop)
Zero cases best errors: [1 1 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 386 309 309 386 309 309 4 4 222)
Population mean number of elite cases: 2.24
Count of perfect (error zero) individuals by case: (4 386 309 309 386 309 309 4 4 222)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush exec_do*range (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_swap boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean integer_gte exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup exec_k_when_autoconstructing (integer_shove) ()) ()) ())
Errors: [1 1 0 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 39
Size: 53
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 7.758
Median total errors in population: 8
Error averages by case: (0.996 0.614 0.691 0.691 0.614 0.691 0.691 0.996 0.996 0.778)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.419
Average program size in population (points): 66.031
Average percent parens in population: 0.193
Minimum age in population: 16.7421875
Maximum age in population: 21.055908203125
Average age in population: 19.01514477539062
Median age in population: 19.001220703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5182578
--- Timings ---
Current time: 1559583496783 milliseconds
Total Time:          37.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.6 seconds, 73.1%
Fitness Testing:      6.9 seconds, 18.2%
Report:               3.2 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_461} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (boolean_xor boolean_invert_first_then_and in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_461 boolean_yank in1) (integer_add integer_dup) (exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items integer_eq exec_dup () integer_div) boolean_yankdup integer_shove tag_boolean_345) exec_rot () (exec_yankdup print_boolean) (exec_eq boolean_dup_times) integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (exec_when (integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) integer_dup) integer_min exec_eq exec_empty) boolean_pop boolean_and boolean_dup_items)
Lexicase best errors: [1 0 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 77
Percent parens: 0.169
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_461} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (boolean_xor boolean_invert_first_then_and in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_461 boolean_yank in1) (integer_add integer_dup) (exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items integer_eq exec_dup () integer_div) boolean_yankdup integer_shove tag_boolean_345) exec_rot () (exec_yankdup print_boolean) (exec_eq boolean_dup_times) integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (exec_when (integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) integer_dup) integer_min exec_eq exec_empty) boolean_pop boolean_and boolean_dup_items)
Zero cases best errors: [1 0 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 77
Percent parens: 0.169
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 390 195 390 390 389 388 390 220 84)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (221 390 195 390 390 389 388 390 220 84)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_shove})
Best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap exec_k () () exec_yank boolean_shove exec_flush boolean_empty exec_pop (exec_s () (boolean_empty) (boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (integer_shove) ())) ()))
Errors: [1 0 1 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 29
Size: 43
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 6.943
Median total errors in population: 8
Error averages by case: (0.779 0.61 0.805 0.61 0.61 0.611 0.612 0.61 0.78 0.916)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.048
Average program size in population (points): 64.919
Average percent parens in population: 0.201
Minimum age in population: 17.7421875
Maximum age in population: 22.511474609375
Average age in population: 20.48456176757812
Median age in population: 20.5496826171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5561711
--- Timings ---
Current time: 1559583499624 milliseconds
Total Time:          40.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.9 seconds, 73.6%
Fitness Testing:      7.2 seconds, 17.8%
Report:               3.4 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_eq exec_yank integer_dup exec_flush exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank boolean_and exec_shove (integer_gt in4 boolean_rot) print_integer exec_flush exec_pop (integer_mult) integer_dup_times integer_min integer_empty exec_stackdepth integer_max boolean_rot exec_when () exec_eq integer_max exec_rot () (boolean_invert_second_then_and) ())
Lexicase best errors: [0 1 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_eq exec_yank integer_dup exec_flush exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank boolean_and exec_shove (integer_gt in4 boolean_rot) print_integer exec_flush exec_pop (integer_mult) integer_dup_times integer_min integer_empty exec_stackdepth integer_max boolean_rot exec_when () exec_eq integer_max exec_rot () (boolean_invert_second_then_and) ())
Zero cases best errors: [0 1 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (556 79 102 557 557 165 739 100 901 557)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (556 79 102 557 557 165 739 100 901 557)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_eq exec_yank integer_dup exec_flush exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank boolean_and exec_shove (integer_gt in4 boolean_rot) print_integer exec_flush exec_pop (integer_mult) integer_dup_times integer_min integer_empty exec_stackdepth integer_max boolean_rot exec_when () exec_eq integer_max exec_rot () (boolean_invert_second_then_and) ())
Errors: [0 1 1 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 36
Size: 44
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 5.687
Median total errors in population: 4
Error averages by case: (0.444 0.921 0.898 0.443 0.443 0.835 0.261 0.9 0.099 0.443)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.402
Average program size in population (points): 63.322
Average percent parens in population: 0.206
Minimum age in population: 19.68896484375
Maximum age in population: 23.7490234375
Average age in population: 22.01461877441406
Median age in population: 22.08270263671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5882059
--- Timings ---
Current time: 1559583502521 milliseconds
Total Time:          43.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.3 seconds, 74.2%
Fitness Testing:      7.6 seconds, 17.4%
Report:               3.5 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 684
Test mean error for best: 0.68400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: -49                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output:                    
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output:                    
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output:                    
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_newline} {:close 1, :instruction print_newline} {:close 1, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_461} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (boolean_yankdup exec_yank in3 boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_invert_second_then_and exec_shove () integer_gt integer_yankdup exec_flush boolean_eq exec_yank integer_dup in4 boolean_eq print_newline print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_461 boolean_yank in1 integer_add exec_dup () boolean_empty) (boolean_yankdup integer_shove tag_boolean_345) (exec_rot () (exec_yankdup print_boolean exec_eq) (boolean_dup_times) integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (exec_when (integer_swap integer_dup_items exec_eq boolean_dup_times) integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (in3 exec_when (boolean_dup_times integer_dup_items exec_dup_items exec_flush in1 exec_eq integer_sub in1 exec_eq exec_empty boolean_pop) boolean_and boolean_dup_items integer_lte integer_fromboolean exec_do*range (boolean_dup_times boolean_not exec_when (boolean_shove integer_fromboolean)))))))
Lexicase best errors: [0 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 98
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_newline} {:close 1, :instruction print_newline} {:close 1, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_461} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (boolean_yankdup exec_yank in3 boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_invert_second_then_and exec_shove () integer_gt integer_yankdup exec_flush boolean_eq exec_yank integer_dup in4 boolean_eq print_newline print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_461 boolean_yank in1 integer_add exec_dup () boolean_empty) (boolean_yankdup integer_shove tag_boolean_345) (exec_rot () (exec_yankdup print_boolean exec_eq) (boolean_dup_times) integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (exec_when (integer_swap integer_dup_items exec_eq boolean_dup_times) integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (in3 exec_when (boolean_dup_times integer_dup_items exec_dup_items exec_flush in1 exec_eq integer_sub in1 exec_eq exec_empty boolean_pop) boolean_and boolean_dup_items integer_lte integer_fromboolean exec_do*range (boolean_dup_times boolean_not exec_when (boolean_shove integer_fromboolean)))))))
Zero cases best errors: [0 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 98
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (487 487 98 487 242 241 916 915 242 96)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (487 487 98 487 242 241 916 915 242 96)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_170} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_times})
Best program: (boolean_xor exec_yank in3 integer_add boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_newline tagged_170 boolean_dup_items integer_swap boolean_and print_newline exec_s_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing (in1) (integer_add integer_dup) (exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items exec_do*times (exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345) exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (exec_when (integer_swap integer_dup_items exec_dup_items exec_flush boolean_rot) boolean_shove) integer_min boolean_rot) boolean_frominteger integer_empty integer_lte) integer_inc exec_swap (print_integer integer_dup_items integer_mult) (integer_pop integer_dup_times))) () ())
Errors: [0 0 1 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 74
Size: 93
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 5.789
Median total errors in population: 5
Error averages by case: (0.513 0.513 0.902 0.513 0.758 0.759 0.084 0.085 0.758 0.904)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.045
Average program size in population (points): 62.525
Average percent parens in population: 0.201
Minimum age in population: 20.832763671875
Maximum age in population: 25.38937377929688
Average age in population: 23.45723403930664
Median age in population: 23.52056884765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6145384
--- Timings ---
Current time: 1559583504916 milliseconds
Total Time:          45.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.2 seconds, 74.6%
Fitness Testing:      7.8 seconds, 17.1%
Report:               3.7 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -29                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 31                 
Correct output: 7                   | Program output: 100                
Correct output: 28                  | Program output: 97                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 85                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 92                 
Correct output: 16                  | Program output: 78                 
Correct output: 32                  | Program output: 74                 
Correct output: 27                  | Program output: 52                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 71                 
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 33                 
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 86                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: 56                 
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 45                 
Correct output: -63                 | Program output: -17                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 64                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: 4                  
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -39                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: 18                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: 83                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 86                 
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -47                
Correct output: -42                 | Program output: 30                 
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: 31                 
Correct output: -85                 | Program output: 97                 
Correct output: -99                 | Program output: 45                 
Correct output: -56                 | Program output: 12                 
Correct output: -54                 | Program output: 68                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3})
Lexicase best program: (boolean_xor boolean_invert_first_then_and in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_yank integer_mod boolean_xor exec_yank in3 integer_add print_integer integer_swap in3 boolean_frominteger in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items) integer_eq exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3))
Lexicase best errors: [1 1 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.140
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3})
Zero cases best program: (boolean_xor boolean_invert_first_then_and in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_yank integer_mod boolean_xor exec_yank in3 integer_add print_integer integer_swap in3 boolean_frominteger in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items) integer_eq exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3))
Zero cases best errors: [1 1 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.140
--- Lexicase Population Statistics ---
Count of elite individuals by case: (338 1000 363 365 207 365 337 338 1000 899)
Population mean number of elite cases: 5.21
Count of perfect (error zero) individuals by case: (338 0 363 365 207 365 337 338 0 899)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1})
Best program: (boolean_xor exec_yank in1 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup boolean_frominteger in4 in1 integer_add integer_mod exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items) integer_eq exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (boolean_stackdepth integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) boolean_shove) exec_flush boolean_rot boolean_frominteger integer_empty integer_lte) 37 exec_y_when_autoconstructing (in1))
Errors: [0 1 1 1 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 62
Size: 73
Percent parens: 0.151
--- Population Statistics ---
Average total errors in population: 6.788
Median total errors in population: 6
Error averages by case: (0.662 1.0 0.637 0.635 0.793 0.635 0.663 0.662 1.0 0.101)
Error minima by case: (0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 49.9
Average program size in population (points): 62.203
Average percent parens in population: 0.198
Minimum age in population: 22.064453125
Maximum age in population: 27.04722595214844
Average age in population: 24.9648900604248
Median age in population: 25.04907989501953
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6449305
--- Timings ---
Current time: 1559583507498 milliseconds
Total Time:          48.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.3 seconds, 74.9%
Fitness Testing:      8.2 seconds, 16.9%
Report:               3.9 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt exec_yank in1 exec_rot (boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max in4 exec_stackdepth exec_k () () exec_yank) (boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (exec_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (boolean_invert_first_then_and integer_shove)) ()) ()))) () ()))
Lexicase best errors: [0 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 61
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt exec_yank in1 exec_rot (boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max in4 exec_stackdepth exec_k () () exec_yank) (boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (exec_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (boolean_invert_first_then_and integer_shove)) ()) ()))) () ()))
Zero cases best errors: [0 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 61
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (107 107 106 405 798 1000 403 392 106 106)
Population mean number of elite cases: 3.53
Count of perfect (error zero) individuals by case: (107 107 106 405 798 0 403 392 106 106)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gte} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Best program: (integer_eq exec_when (integer_gte) boolean_frominteger boolean_yank integer_mod boolean_eq boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times integer_dup_items integer_fromboolean boolean_shove exec_when (boolean_eq in2 exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (integer_shove) ())) ())))
Errors: [0 0 0 1 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 46
Size: 62
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.47
Median total errors in population: 7
Error averages by case: (0.893 0.893 0.894 0.595 0.202 1.0 0.597 0.608 0.894 0.894)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 49.765
Average program size in population (points): 61.918
Average percent parens in population: 0.197
Minimum age in population: 23.138427734375
Maximum age in population: 28.41327667236328
Average age in population: 26.45258219909668
Median age in population: 26.54956436157227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6689294
--- Timings ---
Current time: 1559583510244 milliseconds
Total Time:          51.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.4 seconds, 75.3%
Fitness Testing:      8.4 seconds, 16.5%
Report:               4.1 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup boolean_frominteger in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (exec_dup () boolean_empty exec_shove ()))
Lexicase best errors: [0 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup boolean_frominteger in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (exec_dup () boolean_empty exec_shove ()))
Zero cases best errors: [0 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (888 475 474 888 476 270 270 1 617 270)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (888 475 474 888 476 270 270 1 617 270)
Population mean number of perfect (error zero) cases: 4.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 1, :instruction tag_exec_187} {:close 0, :instruction integer_dec} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1})
Best program: (exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup boolean_frominteger in4 in1 integer_add integer_dup boolean_yankdup integer_shove tag_boolean_345 integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () tag_exec_187 () integer_dec tag_boolean_345) (exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3 tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (boolean_stackdepth integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) boolean_shove) exec_flush boolean_rot) boolean_frominteger integer_empty integer_lte) 37 exec_y_when_autoconstructing (in1))
Errors: [0 0 0 0 0 1 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 62
Size: 75
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 5.371
Median total errors in population: 5
Error averages by case: (0.112 0.525 0.526 0.112 0.524 0.73 0.73 0.999 0.383 0.73)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.751
Average program size in population (points): 61.69
Average percent parens in population: 0.210
Minimum age in population: 24.86663818359375
Maximum age in population: 29.83164215087891
Average age in population: 27.92071821212769
Median age in population: 28.02714538574219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7093386
--- Timings ---
Current time: 1559583513014 milliseconds
Total Time:          53.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.6 seconds, 75.4%
Fitness Testing:      8.8 seconds, 16.3%
Report:               4.4 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -29                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 31                 
Correct output: 7                   | Program output: 100                
Correct output: 28                  | Program output: 97                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 85                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 92                 
Correct output: 16                  | Program output: 78                 
Correct output: 32                  | Program output: 74                 
Correct output: 27                  | Program output: 52                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 71                 
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 33                 
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 86                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: 56                 
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 45                 
Correct output: -63                 | Program output: -17                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 64                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: 4                  
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -39                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: 18                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: 83                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 86                 
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -47                
Correct output: -42                 | Program output: 30                 
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: 31                 
Correct output: -85                 | Program output: 97                 
Correct output: -99                 | Program output: 45                 
Correct output: -56                 | Program output: 12                 
Correct output: -54                 | Program output: 68                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yank})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger boolean_yank integer_mod boolean_eq boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq exec_yank integer_dup in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (exec_do*while (integer_lte boolean_not integer_shove in4 boolean_shove) exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items)) integer_eq) exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3) tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (boolean_stackdepth integer_swap integer_dup_items exec_dup_items) exec_flush boolean_dup_times) boolean_shove exec_flush boolean_rot boolean_frominteger integer_empty integer_lte 37 exec_y_when_autoconstructing (exec_yank))
Lexicase best errors: [1 1 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 78
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yank})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger boolean_yank integer_mod boolean_eq boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq exec_yank integer_dup in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (exec_do*while (integer_lte boolean_not integer_shove in4 boolean_shove) exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items)) integer_eq) exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3) tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (boolean_stackdepth integer_swap integer_dup_items exec_dup_items) exec_flush boolean_dup_times) boolean_shove exec_flush boolean_rot boolean_frominteger integer_empty integer_lte 37 exec_y_when_autoconstructing (exec_yank))
Zero cases best errors: [1 1 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 78
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (449 369 1000 369 2 2 1000 80 448 2)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (449 369 0 369 2 2 0 80 448 2)
Population mean number of perfect (error zero) cases: 1.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items})
Best program: (boolean_xor exec_yank in1 boolean_eq print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup boolean_frominteger in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean integer_yankdup exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (exec_while (in1 boolean_yankdup) exec_k_when_autoconstructing (exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (exec_dup_items) ())) ()) ()) ())
Errors: [1 1 1 1 0 0 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 48
Size: 65
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 8.279
Median total errors in population: 8
Error averages by case: (0.551 0.631 1.0 0.631 0.998 0.998 1.0 0.92 0.552 0.998)
Error minima by case: (0 0 1 0 0 0 1 0 0 0)
Average genome size in population (length): 46.478
Average program size in population (points): 59.312
Average percent parens in population: 0.216
Minimum age in population: 26.20118713378906
Maximum age in population: 31.37163352966309
Average age in population: 29.5804703578949
Median age in population: 29.69745254516602
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7519705
--- Timings ---
Current time: 1559583515554 milliseconds
Total Time:          56.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.6 seconds, 75.4%
Fitness Testing:      9.2 seconds, 16.3%
Report:               4.6 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -29                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 31                 
Correct output: 7                   | Program output: 100                
Correct output: 28                  | Program output: 97                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 85                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 92                 
Correct output: 16                  | Program output: 78                 
Correct output: 32                  | Program output: 74                 
Correct output: 27                  | Program output: 52                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 71                 
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 33                 
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 86                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: 56                 
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 45                 
Correct output: -63                 | Program output: -17                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 64                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: 4                  
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -39                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: 18                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: 83                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 86                 
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -47                
Correct output: -42                 | Program output: 30                 
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: 31                 
Correct output: -85                 | Program output: 97                 
Correct output: -99                 | Program output: 45                 
Correct output: -56                 | Program output: 12                 
Correct output: -54                 | Program output: 68                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_xor exec_yank in1 boolean_eq print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup boolean_frominteger in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean integer_yankdup exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (exec_while (in1 boolean_yankdup) exec_k_when_autoconstructing (exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (exec_dup_items) ())) ()) ()) ())
Lexicase best errors: [1 0 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_xor exec_yank in1 boolean_eq print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup boolean_frominteger in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean integer_yankdup exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (exec_while (in1 boolean_yankdup) exec_k_when_autoconstructing (exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (exec_dup_items) ())) ()) ()) ())
Zero cases best errors: [1 0 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (226 778 226 333 224 332 222 221 332 333)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (226 778 226 333 224 332 222 221 332 333)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_integer_988})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger boolean_yank integer_mod boolean_eq boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq exec_yank integer_dup in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (exec_do*while (integer_lte boolean_not integer_shove in4 boolean_shove) exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items)) integer_eq) exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3) tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (boolean_stackdepth integer_swap integer_dup_items exec_dup_items) exec_flush boolean_dup_times) boolean_shove exec_flush boolean_rot boolean_frominteger integer_empty integer_lte integer_fromboolean exec_do*range (boolean_dup_times integer_shove exec_when (boolean_shove tag_integer_988)))
Errors: [1 0 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 68
Size: 83
Percent parens: 0.181
--- Population Statistics ---
Average total errors in population: 6.773
Median total errors in population: 6
Error averages by case: (0.774 0.222 0.774 0.667 0.776 0.668 0.778 0.779 0.668 0.667)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.815
Average program size in population (points): 62.3
Average percent parens in population: 0.218
Minimum age in population: 28.21839904785156
Maximum age in population: 32.8631067276001
Average age in population: 31.22167262935638
Median age in population: 31.23151111602783
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8107456
--- Timings ---
Current time: 1559583518663 milliseconds
Total Time:          59.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.6 seconds, 75.4%
Fitness Testing:      9.7 seconds, 16.5%
Report:               4.7 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup boolean_frominteger in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (integer_shove) ())) ())
Lexicase best errors: [0 0 1 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup boolean_frominteger in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (integer_shove) ())) ())
Zero cases best errors: [0 0 1 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 176 1000 325 175 417 415 325 175 325)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (175 176 0 325 175 417 415 325 175 325)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_10} {:close 0, :instruction in1} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank})
Best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () exec_swap (integer_lte exec_yank integer_lte boolean_not integer_shove in4 boolean_shove integer_yank) (boolean_invert_first_then_and) exec_y_when_autoconstructing (exec_when (tagged_10) in1 boolean_invert_first_then_and) exec_yank)
Errors: [0 0 1 1 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 7.492
Median total errors in population: 15/2
Error averages by case: (0.825 0.824 1.0 0.675 0.825 0.583 0.585 0.675 0.825 0.675)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 50.286
Average program size in population (points): 63.867
Average percent parens in population: 0.213
Minimum age in population: 29.21839904785156
Maximum age in population: 34.50835514068604
Average age in population: 32.65063862323761
Median age in population: 32.73211669921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8602256
--- Timings ---
Current time: 1559583521540 milliseconds
Total Time:          62.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.8 seconds, 75.0%
Fitness Testing:     10.2 seconds, 16.3%
Report:               5.4 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 2, :instruction print_boolean} {:close 1, :instruction -74} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 3, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div})
Lexicase best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap integer_yankdup exec_shove (integer_gt integer_min) exec_flush exec_pop (in1 boolean_yankdup exec_rot (boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing () (integer_max print_integer integer_min exec_yank print_boolean) () -74) integer_lt integer_fromboolean) integer_lte exec_dup ()) () (exec_k (boolean_stackdepth) (boolean_or exec_dup (integer_div)))))
Lexicase best errors: [0 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 2, :instruction print_boolean} {:close 1, :instruction -74} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 3, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div})
Zero cases best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap integer_yankdup exec_shove (integer_gt integer_min) exec_flush exec_pop (in1 boolean_yankdup exec_rot (boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing () (integer_max print_integer integer_min exec_yank print_boolean) () -74) integer_lt integer_fromboolean) integer_lte exec_dup ()) () (exec_k (boolean_stackdepth) (boolean_or exec_dup (integer_div)))))
Zero cases best errors: [0 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (549 205 343 360 360 1000 206 343 1000 342)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (549 205 343 360 360 0 206 343 0 342)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Best program: (integer_eq integer_dup exec_yank in3 integer_add print_integer exec_do*times (exec_when (exec_shove (integer_gt integer_yankdup) exec_shove (integer_gt boolean_yank integer_eq print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times integer_dup_items integer_fromboolean boolean_shove exec_when (in4 boolean_shove) in4) boolean_eq boolean_yankdup exec_do*while () exec_if (exec_dup_items) (in1 boolean_yankdup) exec_k_when_autoconstructing (integer_shove) ())))
Errors: [0 1 0 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 41
Size: 55
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 7.292
Median total errors in population: 7
Error averages by case: (0.451 0.795 0.657 0.64 0.64 1.0 0.794 0.657 1.0 0.658)
Error minima by case: (0 0 0 0 0 1 0 0 1 0)
Average genome size in population (length): 48.572
Average program size in population (points): 61.853
Average percent parens in population: 0.214
Minimum age in population: 30.29898071289062
Maximum age in population: 36.15742754936218
Average age in population: 34.07444945597649
Median age in population: 34.15070700645447
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8981332
--- Timings ---
Current time: 1559583524410 milliseconds
Total Time:          65.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.0 seconds, 75.2%
Fitness Testing:     10.5 seconds, 16.1%
Report:               5.5 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Lexicase best program: (integer_eq exec_when (boolean_xor) boolean_frominteger boolean_yank integer_mod boolean_eq boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq print_integer integer_eq print_integer integer_swap boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times integer_dup_items exec_while (boolean_shove exec_when (boolean_eq in2 exec_dup () boolean_empty exec_rot (integer_shove tag_boolean_345) (integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1) ()) ()) ()))))
Lexicase best errors: [1 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 61
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Zero cases best program: (integer_eq exec_when (boolean_xor) boolean_frominteger boolean_yank integer_mod boolean_eq boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq print_integer integer_eq print_integer integer_swap boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times integer_dup_items exec_while (boolean_shove exec_when (boolean_eq in2 exec_dup () boolean_empty exec_rot (integer_shove tag_boolean_345) (integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1) ()) ()) ()))))
Zero cases best errors: [1 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 61
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (436 268 930 930 225 225 269 224 225 1000)
Population mean number of elite cases: 4.73
Count of perfect (error zero) individuals by case: (436 268 930 930 225 225 269 224 225 0)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush})
Best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_yank integer_dup in4 exec_stackdepth print_integer exec_s () (boolean_yankdup) (boolean_frominteger in4 in1) integer_add integer_dup exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items) integer_eq exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt boolean_yankdup integer_shove tag_boolean_345 exec_rot () () (exec_yankdup print_boolean exec_eq boolean_dup_times integer_gt in3 tagged_389) boolean_yankdup integer_dup_times exec_do*range (exec_pop (boolean_stackdepth integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) exec_dup_items exec_flush boolean_dup_times) boolean_shove) exec_flush)
Errors: [1 1 0 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 72
Size: 87
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 6.268
Median total errors in population: 7
Error averages by case: (0.564 0.732 0.07 0.07 0.775 0.775 0.731 0.776 0.775 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 48.007
Average program size in population (points): 60.877
Average percent parens in population: 0.211
Minimum age in population: 32.27927780151367
Maximum age in population: 37.69191288948059
Average age in population: 35.55998996496201
Median age in population: 35.64928108453751
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9367414
--- Timings ---
Current time: 1559583527166 milliseconds
Total Time:          68.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.3 seconds, 75.3%
Fitness Testing:     10.9 seconds, 16.0%
Report:               5.8 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Lexicase best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt exec_do*range (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times integer_dup_items integer_fromboolean boolean_shove exec_when (boolean_eq in2 exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_pop () exec_if (in1) ()) ()))
Lexicase best errors: [0 1 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Zero cases best program: (boolean_xor exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt exec_do*range (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times integer_dup_items integer_fromboolean boolean_shove exec_when (boolean_eq in2 exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_pop () exec_if (in1) ()) ()))
Zero cases best errors: [0 1 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (644 530 372 257 531 113 113 113 259 528)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (644 530 372 257 531 113 113 113 259 528)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction tag_exec_786} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction tag_exec_145} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_313} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_if})
Best program: (boolean_xor exec_yank in3 integer_add print_integer exec_while (exec_yankdup boolean_xor exec_yank in3 integer_add print_integer exec_while (exec_yankdup exec_rot () (tag_exec_786 (integer_shove) boolean_rot integer_dup_items boolean_pop exec_empty exec_do*times (boolean_dup_times) exec_shove (integer_gt exec_k_when_autoconstructing () (exec_flush boolean_eq exec_k (integer_dup in4 exec_stackdepth print_newline tag_exec_145 (boolean_dup_items integer_swap boolean_and print_newline exec_s_when_autoconstructing (tag_integer_313 boolean_yank exec_if () ()) () ())) ()))) ())))
Errors: [0 1 0 1 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 42
Size: 61
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 6.54
Median total errors in population: 6
Error averages by case: (0.356 0.47 0.628 0.743 0.469 0.887 0.887 0.887 0.741 0.472)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.338
Average program size in population (points): 61.887
Average percent parens in population: 0.218
Minimum age in population: 33.27927780151367
Maximum age in population: 39.03197288513184
Average age in population: 37.0566188813448
Median age in population: 37.12173879146576
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9828246
--- Timings ---
Current time: 1559583529988 milliseconds
Total Time:          70.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.5 seconds, 75.4%
Fitness Testing:     11.3 seconds, 15.9%
Report:               6.0 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -29                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 31                 
Correct output: 7                   | Program output: 100                
Correct output: 28                  | Program output: 97                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 85                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 92                 
Correct output: 16                  | Program output: 78                 
Correct output: 32                  | Program output: 74                 
Correct output: 27                  | Program output: 52                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 71                 
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 33                 
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 86                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: 56                 
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 45                 
Correct output: -63                 | Program output: -17                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 64                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: 4                  
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -39                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: 18                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: 83                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 86                 
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -47                
Correct output: -42                 | Program output: 30                 
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: 31                 
Correct output: -85                 | Program output: 97                 
Correct output: -99                 | Program output: 45                 
Correct output: -56                 | Program output: 12                 
Correct output: -54                 | Program output: 68                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yank})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger boolean_yank exec_do*while (boolean_eq boolean_yank) integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq exec_yank integer_dup in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (exec_do*while (integer_lte boolean_not integer_shove in4 boolean_shove) exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items)) integer_eq) exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3) tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (boolean_stackdepth integer_swap exec_dup_times (exec_dup_items) exec_flush boolean_dup_times) boolean_shove) exec_flush boolean_rot boolean_frominteger integer_empty integer_lte 37 exec_y_when_autoconstructing (exec_yank))
Lexicase best errors: [0 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 80
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction 37} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yank})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger boolean_yank exec_do*while (boolean_eq boolean_yank) integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq exec_yank integer_dup in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (exec_do*while (integer_lte boolean_not integer_shove in4 boolean_shove) exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items)) integer_eq) exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3) tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (boolean_stackdepth integer_swap exec_dup_times (exec_dup_items) exec_flush boolean_dup_times) boolean_shove) exec_flush boolean_rot boolean_frominteger integer_empty integer_lte 37 exec_y_when_autoconstructing (exec_yank))
Zero cases best errors: [0 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 80
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (925 1000 233 301 1000 234 232 303 234 389)
Population mean number of elite cases: 4.85
Count of perfect (error zero) individuals by case: (925 0 233 301 0 234 232 303 234 389)
Population mean number of perfect (error zero) cases: 2.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger boolean_yank integer_mod in1 boolean_eq print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range (boolean_yankdup boolean_frominteger in4 in1) integer_add integer_dup exec_stackdepth exec_do*times (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345 integer_fromboolean integer_yankdup exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1) ()) ()))
Errors: [0 1 0 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 43
Size: 54
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 7.149
Median total errors in population: 7
Error averages by case: (0.075 1.0 0.767 0.699 1.0 0.766 0.768 0.697 0.766 0.611)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 47.041
Average program size in population (points): 59.864
Average percent parens in population: 0.214
Minimum age in population: 35.3648509979248
Maximum age in population: 40.57950353622437
Average age in population: 38.48748648771644
Median age in population: 38.57727062702179
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 10207051
--- Timings ---
Current time: 1559583532553 milliseconds
Total Time:          73.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.5 seconds, 75.6%
Fitness Testing:     11.6 seconds, 15.8%
Report:               6.2 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_yank integer_dup in4 exec_stackdepth exec_yank integer_dup in1 boolean_yankdup print_integer boolean_dup_times exec_swap (boolean_pop integer_yankdup) (exec_flush integer_yankdup exec_dup_items boolean_and exec_shove (integer_gt integer_max boolean_frominteger in4 in1) integer_add integer_dup exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items) integer_eq exec_dup ()) boolean_empty boolean_yankdup integer_shove tag_boolean_345 integer_lte exec_yankdup print_boolean exec_eq boolean_dup_times integer_gt boolean_yankdup integer_shove tag_boolean_345 exec_rot () () (exec_yankdup print_boolean exec_eq boolean_dup_times integer_gt in3 tagged_389) boolean_yankdup integer_dup_times exec_do*range (exec_do*times (boolean_stackdepth integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) exec_dup_items exec_flush boolean_dup_times) boolean_shove exec_flush)
Lexicase best errors: [0 1 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 97
Percent parens: 0.124
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_yank integer_dup in4 exec_stackdepth exec_yank integer_dup in1 boolean_yankdup print_integer boolean_dup_times exec_swap (boolean_pop integer_yankdup) (exec_flush integer_yankdup exec_dup_items boolean_and exec_shove (integer_gt integer_max boolean_frominteger in4 in1) integer_add integer_dup exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items) integer_eq exec_dup ()) boolean_empty boolean_yankdup integer_shove tag_boolean_345 integer_lte exec_yankdup print_boolean exec_eq boolean_dup_times integer_gt boolean_yankdup integer_shove tag_boolean_345 exec_rot () () (exec_yankdup print_boolean exec_eq boolean_dup_times integer_gt in3 tagged_389) boolean_yankdup integer_dup_times exec_do*range (exec_do*times (boolean_stackdepth integer_swap integer_dup_items exec_dup_items exec_flush boolean_dup_times) exec_dup_items exec_flush boolean_dup_times) boolean_shove exec_flush)
Zero cases best errors: [0 1 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 97
Percent parens: 0.124
--- Lexicase Population Statistics ---
Count of elite individuals by case: (279 132 279 279 132 904 493 1000 626 906)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (279 132 279 279 132 904 493 0 626 906)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction -20} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_items})
Best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_flush boolean_yank exec_noop -20 integer_empty boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () integer_add integer_dup in4 boolean_and print_integer exec_do*range () integer_gte boolean_frominteger in4 in1 integer_lte boolean_not integer_shove in4 boolean_shove exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items) integer_eq exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3) tagged_389 boolean_yankdup integer_dup_times exec_do*range (exec_pop (boolean_stackdepth integer_swap integer_dup_items exec_dup_items)))
Errors: [0 1 0 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 72
Size: 84
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 5.97
Median total errors in population: 6
Error averages by case: (0.721 0.868 0.721 0.721 0.868 0.096 0.507 1.0 0.374 0.094)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 49.416
Average program size in population (points): 62.854
Average percent parens in population: 0.214
Minimum age in population: 36.49775314331055
Maximum age in population: 41.98942485451698
Average age in population: 39.97302766808867
Median age in population: 40.06849014759064
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 10717228
--- Timings ---
Current time: 1559583535400 milliseconds
Total Time:          76.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.7 seconds, 75.7%
Fitness Testing:     12.1 seconds, 15.8%
Report:               6.4 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -29                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 31                 
Correct output: 7                   | Program output: 100                
Correct output: 28                  | Program output: 97                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 85                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 92                 
Correct output: 16                  | Program output: 78                 
Correct output: 32                  | Program output: 74                 
Correct output: 27                  | Program output: 52                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 71                 
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 33                 
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 86                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: 56                 
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 45                 
Correct output: -63                 | Program output: -17                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 64                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: 4                  
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -39                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: 18                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: 83                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 86                 
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -47                
Correct output: -42                 | Program output: 30                 
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: 31                 
Correct output: -85                 | Program output: 97                 
Correct output: -99                 | Program output: 45                 
Correct output: -56                 | Program output: 12                 
Correct output: -54                 | Program output: 68                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if})
Lexicase best program: (boolean_xor exec_yank in1 boolean_eq print_integer integer_rot boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup exec_noop in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean integer_yankdup exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (exec_while (exec_noop boolean_yankdup) exec_k_when_autoconstructing (exec_if () ()) ()) ()) ())
Lexicase best errors: [0 1 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 58
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if})
Zero cases best program: (boolean_xor exec_yank in1 boolean_eq print_integer integer_rot boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup exec_noop in4 in1 integer_add integer_dup exec_stackdepth exec_do*times (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean integer_yankdup exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (exec_while (exec_noop boolean_yankdup) exec_k_when_autoconstructing (exec_if () ()) ()) ()) ())
Zero cases best errors: [0 1 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 58
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (528 1 759 398 398 361 166 167 165 361)
Population mean number of elite cases: 3.30
Count of perfect (error zero) individuals by case: (528 1 759 398 398 361 166 167 165 361)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger boolean_yank integer_mod boolean_eq boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing () integer_eq boolean_invert_first_then_and integer_dup in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (exec_do*while (integer_lte boolean_not integer_shove in4 boolean_shove) exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items)) integer_eq) exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3) tagged_389 boolean_yankdup integer_pop exec_do*range (exec_pop (boolean_stackdepth integer_swap exec_dup_times (exec_dup_items exec_flush))))
Errors: [0 1 1 1 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 54
Size: 68
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 6.696
Median total errors in population: 6
Error averages by case: (0.472 0.999 0.241 0.602 0.602 0.639 0.834 0.833 0.835 0.639)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.074
Average program size in population (points): 59.849
Average percent parens in population: 0.212
Minimum age in population: 37.49775314331055
Maximum age in population: 43.57005582004786
Average age in population: 41.43924904233962
Median age in population: 41.4983345605433
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 11043172
--- Timings ---
Current time: 1559583538518 milliseconds
Total Time:          79.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.9 seconds, 75.9%
Fitness Testing:     12.4 seconds, 15.7%
Report:               6.6 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction in1})
Lexicase best program: (integer_eq boolean_invert_second_then_and boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt) integer_yankdup exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range (boolean_yankdup) in1 integer_add print_integer exec_do*range (boolean_yankdup) boolean_frominteger integer_gt exec_stackdepth exec_k () () exec_yank boolean_yank integer_dup_times integer_dup_items integer_fromboolean integer_lte exec_shove () exec_k (boolean_stackdepth boolean_or in1) ())
Lexicase best errors: [0 1 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.180
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction in1})
Zero cases best program: (integer_eq boolean_invert_second_then_and boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt) integer_yankdup exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range (boolean_yankdup) in1 integer_add print_integer exec_do*range (boolean_yankdup) boolean_frominteger integer_gt exec_stackdepth exec_k () () exec_yank boolean_yank integer_dup_times integer_dup_items integer_fromboolean integer_lte exec_shove () exec_k (boolean_stackdepth boolean_or in1) ())
Zero cases best errors: [0 1 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (903 328 216 258 218 218 259 327 219 217)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (903 328 216 258 218 218 259 327 219 217)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap exec_k () (exec_shove (integer_gt exec_yank in1 boolean_dup_times) exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 boolean_and integer_yank exec_do*range () boolean_yankdup) exec_stackdepth exec_k () () exec_yank boolean_shove boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (in1) ()) ())
Errors: [0 1 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 44
Size: 59
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 6.837
Median total errors in population: 7
Error averages by case: (0.097 0.672 0.784 0.742 0.782 0.782 0.741 0.673 0.781 0.783)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.517
Average program size in population (points): 60.215
Average percent parens in population: 0.209
Minimum age in population: 38.49775314331055
Maximum age in population: 44.74573557823896
Average age in population: 42.8965845464617
Median age in population: 42.96548246219754
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 11449820
--- Timings ---
Current time: 1559583541217 milliseconds
Total Time:          82.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.1 seconds, 75.6%
Fitness Testing:     12.8 seconds, 15.6%
Report:               7.2 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 674
Test mean error for best: 0.67400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: -6011              
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output:                    
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output:                    
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_eq exec_when (in3 integer_add print_integer integer_swap boolean_dup_times) exec_shove (integer_gt integer_yankdup) boolean_not exec_while (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () (exec_yank exec_shove (boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_swap boolean_yankdup integer_shove tag_boolean_345) exec_do*times (exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (integer_dup_times in1 boolean_yankdup) () exec_dup (integer_shove)) ()))))
Lexicase best errors: [1 0 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_eq exec_when (in3 integer_add print_integer integer_swap boolean_dup_times) exec_shove (integer_gt integer_yankdup) boolean_not exec_while (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () (exec_yank exec_shove (boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_swap boolean_yankdup integer_shove tag_boolean_345) exec_do*times (exec_if (boolean_eq boolean_yankdup exec_do*while () exec_if (integer_dup_times in1 boolean_yankdup) () exec_dup (integer_shove)) ()))))
Zero cases best errors: [1 0 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (531 190 188 190 190 530 533 919 198 1)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (531 190 188 190 190 530 533 919 198 1)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items})
Best program: (boolean_xor exec_yank in3 exec_yank in3 integer_add print_integer exec_pop (boolean_dup_times) integer_stackdepth integer_gt integer_empty exec_flush integer_div exec_k (integer_dup in4 integer_pop exec_swap (integer_lte boolean_invert_second_then_and exec_do*count () boolean_dup_items exec_yank) (boolean_shove integer_dup_times integer_dup_items integer_flush boolean_shove exec_k (boolean_eq in2 print_integer exec_swap (exec_do*times (integer_empty integer_sub exec_dup_items integer_eq print_integer boolean_dup_items)) ()) ())) ())
Errors: [1 0 0 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 41
Size: 53
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 6.53
Median total errors in population: 6
Error averages by case: (0.469 0.81 0.812 0.81 0.81 0.47 0.467 0.081 0.802 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.735
Average program size in population (points): 59.499
Average percent parens in population: 0.213
Minimum age in population: 41.04287445545197
Maximum age in population: 46.31996865943074
Average age in population: 44.41626592452452
Median age in population: 44.4779575932771
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 11841191
--- Timings ---
Current time: 1559583544192 milliseconds
Total Time:          85.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.5 seconds, 75.8%
Fitness Testing:     13.2 seconds, 15.5%
Report:               7.4 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times})
Lexicase best program: (boolean_xor exec_yank in3 integer_add print_integer boolean_empty boolean_dup_times exec_shove (integer_gt exec_flush boolean_eq exec_yank integer_dup in4 in4 boolean_eq print_newline) integer_lte exec_when (boolean_frominteger in4 exec_stackdepth exec_k () (exec_yank exec_shove (boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_dup_times)) exec_shove () integer_gt boolean_rot) exec_flush boolean_eq integer_gt exec_flush exec_if (boolean_eq boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3) tagged_389 boolean_yankdup integer_dup_times) (exec_do*range (exec_pop (boolean_stackdepth integer_swap integer_dup_items boolean_dup_times) exec_flush boolean_dup_times))))
Lexicase best errors: [1 0 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 76
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times})
Zero cases best program: (boolean_xor exec_yank in3 integer_add print_integer boolean_empty boolean_dup_times exec_shove (integer_gt exec_flush boolean_eq exec_yank integer_dup in4 in4 boolean_eq print_newline) integer_lte exec_when (boolean_frominteger in4 exec_stackdepth exec_k () (exec_yank exec_shove (boolean_dup_times boolean_empty exec_pop (exec_dup () boolean_dup_times)) exec_shove () integer_gt boolean_rot) exec_flush boolean_eq integer_gt exec_flush exec_if (boolean_eq boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_eq boolean_dup_times) (integer_gt in3) tagged_389 boolean_yankdup integer_dup_times) (exec_do*range (exec_pop (boolean_stackdepth integer_swap integer_dup_items boolean_dup_times) exec_flush boolean_dup_times))))
Zero cases best errors: [1 0 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 76
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (301 419 95 103 104 420 420 100 420 300)
Population mean number of elite cases: 2.68
Count of perfect (error zero) individuals by case: (301 419 95 103 104 420 420 100 420 300)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction 99} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when})
Best program: (integer_empty exec_yank in3 integer_add print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_dup exec_empty integer_dup boolean_eq boolean_yankdup exec_do*while () exec_if (99 exec_shove (integer_gt boolean_frominteger in4 integer_dec) integer_add integer_dup exec_stackdepth exec_do*times (exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean integer_yankdup exec_if (boolean_eq boolean_yankdup exec_k_when_autoconstructing () (exec_if (exec_while (exec_when ())) ())) ()) ())
Errors: [1 0 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 42
Size: 58
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 7.318
Median total errors in population: 7
Error averages by case: (0.699 0.581 0.905 0.897 0.896 0.58 0.58 0.9 0.58 0.7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.483
Average program size in population (points): 59.311
Average percent parens in population: 0.214
Minimum age in population: 42.04287445545197
Maximum age in population: 47.84018608368933
Average age in population: 45.91075313896686
Median age in population: 45.95090023335069
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 12182431
--- Timings ---
Current time: 1559583546749 milliseconds
Total Time:          87.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.5 seconds, 75.9%
Fitness Testing:     13.5 seconds, 15.4%
Report:               7.6 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 2, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 2, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction -20} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_empty exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt exec_empty) exec_flush boolean_eq exec_yank integer_dup in4 boolean_and print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 in1 integer_add integer_dup exec_empty exec_do*times () exec_dup () boolean_empty integer_dup_items integer_fromboolean boolean_shove exec_when (boolean_eq in2 exec_dup () boolean_empty boolean_yankdup tag_boolean_345) boolean_invert_second_then_and exec_yankdup in1 boolean_invert_first_then_and exec_yank exec_if (exec_k_when_autoconstructing () () exec_noop) (-20 exec_flush exec_if (boolean_eq boolean_not exec_do*while () exec_if (in1 in1 boolean_yankdup) (boolean_invert_first_then_and integer_shove)) ()))
Lexicase best errors: [0 1 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 74
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 2, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tag_boolean_345} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 2, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction -20} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_empty exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt exec_empty) exec_flush boolean_eq exec_yank integer_dup in4 boolean_and print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 in1 integer_add integer_dup exec_empty exec_do*times () exec_dup () boolean_empty integer_dup_items integer_fromboolean boolean_shove exec_when (boolean_eq in2 exec_dup () boolean_empty boolean_yankdup tag_boolean_345) boolean_invert_second_then_and exec_yankdup in1 boolean_invert_first_then_and exec_yank exec_if (exec_k_when_autoconstructing () () exec_noop) (-20 exec_flush exec_if (boolean_eq boolean_not exec_do*while () exec_if (in1 in1 boolean_yankdup) (boolean_invert_first_then_and integer_shove)) ()))
Zero cases best errors: [0 1 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 74
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (184 368 183 183 888 244 183 240 240 91)
Population mean number of elite cases: 2.80
Count of perfect (error zero) individuals by case: (184 368 183 183 888 244 183 240 240 91)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_shove})
Best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in1 exec_stackdepth exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup boolean_frominteger in2 in1 integer_add integer_dup exec_stackdepth exec_do*times () exec_dup (boolean_empty boolean_yankdup) integer_shove tag_boolean_345 integer_fromboolean exec_flush exec_if (boolean_eq) (boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (exec_k_when_autoconstructing (integer_shove) ())))
Errors: [0 1 0 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 52
Size: 65
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.196
Median total errors in population: 8
Error averages by case: (0.816 0.632 0.817 0.817 0.112 0.756 0.817 0.76 0.76 0.909)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.162
Average program size in population (points): 60.662
Average percent parens in population: 0.220
Minimum age in population: 43.04287445545197
Maximum age in population: 49.15162563556805
Average age in population: 47.50611014229013
Median age in population: 47.60027158865705
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 12556656
--- Timings ---
Current time: 1559583549467 milliseconds
Total Time:          90.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.7 seconds, 76.0%
Fitness Testing:     13.9 seconds, 15.3%
Report:               7.7 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_boolean_345} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_empty exec_yank in3 integer_add print_integer integer_swap boolean_empty exec_shove () integer_gt integer_yankdup exec_flush exec_y_when_autoconstructing (boolean_yank) integer_mod boolean_eq boolean_shove exec_y_when_autoconstructing (integer_eq print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4) exec_stackdepth exec_k () (exec_yank boolean_shove integer_dup_times integer_dup_items exec_while (boolean_shove) exec_when (boolean_eq tag_boolean_345 integer_fromboolean exec_rot (exec_when (boolean_eq in2 exec_dup () boolean_empty boolean_yankdup boolean_empty tag_boolean_345 integer_dup_items boolean_invert_first_then_and exec_if (boolean_eq boolean_yankdup integer_mod exec_if (in1 in1 boolean_yankdup exec_k_when_autoconstructing (integer_shove) ()) ()) ())) () ())))
Lexicase best errors: [0 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 76
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_boolean_345} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_empty exec_yank in3 integer_add print_integer integer_swap boolean_empty exec_shove () integer_gt integer_yankdup exec_flush exec_y_when_autoconstructing (boolean_yank) integer_mod boolean_eq boolean_shove exec_y_when_autoconstructing (integer_eq print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4) exec_stackdepth exec_k () (exec_yank boolean_shove integer_dup_times integer_dup_items exec_while (boolean_shove) exec_when (boolean_eq tag_boolean_345 integer_fromboolean exec_rot (exec_when (boolean_eq in2 exec_dup () boolean_empty boolean_yankdup boolean_empty tag_boolean_345 integer_dup_items boolean_invert_first_then_and exec_if (boolean_eq boolean_yankdup integer_mod exec_if (in1 in1 boolean_yankdup exec_k_when_autoconstructing (integer_shove) ()) ()) ())) () ())))
Zero cases best errors: [0 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 76
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (488 912 109 423 109 285 284 96 109 109)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (488 912 109 423 109 285 284 96 109 109)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times})
Best program: (integer_eq exec_when (in3 integer_add print_integer integer_swap boolean_dup_times) exec_shove (integer_gt integer_yankdup) boolean_not exec_while (boolean_yankdup) boolean_frominteger in4 exec_stackdepth exec_k () (exec_yank exec_shove (boolean_dup_times boolean_empty) exec_pop (exec_dup () boolean_swap boolean_yankdup boolean_yankdup integer_shove tag_boolean_345) integer_shove tag_boolean_345 exec_rot () (exec_pop (exec_dup (boolean_empty boolean_yankdup integer_shove tag_boolean_345) integer_fromboolean exec_flush exec_if (boolean_eq tagged_389 boolean_yankdup integer_dup_times) ())) ()))
Errors: [0 0 0 1 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 44
Size: 60
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 7.076
Median total errors in population: 8
Error averages by case: (0.512 0.088 0.891 0.577 0.891 0.715 0.716 0.904 0.891 0.891)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.396
Average program size in population (points): 60.743
Average percent parens in population: 0.219
Minimum age in population: 45.48043464124203
Maximum age in population: 50.91582222958095
Average age in population: 48.96294147127611
Median age in population: 49.024588489905
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 12975061
--- Timings ---
Current time: 1559583552235 milliseconds
Total Time:          93.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.9 seconds, 76.1%
Fitness Testing:     14.3 seconds, 15.3%
Report:               7.9 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -29                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 31                 
Correct output: 7                   | Program output: 100                
Correct output: 28                  | Program output: 97                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 85                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 92                 
Correct output: 16                  | Program output: 78                 
Correct output: 32                  | Program output: 74                 
Correct output: 27                  | Program output: 52                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 71                 
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 33                 
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 86                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: 56                 
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 45                 
Correct output: -63                 | Program output: -17                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 64                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: 4                  
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -39                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: 18                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: 83                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 86                 
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -47                
Correct output: -42                 | Program output: 30                 
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: 31                 
Correct output: -85                 | Program output: 97                 
Correct output: -99                 | Program output: 45                 
Correct output: -56                 | Program output: 12                 
Correct output: -54                 | Program output: 68                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction tagged_441} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_eq exec_when (integer_mod integer_dec boolean_yank) integer_mod boolean_xor exec_yank in1 boolean_eq print_integer integer_swap exec_shove (exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 in1) integer_add integer_dup exec_stackdepth exec_stackdepth print_newline integer_sub exec_dup_items integer_eq exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_noop boolean_dup_times) (integer_gt in3) tagged_441 boolean_yankdup integer_dup_times exec_s_when_autoconstructing (exec_pop (boolean_stackdepth integer_swap integer_dup_items exec_dup_items) boolean_yankdup) (exec_k_when_autoconstructing (integer_shove) ()) ())
Lexicase best errors: [0 1 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction tagged_441} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_eq exec_when (integer_mod integer_dec boolean_yank) integer_mod boolean_xor exec_yank in1 boolean_eq print_integer integer_swap exec_shove (exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth print_integer exec_do*range (boolean_yankdup) boolean_frominteger in4 in1) integer_add integer_dup exec_stackdepth exec_stackdepth print_newline integer_sub exec_dup_items integer_eq exec_dup () boolean_empty boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_noop boolean_dup_times) (integer_gt in3) tagged_441 boolean_yankdup integer_dup_times exec_s_when_autoconstructing (exec_pop (boolean_stackdepth integer_swap integer_dup_items exec_dup_items) boolean_yankdup) (exec_k_when_autoconstructing (integer_shove) ()) ())
Zero cases best errors: [0 1 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 224 809 99 435 107 111 110 224 109)
Population mean number of elite cases: 2.34
Count of perfect (error zero) individuals by case: (110 224 809 99 435 107 111 110 224 109)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_integer_653} {:close 0, :instruction exec_while})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger boolean_yank integer_mod print_integer boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq exec_yank integer_dup in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (exec_do*while (integer_lte boolean_not integer_shove in4 boolean_shove) exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items)) integer_add integer_dup exec_stackdepth) exec_do*times (exec_dup () integer_div exec_eq boolean_dup_times) integer_gt boolean_invert_first_then_and tag_integer_653 exec_while ()))
Errors: [0 1 1 1 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 43
Size: 53
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 7.662
Median total errors in population: 9
Error averages by case: (0.89 0.776 0.191 0.901 0.565 0.893 0.889 0.89 0.776 0.891)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.068
Average program size in population (points): 60.725
Average percent parens in population: 0.222
Minimum age in population: 47.8491223976016
Maximum age in population: 52.35379162617028
Average age in population: 50.47344536983629
Median age in population: 50.55150428658817
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.779
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 13343912
--- Timings ---
Current time: 1559583555456 milliseconds
Total Time:          95.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.1 seconds, 76.2%
Fitness Testing:     14.6 seconds, 15.3%
Report:               8.1 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap integer_flush exec_shove (integer_gt) integer_yankdup exec_flush boolean_eq exec_yank integer_dup in4 exec_do*range (boolean_dup_items integer_swap boolean_and print_newline exec_k_when_autoconstructing (integer_dup_items integer_flush boolean_shove integer_div boolean_eq in2 print_integer boolean_dup integer_swap integer_sub integer_fromboolean exec_flush exec_if () (boolean_eq boolean_yankdup)) ()))
Lexicase best errors: [0 1 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap integer_flush exec_shove (integer_gt) integer_yankdup exec_flush boolean_eq exec_yank integer_dup in4 exec_do*range (boolean_dup_items integer_swap boolean_and print_newline exec_k_when_autoconstructing (integer_dup_items integer_flush boolean_shove integer_div boolean_eq in2 print_integer boolean_dup integer_swap integer_sub integer_fromboolean exec_flush exec_if () (boolean_eq boolean_yankdup)) ()))
Zero cases best errors: [0 1 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (903 1000 131 248 524 525 131 131 131 1000)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (903 0 131 248 524 525 131 131 131 0)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_98} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot})
Best program: (tagged_98 boolean_xor exec_yank in3 in4 print_integer integer_swap boolean_dup_times boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max integer_yank integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) (boolean_yankdup integer_shove boolean_invert_second_then_and) (exec_rot () () ()))))
Errors: [0 1 0 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 33
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 7.276
Median total errors in population: 7
Error averages by case: (0.097 1.0 0.869 0.752 0.476 0.475 0.869 0.869 0.869 1.0)
Error minima by case: (0 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 48.084
Average program size in population (points): 61.869
Average percent parens in population: 0.221
Minimum age in population: 49.27912594610825
Maximum age in population: 54.00781811622437
Average age in population: 51.96432376660785
Median age in population: 52.03084828148712
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 13878177
--- Timings ---
Current time: 1559583558817 milliseconds
Total Time:          99.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.3 seconds, 75.9%
Fitness Testing:     15.1 seconds, 15.2%
Report:               8.7 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -29                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 31                 
Correct output: 7                   | Program output: 100                
Correct output: 28                  | Program output: 97                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 85                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 92                 
Correct output: 16                  | Program output: 78                 
Correct output: 32                  | Program output: 74                 
Correct output: 27                  | Program output: 52                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 71                 
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 33                 
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 86                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: 56                 
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 45                 
Correct output: -63                 | Program output: -17                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 64                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: 4                  
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -39                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: 18                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: 83                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 86                 
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -47                
Correct output: -42                 | Program output: 30                 
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: 31                 
Correct output: -85                 | Program output: 97                 
Correct output: -99                 | Program output: 45                 
Correct output: -56                 | Program output: 12                 
Correct output: -54                 | Program output: 68                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_items})
Lexicase best program: (boolean_xor exec_when () boolean_xor boolean_frominteger boolean_yank integer_mod boolean_eq boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq exec_yank integer_dup in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (exec_do*while (integer_lte boolean_not integer_shove exec_rot (boolean_shove) (exec_stackdepth exec_do*times (integer_empty boolean_stackdepth exec_dup_items)) (integer_eq) exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 exec_rot (exec_flush exec_if () (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (integer_swap exec_dup_times (boolean_yankdup integer_dup_times) exec_do*range (exec_pop (boolean_stackdepth integer_swap integer_dup_items exec_dup_items))))) () ()))))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_items})
Zero cases best program: (boolean_xor exec_when () boolean_xor boolean_frominteger boolean_yank integer_mod boolean_eq boolean_yank integer_mod boolean_eq exec_do*while (exec_y_when_autoconstructing (integer_eq exec_yank integer_dup in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (exec_do*while (integer_lte boolean_not integer_shove exec_rot (boolean_shove) (exec_stackdepth exec_do*times (integer_empty boolean_stackdepth exec_dup_items)) (integer_eq) exec_dup () boolean_empty) boolean_yankdup integer_shove tag_boolean_345 exec_rot (exec_flush exec_if () (boolean_eq boolean_yankdup exec_do*while () exec_if (in1 in1 boolean_yankdup) (integer_swap exec_dup_times (boolean_yankdup integer_dup_times) exec_do*range (exec_pop (boolean_stackdepth integer_swap integer_dup_items exec_dup_items))))) () ()))))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (289 288 289 1 1 288 288 926 288 528)
Population mean number of elite cases: 3.19
Count of perfect (error zero) individuals by case: (289 288 289 1 1 288 288 926 288 528)
Population mean number of perfect (error zero) cases: 3.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction -20} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_313} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if})
Best program: (boolean_xor exec_yank in1 boolean_eq print_integer integer_swap boolean_dup_times exec_shove (integer_gt boolean_dup_times) exec_shove (integer_gt integer_yankdup) exec_flush boolean_eq exec_yank integer_dup_items integer_fromboolean boolean_shove exec_when (boolean_eq in2 print_integer exec_swap (integer_lte exec_yank integer_lte boolean_not integer_inc in4 exec_do*times (integer_empty integer_fromboolean exec_flush exec_if (exec_y (integer_gt integer_shove) integer_dup_times) (exec_yank boolean_flush boolean_yank)) exec_noop) (-20 integer_empty)) exec_k (print_newline exec_s_when_autoconstructing (tag_integer_313 exec_noop exec_if () ()) () ()) ())
Errors: [0 0 0 1 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 51
Size: 68
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.814
Median total errors in population: 8
Error averages by case: (0.711 0.712 0.711 0.999 0.999 0.712 0.712 0.074 0.712 0.472)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.695
Average program size in population (points): 58.227
Average percent parens in population: 0.213
Minimum age in population: 50.27912594610825
Maximum age in population: 55.47502531047212
Average age in population: 53.45455407718741
Median age in population: 53.51751874446927
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 14258335
--- Timings ---
Current time: 1559583561561 milliseconds
Total Time:         102.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.5 seconds, 75.6%
Fitness Testing:     15.5 seconds, 15.1%
Report:               9.4 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -29                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 31                 
Correct output: 7                   | Program output: 100                
Correct output: 28                  | Program output: 97                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 85                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 92                 
Correct output: 16                  | Program output: 78                 
Correct output: 32                  | Program output: 74                 
Correct output: 27                  | Program output: 52                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 71                 
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 33                 
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 86                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: 56                 
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 45                 
Correct output: -63                 | Program output: -17                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 64                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: 4                  
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -39                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: 18                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: 83                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 86                 
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -47                
Correct output: -42                 | Program output: 30                 
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: 31                 
Correct output: -85                 | Program output: 97                 
Correct output: -99                 | Program output: 45                 
Correct output: -56                 | Program output: 12                 
Correct output: -54                 | Program output: 68                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt})
Lexicase best program: (boolean_xor exec_yank in1 boolean_invert_first_then_and print_integer integer_swap integer_gt integer_yankdup exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth exec_swap (boolean_yank) (integer_mod boolean_eq) exec_do*while (exec_y_when_autoconstructing (integer_eq exec_yank integer_dup in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (exec_do*while (integer_lte boolean_not integer_shove in4 boolean_shove) exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items)) integer_eq) exec_dup_items) integer_eq exec_flush in1 exec_while (integer_empty boolean_yankdup exec_do*while () exec_if (in1 boolean_empty) (boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_noop boolean_dup_times) (integer_gt))))
Lexicase best errors: [0 0 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_345} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt})
Zero cases best program: (boolean_xor exec_yank in1 boolean_invert_first_then_and print_integer integer_swap integer_gt integer_yankdup exec_flush boolean_eq exec_yank integer_dup in4 exec_stackdepth exec_swap (boolean_yank) (integer_mod boolean_eq) exec_do*while (exec_y_when_autoconstructing (integer_eq exec_yank integer_dup in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (exec_do*while (integer_lte boolean_not integer_shove in4 boolean_shove) exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items)) integer_eq) exec_dup_items) integer_eq exec_flush in1 exec_while (integer_empty boolean_yankdup exec_do*while () exec_if (in1 boolean_empty) (boolean_yankdup integer_shove tag_boolean_345 exec_rot () (exec_yankdup print_boolean exec_noop boolean_dup_times) (integer_gt))))
Zero cases best errors: [0 0 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (613 611 95 1 611 206 206 611 611 612)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (613 611 95 1 611 206 206 611 611 612)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot})
Best program: (exec_s_when_autoconstructing (exec_yank in1 boolean_invert_first_then_and in3 integer_swap print_integer integer_swap boolean_dup_times) (exec_shove (integer_gt integer_yankdup) exec_do*count (integer_max exec_do*range (integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove boolean_invert_second_then_and) exec_rot () () ()) ())
Errors: [0 0 1 1 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 24
Size: 35
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 5.823
Median total errors in population: 4
Error averages by case: (0.387 0.389 0.905 0.999 0.389 0.794 0.794 0.389 0.389 0.388)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.065
Average program size in population (points): 53.625
Average percent parens in population: 0.239
Minimum age in population: 51.84657913073897
Maximum age in population: 56.72345365656656
Average age in population: 54.71657548274779
Median age in population: 54.80198267108062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 145
Genome diversity (% unique genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 14808078
--- Timings ---
Current time: 1559583564414 milliseconds
Total Time:         105.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.7 seconds, 75.7%
Fitness Testing:     16.0 seconds, 15.2%
Report:               9.5 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_98} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot})
Lexicase best program: (tagged_98 boolean_xor exec_yank in3 integer_gt print_integer integer_swap boolean_dup_times boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max exec_do*range (exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max exec_do*range (integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove boolean_invert_second_then_and) (exec_rot () () ()) ())))) () ())))
Lexicase best errors: [1 1 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.378
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_98} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot})
Zero cases best program: (tagged_98 boolean_xor exec_yank in3 integer_gt print_integer integer_swap boolean_dup_times boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max exec_do*range (exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max exec_do*range (integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove boolean_invert_second_then_and) (exec_rot () () ()) ())))) () ())))
Zero cases best errors: [1 1 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.378
--- Lexicase Population Statistics ---
Count of elite individuals by case: (106 114 934 173 171 173 106 111 173 171)
Population mean number of elite cases: 2.23
Count of perfect (error zero) individuals by case: (106 114 934 173 171 173 106 111 173 171)
Population mean number of perfect (error zero) cases: 2.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_98} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items})
Best program: (tagged_98 boolean_xor exec_yank in3 integer_gt print_integer integer_swap boolean_dup_times boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max exec_do*range (integer_sub exec_dup_items)) () ())))
Errors: [1 1 0 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 16
Size: 23
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 7.768
Median total errors in population: 9
Error averages by case: (0.894 0.886 0.066 0.827 0.829 0.827 0.894 0.889 0.827 0.829)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.08
Average program size in population (points): 49.991
Average percent parens in population: 0.245
Minimum age in population: 54.03007665975019
Maximum age in population: 58.50587118808471
Average age in population: 56.07696291212123
Median age in population: 56.15357280394164
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 15384641
--- Timings ---
Current time: 1559583567334 milliseconds
Total Time:         108.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.9 seconds, 75.6%
Fitness Testing:     16.5 seconds, 15.3%
Report:               9.8 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_98} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot})
Lexicase best program: (tagged_98 boolean_xor exec_yank in3 integer_gt print_integer integer_swap boolean_dup_times boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max exec_do*range (integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove boolean_invert_second_then_and) (exec_rot () () ()) ())))
Lexicase best errors: [0 1 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_98} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot})
Zero cases best program: (tagged_98 boolean_xor exec_yank in3 integer_gt print_integer integer_swap boolean_dup_times boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max exec_do*range (integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove boolean_invert_second_then_and) (exec_rot () () ()) ())))
Zero cases best errors: [0 1 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (532 207 1 1 208 532 532 1 532 954)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (532 207 1 1 208 532 532 1 532 954)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_98} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup})
Best program: (tagged_98 boolean_xor exec_yank in3 integer_gt print_integer integer_swap boolean_dup_times boolean_invert_first_then_and exec_do*range (boolean_flush in1 integer_dup_times exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_max exec_do*range (integer_sub exec_dup_items integer_eq exec_dup ())) () ()) () ()))
Errors: [0 1 1 1 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 6.5
Median total errors in population: 5
Error averages by case: (0.468 0.793 0.999 0.999 0.792 0.468 0.468 0.999 0.468 0.046)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.459
Average program size in population (points): 37.924
Average percent parens in population: 0.285
Minimum age in population: 55.33132944136742
Maximum age in population: 59.42369865035653
Average age in population: 57.33674103690758
Median age in population: 57.41058903074008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.513
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 16195087
--- Timings ---
Current time: 1559583570780 milliseconds
Total Time:         111.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.4 seconds, 75.5%
Fitness Testing:     17.3 seconds, 15.5%
Report:               9.9 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_98} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot})
Lexicase best program: (tagged_98 boolean_xor exec_yank in3 integer_gt print_integer integer_swap boolean_dup_times boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max exec_do*range (integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove boolean_invert_second_then_and) (exec_rot () () ()) ())))
Lexicase best errors: [1 1 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 34
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_98} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot})
Zero cases best program: (tagged_98 boolean_xor exec_yank in3 integer_gt print_integer integer_swap boolean_dup_times boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max exec_do*range (integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove boolean_invert_second_then_and) (exec_rot () () ()) ())))
Zero cases best errors: [1 1 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 34
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 417 622 421 201 528 1000 322 1000)
Population mean number of elite cases: 6.51
Count of perfect (error zero) individuals by case: (0 0 417 622 421 201 528 0 322 0)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_98} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot})
Best program: (tagged_98 boolean_xor exec_yank in3 integer_gt print_integer integer_swap boolean_dup_times boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max exec_do*range (integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove boolean_invert_second_then_and) (exec_rot () () ()) ())))
Errors: [1 1 0 0 0 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 23
Size: 34
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 7.489
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.583 0.378 0.579 0.799 0.472 1.0 0.678 1.0)
Error minima by case: (1 1 0 0 0 0 0 1 0 1)
Average genome size in population (length): 40.265
Average program size in population (points): 51.927
Average percent parens in population: 0.242
Minimum age in population: 56.38438832724933
Maximum age in population: 61.36432287230673
Average age in population: 58.39732265329748
Median age in population: 58.47551280891639
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.004
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 16714567
--- Timings ---
Current time: 1559583574222 milliseconds
Total Time:         114.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.7 seconds, 75.6%
Fitness Testing:     17.8 seconds, 15.5%
Report:              10.1 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction -20} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_187} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_937} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_xor exec_yank in1 in4 print_integer boolean_dup_times exec_shove (integer_gt integer_yankdup exec_flush boolean_eq exec_yank boolean_dup in4 exec_stackdepth exec_shove (exec_do*range (boolean_yankdup integer_eq exec_do*while () exec_do*times (integer_swap print_integer tag_boolean_345) -20 integer_empty) exec_k (integer_swap tag_exec_187 (integer_dec integer_empty boolean_xor tag_integer_937 integer_dec exec_stackdepth boolean_invert_first_then_and integer_dup exec_while (boolean_yankdup exec_do*range (print_integer in2 boolean_dup print_boolean exec_yankdup exec_k (print_boolean tag_boolean_345) (exec_dup_items))))) ())))
Lexicase best errors: [1 1 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 62
Percent parens: 0.210
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction -20} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_187} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_937} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_xor exec_yank in1 in4 print_integer boolean_dup_times exec_shove (integer_gt integer_yankdup exec_flush boolean_eq exec_yank boolean_dup in4 exec_stackdepth exec_shove (exec_do*range (boolean_yankdup integer_eq exec_do*while () exec_do*times (integer_swap print_integer tag_boolean_345) -20 integer_empty) exec_k (integer_swap tag_exec_187 (integer_dec integer_empty boolean_xor tag_integer_937 integer_dec exec_stackdepth boolean_invert_first_then_and integer_dup exec_while (boolean_yankdup exec_do*range (print_integer in2 boolean_dup print_boolean exec_yankdup exec_k (print_boolean tag_boolean_345) (exec_dup_items))))) ())))
Zero cases best errors: [1 1 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 62
Percent parens: 0.210
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 200 1000 201 394 940 346 740 346 1000)
Population mean number of elite cases: 6.17
Count of perfect (error zero) individuals by case: (0 200 0 201 394 940 346 740 346 0)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 1, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_xor exec_yank in1 in4 print_integer exec_y (exec_y () exec_shove (integer_gt integer_yankdup exec_flush boolean_eq exec_shove (integer_gt in4 boolean_rot) integer_lte exec_pop (exec_pop (integer_mult) integer_dup_times) integer_min integer_empty) exec_stackdepth integer_max boolean_rot) exec_when () integer_dup_items integer_max exec_rot () (boolean_invert_second_then_and) ())
Errors: [1 1 1 1 1 0 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 42
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 6.833
Median total errors in population: 7
Error averages by case: (1.0 0.8 1.0 0.799 0.606 0.06 0.654 0.26 0.654 1.0)
Error minima by case: (1 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 36.742
Average program size in population (points): 47.483
Average percent parens in population: 0.239
Minimum age in population: 57.48316273163073
Maximum age in population: 62.36716662820709
Average age in population: 59.98764025007832
Median age in population: 60.05913691734168
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 17216267
--- Timings ---
Current time: 1559583577369 milliseconds
Total Time:         117.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.9 seconds, 75.4%
Fitness Testing:     18.3 seconds, 15.5%
Report:              10.7 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot})
Lexicase best program: (boolean_xor integer_dup_items in1 in4 print_integer integer_swap integer_flush exec_shove (integer_gt) integer_yankdup exec_flush boolean_eq exec_yank integer_dup integer_max exec_do*range (integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove boolean_invert_second_then_and exec_rot () () ())
Lexicase best errors: [1 0 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot})
Zero cases best program: (boolean_xor integer_dup_items in1 in4 print_integer integer_swap integer_flush exec_shove (integer_gt) integer_yankdup exec_flush boolean_eq exec_yank integer_dup integer_max exec_do*range (integer_sub exec_dup_items integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove boolean_invert_second_then_and exec_rot () () ())
Zero cases best errors: [1 0 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (319 941 411 1000 411 411 412 317 317 941)
Population mean number of elite cases: 5.48
Count of perfect (error zero) individuals by case: (319 941 411 0 411 411 412 317 317 941)
Population mean number of perfect (error zero) cases: 4.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 1, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank})
Best program: (boolean_xor exec_yank in1 in4 print_integer exec_y (exec_y () exec_shove (integer_gt integer_yankdup exec_flush boolean_eq exec_shove (boolean_eq boolean_dup_times) exec_shove (integer_gt integer_yankdup) exec_do*while (exec_y_when_autoconstructing (integer_eq print_integer exec_flush integer_lt)) in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (boolean_empty integer_lte integer_yank))))
Errors: [1 0 0 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 41
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 5.52
Median total errors in population: 5
Error averages by case: (0.681 0.059 0.589 1.0 0.589 0.589 0.588 0.683 0.683 0.059)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 40.068
Average program size in population (points): 50.595
Average percent parens in population: 0.216
Minimum age in population: 58.79814217580133
Maximum age in population: 63.68653844463097
Average age in population: 61.46563544639529
Median age in population: 61.53363931649142
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 17560184
--- Timings ---
Current time: 1559583580323 milliseconds
Total Time:         120.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.0 seconds, 75.2%
Fitness Testing:     18.6 seconds, 15.4%
Report:              11.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt})
Lexicase best program: (print_boolean boolean_dup_items exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) boolean_and boolean_eq exec_do*while (boolean_frominteger in4 exec_stackdepth exec_flush integer_max integer_yank integer_sub exec_dup_items integer_fromboolean exec_swap (integer_lte exec_eq integer_inc integer_gt) ()))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 33
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt})
Zero cases best program: (print_boolean boolean_dup_items exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup) boolean_and boolean_eq exec_do*while (boolean_frominteger in4 exec_stackdepth exec_flush integer_max integer_yank integer_sub exec_dup_items integer_fromboolean exec_swap (integer_lte exec_eq integer_inc integer_gt) ()))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 33
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (404 938 938 531 531 531 1000 530 531 1)
Population mean number of elite cases: 5.93
Count of perfect (error zero) individuals by case: (404 938 938 531 531 531 0 530 531 1)
Population mean number of perfect (error zero) cases: 4.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 2, :instruction boolean_xor} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Best program: (integer_eq integer_yankdup boolean_xor boolean_frominteger boolean_yank integer_mod integer_dec boolean_yank integer_mod boolean_eq exec_do*while (exec_do*range (integer_eq exec_do*while (print_integer in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 integer_fromboolean boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))))
Errors: [1 0 0 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 29
Size: 36
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 5.065
Median total errors in population: 3
Error averages by case: (0.596 0.062 0.062 0.469 0.469 0.469 1.0 0.47 0.469 0.999)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 42.372
Average program size in population (points): 52.24
Average percent parens in population: 0.188
Minimum age in population: 59.79814217580133
Maximum age in population: 64.85373810607098
Average age in population: 62.93991053700908
Median age in population: 63.01376404205973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 17786487
--- Timings ---
Current time: 1559583583241 milliseconds
Total Time:         124.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.4 seconds, 75.3%
Fitness Testing:     18.9 seconds, 15.2%
Report:              11.7 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 2, :instruction tagged_813} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_eq exec_when (tagged_813) exec_do*range () boolean_yank integer_mod integer_dec boolean_dup_items integer_mod boolean_eq exec_do*while (exec_do*range (integer_eq print_integer exec_do*range (exec_stackdepth) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 integer_fromboolean boolean_shove) exec_when (boolean_eq) tagged_389 boolean_yankdup integer_dup_times))
Lexicase best errors: [1 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 2, :instruction tagged_813} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_eq exec_when (tagged_813) exec_do*range () boolean_yank integer_mod integer_dec boolean_dup_items integer_mod boolean_eq exec_do*while (exec_do*range (integer_eq print_integer exec_do*range (exec_stackdepth) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 integer_fromboolean boolean_shove) exec_when (boolean_eq) tagged_389 boolean_yankdup integer_dup_times))
Zero cases best errors: [1 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 646 166 641 641 756 166 107 108 646)
Population mean number of elite cases: 4.88
Count of perfect (error zero) individuals by case: (0 646 166 641 641 756 166 107 108 646)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot})
Best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times exec_y (integer_gt integer_yankdup exec_flush boolean_dup_times) boolean_invert_first_then_and exec_do*range (exec_do*while (exec_s_when_autoconstructing (integer_max exec_do*range (integer_sub integer_div integer_eq exec_dup () boolean_empty) boolean_yankdup integer_shove boolean_invert_second_then_and) (exec_rot () () ()) ())))
Errors: [1 0 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 39
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 6.123
Median total errors in population: 5
Error averages by case: (1.0 0.354 0.834 0.359 0.359 0.244 0.834 0.893 0.892 0.354)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.512
Average program size in population (points): 46.311
Average percent parens in population: 0.190
Minimum age in population: 61.44707892084989
Maximum age in population: 66.55885406515335
Average age in population: 64.43514318502903
Median age in population: 64.49451755407739
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 18082092
--- Timings ---
Current time: 1559583585571 milliseconds
Total Time:         126.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.3 seconds, 75.3%
Fitness Testing:     19.2 seconds, 15.2%
Report:              12.0 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger boolean_yank integer_mod integer_dec boolean_yank integer_mod boolean_eq exec_do*while (exec_do*range (integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 integer_fromboolean boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush)))
Lexicase best errors: [0 1 0 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger boolean_yank integer_mod integer_dec boolean_yank integer_mod boolean_eq exec_do*while (exec_do*range (integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 integer_fromboolean boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush)))
Zero cases best errors: [0 1 0 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 1000 217 472 471 471 215 214 471 1000)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (215 0 217 472 471 471 215 214 471 0)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_integer_937} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove})
Best program: (boolean_xor exec_yank in1 in4 print_integer integer_swap boolean_dup_times boolean_pop integer_gt integer_yankdup exec_flush boolean_eq exec_yank boolean_frominteger in4 exec_stackdepth exec_flush exec_pop (in1 boolean_yankdup exec_rot (boolean_invert_first_then_and exec_stackdepth boolean_invert_first_then_and tag_integer_937 integer_dec exec_stackdepth boolean_invert_first_then_and integer_dup exec_while (boolean_yankdup exec_when (print_integer in2 exec_if (exec_do*times (exec_yankdup exec_k (in4 boolean_yankdup exec_do*while () exec_dup_items exec_dup_items) (in1 boolean_yankdup) exec_k_when_autoconstructing (integer_shove) ())) ()))) () ()))
Errors: [1 1 1 0 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 47
Size: 62
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 7.254
Median total errors in population: 6
Error averages by case: (0.785 1.0 0.783 0.528 0.529 0.529 0.785 0.786 0.529 1.0)
Error minima by case: (0 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 35.7
Average program size in population (points): 44.01
Average percent parens in population: 0.188
Minimum age in population: 62.79814217580133
Maximum age in population: 67.92379301397864
Average age in population: 65.8566493509692
Median age in population: 65.93540966940512
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 18366942
--- Timings ---
Current time: 1559583588499 milliseconds
Total Time:         129.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.7 seconds, 75.5%
Fitness Testing:     19.5 seconds, 15.1%
Report:              12.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: -82                
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 73                 
Correct output: 7                   | Program output: 83                 
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 96                 
Correct output: 35                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 36                  | Program output: 36                 
Correct output: 11                  | Program output: 38                 
Correct output: 44                  | Program output: 100                
Correct output: 89                  | Program output: 99                 
Correct output: 46                  | Program output: 76                 
Correct output: 13                  | Program output: 40                 
Correct output: 16                  | Program output: 98                 
Correct output: 32                  | Program output: 98                 
Correct output: 27                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 13                 
Correct output: 12                  | Program output: 68                 
Correct output: 10                  | Program output: 71                 
Correct output: 13                  | Program output: 39                 
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: 25                 
Correct output: -87                 | Program output: -9                 
Correct output: 3                   | Program output: 38                 
Correct output: -88                 | Program output: -72                
Correct output: -7                  | Program output: 53                 
Correct output: -81                 | Program output: 66                 
Correct output: -37                 | Program output: 22                 
Correct output: -87                 | Program output: -39                
Correct output: -57                 | Program output: -57                
Correct output: -69                 | Program output: -36                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: 80                 
Correct output: -87                 | Program output: 9                  
Correct output: -89                 | Program output: 39                 
Correct output: -71                 | Program output: -23                
Correct output: -63                 | Program output: 18                 
Correct output: -82                 | Program output: 22                 
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: -24                
Correct output: 17                  | Program output: 17                 
Correct output: -52                 | Program output: -1                 
Correct output: -37                 | Program output: 53                 
Correct output: -70                 | Program output: -40                
Correct output: -44                 | Program output: -44                
Correct output: -87                 | Program output: -30                
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: -53                
Correct output: -80                 | Program output: -73                
Correct output: -49                 | Program output: 77                 
Correct output: -28                 | Program output: 65                 
Correct output: -96                 | Program output: -62                
Correct output: -69                 | Program output: -56                
Correct output: -91                 | Program output: -3                 
Correct output: -81                 | Program output: -58                
Correct output: -96                 | Program output: 19                 
Correct output: -77                 | Program output: 20                 
Correct output: -78                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 12                  | Program output: 85                 
Correct output: -79                 | Program output: -16                
Correct output: -37                 | Program output: 3                  
Correct output: -99                 | Program output: -19                
Correct output: -64                 | Program output: 80                 
Correct output: -65                 | Program output: -8                 
Correct output: -56                 | Program output: -2                 
Correct output: -78                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -84                 | Program output: 23                 
Correct output: -98                 | Program output: -74                
Correct output: -73                 | Program output: 79                 
Correct output: -42                 | Program output: -33                
Correct output: -100                | Program output: -59                
Correct output: -97                 | Program output: -38                
Correct output: -85                 | Program output: 42                 
Correct output: -99                 | Program output: 80                 
Correct output: -56                 | Program output: -45                
Correct output: -54                 | Program output: 3                  
Correct output: -89                 | Program output: -60                
Correct output: -50                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (boolean_xor exec_yank in1 in2 print_integer integer_swap boolean_dup_times exec_y (integer_gt integer_yankdup integer_dup in4 boolean_invert_second_then_and) print_integer integer_yankdup integer_dup in4 exec_stackdepth print_integer exec_s () (boolean_yankdup in4 in1) (integer_add integer_dup exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items) integer_eq exec_dup ()) boolean_empty boolean_yankdup integer_shove tag_boolean_345 exec_rot (exec_yankdup print_boolean exec_eq boolean_dup_times integer_gt boolean_yankdup integer_shove integer_add exec_rot () () (exec_yankdup print_boolean exec_eq boolean_dup_times)) () ())
Lexicase best errors: [1 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (boolean_xor exec_yank in1 in2 print_integer integer_swap boolean_dup_times exec_y (integer_gt integer_yankdup integer_dup in4 boolean_invert_second_then_and) print_integer integer_yankdup integer_dup in4 exec_stackdepth print_integer exec_s () (boolean_yankdup in4 in1) (integer_add integer_dup exec_stackdepth exec_do*times (integer_empty integer_sub exec_dup_items) integer_eq exec_dup ()) boolean_empty boolean_yankdup integer_shove tag_boolean_345 exec_rot (exec_yankdup print_boolean exec_eq boolean_dup_times integer_gt boolean_yankdup integer_shove integer_add exec_rot () () (exec_yankdup print_boolean exec_eq boolean_dup_times)) () ())
Zero cases best errors: [1 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (489 403 1000 490 2 2 490 1000 489 2)
Population mean number of elite cases: 4.37
Count of perfect (error zero) individuals by case: (489 403 0 490 2 2 490 0 489 2)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times integer_mod integer_dec boolean_yank integer_dup_times boolean_eq exec_do*while (exec_do*range (integer_eq print_integer in2 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_k (boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush) ())))
Errors: [1 0 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 29
Size: 38
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 7.633
Median total errors in population: 9
Error averages by case: (0.511 0.597 1.0 0.51 0.998 0.998 0.51 1.0 0.511 0.998)
Error minima by case: (0 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 32.009
Average program size in population (points): 39.649
Average percent parens in population: 0.192
Minimum age in population: 64.81207948857315
Maximum age in population: 69.46402611051596
Average age in population: 67.2641208318759
Median age in population: 67.36264437508885
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 166
Genome diversity (% unique genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 198
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 18714508
--- Timings ---
Current time: 1559583591175 milliseconds
Total Time:         132.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.8 seconds, 75.6%
Fitness Testing:     19.9 seconds, 15.1%
Report:              12.3 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 2, :instruction tagged_813} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_eq exec_when (tagged_813) exec_do*range () boolean_yank integer_mod integer_dec boolean_dup_items integer_mod boolean_eq exec_do*while (exec_do*range (integer_eq print_integer exec_do*range (exec_stackdepth) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times exec_dup (integer_fromboolean boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup integer_dup_times))))
Lexicase best errors: [1 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 2, :instruction tagged_813} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_eq exec_when (tagged_813) exec_do*range () boolean_yank integer_mod integer_dec boolean_dup_items integer_mod boolean_eq exec_do*while (exec_do*range (integer_eq print_integer exec_do*range (exec_stackdepth) boolean_frominteger in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times exec_dup (integer_fromboolean boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup integer_dup_times))))
Zero cases best errors: [1 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 2 481 430 2 430 430 430 430 925)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (4 2 481 430 2 430 430 430 430 925)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup})
Best program: (boolean_xor boolean_xor integer_mult in1 in4 print_integer integer_swap boolean_dup_times exec_shove (exec_swap (integer_yankdup) (exec_flush exec_flush) boolean_eq exec_yank boolean_stackdepth in4 exec_stackdepth print_integer exec_do*range () boolean_yankdup))
Errors: [1 1 1 0 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 21
Size: 26
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 6.436
Median total errors in population: 8
Error averages by case: (0.996 0.998 0.519 0.57 0.998 0.57 0.57 0.57 0.57 0.075)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.024
Average program size in population (points): 46.677
Average percent parens in population: 0.206
Minimum age in population: 66.29077038410293
Maximum age in population: 70.74521500259311
Average age in population: 69.12393550722443
Median age in population: 69.0932050244
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 171
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 19381278
--- Timings ---
Current time: 1559583593977 milliseconds
Total Time:         134.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.8 seconds, 75.4%
Fitness Testing:     20.5 seconds, 15.2%
Report:              12.5 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: 69                 
Correct output: -60                 | Program output: 11                 
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 68                 
Correct output: 36                  | Program output: 86                 
Correct output: 11                  | Program output: 53                 
Correct output: 44                  | Program output: 84                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 90                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 68                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 45                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: 14                 
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: 97                 
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 48                 
Correct output: -37                 | Program output: 9                  
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 97                 
Correct output: -100                | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 81                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: 21                 
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: 71                 
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 49                 
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: 93                 
Correct output: -77                 | Program output: 33                 
Correct output: -78                 | Program output: 70                 
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: 94                 
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_dup_items boolean_xor boolean_frominteger integer_dup_times integer_mod integer_dec boolean_yank integer_dup_times boolean_eq exec_do*while (exec_do*range (integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_k (boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush) ())))
Lexicase best errors: [1 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 37
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_dup_items boolean_xor boolean_frominteger integer_dup_times integer_mod integer_dec boolean_yank integer_dup_times boolean_eq exec_do*while (exec_do*range (integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_k (boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush) ())))
Zero cases best errors: [1 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 37
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (516 174 169 907 169 102 516 169 173 514)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (516 174 169 907 169 102 516 169 173 514)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times integer_mod integer_dec boolean_yank integer_dup_times boolean_eq exec_do*while (exec_do*range (integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_k (boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush) ())))
Errors: [1 0 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 29
Size: 38
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 6.591
Median total errors in population: 6
Error averages by case: (0.484 0.826 0.831 0.093 0.831 0.898 0.484 0.831 0.827 0.486)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.813
Average program size in population (points): 43.734
Average percent parens in population: 0.203
Minimum age in population: 67.29077038410293
Maximum age in population: 72.32417287447655
Average age in population: 70.7046054868078
Median age in population: 70.77199205713231
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 19863743
--- Timings ---
Current time: 1559583596722 milliseconds
Total Time:         137.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.7 seconds, 75.4%
Fitness Testing:     21.1 seconds, 15.3%
Report:              12.7 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: -82                
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 73                 
Correct output: 7                   | Program output: 83                 
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 96                 
Correct output: 35                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 36                  | Program output: 36                 
Correct output: 11                  | Program output: 38                 
Correct output: 44                  | Program output: 100                
Correct output: 89                  | Program output: 99                 
Correct output: 46                  | Program output: 76                 
Correct output: 13                  | Program output: 40                 
Correct output: 16                  | Program output: 98                 
Correct output: 32                  | Program output: 98                 
Correct output: 27                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 13                 
Correct output: 12                  | Program output: 68                 
Correct output: 10                  | Program output: 71                 
Correct output: 13                  | Program output: 39                 
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: 25                 
Correct output: -87                 | Program output: -9                 
Correct output: 3                   | Program output: 38                 
Correct output: -88                 | Program output: -72                
Correct output: -7                  | Program output: 53                 
Correct output: -81                 | Program output: 66                 
Correct output: -37                 | Program output: 22                 
Correct output: -87                 | Program output: -39                
Correct output: -57                 | Program output: -57                
Correct output: -69                 | Program output: -36                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: 80                 
Correct output: -87                 | Program output: 9                  
Correct output: -89                 | Program output: 39                 
Correct output: -71                 | Program output: -23                
Correct output: -63                 | Program output: 18                 
Correct output: -82                 | Program output: 22                 
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: -24                
Correct output: 17                  | Program output: 17                 
Correct output: -52                 | Program output: -1                 
Correct output: -37                 | Program output: 53                 
Correct output: -70                 | Program output: -40                
Correct output: -44                 | Program output: -44                
Correct output: -87                 | Program output: -30                
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: -53                
Correct output: -80                 | Program output: -73                
Correct output: -49                 | Program output: 77                 
Correct output: -28                 | Program output: 65                 
Correct output: -96                 | Program output: -62                
Correct output: -69                 | Program output: -56                
Correct output: -91                 | Program output: -3                 
Correct output: -81                 | Program output: -58                
Correct output: -96                 | Program output: 19                 
Correct output: -77                 | Program output: 20                 
Correct output: -78                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 12                  | Program output: 85                 
Correct output: -79                 | Program output: -16                
Correct output: -37                 | Program output: 3                  
Correct output: -99                 | Program output: -19                
Correct output: -64                 | Program output: 80                 
Correct output: -65                 | Program output: -8                 
Correct output: -56                 | Program output: -2                 
Correct output: -78                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -84                 | Program output: 23                 
Correct output: -98                 | Program output: -74                
Correct output: -73                 | Program output: 79                 
Correct output: -42                 | Program output: -33                
Correct output: -100                | Program output: -59                
Correct output: -97                 | Program output: -38                
Correct output: -85                 | Program output: 42                 
Correct output: -99                 | Program output: 80                 
Correct output: -56                 | Program output: -45                
Correct output: -54                 | Program output: 3                  
Correct output: -89                 | Program output: -60                
Correct output: -50                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_xor exec_yank in1 integer_yank print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup exec_s (boolean_eq integer_yankdup) (exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 integer_fromboolean boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_do*while ()) ()))
Lexicase best errors: [1 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_xor exec_yank in1 integer_yank print_integer integer_swap boolean_dup_times exec_shove (integer_gt integer_yankdup exec_s (boolean_eq integer_yankdup) (exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 integer_fromboolean boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_do*while ()) ()))
Zero cases best errors: [1 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (96 403 477 6 5 5 907 295 96 481)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (96 403 477 6 5 5 907 295 96 481)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_345} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_xor exec_yank in1 in2 print_integer integer_swap boolean_dup_times exec_y (integer_gt integer_yankdup integer_dup in4 boolean_invert_second_then_and) print_integer integer_yankdup integer_dup in4 exec_stackdepth print_integer exec_s () (boolean_yankdup in4 in1) (integer_add integer_dup exec_stackdepth exec_do*times (integer_empty integer_sub exec_shove () integer_eq exec_dup ()) boolean_empty) exec_eq integer_shove tag_boolean_345 exec_rot (exec_yankdup print_boolean exec_eq boolean_dup_times integer_gt boolean_yankdup integer_shove integer_add exec_rot () () (exec_yankdup print_boolean exec_eq boolean_dup_times)) () ())
Errors: [0 0 1 1 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 50
Size: 64
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 7.229
Median total errors in population: 7
Error averages by case: (0.904 0.597 0.523 0.994 0.995 0.995 0.093 0.705 0.904 0.519)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.045
Average program size in population (points): 39.422
Average percent parens in population: 0.211
Minimum age in population: 69.61411381989022
Maximum age in population: 74.01224952107192
Average age in population: 72.34446218409181
Median age in population: 72.41777485633058
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 20296642
--- Timings ---
Current time: 1559583600277 milliseconds
Total Time:         140.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       106.0 seconds, 75.4%
Fitness Testing:     21.5 seconds, 15.3%
Report:              12.9 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 60                 
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 82                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 97                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 100                
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 72                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 63                 
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: 92                 
Correct output: -71                 | Program output: 20                 
Correct output: -85                 | Program output: 96                 
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: 61                 
Correct output: -37                 | Program output: 88                 
Correct output: -70                 | Program output: 4                  
Correct output: -44                 | Program output: 28                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 70                 
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: 80                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: 88                 
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_98} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank})
Lexicase best program: (tagged_98 integer_eq exec_when (boolean_xor exec_yank in1 in4 print_integer exec_flush integer_gt) integer_yankdup exec_flush boolean_eq exec_when (integer_dup in4 exec_do*range (boolean_eq boolean_dup_times) exec_shove (integer_gt exec_when () exec_do*while (exec_y_when_autoconstructing (integer_eq print_integer exec_flush integer_lt)) in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (exec_do*while (integer_lte integer_yank)))))
Lexicase best errors: [1 1 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_98} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank})
Zero cases best program: (tagged_98 integer_eq exec_when (boolean_xor exec_yank in1 in4 print_integer exec_flush integer_gt) integer_yankdup exec_flush boolean_eq exec_when (integer_dup in4 exec_do*range (boolean_eq boolean_dup_times) exec_shove (integer_gt exec_when () exec_do*while (exec_y_when_autoconstructing (integer_eq print_integer exec_flush integer_lt)) in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (exec_do*while (integer_lte integer_yank)))))
Zero cases best errors: [1 1 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (579 182 136 316 136 136 136 261 182 317)
Population mean number of elite cases: 2.38
Count of perfect (error zero) individuals by case: (579 182 136 316 136 136 136 261 182 317)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_98} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank})
Best program: (tagged_98 integer_eq exec_when (boolean_xor exec_yank in1 in4 print_integer exec_flush integer_gt) integer_yankdup exec_flush boolean_eq exec_when (integer_dup in4 exec_do*range (boolean_eq boolean_dup_times) exec_shove (integer_gt exec_when () exec_do*while (exec_y_when_autoconstructing (integer_eq print_integer exec_flush integer_lt)) in1 boolean_yankdup print_integer boolean_invert_first_then_and exec_do*range (exec_do*while (integer_lte integer_yank)))))
Errors: [1 1 0 1 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 7.619
Median total errors in population: 8
Error averages by case: (0.421 0.818 0.864 0.684 0.864 0.864 0.864 0.739 0.818 0.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.431
Average program size in population (points): 43.651
Average percent parens in population: 0.212
Minimum age in population: 70.98689202328981
Maximum age in population: 75.42085479920345
Average age in population: 73.8464132638751
Median age in population: 73.85860491895951
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 20850536
--- Timings ---
Current time: 1559583603217 milliseconds
Total Time:         144.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       108.2 seconds, 75.1%
Fitness Testing:     22.1 seconds, 15.3%
Report:              13.7 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -29                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 31                 
Correct output: 7                   | Program output: 100                
Correct output: 28                  | Program output: 97                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 85                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 92                 
Correct output: 16                  | Program output: 78                 
Correct output: 32                  | Program output: 74                 
Correct output: 27                  | Program output: 52                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 71                 
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 33                 
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 86                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: 56                 
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 45                 
Correct output: -63                 | Program output: -17                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 64                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: 4                  
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -39                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: 18                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: 83                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 86                 
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -47                
Correct output: -42                 | Program output: 30                 
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: 31                 
Correct output: -85                 | Program output: 97                 
Correct output: -99                 | Program output: 45                 
Correct output: -56                 | Program output: 12                 
Correct output: -54                 | Program output: 68                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_do*range (integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Lexicase best errors: [0 0 1 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_do*range (integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Zero cases best errors: [0 0 1 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (284 283 380 119 119 283 381 119 283 134)
Population mean number of elite cases: 2.38
Count of perfect (error zero) individuals by case: (284 283 380 119 119 283 381 119 283 134)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 1, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean})
Best program: (boolean_xor exec_yank in1 exec_dup (print_integer exec_y (exec_y () exec_shove (integer_gt integer_yankdup exec_flush boolean_eq exec_shove (boolean_eq boolean_dup_times) exec_shove (integer_gt integer_yankdup) exec_do*while (exec_y_when_autoconstructing (exec_stackdepth print_integer) exec_do*range (boolean_yankdup) in1) in1 exec_shove (exec_stackdepth exec_do*times (exec_dup (boolean_empty boolean_yankdup exec_y (integer_shove integer_add exec_rot () () (exec_yankdup print_boolean)))))))))
Errors: [0 0 1 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 38
Size: 55
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 7.615
Median total errors in population: 8
Error averages by case: (0.716 0.717 0.62 0.881 0.881 0.717 0.619 0.881 0.717 0.866)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.15
Average program size in population (points): 41.836
Average percent parens in population: 0.206
Minimum age in population: 72.48681367452205
Maximum age in population: 77.20821339343908
Average age in population: 75.31089793365304
Median age in population: 75.4109653780198
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 21265315
--- Timings ---
Current time: 1559583606431 milliseconds
Total Time:         147.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       110.5 seconds, 75.2%
Fitness Testing:     22.6 seconds, 15.3%
Report:              13.9 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Lexicase best errors: [0 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Zero cases best errors: [0 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 270 234 888 380 270 231 891 231 233)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (233 270 234 888 380 270 231 891 231 233)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Errors: [0 1 0 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 6.139
Median total errors in population: 6
Error averages by case: (0.767 0.73 0.766 0.112 0.62 0.73 0.769 0.109 0.769 0.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.094
Average program size in population (points): 44.503
Average percent parens in population: 0.210
Minimum age in population: 74.0217778956933
Maximum age in population: 78.63342823367861
Average age in population: 77.07298020195857
Median age in population: 77.13027981251058
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 157
Genome diversity (% unique genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 21874699
--- Timings ---
Current time: 1559583609302 milliseconds
Total Time:         150.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       112.5 seconds, 74.9%
Fitness Testing:     23.2 seconds, 15.4%
Report:              14.4 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (528 525 211 529 525 866 528 648 529 209)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (528 525 211 529 525 866 528 648 529 209)
Population mean number of perfect (error zero) cases: 5.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_eq exec_when () boolean_xor boolean_frominteger integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 46
Size: 58
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 4.902
Median total errors in population: 2
Error averages by case: (0.472 0.475 0.789 0.471 0.475 0.134 0.472 0.352 0.471 0.791)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.472
Average program size in population (points): 45.007
Average percent parens in population: 0.210
Minimum age in population: 75.74550470525827
Maximum age in population: 80.3072124671017
Average age in population: 78.72341011686335
Median age in population: 78.79793711818637
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 246
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 272
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 22471682
--- Timings ---
Current time: 1559583612175 milliseconds
Total Time:         152.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       114.4 seconds, 74.8%
Fitness Testing:     23.8 seconds, 15.5%
Report:              14.7 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (858 600 861 602 844 603 847 6 603 603)
Population mean number of elite cases: 6.43
Count of perfect (error zero) individuals by case: (858 600 861 602 844 603 847 6 603 603)
Population mean number of perfect (error zero) cases: 6.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank in2 boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 3.573
Median total errors in population: 1
Error averages by case: (0.142 0.4 0.139 0.398 0.156 0.397 0.153 0.994 0.397 0.397)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.771
Average program size in population (points): 45.746
Average percent parens in population: 0.218
Minimum age in population: 78.42658646155937
Maximum age in population: 81.88791736143162
Average age in population: 80.39806379214012
Median age in population: 80.39101597605448
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 185
Genome diversity (% unique genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 22905070
--- Timings ---
Current time: 1559583614784 milliseconds
Total Time:         155.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       116.3 seconds, 74.7%
Fitness Testing:     24.2 seconds, 15.6%
Report:              15.0 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer boolean_xor) integer_lt integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1))
Lexicase best errors: [1 0 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer boolean_xor) integer_lt integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1))
Zero cases best errors: [1 0 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 866 696 6 857 4 1000 1000 857 4)
Population mean number of elite cases: 6.29
Count of perfect (error zero) individuals by case: (0 866 696 6 857 4 0 0 857 4)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) (boolean_frominteger integer_dup_times) (boolean_yank) integer_mod boolean_eq exec_do*while (integer_min integer_mod print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Errors: [1 0 0 1 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 6.71
Median total errors in population: 6
Error averages by case: (1.0 0.134 0.304 0.994 0.143 0.996 1.0 1.0 0.143 0.996)
Error minima by case: (1 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 36.568
Average program size in population (points): 46.566
Average percent parens in population: 0.214
Minimum age in population: 79.51791873545179
Maximum age in population: 83.54260380603846
Average age in population: 81.9269035344085
Median age in population: 81.9500123014897
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 23345525
--- Timings ---
Current time: 1559583617464 milliseconds
Total Time:         158.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       118.2 seconds, 74.7%
Fitness Testing:     24.7 seconds, 15.6%
Report:              15.3 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_dup (boolean_not) tagged_389 boolean_yankdup exec_flush))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_dup (boolean_not) tagged_389 boolean_yankdup exec_flush))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (466 420 420 420 406 418 465 406 877 419)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (466 420 420 420 406 418 465 406 877 419)
Population mean number of perfect (error zero) cases: 4.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction tagged_346} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod integer_shove in1 exec_s_when_autoconstructing (exec_when () tagged_346) () (boolean_frominteger integer_dup_times) boolean_yank exec_k_when_autoconstructing (boolean_eq) (exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush)))
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 36
Size: 48
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.283
Median total errors in population: 7
Error averages by case: (0.534 0.58 0.58 0.58 0.594 0.582 0.535 0.594 0.123 0.581)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.603
Average program size in population (points): 44.143
Average percent parens in population: 0.214
Minimum age in population: 80.58028464063538
Maximum age in population: 85.09740534797682
Average age in population: 83.6205851943116
Median age in population: 83.62523069356747
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.009
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 23683908
--- Timings ---
Current time: 1559583620342 milliseconds
Total Time:         161.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       120.4 seconds, 74.7%
Fitness Testing:     25.0 seconds, 15.5%
Report:              15.6 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_when () exec_k_when_autoconstructing () () boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 integer_yank exec_dup_times () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Lexicase best errors: [0 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 45
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_when () exec_k_when_autoconstructing () () boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 integer_yank exec_dup_times () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Zero cases best errors: [0 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 45
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (651 858 207 861 207 654 647 207 653 649)
Population mean number of elite cases: 5.59
Count of perfect (error zero) individuals by case: (651 858 207 861 207 654 647 207 653 649)
Population mean number of perfect (error zero) cases: 5.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger boolean_stackdepth boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (boolean_frominteger) (boolean_xor) () boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_shove exec_yank in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Errors: [0 0 1 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 44
Size: 54
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 4.406
Median total errors in population: 3
Error averages by case: (0.349 0.142 0.793 0.139 0.793 0.346 0.353 0.793 0.347 0.351)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.227
Average program size in population (points): 45.08
Average percent parens in population: 0.218
Minimum age in population: 82.13027981251058
Maximum age in population: 86.78188572366123
Average age in population: 84.9720213267501
Median age in population: 85.03105909623609
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 24083081
--- Timings ---
Current time: 1559583622957 milliseconds
Total Time:         163.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       122.3 seconds, 74.7%
Fitness Testing:     25.4 seconds, 15.5%
Report:              15.9 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Lexicase best errors: [0 0 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Zero cases best errors: [0 0 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (533 533 533 337 535 337 1000 533 534 533)
Population mean number of elite cases: 5.41
Count of perfect (error zero) individuals by case: (533 533 533 337 535 337 0 533 534 533)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq) exec_flush))
Errors: [0 0 0 1 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 45
Size: 57
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 5.592
Median total errors in population: 3
Error averages by case: (0.467 0.467 0.467 0.663 0.465 0.663 1.0 0.467 0.466 0.467)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 35.011
Average program size in population (points): 44.767
Average percent parens in population: 0.217
Minimum age in population: 83.13027981251058
Maximum age in population: 88.66238414437748
Average age in population: 86.51316400362013
Median age in population: 86.60202270408602
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 24461610
--- Timings ---
Current time: 1559583625483 milliseconds
Total Time:         166.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       124.1 seconds, 74.6%
Fitness Testing:     25.8 seconds, 15.5%
Report:              16.3 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing () (exec_when () boolean_xor) () boolean_frominteger integer_dup_times boolean_and integer_mod exec_k_when_autoconstructing () (exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank)))
Lexicase best errors: [0 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 37
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing () (exec_when () boolean_xor) () boolean_frominteger integer_dup_times boolean_and integer_mod exec_k_when_autoconstructing () (exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank)))
Zero cases best errors: [0 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 37
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (668 189 858 667 667 665 188 663 188 663)
Population mean number of elite cases: 5.42
Count of perfect (error zero) individuals by case: (668 189 858 667 667 665 188 663 188 663)
Population mean number of perfect (error zero) cases: 5.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times integer_empty exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Errors: [0 1 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 4.584
Median total errors in population: 3
Error averages by case: (0.332 0.811 0.142 0.333 0.333 0.335 0.812 0.337 0.812 0.337)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.434
Average program size in population (points): 45.269
Average percent parens in population: 0.216
Minimum age in population: 84.76650653242908
Maximum age in population: 89.72629061238894
Average age in population: 87.8879145872021
Median age in population: 87.96352667132064
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 24870832
--- Timings ---
Current time: 1559583628333 milliseconds
Total Time:         169.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       126.2 seconds, 74.6%
Fitness Testing:     26.2 seconds, 15.5%
Report:              16.6 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction 93} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 93 exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Lexicase best errors: [0 0 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction 93} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 93 exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Zero cases best errors: [0 0 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (566 555 567 299 558 299 558 1 1 569)
Population mean number of elite cases: 3.97
Count of perfect (error zero) individuals by case: (566 555 567 299 558 299 558 1 1 569)
Population mean number of perfect (error zero) cases: 3.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_exec_693} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank tag_exec_693 (boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_empty exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup tagged_389 boolean_yankdup exec_flush))
Errors: [0 0 0 1 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 33
Size: 44
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.027
Median total errors in population: 4
Error averages by case: (0.434 0.445 0.433 0.701 0.442 0.701 0.442 0.999 0.999 0.431)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.079
Average program size in population (points): 44.818
Average percent parens in population: 0.216
Minimum age in population: 86.39564144289298
Maximum age in population: 91.32991740839006
Average age in population: 89.40171876291186
Median age in population: 89.50213098076613
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 25260319
--- Timings ---
Current time: 1559583630852 milliseconds
Total Time:         171.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       128.0 seconds, 74.6%
Fitness Testing:     26.6 seconds, 15.5%
Report:              16.9 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_noop) (boolean_xor) () boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_noop) (boolean_xor) () boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (452 879 449 452 413 874 446 452 412 452)
Population mean number of elite cases: 5.28
Count of perfect (error zero) individuals by case: (452 879 449 452 413 874 446 452 412 452)
Population mean number of perfect (error zero) cases: 5.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_pop print_integer boolean_xor) integer_lt integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1))
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 4.719
Median total errors in population: 6
Error averages by case: (0.548 0.121 0.551 0.548 0.587 0.126 0.554 0.548 0.588 0.548)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.457
Average program size in population (points): 40.358
Average percent parens in population: 0.190
Minimum age in population: 87.91624432054418
Maximum age in population: 92.89705816806745
Average age in population: 90.71076973194387
Median age in population: 90.85447052719509
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 290
Genome diversity (% unique genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 314
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 25596877
--- Timings ---
Current time: 1559583633375 milliseconds
Total Time:         174.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       129.9 seconds, 74.6%
Fitness Testing:     26.9 seconds, 15.5%
Report:              17.2 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank in2 boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Lexicase best errors: [1 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank in2 boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Zero cases best errors: [1 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 639 857 215 639 212 647 639 219 647)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (215 639 857 215 639 212 647 639 219 647)
Population mean number of perfect (error zero) cases: 4.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_lte print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_dup (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Errors: [1 0 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 42
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 5.071
Median total errors in population: 4
Error averages by case: (0.785 0.361 0.143 0.785 0.361 0.788 0.353 0.361 0.781 0.353)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.246
Average program size in population (points): 43.288
Average percent parens in population: 0.205
Minimum age in population: 88.91624432054418
Maximum age in population: 94.10727225336596
Average age in population: 92.26914050019352
Median age in population: 92.3246733403983
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 25996752
--- Timings ---
Current time: 1559583635953 milliseconds
Total Time:         176.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       131.7 seconds, 74.5%
Fitness Testing:     27.3 seconds, 15.5%
Report:              17.6 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Lexicase best errors: [0 1 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Zero cases best errors: [0 1 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (885 415 455 454 406 455 455 455 405 454)
Population mean number of elite cases: 4.84
Count of perfect (error zero) individuals by case: (885 415 455 454 406 455 455 455 405 454)
Population mean number of perfect (error zero) cases: 4.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq integer_mod boolean_eq in1 integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_xor) boolean_frominteger integer_dup_times integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times boolean_pop exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Errors: [0 1 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 47
Size: 58
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 5.161
Median total errors in population: 6
Error averages by case: (0.115 0.585 0.545 0.546 0.594 0.545 0.545 0.545 0.595 0.546)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.791
Average program size in population (points): 40.887
Average percent parens in population: 0.193
Minimum age in population: 91.05532838662391
Maximum age in population: 95.75974572960644
Average age in population: 93.70864125331002
Median age in population: 93.7528641849082
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 26343671
--- Timings ---
Current time: 1559583638669 milliseconds
Total Time:         179.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       133.8 seconds, 74.5%
Fitness Testing:     27.7 seconds, 15.4%
Report:              17.9 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_frominteger integer_dup_times exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () (boolean_yankdup exec_flush)))
Lexicase best errors: [0 1 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 48
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_frominteger integer_dup_times exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () (boolean_yankdup exec_flush)))
Zero cases best errors: [0 1 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 48
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (547 322 322 551 553 885 543 322 550 881)
Population mean number of elite cases: 5.48
Count of perfect (error zero) individuals by case: (547 322 322 551 553 885 543 322 550 881)
Population mean number of perfect (error zero) cases: 5.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_when () integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) (boolean_dup_items integer_dup_times) (boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove boolean_empty in1 exec_empty boolean_shove exec_when (boolean_eq tagged_389 boolean_yankdup exec_flush))))
Errors: [0 1 1 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 38
Size: 49
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 4.524
Median total errors in population: 3
Error averages by case: (0.453 0.678 0.678 0.449 0.447 0.115 0.457 0.678 0.45 0.119)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.364
Average program size in population (points): 41.864
Average percent parens in population: 0.198
Minimum age in population: 92.31919607430541
Maximum age in population: 97.31473951477639
Average age in population: 95.18540862034207
Median age in population: 95.24487077802263
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 26717192
--- Timings ---
Current time: 1559583641326 milliseconds
Total Time:         182.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       135.7 seconds, 74.5%
Fitness Testing:     28.1 seconds, 15.4%
Report:              18.2 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 458
Test mean error for best: 0.45800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output:                    
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output:                    
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Lexicase best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Lexicase best errors: [1 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Zero cases best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Zero cases best errors: [1 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (548 546 298 299 557 299 855 862 301 509)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (548 546 298 299 557 299 855 862 301 509)
Population mean number of perfect (error zero) cases: 5.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Errors: [1 1 1 0 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 38
Size: 49
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 4.926
Median total errors in population: 4
Error averages by case: (0.452 0.454 0.702 0.701 0.443 0.701 0.145 0.138 0.699 0.491)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.626
Average program size in population (points): 42.156
Average percent parens in population: 0.199
Minimum age in population: 93.41911041813616
Maximum age in population: 98.6175832743257
Average age in population: 96.6658546968479
Median age in population: 96.71305643761416
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 27095760
--- Timings ---
Current time: 1559583643882 milliseconds
Total Time:         184.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       137.6 seconds, 74.5%
Fitness Testing:     28.5 seconds, 15.4%
Report:              18.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 458
Test mean error for best: 0.45800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output:                    
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output:                    
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Lexicase best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Lexicase best errors: [0 0 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Zero cases best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Zero cases best errors: [0 0 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (402 678 402 303 400 293 680 296 301 679)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (402 678 402 303 400 293 680 296 301 679)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Errors: [0 0 0 1 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 49
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 5.566
Median total errors in population: 5
Error averages by case: (0.598 0.322 0.598 0.697 0.6 0.707 0.32 0.704 0.699 0.321)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.217
Average program size in population (points): 46.582
Average percent parens in population: 0.218
Minimum age in population: 95.61975074921645
Maximum age in population: 99.894917113143
Average age in population: 97.93179600931956
Median age in population: 98.08756898654183
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 27569498
--- Timings ---
Current time: 1559583646584 milliseconds
Total Time:         187.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       139.5 seconds, 74.5%
Fitness Testing:     28.9 seconds, 15.4%
Report:              18.8 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_pop exec_when (boolean_xor) boolean_frominteger integer_dup_times exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times boolean_yank) integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Lexicase best errors: [0 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_pop exec_when (boolean_xor) boolean_frominteger integer_dup_times exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times boolean_yank) integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush))
Zero cases best errors: [0 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 857 255 255 861 255 453 861 449 641)
Population mean number of elite cases: 5.14
Count of perfect (error zero) individuals by case: (254 857 255 255 861 255 453 861 449 641)
Population mean number of perfect (error zero) cases: 5.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq tagged_389 boolean_yankdup exec_when (boolean_eq)))
Errors: [0 0 0 0 0 0 1 0 1 0]
Total: 2
Mean: 0.2
Genome size: 38
Size: 49
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 4.859
Median total errors in population: 5
Error averages by case: (0.746 0.143 0.745 0.745 0.139 0.745 0.547 0.139 0.551 0.359)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.237
Average program size in population (points): 46.531
Average percent parens in population: 0.216
Minimum age in population: 96.61975074921645
Maximum age in population: 101.4396356650913
Average age in population: 99.37287172604444
Median age in population: 99.40022614357734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 28027653
--- Timings ---
Current time: 1559583649375 milliseconds
Total Time:         190.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       141.5 seconds, 74.4%
Fitness Testing:     29.4 seconds, 15.5%
Report:              19.1 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction tagged_389} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (integer_empty) tagged_389 exec_flush))
Lexicase best errors: [0 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 44
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction tagged_389} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (integer_empty) tagged_389 exec_flush))
Zero cases best errors: [0 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 44
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (569 809 243 568 810 535 828 1000 833 248)
Population mean number of elite cases: 6.44
Count of perfect (error zero) individuals by case: (569 809 243 568 810 535 828 0 833 248)
Population mean number of perfect (error zero) cases: 5.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when})
Best program: (integer_eq exec_when () boolean_xor boolean_xor boolean_frominteger integer_dup_times in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) integer_dup_times in1 exec_empty boolean_shove exec_when ()))
Errors: [0 0 1 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 36
Size: 47
Percent parens: 0.234
--- Population Statistics ---
Average total errors in population: 4.557
Median total errors in population: 3
Error averages by case: (0.431 0.191 0.757 0.432 0.19 0.465 0.172 1.0 0.167 0.752)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 36.765
Average program size in population (points): 47.22
Average percent parens in population: 0.221
Minimum age in population: 97.75634359641202
Maximum age in population: 102.8935735636671
Average age in population: 100.7997235864229
Median age in population: 100.8381521293902
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 28501625
--- Timings ---
Current time: 1559583652262 milliseconds
Total Time:         192.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       143.5 seconds, 74.4%
Fitness Testing:     29.9 seconds, 15.5%
Report:              19.5 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Smallest problem report - generation 69
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_noop} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_noop boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_lt) boolean_yank integer_mod boolean_eq exec_do*while (integer_min boolean_dup integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times exec_flush exec_empty boolean_shove exec_when (exec_while () tagged_389 boolean_yankdup exec_flush)))
Lexicase best errors: [1 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_noop} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_noop boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_lt) boolean_yank integer_mod boolean_eq exec_do*while (integer_min boolean_dup integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times exec_flush exec_empty boolean_shove exec_when (exec_while () tagged_389 boolean_yankdup exec_flush)))
Zero cases best errors: [1 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 466 851 390 853 372 853 466 854 1000)
Population mean number of elite cases: 7.11
Count of perfect (error zero) individuals by case: (0 466 851 390 853 372 853 466 854 0)
Population mean number of perfect (error zero) cases: 5.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush})
Best program: (integer_eq integer_eq exec_s_when_autoconstructing (exec_when () boolean_frominteger) (boolean_xor) () boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_xor exec_flush))
Errors: [1 0 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 4.895
Median total errors in population: 4
Error averages by case: (1.0 0.534 0.149 0.61 0.147 0.628 0.147 0.534 0.146 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 37.044
Average program size in population (points): 47.097
Average percent parens in population: 0.213
Minimum age in population: 99.53951978810389
Maximum age in population: 104.3764179911645
Average age in population: 102.1638597651449
Median age in population: 102.3046383647048
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 28983780
--- Timings ---
Current time: 1559583654839 milliseconds
Total Time:         195.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       145.4 seconds, 74.3%
Fitness Testing:     30.3 seconds, 15.5%
Report:              19.9 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Smallest problem report - generation 70
Test total error for best: 451
Test mean error for best: 0.45100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Lexicase best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Lexicase best errors: [1 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Zero cases best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Zero cases best errors: [1 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 700 488 1000 687 1000 700 702 476 478)
Population mean number of elite cases: 7.23
Count of perfect (error zero) individuals by case: (0 700 488 0 687 0 700 702 476 478)
Population mean number of perfect (error zero) cases: 4.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Errors: [1 0 1 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 46
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 5.769
Median total errors in population: 5
Error averages by case: (1.0 0.3 0.512 1.0 0.313 1.0 0.3 0.298 0.524 0.522)
Error minima by case: (1 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 37.425
Average program size in population (points): 47.683
Average percent parens in population: 0.214
Minimum age in population: 100.9390229837614
Maximum age in population: 105.6298373689263
Average age in population: 103.7250790596239
Median age in population: 103.8040136603074
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 29466822
--- Timings ---
Current time: 1559583657522 milliseconds
Total Time:         198.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       147.3 seconds, 74.3%
Fitness Testing:     30.8 seconds, 15.5%
Report:              20.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Smallest problem report - generation 71
Test total error for best: 451
Test mean error for best: 0.45100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Lexicase best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Lexicase best errors: [0 1 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Zero cases best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Zero cases best errors: [0 1 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (875 364 586 736 1 702 585 364 585 711)
Population mean number of elite cases: 5.51
Count of perfect (error zero) individuals by case: (875 364 586 736 1 702 585 364 585 711)
Population mean number of perfect (error zero) cases: 5.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 3, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_eq) boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Errors: [0 1 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 37
Size: 48
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 4.491
Median total errors in population: 4
Error averages by case: (0.125 0.636 0.414 0.264 0.999 0.298 0.415 0.636 0.415 0.289)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.674
Average program size in population (points): 48.532
Average percent parens in population: 0.223
Minimum age in population: 102.5645497269814
Maximum age in population: 107.0682475888776
Average age in population: 105.205674673537
Median age in population: 105.2584183671672
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 181
Genome diversity (% unique genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 197
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 29949985
--- Timings ---
Current time: 1559583660230 milliseconds
Total Time:         201.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       149.2 seconds, 74.2%
Fitness Testing:     31.2 seconds, 15.5%
Report:              20.4 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Smallest problem report - generation 72
Test total error for best: 451
Test mean error for best: 0.45100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_472} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Lexicase best program: (integer_eq exec_when () boolean_xor exec_noop integer_dup_times boolean_yank integer_mod integer_mult in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_472 boolean_yankdup exec_when (boolean_eq))
Lexicase best errors: [0 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 58
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_472} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Zero cases best program: (integer_eq exec_when () boolean_xor exec_noop integer_dup_times boolean_yank integer_mod integer_mult in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_472 boolean_yankdup exec_when (boolean_eq))
Zero cases best errors: [0 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 58
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (556 571 509 571 434 433 509 81 573 509)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (556 571 509 571 434 433 509 81 573 509)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Errors: [0 0 0 0 1 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 38
Size: 49
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 5.254
Median total errors in population: 4
Error averages by case: (0.444 0.429 0.491 0.429 0.566 0.567 0.491 0.919 0.427 0.491)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.759
Average program size in population (points): 47.34
Average percent parens in population: 0.223
Minimum age in population: 103.5645497269814
Maximum age in population: 108.6281312753933
Average age in population: 106.809169850679
Median age in population: 106.9191188673394
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 30420111
--- Timings ---
Current time: 1559583662885 milliseconds
Total Time:         203.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       151.1 seconds, 74.2%
Fitness Testing:     31.7 seconds, 15.6%
Report:              20.8 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Smallest problem report - generation 73
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_exec_737} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) (boolean_frominteger integer_dup_times) (integer_mod exec_while () exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove tag_exec_737 (boolean_eq) tagged_389 exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush)))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 56
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_exec_737} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) (boolean_frominteger integer_dup_times) (integer_mod exec_while () exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove tag_exec_737 (boolean_eq) tagged_389 exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_yankdup exec_flush)))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 56
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (401 396 612 612 888 401 612 614 548 396)
Population mean number of elite cases: 5.48
Count of perfect (error zero) individuals by case: (401 396 612 612 888 401 612 614 548 396)
Population mean number of perfect (error zero) cases: 5.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times exec_do*times () integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 35
Size: 46
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 4.52
Median total errors in population: 4
Error averages by case: (0.599 0.604 0.388 0.388 0.112 0.599 0.388 0.386 0.452 0.604)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.133
Average program size in population (points): 47.853
Average percent parens in population: 0.223
Minimum age in population: 104.5645497269814
Maximum age in population: 110.0727676642449
Average age in population: 108.2005559484837
Median age in population: 108.2523606167885
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 30898681
--- Timings ---
Current time: 1559583665501 milliseconds
Total Time:         206.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.0 seconds, 74.2%
Fitness Testing:     32.1 seconds, 15.6%
Report:              21.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Smallest problem report - generation 74
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_when () boolean_xor boolean_frominteger boolean_frominteger boolean_shove boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (integer_dup_times in1 exec_empty boolean_shove exec_when () boolean_eq) tagged_389 boolean_yankdup exec_flush))
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 40
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_when () boolean_xor boolean_frominteger boolean_frominteger boolean_shove boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_empty boolean_shove exec_when (integer_dup_times in1 exec_empty boolean_shove exec_when () boolean_eq) tagged_389 boolean_yankdup exec_flush))
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 40
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (708 850 845 834 704 701 694 259 266 708)
Population mean number of elite cases: 6.57
Count of perfect (error zero) individuals by case: (708 850 845 834 704 701 694 259 266 708)
Population mean number of perfect (error zero) cases: 6.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in1 in4 exec_stackdepth exec_k () () exec_yank integer_dup integer_dup_times in1 boolean_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_and exec_flush))
Errors: [0 0 0 0 0 1 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 40
Size: 51
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 3.431
Median total errors in population: 2
Error averages by case: (0.292 0.15 0.155 0.166 0.296 0.299 0.306 0.741 0.734 0.292)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.791
Average program size in population (points): 47.795
Average percent parens in population: 0.230
Minimum age in population: 105.5645497269814
Maximum age in population: 111.6268538944564
Average age in population: 109.6426948874207
Median age in population: 109.6911949189085
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 31402177
--- Timings ---
Current time: 1559583668249 milliseconds
Total Time:         209.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.9 seconds, 74.1%
Fitness Testing:     32.6 seconds, 15.6%
Report:              21.4 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Smallest problem report - generation 75
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_flush integer_dup_times))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 21
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_flush integer_dup_times))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 21
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (652 521 852 654 652 651 850 521 651 492)
Population mean number of elite cases: 6.50
Count of perfect (error zero) individuals by case: (652 521 852 654 652 651 850 521 651 492)
Population mean number of perfect (error zero) cases: 6.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction tag_exec_650} {:close 0, :instruction boolean_and})
Best program: (integer_eq exec_when () integer_eq exec_pop (exec_when () boolean_xor) boolean_eq in1 exec_s_when_autoconstructing () (exec_when () boolean_xor) () integer_pop integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_yank boolean_shove exec_when (boolean_eq) tagged_389 tag_exec_650 (boolean_and)))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 35
Size: 48
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 3.504
Median total errors in population: 2
Error averages by case: (0.348 0.479 0.148 0.346 0.348 0.349 0.15 0.479 0.349 0.508)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.707
Average program size in population (points): 48.78
Average percent parens in population: 0.227
Minimum age in population: 108.5659272880934
Maximum age in population: 113.4235212737633
Average age in population: 111.1492895527045
Median age in population: 111.17443195988
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.01
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 31919916
--- Timings ---
Current time: 1559583671211 milliseconds
Total Time:         212.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.0 seconds, 74.1%
Fitness Testing:     33.1 seconds, 15.6%
Report:              21.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Smallest problem report - generation 76
Test total error for best: 451
Test mean error for best: 0.45100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 57                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 80                 
Correct output: 16                  | Program output: 73                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 31                 
Correct output: -52                 | Program output: 2                  
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -60                
Correct output: -7                  | Program output: 2                  
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: -19                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 33                 
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -67                
Correct output: -49                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: -3                 
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: 37                 
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Lexicase best program: (integer_fromboolean exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_mult boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 56
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Zero cases best program: (integer_fromboolean exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_mult boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 56
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (321 580 584 319 584 585 775 862 862 321)
Population mean number of elite cases: 5.79
Count of perfect (error zero) individuals by case: (321 580 584 319 584 585 775 862 862 321)
Population mean number of perfect (error zero) cases: 5.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 38
Size: 49
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 4.207
Median total errors in population: 3
Error averages by case: (0.679 0.42 0.416 0.681 0.416 0.415 0.225 0.138 0.138 0.679)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.026
Average program size in population (points): 48.041
Average percent parens in population: 0.229
Minimum age in population: 110.159914023971
Maximum age in population: 114.5379588566685
Average age in population: 112.6489010859734
Median age in population: 112.7091406579119
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 32436813
--- Timings ---
Current time: 1559583673918 milliseconds
Total Time:         214.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.9 seconds, 74.0%
Fitness Testing:     33.6 seconds, 15.7%
Report:              22.1 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Smallest problem report - generation 77
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Lexicase best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth integer_shove) exec_yank integer_dec integer_dup_times in1 boolean_eq tagged_389 boolean_yankdup exec_when (boolean_eq))
Lexicase best errors: [0 1 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Zero cases best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth integer_shove) exec_yank integer_dec integer_dup_times in1 boolean_eq tagged_389 boolean_yankdup exec_when (boolean_eq))
Zero cases best errors: [0 1 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (710 643 306 1000 306 831 857 710 1000 1000)
Population mean number of elite cases: 7.36
Count of perfect (error zero) individuals by case: (710 643 306 0 306 831 857 710 0 0)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Best program: (exec_pop (integer_add exec_when (integer_dup_times)) boolean_frominteger exec_k_when_autoconstructing () () boolean_stackdepth integer_mod boolean_eq in1 exec_s_when_autoconstructing (boolean_xor) () (boolean_frominteger integer_dup_times boolean_yank exec_when () integer_mod boolean_eq) in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 exec_pop () tagged_389 boolean_yankdup exec_when (boolean_eq)))
Errors: [0 1 0 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 44
Size: 62
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 5.637
Median total errors in population: 5
Error averages by case: (0.29 0.357 0.694 1.0 0.694 0.169 0.143 0.29 1.0 1.0)
Error minima by case: (0 0 0 1 0 0 0 0 1 1)
Average genome size in population (length): 38.301
Average program size in population (points): 49.626
Average percent parens in population: 0.228
Minimum age in population: 111.5467349917961
Maximum age in population: 116.4524431774094
Average age in population: 114.2170136694229
Median age in population: 114.3050404844121
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 32943396
--- Timings ---
Current time: 1559583676687 milliseconds
Total Time:         217.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.8 seconds, 74.0%
Fitness Testing:     34.1 seconds, 15.7%
Report:              22.4 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Smallest problem report - generation 78
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Lexicase best program: (exec_pop (exec_when () exec_s_when_autoconstructing () () (exec_pop (exec_when () exec_empty)) boolean_frominteger integer_dup_times) boolean_yank boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq integer_yankdup in1 exec_s_when_autoconstructing (boolean_and) (boolean_xor) () boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer boolean_flush in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 58
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Zero cases best program: (exec_pop (exec_when () exec_s_when_autoconstructing () () (exec_pop (exec_when () exec_empty)) boolean_frominteger integer_dup_times) boolean_yank boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq integer_yankdup in1 exec_s_when_autoconstructing (boolean_and) (boolean_xor) () boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer boolean_flush in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 58
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (356 852 648 642 356 648 648 358 364 1000)
Population mean number of elite cases: 5.87
Count of perfect (error zero) individuals by case: (356 852 648 642 356 648 648 358 364 0)
Population mean number of perfect (error zero) cases: 4.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times integer_eq integer_mod integer_mod exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank) (integer_mod boolean_eq) (exec_do*while (integer_min integer_eq print_integer in1 in4 exec_stackdepth exec_k () () exec_yank integer_dup in3 in1 exec_empty boolean_shove exec_when (boolean_eq tagged_389 boolean_and exec_flush))))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 51
Size: 67
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 5.128
Median total errors in population: 5
Error averages by case: (0.644 0.148 0.352 0.358 0.644 0.352 0.352 0.642 0.636 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 36.958
Average program size in population (points): 48.039
Average percent parens in population: 0.230
Minimum age in population: 112.9971246642462
Maximum age in population: 117.548440378942
Average age in population: 115.6889254838724
Median age in population: 115.7720418146102
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 33458489
--- Timings ---
Current time: 1559583679481 milliseconds
Total Time:         220.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.8 seconds, 73.9%
Fitness Testing:     34.6 seconds, 15.7%
Report:              22.7 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Smallest problem report - generation 79
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_stackdepth) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in1 in4 exec_stackdepth exec_k () () exec_yank integer_flush integer_dup_times in1 exec_empty boolean_shove))
Lexicase best errors: [1 1 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_stackdepth) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in1 in4 exec_stackdepth exec_k () () exec_yank integer_flush integer_dup_times in1 exec_empty boolean_shove))
Zero cases best errors: [1 1 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 2 830 1 833 2 1 841 833 840)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (0 2 830 1 833 2 1 841 833 840)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Best program: (exec_pop () exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_dup integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer boolean_flush in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Errors: [1 1 0 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 49
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 5.817
Median total errors in population: 5
Error averages by case: (1.0 0.998 0.17 0.999 0.167 0.998 0.999 0.159 0.167 0.16)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.989
Average program size in population (points): 50.17
Average percent parens in population: 0.221
Minimum age in population: 114.849250873518
Maximum age in population: 118.9608938428797
Average age in population: 117.2194601202555
Median age in population: 117.2903980042004
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 33963824
--- Timings ---
Current time: 1559583682196 milliseconds
Total Time:         223.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.7 seconds, 73.9%
Fitness Testing:     35.1 seconds, 15.7%
Report:              23.1 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Smallest problem report - generation 80
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction -92} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Lexicase best program: (integer_eq integer_eq exec_when () boolean_xor integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank exec_pop (exec_when () boolean_xor) exec_shove (integer_dup_times) boolean_yank integer_mod -92 integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger) integer_dup_times boolean_yank boolean_yank exec_dup (integer_min integer_eq print_integer boolean_flush in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) integer_mod boolean_yankdup exec_when (boolean_eq))
Lexicase best errors: [0 0 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 61
Percent parens: 0.230
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction -92} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Zero cases best program: (integer_eq integer_eq exec_when () boolean_xor integer_eq exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank exec_pop (exec_when () boolean_xor) exec_shove (integer_dup_times) boolean_yank integer_mod -92 integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger) integer_dup_times boolean_yank boolean_yank exec_dup (integer_min integer_eq print_integer boolean_flush in4 exec_stackdepth exec_k () () exec_yank boolean_shove integer_dup_times in1 boolean_eq) integer_mod boolean_yankdup exec_when (boolean_eq))
Zero cases best errors: [0 0 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (818 390 1000 551 428 391 395 548 429 1000)
Population mean number of elite cases: 5.95
Count of perfect (error zero) individuals by case: (818 390 0 551 428 391 395 548 429 0)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction tag_integer_873} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq})
Best program: (exec_pop (integer_pop exec_when (boolean_xor)) exec_pop (exec_when () integer_shove) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod tag_integer_873 boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) integer_yankdup integer_mod boolean_eq exec_dup (integer_min integer_eq print_integer boolean_flush in4 exec_stackdepth exec_k () () integer_pop boolean_shove integer_dup_times in1 boolean_eq) tagged_389 boolean_yankdup exec_when (boolean_eq))
Errors: [0 0 1 0 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 43
Size: 56
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 6.05
Median total errors in population: 5
Error averages by case: (0.182 0.61 1.0 0.449 0.572 0.609 0.605 0.452 0.571 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 39.878
Average program size in population (points): 52.164
Average percent parens in population: 0.235
Minimum age in population: 116.3831054733084
Maximum age in population: 120.3464088671253
Average age in population: 118.7573493189392
Median age in population: 118.700839856521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 34448788
--- Timings ---
Current time: 1559583684792 milliseconds
Total Time:         225.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.5 seconds, 73.8%
Fitness Testing:     35.5 seconds, 15.8%
Report:              23.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Smallest problem report - generation 81
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger exec_yank boolean_yank integer_mod integer_mod integer_rot exec_dup_items boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 38
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger exec_yank boolean_yank integer_mod integer_mod integer_rot exec_dup_items boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 38
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (551 280 528 510 281 779 790 806 1 551)
Population mean number of elite cases: 5.08
Count of perfect (error zero) individuals by case: (551 280 528 510 281 779 790 806 1 551)
Population mean number of perfect (error zero) cases: 5.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tagged_406} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_xor boolean_frominteger integer_dup_times boolean_dup_times tagged_406 integer_mod integer_rot boolean_invert_first_then_and integer_mod boolean_eq boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (boolean_flush) (boolean_xor) () boolean_frominteger exec_yank integer_dup integer_dup_times integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Errors: [0 0 0 1 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 40
Size: 49
Percent parens: 0.184
--- Population Statistics ---
Average total errors in population: 4.923
Median total errors in population: 4
Error averages by case: (0.449 0.72 0.472 0.49 0.719 0.221 0.21 0.194 0.999 0.449)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.891
Average program size in population (points): 50.512
Average percent parens in population: 0.248
Minimum age in population: 117.6897691690132
Maximum age in population: 122.0347384718973
Average age in population: 120.2594004813625
Median age in population: 120.3367503181097
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.009
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 34917864
--- Timings ---
Current time: 1559583687666 milliseconds
Total Time:         228.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.6 seconds, 73.8%
Fitness Testing:     36.0 seconds, 15.8%
Report:              23.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Smallest problem report - generation 82
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq integer_dup integer_dup_times integer_mod exec_empty) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Lexicase best errors: [0 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq integer_dup integer_dup_times integer_mod exec_empty) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Zero cases best errors: [0 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (480 168 664 480 854 854 168 846 365 666)
Population mean number of elite cases: 5.55
Count of perfect (error zero) individuals by case: (480 168 664 480 854 854 168 846 365 666)
Population mean number of perfect (error zero) cases: 5.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Best program: (exec_pop (boolean_eq) boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq integer_yankdup in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Errors: [0 1 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4.455
Median total errors in population: 4
Error averages by case: (0.52 0.832 0.336 0.52 0.146 0.146 0.832 0.154 0.635 0.334)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.146
Average program size in population (points): 46.175
Average percent parens in population: 0.216
Minimum age in population: 118.6897691690132
Maximum age in population: 123.3286733544785
Average age in population: 121.3996194163696
Median age in population: 121.4998189594514
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 35376761
--- Timings ---
Current time: 1559583690296 milliseconds
Total Time:         231.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.5 seconds, 73.8%
Fitness Testing:     36.4 seconds, 15.8%
Report:              24.1 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Smallest problem report - generation 83
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: -82                
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 31                 
Correct output: 7                   | Program output: 83                 
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 36                  | Program output: 36                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 40                 
Correct output: 16                  | Program output: 78                 
Correct output: 32                  | Program output: 74                 
Correct output: 27                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: 25                 
Correct output: -87                 | Program output: -30                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -72                
Correct output: -7                  | Program output: 33                 
Correct output: -81                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: -39                
Correct output: -57                 | Program output: -57                
Correct output: -69                 | Program output: -36                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -17                
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -23                
Correct output: -63                 | Program output: -17                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: -24                
Correct output: 17                  | Program output: 17                 
Correct output: -52                 | Program output: -1                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -40                
Correct output: -44                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -73                
Correct output: -49                 | Program output: 4                  
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -5                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: 12                  | Program output: 75                 
Correct output: -79                 | Program output: -16                
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: -19                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -84                 | Program output: 23                 
Correct output: -98                 | Program output: -74                
Correct output: -73                 | Program output: -47                
Correct output: -42                 | Program output: -33                
Correct output: -100                | Program output: -59                
Correct output: -97                 | Program output: -38                
Correct output: -85                 | Program output: 42                 
Correct output: -99                 | Program output: 45                 
Correct output: -56                 | Program output: -45                
Correct output: -54                 | Program output: 3                  
Correct output: -89                 | Program output: -60                
Correct output: -50                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 3, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () () boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in1 in2 exec_stackdepth exec_k () () exec_yank integer_dup integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_and exec_flush))
Lexicase best errors: [0 1 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 51
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 3, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () () boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in1 in2 exec_stackdepth exec_k () () exec_yank integer_dup integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_and exec_flush))
Zero cases best errors: [0 1 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 51
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (852 529 314 313 385 314 856 386 314 468)
Population mean number of elite cases: 4.73
Count of perfect (error zero) individuals by case: (852 529 314 313 385 314 856 386 314 468)
Population mean number of perfect (error zero) cases: 4.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 3, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () () boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in1 in2 exec_stackdepth exec_k () () exec_yank integer_dup integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_and exec_flush))
Errors: [0 1 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 40
Size: 51
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 5.269
Median total errors in population: 5
Error averages by case: (0.148 0.471 0.686 0.687 0.615 0.686 0.144 0.614 0.686 0.532)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.99
Average program size in population (points): 47.359
Average percent parens in population: 0.218
Minimum age in population: 120.0299475668748
Maximum age in population: 124.8061723938406
Average age in population: 122.569873925539
Median age in population: 122.6161420035827
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 35831062
--- Timings ---
Current time: 1559583692964 milliseconds
Total Time:         233.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.4 seconds, 73.8%
Fitness Testing:     36.8 seconds, 15.8%
Report:              24.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Smallest problem report - generation 84
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_flush} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_pop (exec_flush) boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () exec_do*count (exec_when () boolean_xor) integer_pop integer_eq exec_when () boolean_eq exec_yank integer_dup integer_dup_times integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Lexicase best errors: [1 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_flush} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_pop (exec_flush) boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () exec_do*count (exec_when () boolean_xor) integer_pop integer_eq exec_when () boolean_eq exec_yank integer_dup integer_dup_times integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Zero cases best errors: [1 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (553 272 331 269 325 502 325 269 269 325)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (553 272 331 269 325 502 325 269 269 325)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger exec_yank integer_dup integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Errors: [1 0 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 32
Size: 42
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.56
Median total errors in population: 8
Error averages by case: (0.447 0.728 0.669 0.731 0.675 0.498 0.675 0.731 0.731 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.088
Average program size in population (points): 48.812
Average percent parens in population: 0.219
Minimum age in population: 121.0299475668748
Maximum age in population: 126.2422374284774
Average age in population: 123.826691871762
Median age in population: 123.9343585511249
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 36284295
--- Timings ---
Current time: 1559583695659 milliseconds
Total Time:         236.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.4 seconds, 73.8%
Fitness Testing:     37.3 seconds, 15.8%
Report:              24.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Smallest problem report - generation 85
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_pop (exec_when () boolean_xor) integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) (boolean_frominteger integer_dup_times) (boolean_yank) integer_mod boolean_eq exec_do*while (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Lexicase best errors: [1 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_pop (exec_when () boolean_xor) integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) (boolean_frominteger integer_dup_times) (boolean_yank) integer_mod boolean_eq exec_do*while (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Zero cases best errors: [1 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (243 602 243 111 598 736 599 240 727 731)
Population mean number of elite cases: 4.83
Count of perfect (error zero) individuals by case: (243 602 243 111 598 736 599 240 727 731)
Population mean number of perfect (error zero) cases: 4.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Best program: (exec_pop (boolean_xor exec_stackdepth) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_yank integer_mod boolean_eq exec_dup (integer_min integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Errors: [1 0 1 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 34
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 5.17
Median total errors in population: 4
Error averages by case: (0.757 0.398 0.757 0.889 0.402 0.264 0.401 0.76 0.273 0.269)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.912
Average program size in population (points): 46.06
Average percent parens in population: 0.219
Minimum age in population: 122.0299475668748
Maximum age in population: 127.743344407866
Average age in population: 125.6869289079359
Median age in population: 125.7460245351951
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 36736307
--- Timings ---
Current time: 1559583698372 milliseconds
Total Time:         239.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.5 seconds, 73.8%
Fitness Testing:     37.7 seconds, 15.8%
Report:              25.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Smallest problem report - generation 86
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_pop (print_boolean) boolean_xor boolean_frominteger integer_dup_times exec_y_when_autoconstructing (integer_dup_times) boolean_yank integer_mod integer_mod integer_rot integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq integer_yankdup in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Lexicase best errors: [0 0 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_pop (print_boolean) boolean_xor boolean_frominteger integer_dup_times exec_y_when_autoconstructing (integer_dup_times) boolean_yank integer_mod integer_mod integer_rot integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq integer_yankdup in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Zero cases best errors: [0 0 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (735 729 400 359 364 363 363 199 200 400)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (735 729 400 359 364 363 363 199 200 400)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot exec_eq integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_dup integer_dup_times integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Errors: [0 0 1 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 33
Size: 43
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 5.888
Median total errors in population: 6
Error averages by case: (0.265 0.271 0.6 0.641 0.636 0.637 0.637 0.801 0.8 0.6)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.752
Average program size in population (points): 48.404
Average percent parens in population: 0.218
Minimum age in population: 123.4464665351613
Maximum age in population: 129.0128554648643
Average age in population: 127.1956145139423
Median age in population: 127.3081290771402
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 37210110
--- Timings ---
Current time: 1559583701049 milliseconds
Total Time:         241.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.4 seconds, 73.8%
Fitness Testing:     38.1 seconds, 15.8%
Report:              25.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Smallest problem report - generation 87
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 46                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 89                  | Program output: 89                 
Correct output: 46                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 36                 
Correct output: 27                  | Program output: 41                 
Correct output: 35                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: 55                 
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 22                 
Correct output: -63                 | Program output: -55                
Correct output: -82                 | Program output: -59                
Correct output: -71                 | Program output: -22                
Correct output: -85                 | Program output: 9                  
Correct output: 17                  | Program output: 47                 
Correct output: -52                 | Program output: 27                 
Correct output: -37                 | Program output: -37                
Correct output: -70                 | Program output: -34                
Correct output: -44                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 7                  
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -67                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: 0                  
Correct output: -99                 | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -11                
Correct output: -84                 | Program output: 36                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -84                
Correct output: -99                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: 43                 
Correct output: -89                 | Program output: 50                 
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_pop (integer_sub boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when (boolean_xor) boolean_frominteger integer_dup_times boolean_yank) (integer_dup integer_dup_times integer_mod boolean_eq in1 exec_s_when_autoconstructing (boolean_flush) () (boolean_xor) boolean_frominteger exec_yank integer_dup integer_dup_times integer_mod boolean_eq) (exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup)))
Lexicase best errors: [1 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_pop (integer_sub boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when (boolean_xor) boolean_frominteger integer_dup_times boolean_yank) (integer_dup integer_dup_times integer_mod boolean_eq in1 exec_s_when_autoconstructing (boolean_flush) () (boolean_xor) boolean_frominteger exec_yank integer_dup integer_dup_times integer_mod boolean_eq) (exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup)))
Zero cases best errors: [1 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (301 328 669 408 674 301 860 670 409 674)
Population mean number of elite cases: 5.29
Count of perfect (error zero) individuals by case: (301 328 669 408 674 301 860 670 409 674)
Population mean number of perfect (error zero) cases: 5.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_389} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_shove boolean_swap integer_mod integer_mod integer_rot boolean_pop integer_mod boolean_eq in1 integer_min exec_when () boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in1 in4 exec_stackdepth exec_k () () exec_yank integer_dup integer_dup_times in1 exec_empty boolean_shove exec_when (boolean_eq) tagged_389 boolean_and exec_flush))
Errors: [0 1 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 40
Size: 48
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 4.706
Median total errors in population: 3
Error averages by case: (0.699 0.672 0.331 0.592 0.326 0.699 0.14 0.33 0.591 0.326)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.204
Average program size in population (points): 47.512
Average percent parens in population: 0.216
Minimum age in population: 126.1294344391157
Maximum age in population: 130.6293076499753
Average age in population: 128.7198346200424
Median age in population: 128.7849483104161
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 37675618
--- Timings ---
Current time: 1559583703807 milliseconds
Total Time:         244.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.4 seconds, 73.8%
Fitness Testing:     38.6 seconds, 15.8%
Report:              25.5 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Smallest problem report - generation 88
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_pop (integer_sub) boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) (boolean_frominteger integer_dup_times boolean_yank) (integer_dup integer_dup_times integer_mod boolean_eq in1 exec_s_when_autoconstructing (boolean_flush) () (boolean_xor) boolean_frominteger exec_yank integer_dup integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 55
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_pop (integer_sub) boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) (boolean_frominteger integer_dup_times boolean_yank) (integer_dup integer_dup_times integer_mod boolean_eq in1 exec_s_when_autoconstructing (boolean_flush) () (boolean_xor) boolean_frominteger exec_yank integer_dup integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 55
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (663 431 381 382 659 381 839 432 381 660)
Population mean number of elite cases: 5.21
Count of perfect (error zero) individuals by case: (663 431 381 382 659 381 839 432 381 660)
Population mean number of perfect (error zero) cases: 5.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Best program: (exec_pop (exec_when () boolean_xor) boolean_dup_times integer_dup_times boolean_yank integer_mod integer_mod integer_rot integer_mod boolean_eq boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger integer_dup_times) boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq integer_dup integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 38
Size: 49
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 4.791
Median total errors in population: 4
Error averages by case: (0.337 0.569 0.619 0.618 0.341 0.619 0.161 0.568 0.619 0.34)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.404
Average program size in population (points): 47.58
Average percent parens in population: 0.212
Minimum age in population: 127.1589590914139
Maximum age in population: 132.1901699257967
Average age in population: 130.0868670685187
Median age in population: 130.1494122819762
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 38140072
--- Timings ---
Current time: 1559583706577 milliseconds
Total Time:         247.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.4 seconds, 73.8%
Fitness Testing:     39.0 seconds, 15.8%
Report:              25.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Smallest problem report - generation 89
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 3, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_pop (exec_when (boolean_xor)) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () () boolean_frominteger integer_dup_times exec_do*count (exec_when () boolean_xor) integer_pop integer_eq exec_when () boolean_eq exec_yank integer_dup integer_dup_times integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 53
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 3, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_pop (exec_when (boolean_xor)) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () () boolean_frominteger integer_dup_times exec_do*count (exec_when () boolean_xor) integer_pop integer_eq exec_when () boolean_eq exec_yank integer_dup integer_dup_times integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 53
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (637 641 436 641 639 637 579 636 642 829)
Population mean number of elite cases: 6.32
Count of perfect (error zero) individuals by case: (637 641 436 641 639 637 579 636 642 829)
Population mean number of perfect (error zero) cases: 6.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) (boolean_frominteger integer_dup_times) (boolean_yank) integer_dup integer_dup_times integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 32
Size: 42
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 3.683
Median total errors in population: 1
Error averages by case: (0.363 0.359 0.564 0.359 0.361 0.363 0.421 0.364 0.358 0.171)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.565
Average program size in population (points): 45.196
Average percent parens in population: 0.211
Minimum age in population: 128.1589590914139
Maximum age in population: 133.5129471249629
Average age in population: 131.3849242577458
Median age in population: 131.4590228906632
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.657
Total error diversity:				 0.009
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 38571972
--- Timings ---
Current time: 1559583709270 milliseconds
Total Time:         250.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.4 seconds, 73.7%
Fitness Testing:     39.4 seconds, 15.8%
Report:              26.1 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Smallest problem report - generation 90
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 3, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 boolean_eq in1 exec_s_when_autoconstructing () (exec_when () boolean_xor) () boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq) print_integer boolean_xor boolean_frominteger exec_pop (integer_dec integer_dup_times integer_mod integer_add) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 56
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 3, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 boolean_eq in1 exec_s_when_autoconstructing () (exec_when () boolean_xor) () boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq) print_integer boolean_xor boolean_frominteger exec_pop (integer_dec integer_dup_times integer_mod integer_add) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 56
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (862 432 1 859 432 432 859 820 1 819)
Population mean number of elite cases: 5.52
Count of perfect (error zero) individuals by case: (862 432 1 859 432 432 859 820 1 819)
Population mean number of perfect (error zero) cases: 5.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Best program: (exec_pop (exec_when () boolean_xor) boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod integer_dec in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger exec_yank integer_dup integer_dup_times integer_mod boolean_eq) exec_do*while (boolean_yank integer_mod boolean_eq exec_do*while (integer_min integer_eq) print_integer boolean_xor) boolean_frominteger exec_pop (integer_dec integer_dup_times integer_mod integer_add) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 47
Size: 60
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 4.483
Median total errors in population: 5
Error averages by case: (0.138 0.568 0.999 0.141 0.568 0.568 0.141 0.18 0.999 0.181)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.027
Average program size in population (points): 42.881
Average percent parens in population: 0.205
Minimum age in population: 130.3299040037973
Maximum age in population: 134.7338762647187
Average age in population: 132.8226230368699
Median age in population: 132.8863441738385
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 181
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 38982665
--- Timings ---
Current time: 1559583711949 milliseconds
Total Time:         252.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.4 seconds, 73.8%
Fitness Testing:     39.8 seconds, 15.7%
Report:              26.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Smallest problem report - generation 91
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_flush} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_pop (exec_flush) boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when (exec_do*count (exec_when () boolean_xor)) boolean_xor integer_pop exec_dup_items integer_swap boolean_eq integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Lexicase best errors: [0 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_flush} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_pop (exec_flush) boolean_xor boolean_frominteger integer_dup_times boolean_yank integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when (exec_do*count (exec_when () boolean_xor)) boolean_xor integer_pop exec_dup_items integer_swap boolean_eq integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Zero cases best errors: [0 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (880 428 418 3 873 449 446 861 443 854)
Population mean number of elite cases: 5.66
Count of perfect (error zero) individuals by case: (880 428 418 3 873 449 446 861 443 854)
Population mean number of perfect (error zero) cases: 5.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Best program: (integer_mod integer_mod integer_rot integer_mod exec_yank integer_rot boolean_yank boolean_shove integer_dup_times boolean_yank integer_mod boolean_eq exec_do*while (boolean_xor integer_eq integer_dup integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Errors: [0 1 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 34
Percent parens: 0.147
--- Population Statistics ---
Average total errors in population: 4.345
Median total errors in population: 4
Error averages by case: (0.12 0.572 0.582 0.997 0.127 0.551 0.554 0.139 0.557 0.146)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.482
Average program size in population (points): 43.479
Average percent parens in population: 0.230
Minimum age in population: 131.8992980679118
Maximum age in population: 136.1526579210788
Average age in population: 134.5480644957574
Median age in population: 134.5333406188994
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 276
Genome diversity (% unique genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 286
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 39405001
--- Timings ---
Current time: 1559583714541 milliseconds
Total Time:         255.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.4 seconds, 73.8%
Fitness Testing:     40.2 seconds, 15.7%
Report:              26.7 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Smallest problem report - generation 92
Test total error for best: 432
Test mean error for best: 0.43200
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank})
Lexicase best program: (boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger exec_yank integer_dup integer_pop integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () integer_pop integer_eq exec_when () boolean_eq) exec_yank integer_dup integer_dup_times integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 57
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank})
Zero cases best program: (boolean_frominteger integer_dup_times boolean_yank integer_mod integer_mod integer_rot boolean_yank integer_mod boolean_eq in1 exec_s_when_autoconstructing (exec_when () boolean_xor) () (boolean_frominteger exec_yank integer_dup integer_pop integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () integer_pop integer_eq exec_when () boolean_eq) exec_yank integer_dup integer_dup_times integer_mod boolean_eq exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 57
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (414 417 415 416 418 415 865 415 666 667)
Population mean number of elite cases: 5.11
Count of perfect (error zero) individuals by case: (414 417 415 416 418 415 865 415 666 667)
Population mean number of perfect (error zero) cases: 5.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 1, :instruction print_newline} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup})
Best program: (exec_pop (integer_pop exec_when (boolean_xor)) exec_pop (print_newline) boolean_xor integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 29
Size: 38
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 4.892
Median total errors in population: 7
Error averages by case: (0.586 0.583 0.585 0.584 0.582 0.585 0.135 0.585 0.334 0.333)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.343
Average program size in population (points): 43.321
Average percent parens in population: 0.230
Minimum age in population: 133.3623785642347
Maximum age in population: 137.7857170993675
Average age in population: 136.0542158522063
Median age in population: 136.1674443420496
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 129
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.01
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 39811493
--- Timings ---
Current time: 1559583717078 milliseconds
Total Time:         257.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.2 seconds, 73.8%
Fitness Testing:     40.6 seconds, 15.7%
Report:              27.0 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 92
Successful program: (exec_pop (integer_pop exec_when (boolean_xor)) exec_pop (print_newline) boolean_xor integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 38


Auto-simplifying with starting size: 38
step: 0
program: (exec_pop (integer_pop exec_when (boolean_xor)) exec_pop (print_newline) boolean_xor integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 500
program: (exec_pop (integer_pop exec_when (boolean_xor)) exec_pop (print_newline) boolean_xor integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 1000
program: (exec_pop (integer_pop exec_when (boolean_xor)) exec_pop (print_newline) boolean_xor integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 1500
program: (exec_pop (integer_pop exec_when (boolean_xor)) exec_pop (print_newline) boolean_xor integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 2000
program: (exec_pop (integer_pop exec_when (boolean_xor)) exec_pop (print_newline) boolean_xor integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 2500
program: (exec_pop (integer_pop exec_when (boolean_xor)) exec_pop (print_newline) boolean_xor integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 3000
program: (exec_pop (integer_pop exec_when (boolean_xor)) exec_pop (print_newline) boolean_xor integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 3500
program: (exec_pop (integer_pop exec_when (boolean_xor)) exec_pop (print_newline) boolean_xor integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 4000
program: (exec_pop (integer_pop exec_when (boolean_xor)) exec_pop (print_newline) boolean_xor integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 4500
program: (exec_pop (integer_pop exec_when (boolean_xor)) exec_pop (print_newline) boolean_xor integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 5000
program: (exec_pop (integer_pop exec_when (boolean_xor)) exec_pop (print_newline) boolean_xor integer_mod boolean_invert_second_then_and integer_rot boolean_yank exec_when () integer_mod boolean_eq exec_dup (integer_min integer_dup_times integer_mod boolean_eq) exec_do*while (integer_min integer_eq print_integer in3 in4 exec_stackdepth exec_k () () exec_yank integer_yankdup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 92
Test total error for best: 432
Test mean error for best: 0.43200
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: 78                  | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 33                 
Correct output: -82                 | Program output: 21                 
Correct output: 94                  | Program output: 94                 
Correct output: 33                  | Program output: 33                 
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -33                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 41                 
Correct output: 4                   | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 4                   | Program output: 53                 
Correct output: 36                  | Program output: 75                 
Correct output: 11                  | Program output: 26                 
Correct output: 44                  | Program output: 75                 
Correct output: 89                  | Program output: 94                 
Correct output: 46                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 32                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 35                  | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 85                 
Correct output: 10                  | Program output: 12                 
Correct output: 13                  | Program output: 55                 
Correct output: -40                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: 3                   | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -7                  | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: 32                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: 17                  | Program output: 71                 
Correct output: -52                 | Program output: -52                
Correct output: -37                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: 26                 
Correct output: -87                 | Program output: -80                
Correct output: -97                 | Program output: -34                
Correct output: -81                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -30                
Correct output: -91                 | Program output: -5                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -60                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -77                
Correct output: -45                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
;;******************************
