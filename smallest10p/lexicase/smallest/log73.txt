Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-8 -8 -8 62] -8] [[-51 -51 -51 5] -51] [[-96 -96 -7 -96] -96] [[-85 -85 -85 85] -85] [[-72 91 -72 -72] -72] [[83 83 -53 83] -53] [[50 50 -81 50] -81] [[-24 -24 -46 -24] -46] [[72 -23 -23 -23] -23] [[27 27 27 -33] -33] [(-67 -67 -67 -67) -67] [(-62 -62 -62 -62) -62] [(18 18 18 18) 18] [(-46 -46 -46 -46) -46] [(-81 -81 -81 -81) -81] [(85 6 99 67) 6] [(74 49 30 97) 30] [(50 42 3 98) 3] [(69 49 6 84) 6] [(80 64 46 77) 46] [(98 73 39 36) 36] [(7 21 97 77) 7] [(30 28 57 33) 28] [(97 19 12 37) 12] [(36 71 31 64) 31] [(97 27 52 78) 27] [(80 58 26 91) 26] [(54 14 39 78) 14] [(27 89 44 57) 27] [(38 31 87 26) 26] [(27 89 90 53) 27] [(11 22 24 45) 11] [(28 78 63 55) 28] [(64 9 63 85) 9] [(38 78 5 83) 5] [(-85 21 -25 -57) -85] [(-62 -31 -17 -3) -62] [(21 23 40 58) 21] [(-32 -44 -86 -35) -86] [(67 -77 -39 68) -77] [(-47 10 78 -11) -47] [(-14 26 32 -24) -24] [(-83 54 43 -83) -83] [(3 -46 100 -54) -54] [(65 71 -39 50) -39] [(-92 64 -26 -17) -92] [(29 -71 -72 28) -72] [(8 -16 36 -13) -16] [(-83 -26 -95 100) -95] [(99 70 -2 -43) -43] [(15 -37 68 79) -37] [(-76 38 -53 95) -76] [(87 -96 -29 -33) -96] [(-9 -93 -30 31) -93] [(54 12 20 -24) -24] [(20 -72 95 53) -72] [(-7 93 -17 67) -17] [(17 53 -41 9) -41] [(-90 -82 -71 59) -90] [(10 -35 55 -30) -35] [(51 90 42 64) 42] [(-31 56 -60 42) -60] [(-97 61 79 41) -97] [(92 42 33 -8) -8] [(-56 -3 31 16) -56] [(39 -28 85 -57) -57] [(21 -55 40 43) -55] [(-51 -55 86 61) -55] [(-65 12 -13 27) -65] [(76 -5 -38 -99) -99] [(-53 68 -53 61) -53] [(-78 96 -3 42) -78] [(-27 -80 64 44) -80] [(-34 25 -96 -49) -96] [(69 -71 -20 85) -71] [(57 -23 21 89) -23] [(85 76 -10 59) -10] [(74 -36 -64 -64) -64] [(2 -44 -43 -32) -44] [(-39 -68 -65 -26) -68] [(-6 -16 77 -48) -48] [(52 89 3 1) 1] [(-54 -69 -92 -73) -92] [(64 -31 -89 43) -89] [(-34 83 -13 0) -34] [(41 91 -20 65) -20] [(64 -79 45 -32) -79] [(-84 -83 23 43) -84] [(57 -15 -91 -32) -91] [(3 45 -47 -99) -99] [(-88 -85 -84 -58) -88] [(-77 20 -43 49) -77] [(-19 -67 77 15) -67] [(14 -77 91 -62) -77] [(84 -52 -30 -26) -52])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-8 -8 -8 62] -8]
Train Case:   6 | Input/Output: [[-51 -51 -51 5] -51]
Train Case:   7 | Input/Output: [[-96 -96 -7 -96] -96]
Train Case:   8 | Input/Output: [[-85 -85 -85 85] -85]
Train Case:   9 | Input/Output: [[-72 91 -72 -72] -72]
Train Case:  10 | Input/Output: [[83 83 -53 83] -53]
Train Case:  11 | Input/Output: [[50 50 -81 50] -81]
Train Case:  12 | Input/Output: [[-24 -24 -46 -24] -46]
Train Case:  13 | Input/Output: [[72 -23 -23 -23] -23]
Train Case:  14 | Input/Output: [[27 27 27 -33] -33]
Train Case:  15 | Input/Output: [(-67 -67 -67 -67) -67]
Train Case:  16 | Input/Output: [(-62 -62 -62 -62) -62]
Train Case:  17 | Input/Output: [(18 18 18 18) 18]
Train Case:  18 | Input/Output: [(-46 -46 -46 -46) -46]
Train Case:  19 | Input/Output: [(-81 -81 -81 -81) -81]
Train Case:  20 | Input/Output: [(85 6 99 67) 6]
Train Case:  21 | Input/Output: [(74 49 30 97) 30]
Train Case:  22 | Input/Output: [(50 42 3 98) 3]
Train Case:  23 | Input/Output: [(69 49 6 84) 6]
Train Case:  24 | Input/Output: [(80 64 46 77) 46]
Train Case:  25 | Input/Output: [(98 73 39 36) 36]
Train Case:  26 | Input/Output: [(7 21 97 77) 7]
Train Case:  27 | Input/Output: [(30 28 57 33) 28]
Train Case:  28 | Input/Output: [(97 19 12 37) 12]
Train Case:  29 | Input/Output: [(36 71 31 64) 31]
Train Case:  30 | Input/Output: [(97 27 52 78) 27]
Train Case:  31 | Input/Output: [(80 58 26 91) 26]
Train Case:  32 | Input/Output: [(54 14 39 78) 14]
Train Case:  33 | Input/Output: [(27 89 44 57) 27]
Train Case:  34 | Input/Output: [(38 31 87 26) 26]
Train Case:  35 | Input/Output: [(27 89 90 53) 27]
Train Case:  36 | Input/Output: [(11 22 24 45) 11]
Train Case:  37 | Input/Output: [(28 78 63 55) 28]
Train Case:  38 | Input/Output: [(64 9 63 85) 9]
Train Case:  39 | Input/Output: [(38 78 5 83) 5]
Train Case:  40 | Input/Output: [(-85 21 -25 -57) -85]
Train Case:  41 | Input/Output: [(-62 -31 -17 -3) -62]
Train Case:  42 | Input/Output: [(21 23 40 58) 21]
Train Case:  43 | Input/Output: [(-32 -44 -86 -35) -86]
Train Case:  44 | Input/Output: [(67 -77 -39 68) -77]
Train Case:  45 | Input/Output: [(-47 10 78 -11) -47]
Train Case:  46 | Input/Output: [(-14 26 32 -24) -24]
Train Case:  47 | Input/Output: [(-83 54 43 -83) -83]
Train Case:  48 | Input/Output: [(3 -46 100 -54) -54]
Train Case:  49 | Input/Output: [(65 71 -39 50) -39]
Train Case:  50 | Input/Output: [(-92 64 -26 -17) -92]
Train Case:  51 | Input/Output: [(29 -71 -72 28) -72]
Train Case:  52 | Input/Output: [(8 -16 36 -13) -16]
Train Case:  53 | Input/Output: [(-83 -26 -95 100) -95]
Train Case:  54 | Input/Output: [(99 70 -2 -43) -43]
Train Case:  55 | Input/Output: [(15 -37 68 79) -37]
Train Case:  56 | Input/Output: [(-76 38 -53 95) -76]
Train Case:  57 | Input/Output: [(87 -96 -29 -33) -96]
Train Case:  58 | Input/Output: [(-9 -93 -30 31) -93]
Train Case:  59 | Input/Output: [(54 12 20 -24) -24]
Train Case:  60 | Input/Output: [(20 -72 95 53) -72]
Train Case:  61 | Input/Output: [(-7 93 -17 67) -17]
Train Case:  62 | Input/Output: [(17 53 -41 9) -41]
Train Case:  63 | Input/Output: [(-90 -82 -71 59) -90]
Train Case:  64 | Input/Output: [(10 -35 55 -30) -35]
Train Case:  65 | Input/Output: [(51 90 42 64) 42]
Train Case:  66 | Input/Output: [(-31 56 -60 42) -60]
Train Case:  67 | Input/Output: [(-97 61 79 41) -97]
Train Case:  68 | Input/Output: [(92 42 33 -8) -8]
Train Case:  69 | Input/Output: [(-56 -3 31 16) -56]
Train Case:  70 | Input/Output: [(39 -28 85 -57) -57]
Train Case:  71 | Input/Output: [(21 -55 40 43) -55]
Train Case:  72 | Input/Output: [(-51 -55 86 61) -55]
Train Case:  73 | Input/Output: [(-65 12 -13 27) -65]
Train Case:  74 | Input/Output: [(76 -5 -38 -99) -99]
Train Case:  75 | Input/Output: [(-53 68 -53 61) -53]
Train Case:  76 | Input/Output: [(-78 96 -3 42) -78]
Train Case:  77 | Input/Output: [(-27 -80 64 44) -80]
Train Case:  78 | Input/Output: [(-34 25 -96 -49) -96]
Train Case:  79 | Input/Output: [(69 -71 -20 85) -71]
Train Case:  80 | Input/Output: [(57 -23 21 89) -23]
Train Case:  81 | Input/Output: [(85 76 -10 59) -10]
Train Case:  82 | Input/Output: [(74 -36 -64 -64) -64]
Train Case:  83 | Input/Output: [(2 -44 -43 -32) -44]
Train Case:  84 | Input/Output: [(-39 -68 -65 -26) -68]
Train Case:  85 | Input/Output: [(-6 -16 77 -48) -48]
Train Case:  86 | Input/Output: [(52 89 3 1) 1]
Train Case:  87 | Input/Output: [(-54 -69 -92 -73) -92]
Train Case:  88 | Input/Output: [(64 -31 -89 43) -89]
Train Case:  89 | Input/Output: [(-34 83 -13 0) -34]
Train Case:  90 | Input/Output: [(41 91 -20 65) -20]
Train Case:  91 | Input/Output: [(64 -79 45 -32) -79]
Train Case:  92 | Input/Output: [(-84 -83 23 43) -84]
Train Case:  93 | Input/Output: [(57 -15 -91 -32) -91]
Train Case:  94 | Input/Output: [(3 45 -47 -99) -99]
Train Case:  95 | Input/Output: [(-88 -85 -84 -58) -88]
Train Case:  96 | Input/Output: [(-77 20 -43 49) -77]
Train Case:  97 | Input/Output: [(-19 -67 77 15) -67]
Train Case:  98 | Input/Output: [(14 -77 91 -62) -77]
Train Case:  99 | Input/Output: [(84 -52 -30 -26) -52]
Test Case:   0 | Input/Output: [[-59 99 -59 -59] -59]
Test Case:   1 | Input/Output: [[59 -51 -51 -51] -51]
Test Case:   2 | Input/Output: [[-75 -69 -69 -69] -75]
Test Case:   3 | Input/Output: [[94 94 94 4] 4]
Test Case:   4 | Input/Output: [[96 96 -28 96] -28]
Test Case:   5 | Input/Output: [[-40 -40 -17 -40] -40]
Test Case:   6 | Input/Output: [[95 3 3 3] 3]
Test Case:   7 | Input/Output: [[-10 52 52 52] -10]
Test Case:   8 | Input/Output: [[58 -3 -3 -3] -3]
Test Case:   9 | Input/Output: [[27 27 27 6] 6]
Test Case:  10 | Input/Output: [[1 1 39 1] 1]
Test Case:  11 | Input/Output: [[-41 -46 -46 -46] -46]
Test Case:  12 | Input/Output: [[62 26 62 62] 26]
Test Case:  13 | Input/Output: [[-41 53 -41 -41] -41]
Test Case:  14 | Input/Output: [[81 93 93 93] 81]
Test Case:  15 | Input/Output: [[18 18 -79 18] -79]
Test Case:  16 | Input/Output: [[6 6 6 34] 6]
Test Case:  17 | Input/Output: [[65 -91 65 65] -91]
Test Case:  18 | Input/Output: [[-38 -38 -38 -8] -38]
Test Case:  19 | Input/Output: [[27 27 64 27] 27]
Test Case:  20 | Input/Output: [[66 66 -95 66] -95]
Test Case:  21 | Input/Output: [[43 -68 -68 -68] -68]
Test Case:  22 | Input/Output: [[-68 45 45 45] -68]
Test Case:  23 | Input/Output: [[73 -6 73 73] -6]
Test Case:  24 | Input/Output: [[55 55 55 54] 54]
Test Case:  25 | Input/Output: [[-20 -20 -20 -3] -20]
Test Case:  26 | Input/Output: [[84 84 84 74] 74]
Test Case:  27 | Input/Output: [[-43 -40 -43 -43] -43]
Test Case:  28 | Input/Output: [[-74 -74 -74 -60] -74]
Test Case:  29 | Input/Output: [[-94 -94 -21 -94] -94]
Test Case:  30 | Input/Output: [[-75 33 -75 -75] -75]
Test Case:  31 | Input/Output: [[-39 -63 -39 -39] -63]
Test Case:  32 | Input/Output: [[-98 -98 65 -98] -98]
Test Case:  33 | Input/Output: [[0 15 0 0] 0]
Test Case:  34 | Input/Output: [[-53 -53 -53 -86] -86]
Test Case:  35 | Input/Output: [[-34 -34 -34 -14] -34]
Test Case:  36 | Input/Output: [[-55 -55 -55 -45] -55]
Test Case:  37 | Input/Output: [[-72 86 86 86] -72]
Test Case:  38 | Input/Output: [[-46 46 46 46] -46]
Test Case:  39 | Input/Output: [[13 -35 13 13] -35]
Test Case:  40 | Input/Output: [[33 33 -22 33] -22]
Test Case:  41 | Input/Output: [[-7 24 24 24] -7]
Test Case:  42 | Input/Output: [[46 46 51 46] 46]
Test Case:  43 | Input/Output: [[-40 -40 42 -40] -40]
Test Case:  44 | Input/Output: [[60 -6 60 60] -6]
Test Case:  45 | Input/Output: [[-11 -66 -11 -11] -66]
Test Case:  46 | Input/Output: [[-32 39 -32 -32] -32]
Test Case:  47 | Input/Output: [[35 -71 35 35] -71]
Test Case:  48 | Input/Output: [[-100 -100 -74 -100] -100]
Test Case:  49 | Input/Output: [[36 36 36 42] 36]
Test Case:  50 | Input/Output: [[7 7 -14 7] -14]
Test Case:  51 | Input/Output: [[-97 81 -97 -97] -97]
Test Case:  52 | Input/Output: [[44 38 44 44] 38]
Test Case:  53 | Input/Output: [[97 97 97 69] 69]
Test Case:  54 | Input/Output: [[-93 49 49 49] -93]
Test Case:  55 | Input/Output: [[100 100 100 -94] -94]
Test Case:  56 | Input/Output: [[-91 -91 -91 2] -91]
Test Case:  57 | Input/Output: [[-43 -43 -88 -43] -88]
Test Case:  58 | Input/Output: [[-6 -19 -19 -19] -19]
Test Case:  59 | Input/Output: [[76 76 76 -34] -34]
Test Case:  60 | Input/Output: [[-5 -5 -5 97] -5]
Test Case:  61 | Input/Output: [[-76 -76 -70 -76] -76]
Test Case:  62 | Input/Output: [[-62 -62 -62 64] -62]
Test Case:  63 | Input/Output: [[-34 -34 49 -34] -34]
Test Case:  64 | Input/Output: [[39 39 39 84] 39]
Test Case:  65 | Input/Output: [[-21 -21 -21 15] -21]
Test Case:  66 | Input/Output: [[-75 -75 -75 47] -75]
Test Case:  67 | Input/Output: [[-96 -94 -94 -94] -96]
Test Case:  68 | Input/Output: [[30 30 -35 30] -35]
Test Case:  69 | Input/Output: [[-2 -94 -2 -2] -94]
Test Case:  70 | Input/Output: [[-13 -13 -13 63] -13]
Test Case:  71 | Input/Output: [[-88 3 -88 -88] -88]
Test Case:  72 | Input/Output: [[42 42 31 42] 31]
Test Case:  73 | Input/Output: [[22 22 -67 22] -67]
Test Case:  74 | Input/Output: [[-95 29 -95 -95] -95]
Test Case:  75 | Input/Output: [[89 89 89 -23] -23]
Test Case:  76 | Input/Output: [[95 34 34 34] 34]
Test Case:  77 | Input/Output: [[-30 -30 -92 -30] -92]
Test Case:  78 | Input/Output: [[-94 74 -94 -94] -94]
Test Case:  79 | Input/Output: [[25 25 25 2] 2]
Test Case:  80 | Input/Output: [[-90 -90 -90 23] -90]
Test Case:  81 | Input/Output: [[-8 -56 -8 -8] -56]
Test Case:  82 | Input/Output: [[-60 34 34 34] -60]
Test Case:  83 | Input/Output: [[41 -33 41 41] -33]
Test Case:  84 | Input/Output: [[-81 -81 -81 -33] -81]
Test Case:  85 | Input/Output: [[-8 -8 -8 67] -8]
Test Case:  86 | Input/Output: [[-81 31 -81 -81] -81]
Test Case:  87 | Input/Output: [[57 57 65 57] 57]
Test Case:  88 | Input/Output: [[-54 -54 -54 -13] -54]
Test Case:  89 | Input/Output: [[-10 -78 -78 -78] -78]
Test Case:  90 | Input/Output: [[-65 -65 -65 -27] -65]
Test Case:  91 | Input/Output: [[88 -98 -98 -98] -98]
Test Case:  92 | Input/Output: [[-84 81 81 81] -84]
Test Case:  93 | Input/Output: [[33 72 33 33] 33]
Test Case:  94 | Input/Output: [[-11 78 78 78] -11]
Test Case:  95 | Input/Output: [[-43 -79 -43 -43] -79]
Test Case:  96 | Input/Output: [[-3 -31 -3 -3] -31]
Test Case:  97 | Input/Output: [[95 95 95 95] 95]
Test Case:  98 | Input/Output: [[-88 75 -88 -88] -88]
Test Case:  99 | Input/Output: [[65 -43 -43 -43] -43]
Test Case: 100 | Input/Output: [(49 49 49 49) 49]
Test Case: 101 | Input/Output: [(14 14 14 14) 14]
Test Case: 102 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 103 | Input/Output: [(68 68 68 68) 68]
Test Case: 104 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 105 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 106 | Input/Output: [(34 34 34 34) 34]
Test Case: 107 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 108 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 109 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 110 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 111 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 112 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 113 | Input/Output: [(9 9 9 9) 9]
Test Case: 114 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 115 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 116 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 117 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 118 | Input/Output: [(13 13 13 13) 13]
Test Case: 119 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 120 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 121 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 122 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 123 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 124 | Input/Output: [(14 14 14 14) 14]
Test Case: 125 | Input/Output: [(29 29 29 29) 29]
Test Case: 126 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 127 | Input/Output: [(65 65 65 65) 65]
Test Case: 128 | Input/Output: [(68 68 68 68) 68]
Test Case: 129 | Input/Output: [(79 79 79 79) 79]
Test Case: 130 | Input/Output: [(88 88 88 88) 88]
Test Case: 131 | Input/Output: [(73 73 73 73) 73]
Test Case: 132 | Input/Output: [(45 45 45 45) 45]
Test Case: 133 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 134 | Input/Output: [(28 28 28 28) 28]
Test Case: 135 | Input/Output: [(26 26 26 26) 26]
Test Case: 136 | Input/Output: [(98 98 98 98) 98]
Test Case: 137 | Input/Output: [(29 29 29 29) 29]
Test Case: 138 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 139 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 140 | Input/Output: [(20 20 20 20) 20]
Test Case: 141 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 142 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 143 | Input/Output: [(72 72 72 72) 72]
Test Case: 144 | Input/Output: [(67 67 67 67) 67]
Test Case: 145 | Input/Output: [(87 87 87 87) 87]
Test Case: 146 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 147 | Input/Output: [(40 40 40 40) 40]
Test Case: 148 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 149 | Input/Output: [(81 81 81 81) 81]
Test Case: 150 | Input/Output: [(29 29 29 29) 29]
Test Case: 151 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 152 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 153 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 154 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 155 | Input/Output: [(81 81 81 81) 81]
Test Case: 156 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 157 | Input/Output: [(28 28 28 28) 28]
Test Case: 158 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 159 | Input/Output: [(23 23 23 23) 23]
Test Case: 160 | Input/Output: [(0 0 0 0) 0]
Test Case: 161 | Input/Output: [(93 93 93 93) 93]
Test Case: 162 | Input/Output: [(1 1 1 1) 1]
Test Case: 163 | Input/Output: [(20 20 20 20) 20]
Test Case: 164 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 165 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 166 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 167 | Input/Output: [(15 15 15 15) 15]
Test Case: 168 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 169 | Input/Output: [(99 99 99 99) 99]
Test Case: 170 | Input/Output: [(47 47 47 47) 47]
Test Case: 171 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 172 | Input/Output: [(95 95 95 95) 95]
Test Case: 173 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 174 | Input/Output: [(32 32 32 32) 32]
Test Case: 175 | Input/Output: [(34 34 34 34) 34]
Test Case: 176 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 177 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 178 | Input/Output: [(4 4 4 4) 4]
Test Case: 179 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 180 | Input/Output: [(5 5 5 5) 5]
Test Case: 181 | Input/Output: [(87 87 87 87) 87]
Test Case: 182 | Input/Output: [(19 19 19 19) 19]
Test Case: 183 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 184 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 185 | Input/Output: [(72 72 72 72) 72]
Test Case: 186 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 187 | Input/Output: [(94 94 94 94) 94]
Test Case: 188 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 189 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 190 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 191 | Input/Output: [(84 84 84 84) 84]
Test Case: 192 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 193 | Input/Output: [(25 25 25 25) 25]
Test Case: 194 | Input/Output: [(28 28 28 28) 28]
Test Case: 195 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 196 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 197 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 198 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 199 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 200 | Input/Output: [(31 34 94 71) 31]
Test Case: 201 | Input/Output: [(14 71 99 0) 0]
Test Case: 202 | Input/Output: [(24 73 48 94) 24]
Test Case: 203 | Input/Output: [(38 68 74 44) 38]
Test Case: 204 | Input/Output: [(51 1 88 52) 1]
Test Case: 205 | Input/Output: [(79 17 26 35) 17]
Test Case: 206 | Input/Output: [(31 83 99 54) 31]
Test Case: 207 | Input/Output: [(40 87 72 37) 37]
Test Case: 208 | Input/Output: [(21 21 5 2) 2]
Test Case: 209 | Input/Output: [(92 39 18 19) 18]
Test Case: 210 | Input/Output: [(71 79 70 66) 66]
Test Case: 211 | Input/Output: [(42 84 19 74) 19]
Test Case: 212 | Input/Output: [(84 3 90 87) 3]
Test Case: 213 | Input/Output: [(2 50 51 32) 2]
Test Case: 214 | Input/Output: [(43 69 93 39) 39]
Test Case: 215 | Input/Output: [(4 62 54 3) 3]
Test Case: 216 | Input/Output: [(77 66 50 68) 50]
Test Case: 217 | Input/Output: [(46 34 37 79) 34]
Test Case: 218 | Input/Output: [(29 93 69 54) 29]
Test Case: 219 | Input/Output: [(16 24 46 89) 16]
Test Case: 220 | Input/Output: [(49 32 54 5) 5]
Test Case: 221 | Input/Output: [(7 40 73 99) 7]
Test Case: 222 | Input/Output: [(77 16 36 85) 16]
Test Case: 223 | Input/Output: [(50 10 54 9) 9]
Test Case: 224 | Input/Output: [(53 85 40 76) 40]
Test Case: 225 | Input/Output: [(32 98 62 13) 13]
Test Case: 226 | Input/Output: [(26 1 98 29) 1]
Test Case: 227 | Input/Output: [(72 86 20 33) 20]
Test Case: 228 | Input/Output: [(13 91 80 31) 13]
Test Case: 229 | Input/Output: [(7 13 4 48) 4]
Test Case: 230 | Input/Output: [(48 19 62 77) 19]
Test Case: 231 | Input/Output: [(10 54 59 89) 10]
Test Case: 232 | Input/Output: [(70 35 14 39) 14]
Test Case: 233 | Input/Output: [(89 50 7 20) 7]
Test Case: 234 | Input/Output: [(64 35 85 24) 24]
Test Case: 235 | Input/Output: [(16 67 93 26) 16]
Test Case: 236 | Input/Output: [(38 96 34 88) 34]
Test Case: 237 | Input/Output: [(87 25 51 58) 25]
Test Case: 238 | Input/Output: [(87 79 45 1) 1]
Test Case: 239 | Input/Output: [(10 19 65 62) 10]
Test Case: 240 | Input/Output: [(4 68 57 73) 4]
Test Case: 241 | Input/Output: [(0 43 21 55) 0]
Test Case: 242 | Input/Output: [(58 53 10 7) 7]
Test Case: 243 | Input/Output: [(41 44 25 90) 25]
Test Case: 244 | Input/Output: [(99 58 49 33) 33]
Test Case: 245 | Input/Output: [(17 83 40 84) 17]
Test Case: 246 | Input/Output: [(46 74 69 68) 46]
Test Case: 247 | Input/Output: [(34 79 55 57) 34]
Test Case: 248 | Input/Output: [(60 40 22 74) 22]
Test Case: 249 | Input/Output: [(89 90 0 95) 0]
Test Case: 250 | Input/Output: [(60 5 100 78) 5]
Test Case: 251 | Input/Output: [(9 27 23 77) 9]
Test Case: 252 | Input/Output: [(33 28 66 24) 24]
Test Case: 253 | Input/Output: [(73 60 53 16) 16]
Test Case: 254 | Input/Output: [(53 93 25 85) 25]
Test Case: 255 | Input/Output: [(80 52 25 46) 25]
Test Case: 256 | Input/Output: [(33 38 34 87) 33]
Test Case: 257 | Input/Output: [(17 88 26 14) 14]
Test Case: 258 | Input/Output: [(42 40 96 93) 40]
Test Case: 259 | Input/Output: [(71 97 88 13) 13]
Test Case: 260 | Input/Output: [(2 76 91 46) 2]
Test Case: 261 | Input/Output: [(69 19 91 6) 6]
Test Case: 262 | Input/Output: [(16 11 71 90) 11]
Test Case: 263 | Input/Output: [(99 50 38 16) 16]
Test Case: 264 | Input/Output: [(0 34 38 63) 0]
Test Case: 265 | Input/Output: [(63 93 61 59) 59]
Test Case: 266 | Input/Output: [(35 65 49 92) 35]
Test Case: 267 | Input/Output: [(71 14 2 55) 2]
Test Case: 268 | Input/Output: [(86 55 50 1) 1]
Test Case: 269 | Input/Output: [(99 63 73 63) 63]
Test Case: 270 | Input/Output: [(44 13 12 93) 12]
Test Case: 271 | Input/Output: [(29 49 66 39) 29]
Test Case: 272 | Input/Output: [(59 20 4 100) 4]
Test Case: 273 | Input/Output: [(40 77 94 20) 20]
Test Case: 274 | Input/Output: [(70 22 96 87) 22]
Test Case: 275 | Input/Output: [(38 59 16 12) 12]
Test Case: 276 | Input/Output: [(61 51 19 76) 19]
Test Case: 277 | Input/Output: [(24 95 13 22) 13]
Test Case: 278 | Input/Output: [(1 58 85 96) 1]
Test Case: 279 | Input/Output: [(25 1 82 86) 1]
Test Case: 280 | Input/Output: [(66 66 42 85) 42]
Test Case: 281 | Input/Output: [(28 12 17 6) 6]
Test Case: 282 | Input/Output: [(97 9 100 21) 9]
Test Case: 283 | Input/Output: [(78 55 86 99) 55]
Test Case: 284 | Input/Output: [(8 74 17 52) 8]
Test Case: 285 | Input/Output: [(61 61 42 4) 4]
Test Case: 286 | Input/Output: [(39 63 6 19) 6]
Test Case: 287 | Input/Output: [(98 48 95 86) 48]
Test Case: 288 | Input/Output: [(5 4 48 3) 3]
Test Case: 289 | Input/Output: [(32 32 34 89) 32]
Test Case: 290 | Input/Output: [(76 100 90 59) 59]
Test Case: 291 | Input/Output: [(22 50 96 11) 11]
Test Case: 292 | Input/Output: [(90 72 95 80) 72]
Test Case: 293 | Input/Output: [(22 78 99 0) 0]
Test Case: 294 | Input/Output: [(90 44 75 82) 44]
Test Case: 295 | Input/Output: [(78 16 75 7) 7]
Test Case: 296 | Input/Output: [(63 21 44 41) 21]
Test Case: 297 | Input/Output: [(35 51 6 48) 6]
Test Case: 298 | Input/Output: [(87 44 57 99) 44]
Test Case: 299 | Input/Output: [(46 19 2 77) 2]
Test Case: 300 | Input/Output: [(8 77 2 90) 2]
Test Case: 301 | Input/Output: [(34 27 2 77) 2]
Test Case: 302 | Input/Output: [(18 10 19 12) 10]
Test Case: 303 | Input/Output: [(80 88 89 41) 41]
Test Case: 304 | Input/Output: [(46 98 74 19) 19]
Test Case: 305 | Input/Output: [(48 82 91 23) 23]
Test Case: 306 | Input/Output: [(60 16 15 89) 15]
Test Case: 307 | Input/Output: [(26 87 60 85) 26]
Test Case: 308 | Input/Output: [(89 64 4 6) 4]
Test Case: 309 | Input/Output: [(38 33 32 0) 0]
Test Case: 310 | Input/Output: [(90 60 52 50) 50]
Test Case: 311 | Input/Output: [(59 12 24 36) 12]
Test Case: 312 | Input/Output: [(15 24 41 49) 15]
Test Case: 313 | Input/Output: [(80 55 70 25) 25]
Test Case: 314 | Input/Output: [(80 92 57 60) 57]
Test Case: 315 | Input/Output: [(71 96 43 0) 0]
Test Case: 316 | Input/Output: [(10 91 68 15) 10]
Test Case: 317 | Input/Output: [(74 11 83 64) 11]
Test Case: 318 | Input/Output: [(61 77 42 24) 24]
Test Case: 319 | Input/Output: [(87 10 63 69) 10]
Test Case: 320 | Input/Output: [(48 59 39 36) 36]
Test Case: 321 | Input/Output: [(39 43 49 5) 5]
Test Case: 322 | Input/Output: [(26 100 58 80) 26]
Test Case: 323 | Input/Output: [(97 53 55 100) 53]
Test Case: 324 | Input/Output: [(53 57 88 48) 48]
Test Case: 325 | Input/Output: [(10 43 67 3) 3]
Test Case: 326 | Input/Output: [(73 29 75 79) 29]
Test Case: 327 | Input/Output: [(29 90 23 94) 23]
Test Case: 328 | Input/Output: [(61 0 45 93) 0]
Test Case: 329 | Input/Output: [(87 50 89 1) 1]
Test Case: 330 | Input/Output: [(65 69 54 73) 54]
Test Case: 331 | Input/Output: [(14 62 46 61) 14]
Test Case: 332 | Input/Output: [(28 35 99 38) 28]
Test Case: 333 | Input/Output: [(87 69 72 8) 8]
Test Case: 334 | Input/Output: [(20 76 25 82) 20]
Test Case: 335 | Input/Output: [(51 14 85 86) 14]
Test Case: 336 | Input/Output: [(98 61 56 0) 0]
Test Case: 337 | Input/Output: [(52 16 40 46) 16]
Test Case: 338 | Input/Output: [(21 86 17 41) 17]
Test Case: 339 | Input/Output: [(90 42 74 91) 42]
Test Case: 340 | Input/Output: [(31 89 23 85) 23]
Test Case: 341 | Input/Output: [(27 83 21 37) 21]
Test Case: 342 | Input/Output: [(45 83 50 53) 45]
Test Case: 343 | Input/Output: [(98 65 13 81) 13]
Test Case: 344 | Input/Output: [(41 21 68 29) 21]
Test Case: 345 | Input/Output: [(89 60 74 82) 60]
Test Case: 346 | Input/Output: [(62 7 18 34) 7]
Test Case: 347 | Input/Output: [(67 94 91 70) 67]
Test Case: 348 | Input/Output: [(91 29 53 25) 25]
Test Case: 349 | Input/Output: [(72 80 82 91) 72]
Test Case: 350 | Input/Output: [(25 61 7 35) 7]
Test Case: 351 | Input/Output: [(14 83 42 16) 14]
Test Case: 352 | Input/Output: [(92 72 31 40) 31]
Test Case: 353 | Input/Output: [(8 77 59 64) 8]
Test Case: 354 | Input/Output: [(44 97 12 21) 12]
Test Case: 355 | Input/Output: [(68 52 64 62) 52]
Test Case: 356 | Input/Output: [(0 72 35 54) 0]
Test Case: 357 | Input/Output: [(35 82 85 22) 22]
Test Case: 358 | Input/Output: [(72 51 12 87) 12]
Test Case: 359 | Input/Output: [(80 52 89 42) 42]
Test Case: 360 | Input/Output: [(50 46 3 17) 3]
Test Case: 361 | Input/Output: [(31 54 28 1) 1]
Test Case: 362 | Input/Output: [(41 57 3 69) 3]
Test Case: 363 | Input/Output: [(67 45 12 18) 12]
Test Case: 364 | Input/Output: [(29 66 14 33) 14]
Test Case: 365 | Input/Output: [(25 83 10 52) 10]
Test Case: 366 | Input/Output: [(24 40 39 34) 24]
Test Case: 367 | Input/Output: [(45 92 70 29) 29]
Test Case: 368 | Input/Output: [(41 48 6 28) 6]
Test Case: 369 | Input/Output: [(7 20 46 39) 7]
Test Case: 370 | Input/Output: [(15 44 23 95) 15]
Test Case: 371 | Input/Output: [(92 80 84 61) 61]
Test Case: 372 | Input/Output: [(73 17 96 94) 17]
Test Case: 373 | Input/Output: [(96 24 86 47) 24]
Test Case: 374 | Input/Output: [(30 63 32 70) 30]
Test Case: 375 | Input/Output: [(33 17 79 88) 17]
Test Case: 376 | Input/Output: [(26 66 85 12) 12]
Test Case: 377 | Input/Output: [(92 15 22 51) 15]
Test Case: 378 | Input/Output: [(63 5 57 53) 5]
Test Case: 379 | Input/Output: [(57 66 85 71) 57]
Test Case: 380 | Input/Output: [(93 95 59 7) 7]
Test Case: 381 | Input/Output: [(59 57 78 68) 57]
Test Case: 382 | Input/Output: [(96 22 69 94) 22]
Test Case: 383 | Input/Output: [(18 4 89 72) 4]
Test Case: 384 | Input/Output: [(33 8 83 30) 8]
Test Case: 385 | Input/Output: [(7 81 89 86) 7]
Test Case: 386 | Input/Output: [(35 15 86 77) 15]
Test Case: 387 | Input/Output: [(82 61 34 61) 34]
Test Case: 388 | Input/Output: [(18 23 27 58) 18]
Test Case: 389 | Input/Output: [(10 39 28 57) 10]
Test Case: 390 | Input/Output: [(28 11 93 75) 11]
Test Case: 391 | Input/Output: [(95 5 78 12) 5]
Test Case: 392 | Input/Output: [(26 74 17 18) 17]
Test Case: 393 | Input/Output: [(7 14 87 96) 7]
Test Case: 394 | Input/Output: [(61 25 30 63) 25]
Test Case: 395 | Input/Output: [(28 75 5 19) 5]
Test Case: 396 | Input/Output: [(55 54 43 11) 11]
Test Case: 397 | Input/Output: [(72 14 35 80) 14]
Test Case: 398 | Input/Output: [(37 89 70 93) 37]
Test Case: 399 | Input/Output: [(69 15 11 49) 11]
Test Case: 400 | Input/Output: [(-89 -59 89 -12) -89]
Test Case: 401 | Input/Output: [(22 21 -40 67) -40]
Test Case: 402 | Input/Output: [(50 96 -81 90) -81]
Test Case: 403 | Input/Output: [(48 5 -61 -12) -61]
Test Case: 404 | Input/Output: [(33 15 100 3) 3]
Test Case: 405 | Input/Output: [(28 55 -40 90) -40]
Test Case: 406 | Input/Output: [(87 -13 -34 73) -34]
Test Case: 407 | Input/Output: [(96 65 5 -73) -73]
Test Case: 408 | Input/Output: [(-52 -93 62 35) -93]
Test Case: 409 | Input/Output: [(74 -17 -99 36) -99]
Test Case: 410 | Input/Output: [(-94 39 -66 -84) -94]
Test Case: 411 | Input/Output: [(40 -64 -60 91) -64]
Test Case: 412 | Input/Output: [(-51 40 -13 -42) -51]
Test Case: 413 | Input/Output: [(49 34 67 -2) -2]
Test Case: 414 | Input/Output: [(92 -79 92 95) -79]
Test Case: 415 | Input/Output: [(-98 -90 -4 16) -98]
Test Case: 416 | Input/Output: [(61 -66 85 -64) -66]
Test Case: 417 | Input/Output: [(-6 -86 -86 -14) -86]
Test Case: 418 | Input/Output: [(-54 -40 70 -80) -80]
Test Case: 419 | Input/Output: [(-46 -24 -86 90) -86]
Test Case: 420 | Input/Output: [(9 -75 51 10) -75]
Test Case: 421 | Input/Output: [(-43 -2 14 -71) -71]
Test Case: 422 | Input/Output: [(63 -84 -79 -29) -84]
Test Case: 423 | Input/Output: [(54 -93 31 -76) -93]
Test Case: 424 | Input/Output: [(43 -82 -93 43) -93]
Test Case: 425 | Input/Output: [(-88 -61 73 -67) -88]
Test Case: 426 | Input/Output: [(59 -86 -6 32) -86]
Test Case: 427 | Input/Output: [(84 25 -97 -91) -97]
Test Case: 428 | Input/Output: [(-77 -11 -84 -82) -84]
Test Case: 429 | Input/Output: [(33 94 -48 21) -48]
Test Case: 430 | Input/Output: [(52 -5 52 86) -5]
Test Case: 431 | Input/Output: [(-36 -71 -28 68) -71]
Test Case: 432 | Input/Output: [(47 -78 77 -3) -78]
Test Case: 433 | Input/Output: [(-18 -83 -94 33) -94]
Test Case: 434 | Input/Output: [(84 -37 39 3) -37]
Test Case: 435 | Input/Output: [(0 -93 99 62) -93]
Test Case: 436 | Input/Output: [(76 -26 -66 -85) -85]
Test Case: 437 | Input/Output: [(-11 -86 -74 43) -86]
Test Case: 438 | Input/Output: [(-68 -73 63 12) -73]
Test Case: 439 | Input/Output: [(-93 -96 15 -28) -96]
Test Case: 440 | Input/Output: [(-29 -39 -38 -81) -81]
Test Case: 441 | Input/Output: [(88 60 88 -27) -27]
Test Case: 442 | Input/Output: [(-6 -11 -99 90) -99]
Test Case: 443 | Input/Output: [(-76 -4 -21 -77) -77]
Test Case: 444 | Input/Output: [(80 -41 -79 -88) -88]
Test Case: 445 | Input/Output: [(-92 78 -34 -80) -92]
Test Case: 446 | Input/Output: [(-39 -84 -90 81) -90]
Test Case: 447 | Input/Output: [(-92 72 -59 42) -92]
Test Case: 448 | Input/Output: [(25 -1 28 -95) -95]
Test Case: 449 | Input/Output: [(8 57 -10 -44) -44]
Test Case: 450 | Input/Output: [(-66 45 85 -21) -66]
Test Case: 451 | Input/Output: [(-13 -37 12 -39) -39]
Test Case: 452 | Input/Output: [(-81 -54 -46 -81) -81]
Test Case: 453 | Input/Output: [(-69 -81 63 -36) -81]
Test Case: 454 | Input/Output: [(-74 -88 -47 94) -88]
Test Case: 455 | Input/Output: [(65 -23 -4 -59) -59]
Test Case: 456 | Input/Output: [(83 46 54 -72) -72]
Test Case: 457 | Input/Output: [(-30 42 -64 -97) -97]
Test Case: 458 | Input/Output: [(90 0 -25 17) -25]
Test Case: 459 | Input/Output: [(60 64 -12 74) -12]
Test Case: 460 | Input/Output: [(14 -100 50 24) -100]
Test Case: 461 | Input/Output: [(-90 -24 27 -40) -90]
Test Case: 462 | Input/Output: [(-76 -46 -25 45) -76]
Test Case: 463 | Input/Output: [(52 -61 -16 -76) -76]
Test Case: 464 | Input/Output: [(-99 -30 -69 78) -99]
Test Case: 465 | Input/Output: [(42 -1 -93 73) -93]
Test Case: 466 | Input/Output: [(62 63 55 35) 35]
Test Case: 467 | Input/Output: [(-69 -92 38 -52) -92]
Test Case: 468 | Input/Output: [(55 46 -18 78) -18]
Test Case: 469 | Input/Output: [(-25 4 30 -68) -68]
Test Case: 470 | Input/Output: [(-91 -12 95 -85) -91]
Test Case: 471 | Input/Output: [(67 99 -94 42) -94]
Test Case: 472 | Input/Output: [(-12 -48 85 -70) -70]
Test Case: 473 | Input/Output: [(-14 -85 -78 -91) -91]
Test Case: 474 | Input/Output: [(10 -49 10 -81) -81]
Test Case: 475 | Input/Output: [(-71 100 -37 -48) -71]
Test Case: 476 | Input/Output: [(88 -88 -29 -66) -88]
Test Case: 477 | Input/Output: [(-100 -76 -36 64) -100]
Test Case: 478 | Input/Output: [(21 -8 56 34) -8]
Test Case: 479 | Input/Output: [(-36 37 -44 46) -44]
Test Case: 480 | Input/Output: [(-44 -63 69 32) -63]
Test Case: 481 | Input/Output: [(89 -82 -72 -49) -82]
Test Case: 482 | Input/Output: [(-9 -76 60 -91) -91]
Test Case: 483 | Input/Output: [(-98 -82 -90 -52) -98]
Test Case: 484 | Input/Output: [(45 19 -67 5) -67]
Test Case: 485 | Input/Output: [(-45 96 -36 3) -45]
Test Case: 486 | Input/Output: [(92 -83 38 74) -83]
Test Case: 487 | Input/Output: [(14 -49 9 -16) -49]
Test Case: 488 | Input/Output: [(35 33 72 47) 33]
Test Case: 489 | Input/Output: [(-7 -4 -95 -6) -95]
Test Case: 490 | Input/Output: [(54 -62 25 57) -62]
Test Case: 491 | Input/Output: [(38 40 -57 81) -57]
Test Case: 492 | Input/Output: [(-46 2 95 67) -46]
Test Case: 493 | Input/Output: [(-66 -45 -16 -29) -66]
Test Case: 494 | Input/Output: [(94 46 -71 -45) -71]
Test Case: 495 | Input/Output: [(-78 -65 -83 48) -83]
Test Case: 496 | Input/Output: [(53 30 88 16) 16]
Test Case: 497 | Input/Output: [(-52 -79 4 -44) -79]
Test Case: 498 | Input/Output: [(-1 23 0 -26) -26]
Test Case: 499 | Input/Output: [(-90 -44 -77 -54) -90]
Test Case: 500 | Input/Output: [(5 -12 33 -1) -12]
Test Case: 501 | Input/Output: [(87 -19 12 88) -19]
Test Case: 502 | Input/Output: [(-62 18 4 -38) -62]
Test Case: 503 | Input/Output: [(-73 57 19 39) -73]
Test Case: 504 | Input/Output: [(-96 46 16 84) -96]
Test Case: 505 | Input/Output: [(49 92 -87 -34) -87]
Test Case: 506 | Input/Output: [(-33 84 -68 45) -68]
Test Case: 507 | Input/Output: [(93 -46 99 -54) -54]
Test Case: 508 | Input/Output: [(-12 20 -14 -6) -14]
Test Case: 509 | Input/Output: [(13 92 -28 79) -28]
Test Case: 510 | Input/Output: [(55 -38 -34 -11) -38]
Test Case: 511 | Input/Output: [(-71 -71 42 -52) -71]
Test Case: 512 | Input/Output: [(61 -87 -100 38) -100]
Test Case: 513 | Input/Output: [(-8 64 51 13) -8]
Test Case: 514 | Input/Output: [(29 18 79 -62) -62]
Test Case: 515 | Input/Output: [(90 37 -76 -88) -88]
Test Case: 516 | Input/Output: [(65 -65 98 66) -65]
Test Case: 517 | Input/Output: [(-2 -62 -14 -44) -62]
Test Case: 518 | Input/Output: [(-22 34 -69 -71) -71]
Test Case: 519 | Input/Output: [(52 -91 8 0) -91]
Test Case: 520 | Input/Output: [(71 12 -40 22) -40]
Test Case: 521 | Input/Output: [(59 -64 -81 3) -81]
Test Case: 522 | Input/Output: [(37 94 96 67) 37]
Test Case: 523 | Input/Output: [(78 30 -85 26) -85]
Test Case: 524 | Input/Output: [(37 -33 26 44) -33]
Test Case: 525 | Input/Output: [(5 -55 -80 -61) -80]
Test Case: 526 | Input/Output: [(-32 -40 46 96) -40]
Test Case: 527 | Input/Output: [(22 -33 28 68) -33]
Test Case: 528 | Input/Output: [(-74 -55 30 -2) -74]
Test Case: 529 | Input/Output: [(86 -97 98 -100) -100]
Test Case: 530 | Input/Output: [(97 73 41 -11) -11]
Test Case: 531 | Input/Output: [(-49 11 -4 30) -49]
Test Case: 532 | Input/Output: [(28 28 -77 -41) -77]
Test Case: 533 | Input/Output: [(-67 83 -39 -26) -67]
Test Case: 534 | Input/Output: [(-17 72 99 -26) -26]
Test Case: 535 | Input/Output: [(-48 29 -19 80) -48]
Test Case: 536 | Input/Output: [(-55 -13 -5 -83) -83]
Test Case: 537 | Input/Output: [(15 -55 65 33) -55]
Test Case: 538 | Input/Output: [(33 -96 22 75) -96]
Test Case: 539 | Input/Output: [(-86 81 -62 -14) -86]
Test Case: 540 | Input/Output: [(5 0 99 40) 0]
Test Case: 541 | Input/Output: [(-25 56 -89 -24) -89]
Test Case: 542 | Input/Output: [(31 54 71 -55) -55]
Test Case: 543 | Input/Output: [(-86 97 -21 56) -86]
Test Case: 544 | Input/Output: [(14 -67 32 -75) -75]
Test Case: 545 | Input/Output: [(44 -92 -69 36) -92]
Test Case: 546 | Input/Output: [(-71 89 -4 73) -71]
Test Case: 547 | Input/Output: [(-14 23 -56 -87) -87]
Test Case: 548 | Input/Output: [(88 -29 -1 32) -29]
Test Case: 549 | Input/Output: [(-73 39 22 -16) -73]
Test Case: 550 | Input/Output: [(96 -88 54 -91) -91]
Test Case: 551 | Input/Output: [(33 -95 100 -66) -95]
Test Case: 552 | Input/Output: [(94 45 17 56) 17]
Test Case: 553 | Input/Output: [(-62 69 21 -10) -62]
Test Case: 554 | Input/Output: [(25 51 -71 43) -71]
Test Case: 555 | Input/Output: [(77 2 -85 -27) -85]
Test Case: 556 | Input/Output: [(70 -45 -54 65) -54]
Test Case: 557 | Input/Output: [(68 32 37 77) 32]
Test Case: 558 | Input/Output: [(24 -17 68 -64) -64]
Test Case: 559 | Input/Output: [(-87 -22 -17 45) -87]
Test Case: 560 | Input/Output: [(-50 29 -93 1) -93]
Test Case: 561 | Input/Output: [(63 0 64 -70) -70]
Test Case: 562 | Input/Output: [(-58 22 32 18) -58]
Test Case: 563 | Input/Output: [(59 -51 77 -46) -51]
Test Case: 564 | Input/Output: [(-9 21 10 54) -9]
Test Case: 565 | Input/Output: [(6 43 -7 -19) -19]
Test Case: 566 | Input/Output: [(-4 3 1 4) -4]
Test Case: 567 | Input/Output: [(-86 31 -54 40) -86]
Test Case: 568 | Input/Output: [(-65 -90 -58 36) -90]
Test Case: 569 | Input/Output: [(-82 65 -100 26) -100]
Test Case: 570 | Input/Output: [(42 10 11 90) 10]
Test Case: 571 | Input/Output: [(-62 -39 70 -5) -62]
Test Case: 572 | Input/Output: [(-56 -14 33 -31) -56]
Test Case: 573 | Input/Output: [(77 -16 63 -22) -22]
Test Case: 574 | Input/Output: [(8 -50 -74 25) -74]
Test Case: 575 | Input/Output: [(-13 -9 63 -40) -40]
Test Case: 576 | Input/Output: [(-71 -27 -90 -65) -90]
Test Case: 577 | Input/Output: [(-75 91 -57 95) -75]
Test Case: 578 | Input/Output: [(-29 -28 9 -26) -29]
Test Case: 579 | Input/Output: [(42 -82 -95 57) -95]
Test Case: 580 | Input/Output: [(54 -68 97 13) -68]
Test Case: 581 | Input/Output: [(15 -32 13 44) -32]
Test Case: 582 | Input/Output: [(-76 -55 -96 -59) -96]
Test Case: 583 | Input/Output: [(-10 -98 64 -86) -98]
Test Case: 584 | Input/Output: [(53 100 -13 -67) -67]
Test Case: 585 | Input/Output: [(82 97 26 77) 26]
Test Case: 586 | Input/Output: [(11 -48 20 -62) -62]
Test Case: 587 | Input/Output: [(-12 50 -70 78) -70]
Test Case: 588 | Input/Output: [(-47 93 24 -25) -47]
Test Case: 589 | Input/Output: [(-41 45 -11 43) -41]
Test Case: 590 | Input/Output: [(-87 34 7 -14) -87]
Test Case: 591 | Input/Output: [(-6 -45 -73 17) -73]
Test Case: 592 | Input/Output: [(41 -97 42 45) -97]
Test Case: 593 | Input/Output: [(-77 -79 24 69) -79]
Test Case: 594 | Input/Output: [(63 47 -13 96) -13]
Test Case: 595 | Input/Output: [(53 76 21 -15) -15]
Test Case: 596 | Input/Output: [(11 2 57 60) 2]
Test Case: 597 | Input/Output: [(-36 37 27 -62) -62]
Test Case: 598 | Input/Output: [(-34 -66 -9 -34) -66]
Test Case: 599 | Input/Output: [(-82 34 -77 -92) -92]
Test Case: 600 | Input/Output: [(-73 -53 40 24) -73]
Test Case: 601 | Input/Output: [(100 -6 88 63) -6]
Test Case: 602 | Input/Output: [(-64 -63 -82 96) -82]
Test Case: 603 | Input/Output: [(-58 28 25 -47) -58]
Test Case: 604 | Input/Output: [(-95 0 -34 19) -95]
Test Case: 605 | Input/Output: [(-42 38 0 99) -42]
Test Case: 606 | Input/Output: [(-57 32 -94 29) -94]
Test Case: 607 | Input/Output: [(5 -87 19 -19) -87]
Test Case: 608 | Input/Output: [(91 -70 29 -94) -94]
Test Case: 609 | Input/Output: [(97 52 -10 17) -10]
Test Case: 610 | Input/Output: [(93 -73 -10 90) -73]
Test Case: 611 | Input/Output: [(35 53 51 98) 35]
Test Case: 612 | Input/Output: [(-50 -95 70 95) -95]
Test Case: 613 | Input/Output: [(-73 -86 -45 -19) -86]
Test Case: 614 | Input/Output: [(8 26 51 31) 8]
Test Case: 615 | Input/Output: [(19 -16 -29 -99) -99]
Test Case: 616 | Input/Output: [(2 83 70 -96) -96]
Test Case: 617 | Input/Output: [(-45 78 81 34) -45]
Test Case: 618 | Input/Output: [(-92 88 30 -29) -92]
Test Case: 619 | Input/Output: [(-87 -79 -98 79) -98]
Test Case: 620 | Input/Output: [(-32 67 44 77) -32]
Test Case: 621 | Input/Output: [(89 -88 41 68) -88]
Test Case: 622 | Input/Output: [(-91 -69 40 24) -91]
Test Case: 623 | Input/Output: [(40 35 -1 87) -1]
Test Case: 624 | Input/Output: [(-84 10 24 -71) -84]
Test Case: 625 | Input/Output: [(-50 5 29 13) -50]
Test Case: 626 | Input/Output: [(-51 -61 -19 33) -61]
Test Case: 627 | Input/Output: [(-37 24 -44 15) -44]
Test Case: 628 | Input/Output: [(-11 -38 -95 -87) -95]
Test Case: 629 | Input/Output: [(66 5 88 -26) -26]
Test Case: 630 | Input/Output: [(-97 83 29 -9) -97]
Test Case: 631 | Input/Output: [(7 -71 21 -21) -71]
Test Case: 632 | Input/Output: [(75 18 34 -100) -100]
Test Case: 633 | Input/Output: [(-48 -88 57 61) -88]
Test Case: 634 | Input/Output: [(87 -54 -58 -55) -58]
Test Case: 635 | Input/Output: [(-53 -28 53 48) -53]
Test Case: 636 | Input/Output: [(65 71 -20 -13) -20]
Test Case: 637 | Input/Output: [(-85 -61 79 -22) -85]
Test Case: 638 | Input/Output: [(-19 -57 -47 -12) -57]
Test Case: 639 | Input/Output: [(-95 98 -31 8) -95]
Test Case: 640 | Input/Output: [(69 51 18 17) 17]
Test Case: 641 | Input/Output: [(76 -42 -52 65) -52]
Test Case: 642 | Input/Output: [(13 -92 -23 -2) -92]
Test Case: 643 | Input/Output: [(-44 -37 -60 -47) -60]
Test Case: 644 | Input/Output: [(85 -62 63 49) -62]
Test Case: 645 | Input/Output: [(53 -51 29 -19) -51]
Test Case: 646 | Input/Output: [(-29 -84 18 1) -84]
Test Case: 647 | Input/Output: [(22 -76 84 6) -76]
Test Case: 648 | Input/Output: [(-89 -44 -24 57) -89]
Test Case: 649 | Input/Output: [(-93 44 3 19) -93]
Test Case: 650 | Input/Output: [(5 -82 91 57) -82]
Test Case: 651 | Input/Output: [(95 -14 -1 12) -14]
Test Case: 652 | Input/Output: [(-61 -98 32 58) -98]
Test Case: 653 | Input/Output: [(57 -38 -74 -19) -74]
Test Case: 654 | Input/Output: [(-1 -70 -63 5) -70]
Test Case: 655 | Input/Output: [(-83 77 0 -70) -83]
Test Case: 656 | Input/Output: [(-40 20 41 -26) -40]
Test Case: 657 | Input/Output: [(-72 39 -18 51) -72]
Test Case: 658 | Input/Output: [(-92 -90 -87 -27) -92]
Test Case: 659 | Input/Output: [(75 23 40 -50) -50]
Test Case: 660 | Input/Output: [(-15 39 -16 22) -16]
Test Case: 661 | Input/Output: [(-66 -83 -97 -46) -97]
Test Case: 662 | Input/Output: [(50 -59 -98 -42) -98]
Test Case: 663 | Input/Output: [(35 44 84 59) 35]
Test Case: 664 | Input/Output: [(-82 68 -24 -59) -82]
Test Case: 665 | Input/Output: [(-96 -96 -57 81) -96]
Test Case: 666 | Input/Output: [(0 -15 26 -12) -15]
Test Case: 667 | Input/Output: [(67 100 -26 46) -26]
Test Case: 668 | Input/Output: [(-4 -47 -61 -83) -83]
Test Case: 669 | Input/Output: [(56 -9 28 -86) -86]
Test Case: 670 | Input/Output: [(-3 19 -69 50) -69]
Test Case: 671 | Input/Output: [(3 -8 27 71) -8]
Test Case: 672 | Input/Output: [(-14 -10 -89 69) -89]
Test Case: 673 | Input/Output: [(-32 -27 52 68) -32]
Test Case: 674 | Input/Output: [(-79 -86 -67 -92) -92]
Test Case: 675 | Input/Output: [(48 -93 -67 10) -93]
Test Case: 676 | Input/Output: [(-37 -1 44 -32) -37]
Test Case: 677 | Input/Output: [(9 3 -50 34) -50]
Test Case: 678 | Input/Output: [(62 70 -7 -18) -18]
Test Case: 679 | Input/Output: [(-78 10 76 16) -78]
Test Case: 680 | Input/Output: [(59 -58 51 -75) -75]
Test Case: 681 | Input/Output: [(-9 -19 -91 -51) -91]
Test Case: 682 | Input/Output: [(33 -49 89 -30) -49]
Test Case: 683 | Input/Output: [(-94 16 -38 -74) -94]
Test Case: 684 | Input/Output: [(73 -55 3 84) -55]
Test Case: 685 | Input/Output: [(-29 -54 94 -99) -99]
Test Case: 686 | Input/Output: [(-61 -20 90 -73) -73]
Test Case: 687 | Input/Output: [(-9 -100 -56 -55) -100]
Test Case: 688 | Input/Output: [(11 -95 44 3) -95]
Test Case: 689 | Input/Output: [(66 -41 -83 -96) -96]
Test Case: 690 | Input/Output: [(-20 89 83 41) -20]
Test Case: 691 | Input/Output: [(24 79 81 3) 3]
Test Case: 692 | Input/Output: [(-36 46 30 -43) -43]
Test Case: 693 | Input/Output: [(-39 -5 -34 95) -39]
Test Case: 694 | Input/Output: [(76 18 -25 66) -25]
Test Case: 695 | Input/Output: [(-13 -43 -90 0) -90]
Test Case: 696 | Input/Output: [(62 68 -75 48) -75]
Test Case: 697 | Input/Output: [(59 -72 80 -56) -72]
Test Case: 698 | Input/Output: [(69 25 83 47) 25]
Test Case: 699 | Input/Output: [(-13 -90 -34 -92) -92]
Test Case: 700 | Input/Output: [(14 57 -85 9) -85]
Test Case: 701 | Input/Output: [(-69 -9 -52 4) -69]
Test Case: 702 | Input/Output: [(3 32 -86 -15) -86]
Test Case: 703 | Input/Output: [(99 34 -49 75) -49]
Test Case: 704 | Input/Output: [(52 87 -14 -88) -88]
Test Case: 705 | Input/Output: [(92 82 -38 -6) -38]
Test Case: 706 | Input/Output: [(65 6 -88 20) -88]
Test Case: 707 | Input/Output: [(17 -91 79 70) -91]
Test Case: 708 | Input/Output: [(-82 95 -45 -46) -82]
Test Case: 709 | Input/Output: [(85 28 -99 -79) -99]
Test Case: 710 | Input/Output: [(-53 -24 -22 -67) -67]
Test Case: 711 | Input/Output: [(83 -38 46 1) -38]
Test Case: 712 | Input/Output: [(60 -26 51 -38) -38]
Test Case: 713 | Input/Output: [(-93 -17 -31 -92) -93]
Test Case: 714 | Input/Output: [(49 92 -47 71) -47]
Test Case: 715 | Input/Output: [(-47 -45 -6 -71) -71]
Test Case: 716 | Input/Output: [(-38 10 98 50) -38]
Test Case: 717 | Input/Output: [(-78 18 80 7) -78]
Test Case: 718 | Input/Output: [(1 -14 54 -8) -14]
Test Case: 719 | Input/Output: [(-32 28 -86 -40) -86]
Test Case: 720 | Input/Output: [(-75 -41 -75 33) -75]
Test Case: 721 | Input/Output: [(-60 -61 -31 -28) -61]
Test Case: 722 | Input/Output: [(75 -94 -20 -31) -94]
Test Case: 723 | Input/Output: [(94 -20 -7 -66) -66]
Test Case: 724 | Input/Output: [(-19 -57 53 54) -57]
Test Case: 725 | Input/Output: [(-67 98 -61 -79) -79]
Test Case: 726 | Input/Output: [(61 -35 25 -45) -45]
Test Case: 727 | Input/Output: [(21 25 42 -34) -34]
Test Case: 728 | Input/Output: [(-83 66 2 92) -83]
Test Case: 729 | Input/Output: [(-77 63 0 -71) -77]
Test Case: 730 | Input/Output: [(29 -12 14 33) -12]
Test Case: 731 | Input/Output: [(-21 -23 71 6) -23]
Test Case: 732 | Input/Output: [(-25 -90 -79 34) -90]
Test Case: 733 | Input/Output: [(20 3 -63 -12) -63]
Test Case: 734 | Input/Output: [(-26 -51 26 31) -51]
Test Case: 735 | Input/Output: [(-62 97 -20 -33) -62]
Test Case: 736 | Input/Output: [(-32 -18 -2 -36) -36]
Test Case: 737 | Input/Output: [(56 95 60 -83) -83]
Test Case: 738 | Input/Output: [(68 83 90 59) 59]
Test Case: 739 | Input/Output: [(48 95 -30 -16) -30]
Test Case: 740 | Input/Output: [(95 -3 87 43) -3]
Test Case: 741 | Input/Output: [(-43 -34 -34 -27) -43]
Test Case: 742 | Input/Output: [(78 -51 93 -84) -84]
Test Case: 743 | Input/Output: [(51 -54 18 13) -54]
Test Case: 744 | Input/Output: [(20 -40 -26 -1) -40]
Test Case: 745 | Input/Output: [(65 85 -32 -52) -52]
Test Case: 746 | Input/Output: [(94 34 6 73) 6]
Test Case: 747 | Input/Output: [(14 -66 -80 -55) -80]
Test Case: 748 | Input/Output: [(-85 84 -83 -2) -85]
Test Case: 749 | Input/Output: [(-47 49 68 94) -47]
Test Case: 750 | Input/Output: [(86 26 -31 -44) -44]
Test Case: 751 | Input/Output: [(6 -79 -15 34) -79]
Test Case: 752 | Input/Output: [(-46 -63 29 -77) -77]
Test Case: 753 | Input/Output: [(-69 78 -9 97) -69]
Test Case: 754 | Input/Output: [(-66 -100 -8 -59) -100]
Test Case: 755 | Input/Output: [(-89 85 58 92) -89]
Test Case: 756 | Input/Output: [(49 31 72 79) 31]
Test Case: 757 | Input/Output: [(-82 -93 -42 -90) -93]
Test Case: 758 | Input/Output: [(42 98 -1 -86) -86]
Test Case: 759 | Input/Output: [(13 81 48 100) 13]
Test Case: 760 | Input/Output: [(88 -52 94 80) -52]
Test Case: 761 | Input/Output: [(-27 0 -85 -24) -85]
Test Case: 762 | Input/Output: [(50 -82 -60 74) -82]
Test Case: 763 | Input/Output: [(-76 6 31 29) -76]
Test Case: 764 | Input/Output: [(19 97 7 -46) -46]
Test Case: 765 | Input/Output: [(83 -80 67 -24) -80]
Test Case: 766 | Input/Output: [(73 93 30 69) 30]
Test Case: 767 | Input/Output: [(-88 -33 49 72) -88]
Test Case: 768 | Input/Output: [(79 59 -100 -12) -100]
Test Case: 769 | Input/Output: [(-65 -67 13 55) -67]
Test Case: 770 | Input/Output: [(86 -43 -90 91) -90]
Test Case: 771 | Input/Output: [(-61 -60 -59 20) -61]
Test Case: 772 | Input/Output: [(-5 12 -64 -59) -64]
Test Case: 773 | Input/Output: [(-95 -64 -97 -6) -97]
Test Case: 774 | Input/Output: [(-61 -58 -22 -38) -61]
Test Case: 775 | Input/Output: [(-12 39 -44 -60) -60]
Test Case: 776 | Input/Output: [(31 -79 90 -59) -79]
Test Case: 777 | Input/Output: [(-49 10 -99 2) -99]
Test Case: 778 | Input/Output: [(64 26 70 3) 3]
Test Case: 779 | Input/Output: [(-33 26 -53 6) -53]
Test Case: 780 | Input/Output: [(-70 97 76 67) -70]
Test Case: 781 | Input/Output: [(-65 48 -35 -20) -65]
Test Case: 782 | Input/Output: [(-94 51 61 -33) -94]
Test Case: 783 | Input/Output: [(-61 -71 -6 6) -71]
Test Case: 784 | Input/Output: [(22 -80 35 75) -80]
Test Case: 785 | Input/Output: [(-38 -13 88 86) -38]
Test Case: 786 | Input/Output: [(56 73 56 14) 14]
Test Case: 787 | Input/Output: [(98 0 51 -25) -25]
Test Case: 788 | Input/Output: [(-89 66 77 32) -89]
Test Case: 789 | Input/Output: [(20 81 23 -43) -43]
Test Case: 790 | Input/Output: [(-53 17 32 -3) -53]
Test Case: 791 | Input/Output: [(-34 100 2 99) -34]
Test Case: 792 | Input/Output: [(27 -98 90 87) -98]
Test Case: 793 | Input/Output: [(9 -27 -32 -91) -91]
Test Case: 794 | Input/Output: [(-72 66 -99 -10) -99]
Test Case: 795 | Input/Output: [(-30 -76 2 -94) -94]
Test Case: 796 | Input/Output: [(64 -100 -87 -47) -100]
Test Case: 797 | Input/Output: [(-44 52 85 34) -44]
Test Case: 798 | Input/Output: [(-6 32 45 48) -6]
Test Case: 799 | Input/Output: [(64 -71 -7 26) -71]
Test Case: 800 | Input/Output: [(39 47 -77 51) -77]
Test Case: 801 | Input/Output: [(-33 -60 -82 -23) -82]
Test Case: 802 | Input/Output: [(-51 -78 81 67) -78]
Test Case: 803 | Input/Output: [(-41 36 25 78) -41]
Test Case: 804 | Input/Output: [(39 -48 -85 61) -85]
Test Case: 805 | Input/Output: [(69 27 46 -59) -59]
Test Case: 806 | Input/Output: [(20 -63 51 -6) -63]
Test Case: 807 | Input/Output: [(-46 51 -17 -6) -46]
Test Case: 808 | Input/Output: [(-2 -75 -86 -57) -86]
Test Case: 809 | Input/Output: [(9 -25 -3 -68) -68]
Test Case: 810 | Input/Output: [(32 -96 52 -12) -96]
Test Case: 811 | Input/Output: [(49 43 36 65) 36]
Test Case: 812 | Input/Output: [(31 45 -20 9) -20]
Test Case: 813 | Input/Output: [(-84 -56 31 -98) -98]
Test Case: 814 | Input/Output: [(40 -95 -73 -42) -95]
Test Case: 815 | Input/Output: [(-4 -36 43 -30) -36]
Test Case: 816 | Input/Output: [(-25 30 -97 2) -97]
Test Case: 817 | Input/Output: [(81 58 -37 3) -37]
Test Case: 818 | Input/Output: [(51 39 47 67) 39]
Test Case: 819 | Input/Output: [(-71 74 26 -18) -71]
Test Case: 820 | Input/Output: [(41 28 17 47) 17]
Test Case: 821 | Input/Output: [(95 11 59 -94) -94]
Test Case: 822 | Input/Output: [(0 -38 32 -7) -38]
Test Case: 823 | Input/Output: [(-58 -70 -15 -35) -70]
Test Case: 824 | Input/Output: [(96 1 31 -9) -9]
Test Case: 825 | Input/Output: [(62 68 -75 91) -75]
Test Case: 826 | Input/Output: [(76 -26 13 -62) -62]
Test Case: 827 | Input/Output: [(29 59 -38 -47) -47]
Test Case: 828 | Input/Output: [(0 49 61 24) 0]
Test Case: 829 | Input/Output: [(66 -18 -99 29) -99]
Test Case: 830 | Input/Output: [(-20 70 73 -9) -20]
Test Case: 831 | Input/Output: [(86 -67 -90 -77) -90]
Test Case: 832 | Input/Output: [(-95 30 15 10) -95]
Test Case: 833 | Input/Output: [(56 -14 63 90) -14]
Test Case: 834 | Input/Output: [(89 67 46 52) 46]
Test Case: 835 | Input/Output: [(-60 84 49 22) -60]
Test Case: 836 | Input/Output: [(-1 14 11 92) -1]
Test Case: 837 | Input/Output: [(45 54 46 -39) -39]
Test Case: 838 | Input/Output: [(61 4 -13 -50) -50]
Test Case: 839 | Input/Output: [(20 -78 94 30) -78]
Test Case: 840 | Input/Output: [(-6 38 -12 37) -12]
Test Case: 841 | Input/Output: [(-41 -90 93 8) -90]
Test Case: 842 | Input/Output: [(-74 85 -35 43) -74]
Test Case: 843 | Input/Output: [(-46 70 71 66) -46]
Test Case: 844 | Input/Output: [(21 -19 -81 56) -81]
Test Case: 845 | Input/Output: [(-40 -98 -88 -94) -98]
Test Case: 846 | Input/Output: [(65 -71 -76 -8) -76]
Test Case: 847 | Input/Output: [(68 60 61 61) 60]
Test Case: 848 | Input/Output: [(15 -74 -85 -98) -98]
Test Case: 849 | Input/Output: [(85 36 -82 24) -82]
Test Case: 850 | Input/Output: [(-29 38 -30 -60) -60]
Test Case: 851 | Input/Output: [(-21 4 -64 -38) -64]
Test Case: 852 | Input/Output: [(-31 95 -31 -14) -31]
Test Case: 853 | Input/Output: [(95 37 -55 -95) -95]
Test Case: 854 | Input/Output: [(-85 22 -46 -36) -85]
Test Case: 855 | Input/Output: [(9 75 59 81) 9]
Test Case: 856 | Input/Output: [(52 65 -97 -66) -97]
Test Case: 857 | Input/Output: [(-63 -34 -11 69) -63]
Test Case: 858 | Input/Output: [(-94 52 -40 83) -94]
Test Case: 859 | Input/Output: [(-48 -51 -2 96) -51]
Test Case: 860 | Input/Output: [(57 69 7 -60) -60]
Test Case: 861 | Input/Output: [(19 -31 85 87) -31]
Test Case: 862 | Input/Output: [(-81 6 85 85) -81]
Test Case: 863 | Input/Output: [(67 -7 47 77) -7]
Test Case: 864 | Input/Output: [(-86 27 -43 -36) -86]
Test Case: 865 | Input/Output: [(84 72 -1 -48) -48]
Test Case: 866 | Input/Output: [(-77 -92 53 7) -92]
Test Case: 867 | Input/Output: [(55 79 48 -37) -37]
Test Case: 868 | Input/Output: [(-8 0 53 25) -8]
Test Case: 869 | Input/Output: [(-62 -92 -11 -53) -92]
Test Case: 870 | Input/Output: [(17 38 22 -12) -12]
Test Case: 871 | Input/Output: [(24 33 28 9) 9]
Test Case: 872 | Input/Output: [(33 13 93 77) 13]
Test Case: 873 | Input/Output: [(-69 98 -70 -74) -74]
Test Case: 874 | Input/Output: [(38 14 78 -85) -85]
Test Case: 875 | Input/Output: [(-30 41 -58 84) -58]
Test Case: 876 | Input/Output: [(16 81 7 -20) -20]
Test Case: 877 | Input/Output: [(37 8 -88 30) -88]
Test Case: 878 | Input/Output: [(76 36 -59 82) -59]
Test Case: 879 | Input/Output: [(-80 -5 -28 94) -80]
Test Case: 880 | Input/Output: [(-17 8 -85 -69) -85]
Test Case: 881 | Input/Output: [(-63 -92 14 -74) -92]
Test Case: 882 | Input/Output: [(15 -59 -42 31) -59]
Test Case: 883 | Input/Output: [(5 6 89 -51) -51]
Test Case: 884 | Input/Output: [(-96 20 -57 -16) -96]
Test Case: 885 | Input/Output: [(26 23 55 -44) -44]
Test Case: 886 | Input/Output: [(-95 -45 33 -89) -95]
Test Case: 887 | Input/Output: [(-19 -82 29 -50) -82]
Test Case: 888 | Input/Output: [(-75 -33 2 -7) -75]
Test Case: 889 | Input/Output: [(-38 -31 37 -67) -67]
Test Case: 890 | Input/Output: [(-43 -95 7 -93) -95]
Test Case: 891 | Input/Output: [(-31 92 -82 46) -82]
Test Case: 892 | Input/Output: [(-45 61 -8 13) -45]
Test Case: 893 | Input/Output: [(88 -50 -4 31) -50]
Test Case: 894 | Input/Output: [(-78 100 -1 29) -78]
Test Case: 895 | Input/Output: [(41 45 70 8) 8]
Test Case: 896 | Input/Output: [(61 28 -50 41) -50]
Test Case: 897 | Input/Output: [(25 18 77 9) 9]
Test Case: 898 | Input/Output: [(-10 -97 -29 -70) -97]
Test Case: 899 | Input/Output: [(-41 0 -5 10) -41]
Test Case: 900 | Input/Output: [(64 85 48 88) 48]
Test Case: 901 | Input/Output: [(12 -52 -8 41) -52]
Test Case: 902 | Input/Output: [(66 -87 -25 -7) -87]
Test Case: 903 | Input/Output: [(20 -33 10 -94) -94]
Test Case: 904 | Input/Output: [(60 -40 43 50) -40]
Test Case: 905 | Input/Output: [(66 99 80 -78) -78]
Test Case: 906 | Input/Output: [(-23 25 0 9) -23]
Test Case: 907 | Input/Output: [(24 -26 69 23) -26]
Test Case: 908 | Input/Output: [(-2 -83 62 98) -83]
Test Case: 909 | Input/Output: [(80 87 -12 -66) -66]
Test Case: 910 | Input/Output: [(23 44 29 -84) -84]
Test Case: 911 | Input/Output: [(-42 39 71 39) -42]
Test Case: 912 | Input/Output: [(-10 -62 60 -12) -62]
Test Case: 913 | Input/Output: [(-12 74 -99 -5) -99]
Test Case: 914 | Input/Output: [(-90 -29 -59 54) -90]
Test Case: 915 | Input/Output: [(94 9 59 -46) -46]
Test Case: 916 | Input/Output: [(-96 3 -15 52) -96]
Test Case: 917 | Input/Output: [(-5 -93 39 -76) -93]
Test Case: 918 | Input/Output: [(-10 100 -18 77) -18]
Test Case: 919 | Input/Output: [(32 -75 3 42) -75]
Test Case: 920 | Input/Output: [(16 -58 70 98) -58]
Test Case: 921 | Input/Output: [(-4 -13 -4 36) -13]
Test Case: 922 | Input/Output: [(-58 92 -83 84) -83]
Test Case: 923 | Input/Output: [(1 -21 -61 68) -61]
Test Case: 924 | Input/Output: [(70 94 -80 -89) -89]
Test Case: 925 | Input/Output: [(-8 -53 -72 -61) -72]
Test Case: 926 | Input/Output: [(-49 52 -41 -97) -97]
Test Case: 927 | Input/Output: [(-41 -87 -84 19) -87]
Test Case: 928 | Input/Output: [(-64 -9 -5 -59) -64]
Test Case: 929 | Input/Output: [(16 -12 -76 -24) -76]
Test Case: 930 | Input/Output: [(-20 -69 9 -4) -69]
Test Case: 931 | Input/Output: [(71 -24 2 61) -24]
Test Case: 932 | Input/Output: [(54 -15 -85 15) -85]
Test Case: 933 | Input/Output: [(19 -66 -70 -34) -70]
Test Case: 934 | Input/Output: [(33 3 32 -68) -68]
Test Case: 935 | Input/Output: [(72 -49 -91 -29) -91]
Test Case: 936 | Input/Output: [(40 39 73 62) 39]
Test Case: 937 | Input/Output: [(-35 93 -92 -19) -92]
Test Case: 938 | Input/Output: [(-59 46 -96 -50) -96]
Test Case: 939 | Input/Output: [(-84 -98 -50 30) -98]
Test Case: 940 | Input/Output: [(23 72 -9 -59) -59]
Test Case: 941 | Input/Output: [(11 34 74 -82) -82]
Test Case: 942 | Input/Output: [(-26 -63 -40 -46) -63]
Test Case: 943 | Input/Output: [(4 42 -6 -35) -35]
Test Case: 944 | Input/Output: [(31 -75 96 -52) -75]
Test Case: 945 | Input/Output: [(-5 -85 -69 -44) -85]
Test Case: 946 | Input/Output: [(-73 -20 -57 -46) -73]
Test Case: 947 | Input/Output: [(-52 22 -42 -60) -60]
Test Case: 948 | Input/Output: [(-46 -78 -14 -37) -78]
Test Case: 949 | Input/Output: [(-72 -84 91 -42) -84]
Test Case: 950 | Input/Output: [(-18 3 -90 -93) -93]
Test Case: 951 | Input/Output: [(-93 63 98 95) -93]
Test Case: 952 | Input/Output: [(6 19 -24 -18) -24]
Test Case: 953 | Input/Output: [(51 -47 -95 18) -95]
Test Case: 954 | Input/Output: [(46 -49 -92 -83) -92]
Test Case: 955 | Input/Output: [(-94 -22 -2 -74) -94]
Test Case: 956 | Input/Output: [(97 -93 -58 28) -93]
Test Case: 957 | Input/Output: [(12 -3 96 23) -3]
Test Case: 958 | Input/Output: [(73 -95 -1 10) -95]
Test Case: 959 | Input/Output: [(-83 70 92 -97) -97]
Test Case: 960 | Input/Output: [(-32 -37 -12 -38) -38]
Test Case: 961 | Input/Output: [(63 -8 -48 -22) -48]
Test Case: 962 | Input/Output: [(-32 63 -54 -76) -76]
Test Case: 963 | Input/Output: [(-10 -29 55 -17) -29]
Test Case: 964 | Input/Output: [(27 -39 -76 57) -76]
Test Case: 965 | Input/Output: [(-17 76 -70 29) -70]
Test Case: 966 | Input/Output: [(-66 -40 -46 -27) -66]
Test Case: 967 | Input/Output: [(70 75 -52 70) -52]
Test Case: 968 | Input/Output: [(11 100 -68 34) -68]
Test Case: 969 | Input/Output: [(-84 -2 100 82) -84]
Test Case: 970 | Input/Output: [(58 -80 -50 -33) -80]
Test Case: 971 | Input/Output: [(56 -14 2 8) -14]
Test Case: 972 | Input/Output: [(-5 -29 58 -48) -48]
Test Case: 973 | Input/Output: [(-64 -84 -55 -78) -84]
Test Case: 974 | Input/Output: [(70 -57 9 -3) -57]
Test Case: 975 | Input/Output: [(36 37 -87 -18) -87]
Test Case: 976 | Input/Output: [(-26 -4 83 14) -26]
Test Case: 977 | Input/Output: [(-45 -42 -83 -28) -83]
Test Case: 978 | Input/Output: [(-81 -53 -56 -50) -81]
Test Case: 979 | Input/Output: [(-88 -52 -58 -66) -88]
Test Case: 980 | Input/Output: [(-23 -64 -39 -72) -72]
Test Case: 981 | Input/Output: [(-58 -39 0 66) -58]
Test Case: 982 | Input/Output: [(22 28 80 40) 22]
Test Case: 983 | Input/Output: [(-74 14 78 -65) -74]
Test Case: 984 | Input/Output: [(69 -97 52 -88) -97]
Test Case: 985 | Input/Output: [(63 100 2 -51) -51]
Test Case: 986 | Input/Output: [(-15 -89 68 -21) -89]
Test Case: 987 | Input/Output: [(63 -66 -46 -100) -100]
Test Case: 988 | Input/Output: [(88 -61 -73 45) -73]
Test Case: 989 | Input/Output: [(18 15 81 1) 1]
Test Case: 990 | Input/Output: [(62 -4 -89 -25) -89]
Test Case: 991 | Input/Output: [(71 29 99 50) 29]
Test Case: 992 | Input/Output: [(-70 -59 -30 90) -70]
Test Case: 993 | Input/Output: [(-60 -47 13 20) -60]
Test Case: 994 | Input/Output: [(32 -67 -60 86) -67]
Test Case: 995 | Input/Output: [(96 82 7 83) 7]
Test Case: 996 | Input/Output: [(-46 59 48 -3) -46]
Test Case: 997 | Input/Output: [(-25 -55 -94 80) -94]
Test Case: 998 | Input/Output: [(-87 -46 21 26) -87]
Test Case: 999 | Input/Output: [(60 37 -39 53) -39]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -102 -36 25 -80 70 106 60 90 117 7 4 63 79 37 42 -61
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-8 -8 -8 62] -8] [[-51 -51 -51 5] -51] [[-96 -96 -7 -96] -96] [[-85 -85 -85 85] -85] [[-72 91 -72 -72] -72] [[83 83 -53 83] -53] [[50 50 -81 50] -81] [[-24 -24 -46 -24] -46] [[72 -23 -23 -23] -23] [[27 27 27 -33] -33] [(-67 -67 -67 -67) -67] [(-62 -62 -62 -62) -62] [(18 18 18 18) 18] [(-46 -46 -46 -46) -46] [(-81 -81 -81 -81) -81] [(85 6 99 67) 6] [(74 49 30 97) 30] [(50 42 3 98) 3] [(69 49 6 84) 6] [(80 64 46 77) 46] [(98 73 39 36) 36] [(7 21 97 77) 7] [(30 28 57 33) 28] [(97 19 12 37) 12] [(36 71 31 64) 31] [(97 27 52 78) 27] [(80 58 26 91) 26] [(54 14 39 78) 14] [(27 89 44 57) 27] [(38 31 87 26) 26] [(27 89 90 53) 27] [(11 22 24 45) 11] [(28 78 63 55) 28] [(64 9 63 85) 9] [(38 78 5 83) 5] [(-85 21 -25 -57) -85] [(-62 -31 -17 -3) -62] [(21 23 40 58) 21] [(-32 -44 -86 -35) -86] [(67 -77 -39 68) -77] [(-47 10 78 -11) -47] [(-14 26 32 -24) -24] [(-83 54 43 -83) -83] [(3 -46 100 -54) -54] [(65 71 -39 50) -39] [(-92 64 -26 -17) -92] [(29 -71 -72 28) -72] [(8 -16 36 -13) -16] [(-83 -26 -95 100) -95] [(99 70 -2 -43) -43] [(15 -37 68 79) -37] [(-76 38 -53 95) -76] [(87 -96 -29 -33) -96] [(-9 -93 -30 31) -93] [(54 12 20 -24) -24] [(20 -72 95 53) -72] [(-7 93 -17 67) -17] [(17 53 -41 9) -41] [(-90 -82 -71 59) -90] [(10 -35 55 -30) -35] [(51 90 42 64) 42] [(-31 56 -60 42) -60] [(-97 61 79 41) -97] [(92 42 33 -8) -8] [(-56 -3 31 16) -56] [(39 -28 85 -57) -57] [(21 -55 40 43) -55] [(-51 -55 86 61) -55] [(-65 12 -13 27) -65] [(76 -5 -38 -99) -99] [(-53 68 -53 61) -53] [(-78 96 -3 42) -78] [(-27 -80 64 44) -80] [(-34 25 -96 -49) -96] [(69 -71 -20 85) -71] [(57 -23 21 89) -23] [(85 76 -10 59) -10] [(74 -36 -64 -64) -64] [(2 -44 -43 -32) -44] [(-39 -68 -65 -26) -68] [(-6 -16 77 -48) -48] [(52 89 3 1) 1] [(-54 -69 -92 -73) -92] [(64 -31 -89 43) -89] [(-34 83 -13 0) -34] [(41 91 -20 65) -20] [(64 -79 45 -32) -79] [(-84 -83 23 43) -84] [(57 -15 -91 -32) -91] [(3 45 -47 -99) -99] [(-88 -85 -84 -58) -88] [(-77 20 -43 49) -77] [(-19 -67 77 15) -67] [(14 -77 91 -62) -77] [(84 -52 -30 -26) -52])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 99                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 39                 
Correct output: 7                   | Program output: 97                 
Correct output: 28                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 27                  | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 27                  | Program output: 44                 
Correct output: 26                  | Program output: 87                 
Correct output: 27                  | Program output: 90                 
Correct output: 11                  | Program output: 24                 
Correct output: 28                  | Program output: 63                 
Correct output: 9                   | Program output: 63                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -25                
Correct output: -62                 | Program output: -17                
Correct output: 21                  | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -39                
Correct output: -47                 | Program output: 78                 
Correct output: -24                 | Program output: 32                 
Correct output: -83                 | Program output: 43                 
Correct output: -54                 | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -16                 | Program output: 36                 
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -2                 
Correct output: -37                 | Program output: 68                 
Correct output: -76                 | Program output: -53                
Correct output: -96                 | Program output: -29                
Correct output: -93                 | Program output: -30                
Correct output: -24                 | Program output: 20                 
Correct output: -72                 | Program output: 95                 
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -71                
Correct output: -35                 | Program output: 55                 
Correct output: 42                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 79                 
Correct output: -8                  | Program output: 33                 
Correct output: -56                 | Program output: 31                 
Correct output: -57                 | Program output: 85                 
Correct output: -55                 | Program output: 40                 
Correct output: -55                 | Program output: 86                 
Correct output: -65                 | Program output: -13                
Correct output: -99                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -3                 
Correct output: -80                 | Program output: 64                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -20                
Correct output: -23                 | Program output: 21                 
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -43                
Correct output: -68                 | Program output: -65                
Correct output: -48                 | Program output: 77                 
Correct output: 1                   | Program output: 3                  
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: -13                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 45                 
Correct output: -84                 | Program output: 23                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -47                
Correct output: -88                 | Program output: -84                
Correct output: -77                 | Program output: -43                
Correct output: -67                 | Program output: 77                 
Correct output: -77                 | Program output: 91                 
Correct output: -52                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction tagged_510} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_when})
Lexicase best program: (boolean_pop exec_eq exec_dup_items exec_stackdepth boolean_dup exec_noop exec_noop exec_do*while (integer_mult boolean_dup_times in3 tagged_510 integer_gt) exec_if (exec_do*range (boolean_invert_second_then_and) in1) () exec_do*while (boolean_empty boolean_or print_integer exec_shove (exec_do*range () exec_dup_times (exec_if (integer_min) (exec_rot (exec_empty) (integer_fromboolean integer_rot) (integer_dec exec_noop exec_when ()))))))
Lexicase best errors: [0 1 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 48
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction tagged_510} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_when})
Zero cases best program: (boolean_pop exec_eq exec_dup_items exec_stackdepth boolean_dup exec_noop exec_noop exec_do*while (integer_mult boolean_dup_times in3 tagged_510 integer_gt) exec_if (exec_do*range (boolean_invert_second_then_and) in1) () exec_do*while (boolean_empty boolean_or print_integer exec_shove (exec_do*range () exec_dup_times (exec_if (integer_min) (exec_rot (exec_empty) (integer_fromboolean integer_rot) (integer_dec exec_noop exec_when ()))))))
Zero cases best errors: [0 1 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 48
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 2 10 7 3 3 9 3 3 3)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (9 2 10 7 3 3 9 3 3 3)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (integer_lt in3 print_integer exec_when (boolean_dup) print_boolean exec_while (exec_swap (exec_y_when_autoconstructing ()) ()))
Errors: [0 1 0 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 9
Size: 15
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 9.948
Median total errors in population: 10
Error averages by case: (0.991 0.998 0.99 0.993 0.997 0.997 0.991 0.997 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.485
Average program size in population (points): 70.723
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 475493
--- Timings ---
Current time: 1559584134827 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.8 seconds, 28.4%
Fitness Testing:      1.8 seconds, 67.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: 72                 
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 85                 
Correct output: 30                  | Program output: 74                 
Correct output: 3                   | Program output: 50                 
Correct output: 6                   | Program output: 69                 
Correct output: 46                  | Program output: 80                 
Correct output: 36                  | Program output: 98                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 30                 
Correct output: 12                  | Program output: 97                 
Correct output: 31                  | Program output: 36                 
Correct output: 27                  | Program output: 97                 
Correct output: 26                  | Program output: 80                 
Correct output: 14                  | Program output: 54                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 64                 
Correct output: 5                   | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -32                
Correct output: -77                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -24                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 3                  
Correct output: -39                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: 29                 
Correct output: -16                 | Program output: 8                  
Correct output: -95                 | Program output: -83                
Correct output: -43                 | Program output: 99                 
Correct output: -37                 | Program output: 15                 
Correct output: -76                 | Program output: -76                
Correct output: -96                 | Program output: 87                 
Correct output: -93                 | Program output: -9                 
Correct output: -24                 | Program output: 54                 
Correct output: -72                 | Program output: 20                 
Correct output: -17                 | Program output: -7                 
Correct output: -41                 | Program output: 17                 
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: 10                 
Correct output: 42                  | Program output: 51                 
Correct output: -60                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -8                  | Program output: 92                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: 39                 
Correct output: -55                 | Program output: 21                 
Correct output: -55                 | Program output: -51                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 76                 
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -96                 | Program output: -34                
Correct output: -71                 | Program output: 69                 
Correct output: -23                 | Program output: 57                 
Correct output: -10                 | Program output: 85                 
Correct output: -64                 | Program output: 74                 
Correct output: -44                 | Program output: 2                  
Correct output: -68                 | Program output: -39                
Correct output: -48                 | Program output: -6                 
Correct output: 1                   | Program output: 52                 
Correct output: -92                 | Program output: -54                
Correct output: -89                 | Program output: 64                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 41                 
Correct output: -79                 | Program output: 64                 
Correct output: -84                 | Program output: -84                
Correct output: -91                 | Program output: 57                 
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -19                
Correct output: -77                 | Program output: 14                 
Correct output: -52                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Lexicase best program: (integer_dec integer_swap in1 boolean_flush print_integer boolean_eq boolean_dup_times integer_sub integer_dup integer_flush boolean_or -35 integer_swap exec_pop (integer_gte exec_rot (integer_gte integer_eq integer_lte) (boolean_swap boolean_dup_items exec_swap (exec_do*times (exec_while (boolean_dup_times boolean_dup boolean_flush in3))) ()) ()))
Lexicase best errors: [0 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Zero cases best program: (integer_dec integer_swap in1 boolean_flush print_integer boolean_eq boolean_dup_times integer_sub integer_dup integer_flush boolean_or -35 integer_swap exec_pop (integer_gte exec_rot (integer_gte integer_eq integer_lte) (boolean_swap boolean_dup_items exec_swap (exec_do*times (exec_while (boolean_dup_times boolean_dup boolean_flush in3))) ()) ()))
Zero cases best errors: [0 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (538 207 335 1000 335 206 1 332 207 207)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (538 207 335 0 335 206 1 332 207 207)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Best program: (integer_dec integer_swap in1 boolean_flush print_integer boolean_eq boolean_dup_times integer_sub integer_dup integer_flush boolean_or -35 integer_swap exec_pop (integer_gte exec_rot (integer_gte integer_eq integer_lte) (boolean_swap boolean_dup_items exec_swap (exec_do*times (exec_while (boolean_dup_times boolean_dup boolean_flush in3))) ()) ()))
Errors: [0 0 1 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 7.632
Median total errors in population: 8
Error averages by case: (0.462 0.793 0.665 1.0 0.665 0.794 0.999 0.668 0.793 0.793)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 39.561
Average program size in population (points): 54.276
Average percent parens in population: 0.263
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.505
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.467
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 840023
--- Timings ---
Current time: 1559584137039 milliseconds
Total Time:           5.0 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         2.2 seconds, 44.8%
Fitness Testing:      2.4 seconds, 47.3%
Report:               0.3 seconds,  5.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: 72                 
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 85                 
Correct output: 30                  | Program output: 74                 
Correct output: 3                   | Program output: 50                 
Correct output: 6                   | Program output: 69                 
Correct output: 46                  | Program output: 80                 
Correct output: 36                  | Program output: 98                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 30                 
Correct output: 12                  | Program output: 97                 
Correct output: 31                  | Program output: 36                 
Correct output: 27                  | Program output: 97                 
Correct output: 26                  | Program output: 80                 
Correct output: 14                  | Program output: 54                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 64                 
Correct output: 5                   | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -32                
Correct output: -77                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -24                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 3                  
Correct output: -39                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: 29                 
Correct output: -16                 | Program output: 8                  
Correct output: -95                 | Program output: -83                
Correct output: -43                 | Program output: 99                 
Correct output: -37                 | Program output: 15                 
Correct output: -76                 | Program output: -76                
Correct output: -96                 | Program output: 87                 
Correct output: -93                 | Program output: -9                 
Correct output: -24                 | Program output: 54                 
Correct output: -72                 | Program output: 20                 
Correct output: -17                 | Program output: -7                 
Correct output: -41                 | Program output: 17                 
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: 10                 
Correct output: 42                  | Program output: 51                 
Correct output: -60                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -8                  | Program output: 92                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: 39                 
Correct output: -55                 | Program output: 21                 
Correct output: -55                 | Program output: -51                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 76                 
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -96                 | Program output: -34                
Correct output: -71                 | Program output: 69                 
Correct output: -23                 | Program output: 57                 
Correct output: -10                 | Program output: 85                 
Correct output: -64                 | Program output: 74                 
Correct output: -44                 | Program output: 2                  
Correct output: -68                 | Program output: -39                
Correct output: -48                 | Program output: -6                 
Correct output: 1                   | Program output: 52                 
Correct output: -92                 | Program output: -54                
Correct output: -89                 | Program output: 64                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 41                 
Correct output: -79                 | Program output: 64                 
Correct output: -84                 | Program output: -84                
Correct output: -91                 | Program output: 57                 
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -19                
Correct output: -77                 | Program output: 14                 
Correct output: -52                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction -54} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_rot})
Lexicase best program: (exec_s (print_integer integer_gte) (boolean_dup_items) (integer_yank boolean_invert_first_then_and boolean_rot) in1 print_integer exec_k (integer_dup) (boolean_xor) integer_yank integer_gte print_integer integer_dup_items integer_mult in3 integer_rot integer_div exec_eq -54 boolean_yankdup exec_do*while (integer_empty integer_mod integer_gte integer_lt integer_swap exec_eq) integer_yank boolean_eq exec_stackdepth boolean_empty integer_rot)
Lexicase best errors: [0 1 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction -54} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_rot})
Zero cases best program: (exec_s (print_integer integer_gte) (boolean_dup_items) (integer_yank boolean_invert_first_then_and boolean_rot) in1 print_integer exec_k (integer_dup) (boolean_xor) integer_yank integer_gte print_integer integer_dup_items integer_mult in3 integer_rot integer_div exec_eq -54 boolean_yankdup exec_do*while (integer_empty integer_mod integer_gte integer_lt integer_swap exec_eq) integer_yank boolean_eq exec_stackdepth boolean_empty integer_rot)
Zero cases best errors: [0 1 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (792 105 493 192 493 1000 192 685 105 1000)
Population mean number of elite cases: 5.06
Count of perfect (error zero) individuals by case: (792 105 493 192 493 0 192 685 105 0)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Best program: (integer_dec integer_swap in1 boolean_flush print_integer boolean_eq boolean_dup_times integer_sub integer_dup integer_flush boolean_or -35 integer_swap exec_pop (integer_gte exec_rot (integer_gte integer_eq integer_lte) (boolean_swap boolean_dup_items exec_swap (exec_do*times (exec_while (boolean_dup_times boolean_dup boolean_flush in3))) ()) ()))
Errors: [0 1 0 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 6.943
Median total errors in population: 6
Error averages by case: (0.208 0.895 0.507 0.808 0.507 1.0 0.808 0.315 0.895 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 34.073
Average program size in population (points): 45.403
Average percent parens in population: 0.244
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.953
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.537
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1173150
--- Timings ---
Current time: 1559584139754 milliseconds
Total Time:           7.8 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.4 seconds, 56.2%
Fitness Testing:      2.8 seconds, 36.2%
Report:               0.5 seconds,  6.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 99                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 39                 
Correct output: 7                   | Program output: 97                 
Correct output: 28                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 27                  | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 27                  | Program output: 44                 
Correct output: 26                  | Program output: 87                 
Correct output: 27                  | Program output: 90                 
Correct output: 11                  | Program output: 24                 
Correct output: 28                  | Program output: 63                 
Correct output: 9                   | Program output: 63                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -25                
Correct output: -62                 | Program output: -17                
Correct output: 21                  | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -39                
Correct output: -47                 | Program output: 78                 
Correct output: -24                 | Program output: 32                 
Correct output: -83                 | Program output: 43                 
Correct output: -54                 | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -16                 | Program output: 36                 
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -2                 
Correct output: -37                 | Program output: 68                 
Correct output: -76                 | Program output: -53                
Correct output: -96                 | Program output: -29                
Correct output: -93                 | Program output: -30                
Correct output: -24                 | Program output: 20                 
Correct output: -72                 | Program output: 95                 
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -71                
Correct output: -35                 | Program output: 55                 
Correct output: 42                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 79                 
Correct output: -8                  | Program output: 33                 
Correct output: -56                 | Program output: 31                 
Correct output: -57                 | Program output: 85                 
Correct output: -55                 | Program output: 40                 
Correct output: -55                 | Program output: 86                 
Correct output: -65                 | Program output: -13                
Correct output: -99                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -3                 
Correct output: -80                 | Program output: 64                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -20                
Correct output: -23                 | Program output: 21                 
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -43                
Correct output: -68                 | Program output: -65                
Correct output: -48                 | Program output: 77                 
Correct output: 1                   | Program output: 3                  
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: -13                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 45                 
Correct output: -84                 | Program output: 23                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -47                
Correct output: -88                 | Program output: -84                
Correct output: -77                 | Program output: -43                
Correct output: -67                 | Program output: 77                 
Correct output: -77                 | Program output: 91                 
Correct output: -52                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction -24} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 1, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction in2})
Lexicase best program: (integer_div integer_dec -24 integer_pop integer_min exec_when () integer_stackdepth in3 print_integer boolean_dup_times boolean_yank integer_eq exec_yank in2)
Lexicase best errors: [0 1 1 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 16
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction -24} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 1, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction in2})
Zero cases best program: (integer_div integer_dec -24 integer_pop integer_min exec_when () integer_stackdepth in3 print_integer boolean_dup_times boolean_yank integer_eq exec_yank in2)
Zero cases best errors: [0 1 1 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 16
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (316 337 234 316 338 315 233 316 338 234)
Population mean number of elite cases: 2.98
Count of perfect (error zero) individuals by case: (316 337 234 316 338 315 233 316 338 234)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction -24} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 1, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction in2})
Best program: (integer_div integer_dec -24 integer_pop integer_min exec_when () integer_stackdepth in3 print_integer boolean_dup_times boolean_yank integer_eq exec_yank in2)
Errors: [0 1 1 0 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 14
Size: 16
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 7.023
Median total errors in population: 7
Error averages by case: (0.684 0.663 0.766 0.684 0.662 0.685 0.767 0.684 0.662 0.766)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.854
Average program size in population (points): 44.716
Average percent parens in population: 0.255
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.47525
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1489181
--- Timings ---
Current time: 1559584142284 milliseconds
Total Time:          10.3 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.3 seconds, 61.6%
Fitness Testing:      3.2 seconds, 30.9%
Report:               0.7 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: 72                 
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 85                 
Correct output: 30                  | Program output: 74                 
Correct output: 3                   | Program output: 50                 
Correct output: 6                   | Program output: 69                 
Correct output: 46                  | Program output: 80                 
Correct output: 36                  | Program output: 98                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 30                 
Correct output: 12                  | Program output: 97                 
Correct output: 31                  | Program output: 36                 
Correct output: 27                  | Program output: 97                 
Correct output: 26                  | Program output: 80                 
Correct output: 14                  | Program output: 54                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 64                 
Correct output: 5                   | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -32                
Correct output: -77                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -24                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 3                  
Correct output: -39                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: 29                 
Correct output: -16                 | Program output: 8                  
Correct output: -95                 | Program output: -83                
Correct output: -43                 | Program output: 99                 
Correct output: -37                 | Program output: 15                 
Correct output: -76                 | Program output: -76                
Correct output: -96                 | Program output: 87                 
Correct output: -93                 | Program output: -9                 
Correct output: -24                 | Program output: 54                 
Correct output: -72                 | Program output: 20                 
Correct output: -17                 | Program output: -7                 
Correct output: -41                 | Program output: 17                 
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: 10                 
Correct output: 42                  | Program output: 51                 
Correct output: -60                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -8                  | Program output: 92                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: 39                 
Correct output: -55                 | Program output: 21                 
Correct output: -55                 | Program output: -51                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 76                 
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -96                 | Program output: -34                
Correct output: -71                 | Program output: 69                 
Correct output: -23                 | Program output: 57                 
Correct output: -10                 | Program output: 85                 
Correct output: -64                 | Program output: 74                 
Correct output: -44                 | Program output: 2                  
Correct output: -68                 | Program output: -39                
Correct output: -48                 | Program output: -6                 
Correct output: 1                   | Program output: 52                 
Correct output: -92                 | Program output: -54                
Correct output: -89                 | Program output: 64                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 41                 
Correct output: -79                 | Program output: 64                 
Correct output: -84                 | Program output: -84                
Correct output: -91                 | Program output: 57                 
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -19                
Correct output: -77                 | Program output: 14                 
Correct output: -52                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Lexicase best program: (integer_dec integer_swap in1 boolean_flush print_integer boolean_eq boolean_dup_times integer_sub integer_dup integer_flush exec_k_when_autoconstructing (-35 integer_swap exec_pop (integer_gte exec_rot (integer_gte integer_eq integer_lte) (boolean_swap boolean_dup_items exec_swap (exec_do*times (exec_while (boolean_dup_times boolean_dup boolean_flush in3))) ()) ())) ())
Lexicase best errors: [0 1 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Zero cases best program: (integer_dec integer_swap in1 boolean_flush print_integer boolean_eq boolean_dup_times integer_sub integer_dup integer_flush exec_k_when_autoconstructing (-35 integer_swap exec_pop (integer_gte exec_rot (integer_gte integer_eq integer_lte) (boolean_swap boolean_dup_items exec_swap (exec_do*times (exec_while (boolean_dup_times boolean_dup boolean_flush in3))) ()) ())) ())
Zero cases best errors: [0 1 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 251 273 251 250 357 274 274 250 274)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (274 251 273 251 250 357 274 274 250 274)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_pop})
Best program: (exec_s (print_integer integer_gte) (boolean_dup_items) (integer_yank boolean_invert_first_then_and boolean_rot) in1 print_integer exec_k (integer_dup) (boolean_xor) integer_yank integer_gte print_integer in1 exec_dup (exec_do*times (integer_fromboolean) integer_pop))
Errors: [0 1 0 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 20
Size: 28
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.272
Median total errors in population: 6
Error averages by case: (0.726 0.749 0.727 0.749 0.75 0.643 0.726 0.726 0.75 0.726)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.544
Average program size in population (points): 44.553
Average percent parens in population: 0.261
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 5.960125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1815506
--- Timings ---
Current time: 1559584145472 milliseconds
Total Time:          13.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.7 seconds, 65.8%
Fitness Testing:      3.6 seconds, 27.2%
Report:               0.8 seconds,  6.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 99                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 39                 
Correct output: 7                   | Program output: 97                 
Correct output: 28                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 27                  | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 27                  | Program output: 44                 
Correct output: 26                  | Program output: 87                 
Correct output: 27                  | Program output: 90                 
Correct output: 11                  | Program output: 24                 
Correct output: 28                  | Program output: 63                 
Correct output: 9                   | Program output: 63                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -25                
Correct output: -62                 | Program output: -17                
Correct output: 21                  | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -39                
Correct output: -47                 | Program output: 78                 
Correct output: -24                 | Program output: 32                 
Correct output: -83                 | Program output: 43                 
Correct output: -54                 | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -16                 | Program output: 36                 
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -2                 
Correct output: -37                 | Program output: 68                 
Correct output: -76                 | Program output: -53                
Correct output: -96                 | Program output: -29                
Correct output: -93                 | Program output: -30                
Correct output: -24                 | Program output: 20                 
Correct output: -72                 | Program output: 95                 
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -71                
Correct output: -35                 | Program output: 55                 
Correct output: 42                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 79                 
Correct output: -8                  | Program output: 33                 
Correct output: -56                 | Program output: 31                 
Correct output: -57                 | Program output: 85                 
Correct output: -55                 | Program output: 40                 
Correct output: -55                 | Program output: 86                 
Correct output: -65                 | Program output: -13                
Correct output: -99                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -3                 
Correct output: -80                 | Program output: 64                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -20                
Correct output: -23                 | Program output: 21                 
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -43                
Correct output: -68                 | Program output: -65                
Correct output: -48                 | Program output: 77                 
Correct output: 1                   | Program output: 3                  
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: -13                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 45                 
Correct output: -84                 | Program output: 23                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -47                
Correct output: -88                 | Program output: -84                
Correct output: -77                 | Program output: -43                
Correct output: -67                 | Program output: 77                 
Correct output: -77                 | Program output: 91                 
Correct output: -52                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction -24} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 1, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1})
Lexicase best program: (integer_div integer_dec -24 integer_pop integer_min exec_when () integer_stackdepth in3 print_integer boolean_dup_times boolean_yank integer_eq exec_yank exec_if (exec_do*range (boolean_invert_second_then_and) in1) ())
Lexicase best errors: [0 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction -24} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 1, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1})
Zero cases best program: (integer_div integer_dec -24 integer_pop integer_min exec_when () integer_stackdepth in3 print_integer boolean_dup_times boolean_yank integer_eq exec_yank exec_if (exec_do*range (boolean_invert_second_then_and) in1) ())
Zero cases best errors: [0 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (81 81 81 81 559 336 337 1 81 477)
Population mean number of elite cases: 2.12
Count of perfect (error zero) individuals by case: (81 81 81 81 559 336 337 1 81 477)
Population mean number of perfect (error zero) cases: 2.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Best program: (in3 exec_dup (print_integer boolean_eq boolean_dup_times integer_sub integer_dup) integer_flush boolean_or -35 integer_swap exec_pop () integer_gte exec_rot (integer_gte integer_eq integer_lte boolean_swap boolean_dup_items exec_swap (exec_do*times (exec_while (boolean_dup_times boolean_dup boolean_flush in3))) ()) () ())
Errors: [0 0 0 0 0 1 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 26
Size: 36
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 7.885
Median total errors in population: 8
Error averages by case: (0.919 0.919 0.919 0.919 0.441 0.664 0.663 0.999 0.919 0.523)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.195
Average program size in population (points): 46.842
Average percent parens in population: 0.260
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.3995
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2139451
--- Timings ---
Current time: 1559584148116 milliseconds
Total Time:          16.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.8 seconds, 67.4%
Fitness Testing:      3.9 seconds, 24.5%
Report:               1.2 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -8                  | Program output: 62                 
Correct output: -51                 | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: 85                 
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 67                 
Correct output: 30                  | Program output: 97                 
Correct output: 3                   | Program output: 98                 
Correct output: 6                   | Program output: 84                 
Correct output: 46                  | Program output: 77                 
Correct output: 36                  | Program output: 36                 
Correct output: 7                   | Program output: 77                 
Correct output: 28                  | Program output: 33                 
Correct output: 12                  | Program output: 37                 
Correct output: 31                  | Program output: 64                 
Correct output: 27                  | Program output: 78                 
Correct output: 26                  | Program output: 91                 
Correct output: 14                  | Program output: 78                 
Correct output: 27                  | Program output: 57                 
Correct output: 26                  | Program output: 26                 
Correct output: 27                  | Program output: 53                 
Correct output: 11                  | Program output: 45                 
Correct output: 28                  | Program output: 55                 
Correct output: 9                   | Program output: 85                 
Correct output: 5                   | Program output: 83                 
Correct output: -85                 | Program output: -57                
Correct output: -62                 | Program output: -3                 
Correct output: 21                  | Program output: 58                 
Correct output: -86                 | Program output: -35                
Correct output: -77                 | Program output: 68                 
Correct output: -47                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -39                 | Program output: 50                 
Correct output: -92                 | Program output: -17                
Correct output: -72                 | Program output: 28                 
Correct output: -16                 | Program output: -13                
Correct output: -95                 | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: 79                 
Correct output: -76                 | Program output: 95                 
Correct output: -96                 | Program output: -33                
Correct output: -93                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -72                 | Program output: 53                 
Correct output: -17                 | Program output: 67                 
Correct output: -41                 | Program output: 9                  
Correct output: -90                 | Program output: 59                 
Correct output: -35                 | Program output: -30                
Correct output: 42                  | Program output: 64                 
Correct output: -60                 | Program output: 42                 
Correct output: -97                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -56                 | Program output: 16                 
Correct output: -57                 | Program output: -57                
Correct output: -55                 | Program output: 43                 
Correct output: -55                 | Program output: 61                 
Correct output: -65                 | Program output: 27                 
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: 61                 
Correct output: -78                 | Program output: 42                 
Correct output: -80                 | Program output: 44                 
Correct output: -96                 | Program output: -49                
Correct output: -71                 | Program output: 85                 
Correct output: -23                 | Program output: 89                 
Correct output: -10                 | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -32                
Correct output: -68                 | Program output: -26                
Correct output: -48                 | Program output: -48                
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: -73                
Correct output: -89                 | Program output: 43                 
Correct output: -34                 | Program output: 0                  
Correct output: -20                 | Program output: 65                 
Correct output: -79                 | Program output: -32                
Correct output: -84                 | Program output: 43                 
Correct output: -91                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -58                
Correct output: -77                 | Program output: 49                 
Correct output: -67                 | Program output: 15                 
Correct output: -77                 | Program output: -62                
Correct output: -52                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Lexicase best program: (in3 exec_dup (integer_stackdepth boolean_eq boolean_yankdup exec_shove (integer_dup) print_integer boolean_yank exec_eq in1 boolean_empty) integer_inc exec_dup_times (boolean_yankdup) integer_pop boolean_pop integer_eq integer_max in4 integer_max exec_when (integer_gte integer_gt integer_div integer_gte integer_yankdup exec_s (integer_sub) (print_exec () boolean_invert_first_then_and integer_mod exec_do*while (boolean_or)) ()))
Lexicase best errors: [0 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or})
Zero cases best program: (in3 exec_dup (integer_stackdepth boolean_eq boolean_yankdup exec_shove (integer_dup) print_integer boolean_yank exec_eq in1 boolean_empty) integer_inc exec_dup_times (boolean_yankdup) integer_pop boolean_pop integer_eq integer_max in4 integer_max exec_when (integer_gte integer_gt integer_div integer_gte integer_yankdup exec_s (integer_sub) (print_exec () boolean_invert_first_then_and integer_mod exec_do*while (boolean_or)) ()))
Zero cases best errors: [0 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (890 488 176 223 101 488 122 590 488 101)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (890 488 176 223 101 488 122 590 488 101)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_exec_108} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction -70} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_or})
Best program: (integer_inc in4 integer_gt integer_fromboolean exec_rot () (exec_stackdepth exec_y_when_autoconstructing (exec_dup () exec_noop) exec_dup_times () in2 integer_gt) (integer_mult print_integer) boolean_frominteger integer_eq tag_exec_108 (integer_dec in3 integer_min in1) exec_dup (exec_do*times (integer_fromboolean) integer_pop integer_gt integer_dup_items) integer_yankdup exec_do*while () exec_flush in4 -70 exec_swap (in3 boolean_or) ())
Errors: [0 1 1 0 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 35
Size: 48
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 6.333
Median total errors in population: 5
Error averages by case: (0.11 0.512 0.824 0.777 0.899 0.512 0.878 0.41 0.512 0.899)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.926
Average program size in population (points): 42.52
Average percent parens in population: 0.259
Minimum age in population: 6.0
Maximum age in population: 10.8125
Average age in population: 8.933875
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2474337
--- Timings ---
Current time: 1559584150648 milliseconds
Total Time:          18.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.7 seconds, 68.7%
Fitness Testing:      4.3 seconds, 23.1%
Report:               1.4 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 99                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 39                 
Correct output: 7                   | Program output: 97                 
Correct output: 28                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 27                  | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 27                  | Program output: 44                 
Correct output: 26                  | Program output: 87                 
Correct output: 27                  | Program output: 90                 
Correct output: 11                  | Program output: 24                 
Correct output: 28                  | Program output: 63                 
Correct output: 9                   | Program output: 63                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -25                
Correct output: -62                 | Program output: -17                
Correct output: 21                  | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -39                
Correct output: -47                 | Program output: 78                 
Correct output: -24                 | Program output: 32                 
Correct output: -83                 | Program output: 43                 
Correct output: -54                 | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -16                 | Program output: 36                 
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -2                 
Correct output: -37                 | Program output: 68                 
Correct output: -76                 | Program output: -53                
Correct output: -96                 | Program output: -29                
Correct output: -93                 | Program output: -30                
Correct output: -24                 | Program output: 20                 
Correct output: -72                 | Program output: 95                 
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -71                
Correct output: -35                 | Program output: 55                 
Correct output: 42                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 79                 
Correct output: -8                  | Program output: 33                 
Correct output: -56                 | Program output: 31                 
Correct output: -57                 | Program output: 85                 
Correct output: -55                 | Program output: 40                 
Correct output: -55                 | Program output: 86                 
Correct output: -65                 | Program output: -13                
Correct output: -99                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -3                 
Correct output: -80                 | Program output: 64                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -20                
Correct output: -23                 | Program output: 21                 
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -43                
Correct output: -68                 | Program output: -65                
Correct output: -48                 | Program output: 77                 
Correct output: 1                   | Program output: 3                  
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: -13                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 45                 
Correct output: -84                 | Program output: 23                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -47                
Correct output: -88                 | Program output: -84                
Correct output: -77                 | Program output: -43                
Correct output: -67                 | Program output: 77                 
Correct output: -77                 | Program output: 91                 
Correct output: -52                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_383} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4})
Lexicase best program: (exec_dup () boolean_yankdup boolean_shove boolean_eq boolean_invert_second_then_and exec_do*range (integer_yank integer_max exec_rot (integer_shove boolean_yankdup print_integer) (integer_shove exec_pop (boolean_invert_first_then_and exec_dup_items boolean_frominteger boolean_rot exec_stackdepth) exec_yankdup exec_yank integer_dec boolean_dup_times) (in3 integer_eq tagged_383) integer_sub exec_y (boolean_xor in4)))
Lexicase best errors: [0 0 0 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 38
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_383} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4})
Zero cases best program: (exec_dup () boolean_yankdup boolean_shove boolean_eq boolean_invert_second_then_and exec_do*range (integer_yank integer_max exec_rot (integer_shove boolean_yankdup print_integer) (integer_shove exec_pop (boolean_invert_first_then_and exec_dup_items boolean_frominteger boolean_rot exec_stackdepth) exec_yankdup exec_yank integer_dec boolean_dup_times) (in3 integer_eq tagged_383) integer_sub exec_y (boolean_xor in4)))
Zero cases best errors: [0 0 0 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 38
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (748 344 344 109 478 135 344 344 135 133)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (748 344 344 109 478 135 344 344 135 133)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction in2})
Best program: (integer_flush exec_eq integer_shove integer_lt boolean_invert_second_then_and boolean_not in3 print_integer boolean_dup_times boolean_yank integer_eq exec_yank in2)
Errors: [0 0 0 1 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 13
Size: 14
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 6.886
Median total errors in population: 8
Error averages by case: (0.252 0.656 0.656 0.891 0.522 0.865 0.656 0.656 0.865 0.867)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.021
Average program size in population (points): 42.583
Average percent parens in population: 0.264
Minimum age in population: 8.25
Maximum age in population: 12.109375
Average age in population: 10.369890625
Median age in population: 10.4296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2794439
--- Timings ---
Current time: 1559584153572 milliseconds
Total Time:          21.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.2 seconds, 70.2%
Fitness Testing:      4.6 seconds, 21.5%
Report:               1.7 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: 72                 
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 85                 
Correct output: 30                  | Program output: 74                 
Correct output: 3                   | Program output: 50                 
Correct output: 6                   | Program output: 69                 
Correct output: 46                  | Program output: 80                 
Correct output: 36                  | Program output: 98                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 30                 
Correct output: 12                  | Program output: 97                 
Correct output: 31                  | Program output: 36                 
Correct output: 27                  | Program output: 97                 
Correct output: 26                  | Program output: 80                 
Correct output: 14                  | Program output: 54                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 64                 
Correct output: 5                   | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -32                
Correct output: -77                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -24                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 3                  
Correct output: -39                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: 29                 
Correct output: -16                 | Program output: 8                  
Correct output: -95                 | Program output: -83                
Correct output: -43                 | Program output: 99                 
Correct output: -37                 | Program output: 15                 
Correct output: -76                 | Program output: -76                
Correct output: -96                 | Program output: 87                 
Correct output: -93                 | Program output: -9                 
Correct output: -24                 | Program output: 54                 
Correct output: -72                 | Program output: 20                 
Correct output: -17                 | Program output: -7                 
Correct output: -41                 | Program output: 17                 
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: 10                 
Correct output: 42                  | Program output: 51                 
Correct output: -60                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -8                  | Program output: 92                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: 39                 
Correct output: -55                 | Program output: 21                 
Correct output: -55                 | Program output: -51                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 76                 
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -96                 | Program output: -34                
Correct output: -71                 | Program output: 69                 
Correct output: -23                 | Program output: 57                 
Correct output: -10                 | Program output: 85                 
Correct output: -64                 | Program output: 74                 
Correct output: -44                 | Program output: 2                  
Correct output: -68                 | Program output: -39                
Correct output: -48                 | Program output: -6                 
Correct output: 1                   | Program output: 52                 
Correct output: -92                 | Program output: -54                
Correct output: -89                 | Program output: 64                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 41                 
Correct output: -79                 | Program output: 64                 
Correct output: -84                 | Program output: -84                
Correct output: -91                 | Program output: 57                 
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -19                
Correct output: -77                 | Program output: 14                 
Correct output: -52                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction -54} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_383} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4})
Lexicase best program: (exec_s (print_integer integer_gte) (boolean_dup_items) (integer_yank boolean_invert_first_then_and boolean_rot) in1 print_integer exec_k (integer_dup) (boolean_xor) integer_yank integer_gte print_integer integer_dup_items integer_mult in3 integer_rot integer_div exec_do*while (-54 boolean_yankdup exec_do*while (integer_empty integer_mod integer_gte integer_lt integer_swap exec_eq) integer_yank in3 integer_eq tagged_383) integer_sub exec_y (boolean_xor in4))
Lexicase best errors: [1 0 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction -54} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_383} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4})
Zero cases best program: (exec_s (print_integer integer_gte) (boolean_dup_items) (integer_yank boolean_invert_first_then_and boolean_rot) in1 print_integer exec_k (integer_dup) (boolean_xor) integer_yank integer_gte print_integer integer_dup_items integer_mult in3 integer_rot integer_div exec_do*while (-54 boolean_yankdup exec_do*while (integer_empty integer_mod integer_gte integer_lt integer_swap exec_eq) integer_yank in3 integer_eq tagged_383) integer_sub exec_y (boolean_xor in4))
Zero cases best errors: [1 0 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 412 502 296 298 116 503 799 297 411)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (1 412 502 296 298 116 503 799 297 411)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Best program: (integer_dec integer_swap in1 boolean_flush print_integer boolean_eq boolean_dup_times exec_swap (integer_dup) (integer_flush boolean_or -35 integer_swap exec_pop (integer_gte exec_rot (integer_gte integer_eq integer_lte) (exec_do*while (integer_empty integer_eq integer_lte) boolean_swap boolean_dup_items exec_swap (exec_do*times () exec_while (boolean_dup_times boolean_dup boolean_flush in3)) ()) ())))
Errors: [1 0 1 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 44
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.365
Median total errors in population: 7
Error averages by case: (0.999 0.588 0.498 0.704 0.702 0.884 0.497 0.201 0.703 0.589)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.205
Average program size in population (points): 38.405
Average percent parens in population: 0.254
Minimum age in population: 9.5
Maximum age in population: 13.921875
Average age in population: 11.9244453125
Median age in population: 11.984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3092405
--- Timings ---
Current time: 1559584156229 milliseconds
Total Time:          24.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.3 seconds, 71.5%
Fitness Testing:      5.0 seconds, 20.5%
Report:               1.8 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 99                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 39                 
Correct output: 7                   | Program output: 97                 
Correct output: 28                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 27                  | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 27                  | Program output: 44                 
Correct output: 26                  | Program output: 87                 
Correct output: 27                  | Program output: 90                 
Correct output: 11                  | Program output: 24                 
Correct output: 28                  | Program output: 63                 
Correct output: 9                   | Program output: 63                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -25                
Correct output: -62                 | Program output: -17                
Correct output: 21                  | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -39                
Correct output: -47                 | Program output: 78                 
Correct output: -24                 | Program output: 32                 
Correct output: -83                 | Program output: 43                 
Correct output: -54                 | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -16                 | Program output: 36                 
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -2                 
Correct output: -37                 | Program output: 68                 
Correct output: -76                 | Program output: -53                
Correct output: -96                 | Program output: -29                
Correct output: -93                 | Program output: -30                
Correct output: -24                 | Program output: 20                 
Correct output: -72                 | Program output: 95                 
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -71                
Correct output: -35                 | Program output: 55                 
Correct output: 42                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 79                 
Correct output: -8                  | Program output: 33                 
Correct output: -56                 | Program output: 31                 
Correct output: -57                 | Program output: 85                 
Correct output: -55                 | Program output: 40                 
Correct output: -55                 | Program output: 86                 
Correct output: -65                 | Program output: -13                
Correct output: -99                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -3                 
Correct output: -80                 | Program output: 64                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -20                
Correct output: -23                 | Program output: 21                 
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -43                
Correct output: -68                 | Program output: -65                
Correct output: -48                 | Program output: 77                 
Correct output: 1                   | Program output: 3                  
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: -13                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 45                 
Correct output: -84                 | Program output: 23                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -47                
Correct output: -88                 | Program output: -84                
Correct output: -77                 | Program output: -43                
Correct output: -67                 | Program output: 77                 
Correct output: -77                 | Program output: 91                 
Correct output: -52                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_lt in3 print_integer exec_when (boolean_dup) print_boolean exec_while (exec_swap (exec_y_when_autoconstructing ()) ()))
Lexicase best errors: [1 0 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 15
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_lt in3 print_integer exec_when (boolean_dup) print_boolean exec_while (exec_swap (exec_y_when_autoconstructing ()) ()))
Zero cases best errors: [1 0 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 15
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (19 167 167 182 566 167 167 938 20 20)
Population mean number of elite cases: 2.41
Count of perfect (error zero) individuals by case: (19 167 167 182 566 167 167 938 20 20)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4})
Best program: (exec_dup () boolean_yankdup exec_pop (boolean_eq boolean_invert_second_then_and) exec_do*range (integer_yank integer_max exec_rot (integer_shove boolean_yankdup print_integer) (integer_shove exec_pop (boolean_invert_first_then_and exec_dup_items boolean_frominteger boolean_rot exec_stackdepth) exec_yankdup exec_yank integer_dec integer_gte) (in3 integer_eq integer_fromboolean) integer_sub exec_y (boolean_xor in4)))
Errors: [1 0 0 1 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 30
Size: 39
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.587
Median total errors in population: 8
Error averages by case: (0.981 0.833 0.833 0.818 0.434 0.833 0.833 0.062 0.98 0.98)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.743
Average program size in population (points): 34.583
Average percent parens in population: 0.255
Minimum age in population: 10.6875
Maximum age in population: 15.015625
Average age in population: 13.51217578125
Median age in population: 13.5703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 240
Genome diversity (% unique genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 247
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3333140
--- Timings ---
Current time: 1559584159049 milliseconds
Total Time:          26.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.2 seconds, 72.4%
Fitness Testing:      5.2 seconds, 19.7%
Report:               2.0 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: 72                 
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 85                 
Correct output: 30                  | Program output: 74                 
Correct output: 3                   | Program output: 50                 
Correct output: 6                   | Program output: 69                 
Correct output: 46                  | Program output: 80                 
Correct output: 36                  | Program output: 98                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 30                 
Correct output: 12                  | Program output: 97                 
Correct output: 31                  | Program output: 36                 
Correct output: 27                  | Program output: 97                 
Correct output: 26                  | Program output: 80                 
Correct output: 14                  | Program output: 54                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 64                 
Correct output: 5                   | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -32                
Correct output: -77                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -24                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 3                  
Correct output: -39                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: 29                 
Correct output: -16                 | Program output: 8                  
Correct output: -95                 | Program output: -83                
Correct output: -43                 | Program output: 99                 
Correct output: -37                 | Program output: 15                 
Correct output: -76                 | Program output: -76                
Correct output: -96                 | Program output: 87                 
Correct output: -93                 | Program output: -9                 
Correct output: -24                 | Program output: 54                 
Correct output: -72                 | Program output: 20                 
Correct output: -17                 | Program output: -7                 
Correct output: -41                 | Program output: 17                 
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: 10                 
Correct output: 42                  | Program output: 51                 
Correct output: -60                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -8                  | Program output: 92                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: 39                 
Correct output: -55                 | Program output: 21                 
Correct output: -55                 | Program output: -51                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 76                 
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -96                 | Program output: -34                
Correct output: -71                 | Program output: 69                 
Correct output: -23                 | Program output: 57                 
Correct output: -10                 | Program output: 85                 
Correct output: -64                 | Program output: 74                 
Correct output: -44                 | Program output: 2                  
Correct output: -68                 | Program output: -39                
Correct output: -48                 | Program output: -6                 
Correct output: 1                   | Program output: 52                 
Correct output: -92                 | Program output: -54                
Correct output: -89                 | Program output: 64                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 41                 
Correct output: -79                 | Program output: 64                 
Correct output: -84                 | Program output: -84                
Correct output: -91                 | Program output: 57                 
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -19                
Correct output: -77                 | Program output: 14                 
Correct output: -52                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction -70} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_stackdepth integer_swap in1 boolean_flush print_integer boolean_eq boolean_dup_times integer_sub integer_dup integer_flush boolean_or -35 integer_swap exec_pop (integer_gte integer_yank integer_gte integer_eq exec_do*times () boolean_swap boolean_dup_items exec_swap (exec_do*times (exec_while (boolean_dup_times boolean_dup integer_mod -70 exec_swap (in3 boolean_or) ()))) ()))
Lexicase best errors: [1 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction -70} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_stackdepth integer_swap in1 boolean_flush print_integer boolean_eq boolean_dup_times integer_sub integer_dup integer_flush boolean_or -35 integer_swap exec_pop (integer_gte integer_yank integer_gte integer_eq exec_do*times () boolean_swap boolean_dup_items exec_swap (exec_do*times (exec_while (boolean_dup_times boolean_dup integer_mod -70 exec_swap (in3 boolean_or) ()))) ()))
Zero cases best errors: [1 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (400 814 564 106 100 303 403 107 61 101)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (400 814 564 106 100 303 403 107 61 101)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Best program: (exec_s (exec_shove (integer_gte) boolean_dup_items) (integer_yank boolean_invert_first_then_and boolean_rot) (in1) print_integer exec_k (integer_dup) (boolean_xor) integer_yank integer_lte boolean_swap boolean_dup_items exec_swap (exec_do*times (exec_while (exec_k (boolean_dup boolean_flush in3) ()))) ())
Errors: [1 0 0 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 36
Percent parens: 0.361
--- Population Statistics ---
Average total errors in population: 7.041
Median total errors in population: 7
Error averages by case: (0.6 0.186 0.436 0.894 0.9 0.697 0.597 0.893 0.939 0.899)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.145
Average program size in population (points): 30.971
Average percent parens in population: 0.248
Minimum age in population: 11.8125
Maximum age in population: 16.662109375
Average age in population: 14.923486328125
Median age in population: 14.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3580797
--- Timings ---
Current time: 1559584161416 milliseconds
Total Time:          29.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.2 seconds, 72.0%
Fitness Testing:      5.5 seconds, 18.7%
Report:               2.6 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: 72                 
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 85                 
Correct output: 30                  | Program output: 74                 
Correct output: 3                   | Program output: 50                 
Correct output: 6                   | Program output: 69                 
Correct output: 46                  | Program output: 80                 
Correct output: 36                  | Program output: 98                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 30                 
Correct output: 12                  | Program output: 97                 
Correct output: 31                  | Program output: 36                 
Correct output: 27                  | Program output: 97                 
Correct output: 26                  | Program output: 80                 
Correct output: 14                  | Program output: 54                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 64                 
Correct output: 5                   | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -32                
Correct output: -77                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -24                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 3                  
Correct output: -39                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: 29                 
Correct output: -16                 | Program output: 8                  
Correct output: -95                 | Program output: -83                
Correct output: -43                 | Program output: 99                 
Correct output: -37                 | Program output: 15                 
Correct output: -76                 | Program output: -76                
Correct output: -96                 | Program output: 87                 
Correct output: -93                 | Program output: -9                 
Correct output: -24                 | Program output: 54                 
Correct output: -72                 | Program output: 20                 
Correct output: -17                 | Program output: -7                 
Correct output: -41                 | Program output: 17                 
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: 10                 
Correct output: 42                  | Program output: 51                 
Correct output: -60                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -8                  | Program output: 92                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: 39                 
Correct output: -55                 | Program output: 21                 
Correct output: -55                 | Program output: -51                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 76                 
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -96                 | Program output: -34                
Correct output: -71                 | Program output: 69                 
Correct output: -23                 | Program output: 57                 
Correct output: -10                 | Program output: 85                 
Correct output: -64                 | Program output: 74                 
Correct output: -44                 | Program output: 2                  
Correct output: -68                 | Program output: -39                
Correct output: -48                 | Program output: -6                 
Correct output: 1                   | Program output: 52                 
Correct output: -92                 | Program output: -54                
Correct output: -89                 | Program output: 64                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 41                 
Correct output: -79                 | Program output: 64                 
Correct output: -84                 | Program output: -84                
Correct output: -91                 | Program output: 57                 
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -19                
Correct output: -77                 | Program output: 14                 
Correct output: -52                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_dec integer_swap in1 boolean_flush print_integer boolean_eq boolean_dup_times integer_sub integer_dup integer_flush boolean_or -35 integer_swap exec_pop (integer_gte exec_rot (integer_gte integer_eq integer_lte) (boolean_swap boolean_dup_items exec_rot (exec_do*times (integer_yank boolean_dup_times boolean_dup boolean_flush)) () ()) ()))
Lexicase best errors: [0 0 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 36
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_dec integer_swap in1 boolean_flush print_integer boolean_eq boolean_dup_times integer_sub integer_dup integer_flush boolean_or -35 integer_swap exec_pop (integer_gte exec_rot (integer_gte integer_eq integer_lte) (boolean_swap boolean_dup_items exec_rot (exec_do*times (integer_yank boolean_dup_times boolean_dup boolean_flush)) () ()) ()))
Zero cases best errors: [0 0 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 36
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (331 834 233 329 334 333 10 942 233 107)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (331 834 233 329 334 333 10 942 233 107)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush})
Best program: (integer_dec integer_swap in1 boolean_flush print_integer integer_eq boolean_dup_times integer_sub integer_dup integer_flush boolean_or -35 integer_dec exec_pop (integer_gte exec_rot (integer_gte integer_eq integer_lte) (boolean_swap boolean_dup_items exec_rot (exec_do*times (exec_while (boolean_dup_times boolean_dup boolean_flush))) () ()) ()))
Errors: [0 0 1 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 27
Size: 37
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 6.314
Median total errors in population: 6
Error averages by case: (0.669 0.166 0.767 0.671 0.666 0.667 0.99 0.058 0.767 0.893)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.363
Average program size in population (points): 31.485
Average percent parens in population: 0.255
Minimum age in population: 13.34375
Maximum age in population: 18.1279296875
Average age in population: 16.31826953125
Median age in population: 16.408203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 214
Genome diversity (% unique genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 219
Syntactic diversity (% unique Push programs):	 0.467
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4000620
--- Timings ---
Current time: 1559584163889 milliseconds
Total Time:          31.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.1 seconds, 72.4%
Fitness Testing:      5.9 seconds, 18.4%
Report:               2.8 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: 72                 
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 85                 
Correct output: 30                  | Program output: 74                 
Correct output: 3                   | Program output: 50                 
Correct output: 6                   | Program output: 69                 
Correct output: 46                  | Program output: 80                 
Correct output: 36                  | Program output: 98                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 30                 
Correct output: 12                  | Program output: 97                 
Correct output: 31                  | Program output: 36                 
Correct output: 27                  | Program output: 97                 
Correct output: 26                  | Program output: 80                 
Correct output: 14                  | Program output: 54                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 64                 
Correct output: 5                   | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -32                
Correct output: -77                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -24                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 3                  
Correct output: -39                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: 29                 
Correct output: -16                 | Program output: 8                  
Correct output: -95                 | Program output: -83                
Correct output: -43                 | Program output: 99                 
Correct output: -37                 | Program output: 15                 
Correct output: -76                 | Program output: -76                
Correct output: -96                 | Program output: 87                 
Correct output: -93                 | Program output: -9                 
Correct output: -24                 | Program output: 54                 
Correct output: -72                 | Program output: 20                 
Correct output: -17                 | Program output: -7                 
Correct output: -41                 | Program output: 17                 
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: 10                 
Correct output: 42                  | Program output: 51                 
Correct output: -60                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -8                  | Program output: 92                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: 39                 
Correct output: -55                 | Program output: 21                 
Correct output: -55                 | Program output: -51                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 76                 
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -96                 | Program output: -34                
Correct output: -71                 | Program output: 69                 
Correct output: -23                 | Program output: 57                 
Correct output: -10                 | Program output: 85                 
Correct output: -64                 | Program output: 74                 
Correct output: -44                 | Program output: 2                  
Correct output: -68                 | Program output: -39                
Correct output: -48                 | Program output: -6                 
Correct output: 1                   | Program output: 52                 
Correct output: -92                 | Program output: -54                
Correct output: -89                 | Program output: 64                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 41                 
Correct output: -79                 | Program output: 64                 
Correct output: -84                 | Program output: -84                
Correct output: -91                 | Program output: 57                 
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -19                
Correct output: -77                 | Program output: 14                 
Correct output: -52                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction tagged_510} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_when})
Lexicase best program: (boolean_pop exec_eq integer_pop exec_stackdepth boolean_dup exec_noop exec_noop exec_do*while (integer_mult boolean_dup_times in3 tagged_510 integer_gt) exec_if (exec_do*range (boolean_invert_second_then_and) in1) () exec_do*while (boolean_empty boolean_or print_integer boolean_empty exec_do*range () exec_dup_times (exec_if (integer_min) (exec_rot () (exec_empty) (integer_fromboolean integer_rot) integer_dec exec_noop exec_when ()))))
Lexicase best errors: [0 1 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 47
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction tagged_510} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_when})
Zero cases best program: (boolean_pop exec_eq integer_pop exec_stackdepth boolean_dup exec_noop exec_noop exec_do*while (integer_mult boolean_dup_times in3 tagged_510 integer_gt) exec_if (exec_do*range (boolean_invert_second_then_and) in1) () exec_do*while (boolean_empty boolean_or print_integer boolean_empty exec_do*range () exec_dup_times (exec_if (integer_min) (exec_rot () (exec_empty) (integer_fromboolean integer_rot) integer_dec exec_noop exec_when ()))))
Zero cases best errors: [0 1 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 47
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (655 152 132 9 226 650 132 225 421 704)
Population mean number of elite cases: 3.31
Count of perfect (error zero) individuals by case: (655 152 132 9 226 650 132 225 421 704)
Population mean number of perfect (error zero) cases: 3.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Best program: (exec_s (exec_shove (integer_gte) boolean_dup_items) (integer_yank boolean_invert_first_then_and boolean_rot in1) (print_integer exec_k (integer_dup) (boolean_xor) integer_yank) integer_lte boolean_swap boolean_dup_items exec_swap (exec_do*times (exec_while (exec_k (boolean_dup boolean_flush in3) ()))) ())
Errors: [0 1 1 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 23
Size: 36
Percent parens: 0.361
--- Population Statistics ---
Average total errors in population: 6.694
Median total errors in population: 6
Error averages by case: (0.345 0.848 0.868 0.991 0.774 0.35 0.868 0.775 0.579 0.296)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.193
Average program size in population (points): 33.645
Average percent parens in population: 0.244
Minimum age in population: 14.390625
Maximum age in population: 19.59814453125
Average age in population: 17.8717412109375
Median age in population: 17.92138671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4369645
--- Timings ---
Current time: 1559584166325 milliseconds
Total Time:          34.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.0 seconds, 72.9%
Fitness Testing:      6.2 seconds, 18.2%
Report:               3.0 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 91                 
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 49                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 49                 
Correct output: 46                  | Program output: 64                 
Correct output: 36                  | Program output: 73                 
Correct output: 7                   | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 19                 
Correct output: 31                  | Program output: 71                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 58                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 89                 
Correct output: 26                  | Program output: 31                 
Correct output: 27                  | Program output: 89                 
Correct output: 11                  | Program output: 22                 
Correct output: 28                  | Program output: 78                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 78                 
Correct output: -85                 | Program output: 21                 
Correct output: -62                 | Program output: -31                
Correct output: 21                  | Program output: 23                 
Correct output: -86                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: 10                 
Correct output: -24                 | Program output: 26                 
Correct output: -83                 | Program output: 54                 
Correct output: -54                 | Program output: -46                
Correct output: -39                 | Program output: 71                 
Correct output: -92                 | Program output: 64                 
Correct output: -72                 | Program output: -71                
Correct output: -16                 | Program output: -16                
Correct output: -95                 | Program output: -26                
Correct output: -43                 | Program output: 70                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: 38                 
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -24                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: 93                 
Correct output: -41                 | Program output: 53                 
Correct output: -90                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: 42                  | Program output: 90                 
Correct output: -60                 | Program output: 56                 
Correct output: -97                 | Program output: 61                 
Correct output: -8                  | Program output: 42                 
Correct output: -56                 | Program output: -3                 
Correct output: -57                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 12                 
Correct output: -99                 | Program output: -5                 
Correct output: -53                 | Program output: 68                 
Correct output: -78                 | Program output: 96                 
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: 25                 
Correct output: -71                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -10                 | Program output: 76                 
Correct output: -64                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -68                 | Program output: -68                
Correct output: -48                 | Program output: -16                
Correct output: 1                   | Program output: 89                 
Correct output: -92                 | Program output: -69                
Correct output: -89                 | Program output: -31                
Correct output: -34                 | Program output: 83                 
Correct output: -20                 | Program output: 91                 
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -83                
Correct output: -91                 | Program output: -15                
Correct output: -99                 | Program output: 45                 
Correct output: -88                 | Program output: -85                
Correct output: -77                 | Program output: 20                 
Correct output: -67                 | Program output: -67                
Correct output: -77                 | Program output: -77                
Correct output: -52                 | Program output: -52                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1})
Lexicase best program: (boolean_pop boolean_not exec_dup_items exec_stackdepth boolean_dup exec_noop exec_noop exec_pop () in2 in4 exec_shove (boolean_empty print_integer boolean_yank) integer_eq exec_yank exec_if (exec_do*range () boolean_invert_second_then_and) (in1))
Lexicase best errors: [1 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1})
Zero cases best program: (boolean_pop boolean_not exec_dup_items exec_stackdepth boolean_dup exec_noop exec_noop exec_pop () in2 in4 exec_shove (boolean_empty print_integer boolean_yank) integer_eq exec_yank exec_if (exec_do*range () boolean_invert_second_then_and) (in1))
Zero cases best errors: [1 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 712 268 268 252 290 189 197 190 197)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (206 712 268 268 252 290 189 197 190 197)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer})
Best program: (boolean_or boolean_rot integer_yank exec_pop () in2 boolean_dup in4 exec_shove (boolean_empty print_integer))
Errors: [1 0 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.231
Median total errors in population: 7
Error averages by case: (0.794 0.288 0.732 0.732 0.748 0.71 0.811 0.803 0.81 0.803)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.01
Average program size in population (points): 30.597
Average percent parens in population: 0.239
Minimum age in population: 15.6953125
Maximum age in population: 21.43017578125
Average age in population: 19.5094384765625
Median age in population: 19.5423583984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.514
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4646165
--- Timings ---
Current time: 1559584168532 milliseconds
Total Time:          36.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.8 seconds, 73.3%
Fitness Testing:      6.5 seconds, 17.8%
Report:               3.1 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 91                 
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 85                 
Correct output: 30                  | Program output: 74                 
Correct output: 3                   | Program output: 50                 
Correct output: 6                   | Program output: 69                 
Correct output: 46                  | Program output: 80                 
Correct output: 36                  | Program output: 98                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 30                 
Correct output: 12                  | Program output: 97                 
Correct output: 31                  | Program output: 36                 
Correct output: 27                  | Program output: 97                 
Correct output: 26                  | Program output: 80                 
Correct output: 14                  | Program output:                    
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 64                 
Correct output: 5                   | Program output: 38                 
Correct output: -85                 | Program output: 21                 
Correct output: -62                 | Program output: -31                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -44                
Correct output: -77                 | Program output: 67                 
Correct output: -47                 | Program output: 10                 
Correct output: -24                 | Program output: 26                 
Correct output: -83                 | Program output: 54                 
Correct output: -54                 | Program output: -46                
Correct output: -39                 | Program output: 65                 
Correct output: -92                 | Program output: 64                 
Correct output: -72                 | Program output: 29                 
Correct output: -16                 | Program output: -16                
Correct output: -95                 | Program output: -83                
Correct output: -43                 | Program output: 70                 
Correct output: -37                 | Program output: 15                 
Correct output: -76                 | Program output: -76                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -9                 
Correct output: -24                 | Program output: 12                 
Correct output: -72                 | Program output: 20                 
Correct output: -17                 | Program output: -7                 
Correct output: -41                 | Program output: 17                 
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 42                  | Program output: 51                 
Correct output: -60                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -8                  | Program output: 42                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: -28                
Correct output: -55                 | Program output: 21                 
Correct output: -55                 | Program output: -51                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -96                 | Program output: 25                 
Correct output: -71                 | Program output: 69                 
Correct output: -23                 | Program output: 57                 
Correct output: -10                 | Program output: 85                 
Correct output: -64                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -68                 | Program output: -68                
Correct output: -48                 | Program output: -16                
Correct output: 1                   | Program output:                    
Correct output: -92                 | Program output: -69                
Correct output: -89                 | Program output: 64                 
Correct output: -34                 | Program output: 83                 
Correct output: -20                 | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -91                 | Program output: -15                
Correct output: -99                 | Program output: 45                 
Correct output: -88                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -52                 | Program output: -52                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1})
Lexicase best program: (boolean_pop boolean_not exec_dup_items exec_stackdepth boolean_dup exec_noop exec_noop exec_pop () in2 in4 exec_shove (boolean_empty print_integer boolean_yank) integer_eq exec_yank exec_if (exec_do*range () boolean_invert_second_then_and) (in1))
Lexicase best errors: [0 1 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1})
Zero cases best program: (boolean_pop boolean_not exec_dup_items exec_stackdepth boolean_dup exec_noop exec_noop exec_pop () in2 in4 exec_shove (boolean_empty print_integer boolean_yank) integer_eq exec_yank exec_if (exec_do*range () boolean_invert_second_then_and) (in1))
Zero cases best errors: [0 1 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (693 94 233 237 406 690 95 432 237 934)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (693 94 233 237 406 690 95 432 237 934)
Population mean number of perfect (error zero) cases: 4.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1})
Best program: (boolean_pop boolean_not exec_dup_items exec_stackdepth boolean_dup exec_noop exec_noop exec_pop () in2 in4 exec_shove (boolean_empty print_integer boolean_yank) integer_eq exec_yank exec_if (exec_do*range () boolean_invert_second_then_and) (in1))
Errors: [0 1 1 0 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 20
Size: 26
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 5.949
Median total errors in population: 6
Error averages by case: (0.307 0.906 0.767 0.763 0.594 0.31 0.905 0.568 0.763 0.066)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.61
Average program size in population (points): 26.913
Average percent parens in population: 0.225
Minimum age in population: 17.740234375
Maximum age in population: 22.9063720703125
Average age in population: 21.16865063476562
Median age in population: 21.19012451171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.431
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.39
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4874482
--- Timings ---
Current time: 1559584170899 milliseconds
Total Time:          38.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.8 seconds, 73.9%
Fitness Testing:      6.8 seconds, 17.4%
Report:               3.3 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 99                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 39                 
Correct output: 7                   | Program output: 97                 
Correct output: 28                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 27                  | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 27                  | Program output: 44                 
Correct output: 26                  | Program output: 87                 
Correct output: 27                  | Program output: 90                 
Correct output: 11                  | Program output: 24                 
Correct output: 28                  | Program output: 63                 
Correct output: 9                   | Program output: 63                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -25                
Correct output: -62                 | Program output: -17                
Correct output: 21                  | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -39                
Correct output: -47                 | Program output: 78                 
Correct output: -24                 | Program output: 32                 
Correct output: -83                 | Program output: 43                 
Correct output: -54                 | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -16                 | Program output: 36                 
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -2                 
Correct output: -37                 | Program output: 68                 
Correct output: -76                 | Program output: -53                
Correct output: -96                 | Program output: -29                
Correct output: -93                 | Program output: -30                
Correct output: -24                 | Program output: 20                 
Correct output: -72                 | Program output: 95                 
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -71                
Correct output: -35                 | Program output: 55                 
Correct output: 42                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 79                 
Correct output: -8                  | Program output: 33                 
Correct output: -56                 | Program output: 31                 
Correct output: -57                 | Program output: 85                 
Correct output: -55                 | Program output: 40                 
Correct output: -55                 | Program output: 86                 
Correct output: -65                 | Program output: -13                
Correct output: -99                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -3                 
Correct output: -80                 | Program output: 64                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -20                
Correct output: -23                 | Program output: 21                 
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -43                
Correct output: -68                 | Program output: -65                
Correct output: -48                 | Program output: 77                 
Correct output: 1                   | Program output: 3                  
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: -13                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 45                 
Correct output: -84                 | Program output: 23                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -47                
Correct output: -88                 | Program output: -84                
Correct output: -77                 | Program output: -43                
Correct output: -67                 | Program output: 77                 
Correct output: -77                 | Program output: 91                 
Correct output: -52                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1})
Lexicase best program: (integer_dec boolean_not boolean_not exec_dup_items exec_stackdepth boolean_dup exec_noop exec_noop exec_pop () in2 exec_noop exec_noop exec_pop () in2 in4 exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_yank) exec_if (exec_do*range (boolean_invert_second_then_and) in1) ())
Lexicase best errors: [0 0 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1})
Zero cases best program: (integer_dec boolean_not boolean_not exec_dup_items exec_stackdepth boolean_dup exec_noop exec_noop exec_pop () in2 exec_noop exec_noop exec_pop () in2 in4 exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_yank) exec_if (exec_do*range (boolean_invert_second_then_and) in1) ())
Zero cases best errors: [0 0 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (933 904 665 426 22 183 268 692 268 183)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (933 904 665 426 22 183 268 692 268 183)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_dec} {:close 0, :instruction -24} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 1, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction in2})
Best program: (integer_div integer_dec -24 integer_pop integer_min exec_when () integer_stackdepth in3 print_integer boolean_dup_times boolean_yank integer_eq exec_yank in2)
Errors: [0 0 1 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 14
Size: 16
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 5.456
Median total errors in population: 5
Error averages by case: (0.067 0.096 0.335 0.574 0.978 0.817 0.732 0.308 0.732 0.817)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.47
Average program size in population (points): 26.658
Average percent parens in population: 0.228
Minimum age in population: 19.7265625
Maximum age in population: 24.17987060546875
Average age in population: 22.63540740966797
Median age in population: 22.5970458984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.392
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.362
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5110731
--- Timings ---
Current time: 1559584173063 milliseconds
Total Time:          41.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        30.6 seconds, 74.3%
Fitness Testing:      7.0 seconds, 17.1%
Report:               3.4 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 555
Test mean error for best: 0.55500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 49                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 49                 
Correct output: 46                  | Program output: 64                 
Correct output: 36                  | Program output: 73                 
Correct output: 7                   | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 19                 
Correct output: 31                  | Program output: 71                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 58                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 89                 
Correct output: 26                  | Program output: 31                 
Correct output: 27                  | Program output: 89                 
Correct output: 11                  | Program output: 22                 
Correct output: 28                  | Program output: 78                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 78                 
Correct output: -85                 | Program output: -57                
Correct output: -62                 | Program output: -3                 
Correct output: 21                  | Program output: 23                 
Correct output: -86                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -39                 | Program output: 71                 
Correct output: -92                 | Program output: -17                
Correct output: -72                 | Program output: -71                
Correct output: -16                 | Program output: -13                
Correct output: -95                 | Program output: -26                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: 38                 
Correct output: -96                 | Program output: -33                
Correct output: -93                 | Program output: -93                
Correct output: -24                 | Program output: -24                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: 93                 
Correct output: -41                 | Program output: 53                 
Correct output: -90                 | Program output: -82                
Correct output: -35                 | Program output: -30                
Correct output: 42                  | Program output: 90                 
Correct output: -60                 | Program output: 56                 
Correct output: -97                 | Program output: 61                 
Correct output: -8                  | Program output: -8                 
Correct output: -56                 | Program output: -3                 
Correct output: -57                 | Program output: -57                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 12                 
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: 68                 
Correct output: -78                 | Program output: 96                 
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -49                
Correct output: -71                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -10                 | Program output: 76                 
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -32                
Correct output: -68                 | Program output: -26                
Correct output: -48                 | Program output: -48                
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: -73                
Correct output: -89                 | Program output: -31                
Correct output: -34                 | Program output: 0                  
Correct output: -20                 | Program output: 91                 
Correct output: -79                 | Program output: -32                
Correct output: -84                 | Program output: -83                
Correct output: -91                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -58                
Correct output: -77                 | Program output: 20                 
Correct output: -67                 | Program output: -67                
Correct output: -77                 | Program output: -62                
Correct output: -52                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte})
Lexicase best program: (boolean_or exec_do*range (integer_yank exec_pop () in2) in4 in4 exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_or -35 integer_swap integer_lt integer_gte exec_rot (integer_gte integer_eq integer_lte) () ())
Lexicase best errors: [0 1 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte})
Zero cases best program: (boolean_or exec_do*range (integer_yank exec_pop () in2) in4 in4 exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_or -35 integer_swap integer_lt integer_gte exec_rot (integer_gte integer_eq integer_lte) () ())
Zero cases best errors: [0 1 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (687 278 412 279 756 279 199 248 412 277)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (687 278 412 279 756 279 199 248 412 277)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte})
Best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_or -35 integer_swap integer_lt integer_gte exec_rot (integer_gte integer_eq integer_lte) () ())
Errors: [0 1 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 26
Size: 33
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 6.173
Median total errors in population: 6
Error averages by case: (0.313 0.722 0.588 0.721 0.244 0.721 0.801 0.752 0.588 0.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.788
Average program size in population (points): 27.034
Average percent parens in population: 0.227
Minimum age in population: 20.7265625
Maximum age in population: 25.74856567382812
Average age in population: 24.1203503112793
Median age in population: 24.16403198242188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.42
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5365707
--- Timings ---
Current time: 1559584175377 milliseconds
Total Time:          43.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.4 seconds, 74.8%
Fitness Testing:      7.3 seconds, 16.8%
Report:               3.6 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 555
Test mean error for best: 0.55500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 49                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 49                 
Correct output: 46                  | Program output: 64                 
Correct output: 36                  | Program output: 73                 
Correct output: 7                   | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 19                 
Correct output: 31                  | Program output: 71                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 58                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 89                 
Correct output: 26                  | Program output: 31                 
Correct output: 27                  | Program output: 89                 
Correct output: 11                  | Program output: 22                 
Correct output: 28                  | Program output: 78                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 78                 
Correct output: -85                 | Program output: -57                
Correct output: -62                 | Program output: -3                 
Correct output: 21                  | Program output: 23                 
Correct output: -86                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -39                 | Program output: 71                 
Correct output: -92                 | Program output: -17                
Correct output: -72                 | Program output: -71                
Correct output: -16                 | Program output: -13                
Correct output: -95                 | Program output: -26                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: 38                 
Correct output: -96                 | Program output: -33                
Correct output: -93                 | Program output: -93                
Correct output: -24                 | Program output: -24                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: 93                 
Correct output: -41                 | Program output: 53                 
Correct output: -90                 | Program output: -82                
Correct output: -35                 | Program output: -30                
Correct output: 42                  | Program output: 90                 
Correct output: -60                 | Program output: 56                 
Correct output: -97                 | Program output: 61                 
Correct output: -8                  | Program output: -8                 
Correct output: -56                 | Program output: -3                 
Correct output: -57                 | Program output: -57                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 12                 
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: 68                 
Correct output: -78                 | Program output: 96                 
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -49                
Correct output: -71                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -10                 | Program output: 76                 
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -32                
Correct output: -68                 | Program output: -26                
Correct output: -48                 | Program output: -48                
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: -73                
Correct output: -89                 | Program output: -31                
Correct output: -34                 | Program output: 0                  
Correct output: -20                 | Program output: 91                 
Correct output: -79                 | Program output: -32                
Correct output: -84                 | Program output: -83                
Correct output: -91                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -58                
Correct output: -77                 | Program output: 20                 
Correct output: -67                 | Program output: -67                
Correct output: -77                 | Program output: -62                
Correct output: -52                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_empty})
Lexicase best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_or -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq boolean_empty) () ())
Lexicase best errors: [0 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_empty})
Zero cases best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_or -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq boolean_empty) () ())
Zero cases best errors: [0 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (364 278 766 768 865 364 491 766 189 1000)
Population mean number of elite cases: 5.85
Count of perfect (error zero) individuals by case: (364 278 766 768 865 364 491 766 189 0)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte})
Best program: (boolean_or boolean_rot integer_yank boolean_not in2 in4 in4 exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_or -35 integer_swap integer_lt boolean_rot exec_rot (integer_gte integer_eq integer_lte) () ())
Errors: [0 1 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 26
Size: 32
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 5.149
Median total errors in population: 4
Error averages by case: (0.636 0.722 0.234 0.232 0.135 0.636 0.509 0.234 0.811 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 23.438
Average program size in population (points): 29.916
Average percent parens in population: 0.216
Minimum age in population: 22.90380859375
Maximum age in population: 27.38645935058594
Average age in population: 25.92708158874512
Median age in population: 26.02435302734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 227
Genome diversity (% unique genomes):	 0.392
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 234
Syntactic diversity (% unique Push programs):	 0.356
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 5635410
--- Timings ---
Current time: 1559584177675 milliseconds
Total Time:          45.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.2 seconds, 75.0%
Fitness Testing:      7.6 seconds, 16.6%
Report:               3.7 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 555
Test mean error for best: 0.55500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 49                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 49                 
Correct output: 46                  | Program output: 64                 
Correct output: 36                  | Program output: 73                 
Correct output: 7                   | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 19                 
Correct output: 31                  | Program output: 71                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 58                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 89                 
Correct output: 26                  | Program output: 31                 
Correct output: 27                  | Program output: 89                 
Correct output: 11                  | Program output: 22                 
Correct output: 28                  | Program output: 78                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 78                 
Correct output: -85                 | Program output: -57                
Correct output: -62                 | Program output: -3                 
Correct output: 21                  | Program output: 23                 
Correct output: -86                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -39                 | Program output: 71                 
Correct output: -92                 | Program output: -17                
Correct output: -72                 | Program output: -71                
Correct output: -16                 | Program output: -13                
Correct output: -95                 | Program output: -26                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: 38                 
Correct output: -96                 | Program output: -33                
Correct output: -93                 | Program output: -93                
Correct output: -24                 | Program output: -24                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: 93                 
Correct output: -41                 | Program output: 53                 
Correct output: -90                 | Program output: -82                
Correct output: -35                 | Program output: -30                
Correct output: 42                  | Program output: 90                 
Correct output: -60                 | Program output: 56                 
Correct output: -97                 | Program output: 61                 
Correct output: -8                  | Program output: -8                 
Correct output: -56                 | Program output: -3                 
Correct output: -57                 | Program output: -57                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 12                 
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: 68                 
Correct output: -78                 | Program output: 96                 
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -49                
Correct output: -71                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -10                 | Program output: 76                 
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -32                
Correct output: -68                 | Program output: -26                
Correct output: -48                 | Program output: -48                
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: -73                
Correct output: -89                 | Program output: -31                
Correct output: -34                 | Program output: 0                  
Correct output: -20                 | Program output: 91                 
Correct output: -79                 | Program output: -32                
Correct output: -84                 | Program output: -83                
Correct output: -91                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -58                
Correct output: -77                 | Program output: 20                 
Correct output: -67                 | Program output: -67                
Correct output: -77                 | Program output: -62                
Correct output: -52                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte})
Lexicase best program: (boolean_or boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_or -35 integer_swap integer_lt integer_gte exec_rot (integer_gte integer_eq integer_lte) () ())
Lexicase best errors: [0 1 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 34
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte})
Zero cases best program: (boolean_or boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_or -35 integer_swap integer_lt integer_gte exec_rot (integer_gte integer_eq integer_lte) () ())
Zero cases best errors: [0 1 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 34
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (713 443 417 438 863 422 768 417 5 422)
Population mean number of elite cases: 4.91
Count of perfect (error zero) individuals by case: (713 443 417 438 863 422 768 417 5 422)
Population mean number of perfect (error zero) cases: 4.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte})
Best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_or -35 integer_swap integer_lt integer_gte exec_rot (integer_gte integer_eq integer_lte) () ())
Errors: [0 1 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 26
Size: 33
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 5.092
Median total errors in population: 5
Error averages by case: (0.287 0.557 0.583 0.562 0.137 0.578 0.232 0.583 0.995 0.578)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.35
Average program size in population (points): 32.289
Average percent parens in population: 0.215
Minimum age in population: 24.73016357421875
Maximum age in population: 29.09793090820312
Average age in population: 27.48279615020752
Median age in population: 27.52896881103516
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 235
Genome diversity (% unique genomes):	 0.44
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 246
Syntactic diversity (% unique Push programs):	 0.41
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 5916937
--- Timings ---
Current time: 1559584179998 milliseconds
Total Time:          48.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.1 seconds, 75.2%
Fitness Testing:      7.8 seconds, 16.4%
Report:               4.0 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 520
Test mean error for best: 0.52000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 85                 
Correct output: 30                  | Program output: 74                 
Correct output: 3                   | Program output: 50                 
Correct output: 6                   | Program output: 69                 
Correct output: 46                  | Program output: 80                 
Correct output: 36                  | Program output: 98                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 30                 
Correct output: 12                  | Program output: 97                 
Correct output: 31                  | Program output: 36                 
Correct output: 27                  | Program output: 97                 
Correct output: 26                  | Program output: 80                 
Correct output: 14                  | Program output: 54                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 64                 
Correct output: 5                   | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -62                 | Program output: -31                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -47                
Correct output: -24                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -46                
Correct output: -39                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -71                
Correct output: -16                 | Program output: -16                
Correct output: -95                 | Program output: -26                
Correct output: -43                 | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -24                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -7                 
Correct output: -41                 | Program output: 17                 
Correct output: -90                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: 42                  | Program output: 51                 
Correct output: -60                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -8                  | Program output: 92                 
Correct output: -56                 | Program output: -3                 
Correct output: -57                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -10                 | Program output: 85                 
Correct output: -64                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -68                 | Program output: -68                
Correct output: -48                 | Program output: -16                
Correct output: 1                   | Program output: 52                 
Correct output: -92                 | Program output: -69                
Correct output: -89                 | Program output: -31                
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -83                
Correct output: -91                 | Program output: -15                
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -77                 | Program output: -77                
Correct output: -52                 | Program output: -52                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1})
Lexicase best program: (boolean_or boolean_rot integer_yank exec_pop () in2 exec_noop exec_pop () in2 exec_s (exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_yank) exec_if (exec_do*range (boolean_invert_second_then_and) in1) ()) () ())
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1})
Zero cases best program: (boolean_or boolean_rot integer_yank exec_pop () in2 exec_noop exec_pop () in2 exec_s (exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_yank) exec_if (exec_do*range (boolean_invert_second_then_and) in1) ()) () ())
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 947 847 500 412 206 943 235 10 720)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (205 947 847 500 412 206 943 235 10 720)
Population mean number of perfect (error zero) cases: 5.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1})
Best program: (boolean_pop boolean_not exec_dup_items exec_stackdepth boolean_dup exec_noop integer_flush exec_pop () in2 exec_noop exec_noop exec_pop () in2 exec_s (exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_yank) exec_if (exec_do*range (boolean_invert_second_then_and) in1) ()) () ())
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 4.975
Median total errors in population: 5
Error averages by case: (0.795 0.053 0.153 0.5 0.588 0.794 0.057 0.765 0.99 0.28)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.193
Average program size in population (points): 32.474
Average percent parens in population: 0.224
Minimum age in population: 26.0936279296875
Maximum age in population: 30.74660873413086
Average age in population: 28.93679412078857
Median age in population: 29.04030227661133
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.435
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.397
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6231812
--- Timings ---
Current time: 1559584182259 milliseconds
Total Time:          50.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.8 seconds, 75.3%
Fitness Testing:      8.1 seconds, 16.2%
Report:               4.2 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 520
Test mean error for best: 0.52000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 85                 
Correct output: 30                  | Program output: 74                 
Correct output: 3                   | Program output: 50                 
Correct output: 6                   | Program output: 69                 
Correct output: 46                  | Program output: 80                 
Correct output: 36                  | Program output: 98                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 30                 
Correct output: 12                  | Program output: 97                 
Correct output: 31                  | Program output: 36                 
Correct output: 27                  | Program output: 97                 
Correct output: 26                  | Program output: 80                 
Correct output: 14                  | Program output: 54                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 64                 
Correct output: 5                   | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -62                 | Program output: -31                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -47                
Correct output: -24                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -46                
Correct output: -39                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -71                
Correct output: -16                 | Program output: -16                
Correct output: -95                 | Program output: -26                
Correct output: -43                 | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -24                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -7                 
Correct output: -41                 | Program output: 17                 
Correct output: -90                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: 42                  | Program output: 51                 
Correct output: -60                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -8                  | Program output: 92                 
Correct output: -56                 | Program output: -3                 
Correct output: -57                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -10                 | Program output: 85                 
Correct output: -64                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -68                 | Program output: -68                
Correct output: -48                 | Program output: -16                
Correct output: 1                   | Program output: 52                 
Correct output: -92                 | Program output: -69                
Correct output: -89                 | Program output: -31                
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -83                
Correct output: -91                 | Program output: -15                
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -77                 | Program output: -77                
Correct output: -52                 | Program output: -52                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1})
Lexicase best program: (boolean_pop boolean_not exec_dup_items exec_stackdepth boolean_dup exec_noop exec_noop exec_pop () in2 exec_noop exec_noop exec_yankdup in2 exec_s (exec_shove (boolean_empty print_integer integer_eq exec_yank) exec_if (exec_do*range () boolean_invert_second_then_and) (in1)) () ())
Lexicase best errors: [1 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1})
Zero cases best program: (boolean_pop boolean_not exec_dup_items exec_stackdepth boolean_dup exec_noop exec_noop exec_pop () in2 exec_noop exec_noop exec_yankdup in2 exec_s (exec_shove (boolean_empty print_integer integer_eq exec_yank) exec_if (exec_do*range () boolean_invert_second_then_and) (in1)) () ())
Zero cases best errors: [1 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (160 578 1000 647 484 381 937 937 937 551)
Population mean number of elite cases: 6.61
Count of perfect (error zero) individuals by case: (160 578 0 647 484 381 937 937 937 551)
Population mean number of perfect (error zero) cases: 5.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in1})
Best program: (boolean_or boolean_rot integer_yank exec_pop () in2 exec_noop exec_pop () in2 exec_s (exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_yank) exec_if (exec_do*range (boolean_invert_second_then_and) in1) ()) () ())
Errors: [1 0 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 19
Size: 29
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 4.388
Median total errors in population: 4
Error averages by case: (0.84 0.422 1.0 0.353 0.516 0.619 0.063 0.063 0.063 0.449)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 23.949
Average program size in population (points): 31.913
Average percent parens in population: 0.249
Minimum age in population: 27.78419494628906
Maximum age in population: 32.36003303527832
Average age in population: 30.71263100242615
Median age in population: 30.83324432373047
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.44
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 6513288
--- Timings ---
Current time: 1559584184555 milliseconds
Total Time:          52.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.7 seconds, 75.5%
Fitness Testing:      8.4 seconds, 16.0%
Report:               4.4 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 582
Test mean error for best: 0.58200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 99                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 39                 
Correct output: 7                   | Program output: 97                 
Correct output: 28                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 27                  | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 27                  | Program output: 44                 
Correct output: 26                  | Program output: 87                 
Correct output: 27                  | Program output: 90                 
Correct output: 11                  | Program output: 24                 
Correct output: 28                  | Program output: 63                 
Correct output: 9                   | Program output: 63                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -57                
Correct output: -62                 | Program output: -3                 
Correct output: 21                  | Program output: 40                 
Correct output: -86                 | Program output: -35                
Correct output: -77                 | Program output: -39                
Correct output: -47                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -17                
Correct output: -72                 | Program output: -72                
Correct output: -16                 | Program output: -13                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: 68                 
Correct output: -76                 | Program output: -53                
Correct output: -96                 | Program output: -33                
Correct output: -93                 | Program output: -30                
Correct output: -24                 | Program output: -24                
Correct output: -72                 | Program output: 95                 
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -71                
Correct output: -35                 | Program output: -30                
Correct output: 42                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 79                 
Correct output: -8                  | Program output: -8                 
Correct output: -56                 | Program output: 31                 
Correct output: -57                 | Program output: -57                
Correct output: -55                 | Program output: 40                 
Correct output: -55                 | Program output: 86                 
Correct output: -65                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -3                 
Correct output: -80                 | Program output: 64                 
Correct output: -96                 | Program output: -49                
Correct output: -71                 | Program output: -20                
Correct output: -23                 | Program output: 21                 
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -32                
Correct output: -68                 | Program output: -26                
Correct output: -48                 | Program output: -48                
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: -73                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -32                
Correct output: -84                 | Program output: 23                 
Correct output: -91                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -58                
Correct output: -77                 | Program output: -43                
Correct output: -67                 | Program output: 77                 
Correct output: -77                 | Program output: -62                
Correct output: -52                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction in3})
Lexicase best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_noop exec_noop boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_or -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ())
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction in3})
Zero cases best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_noop exec_noop boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_or -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ())
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (85 927 387 128 387 344 926 886 630 128)
Population mean number of elite cases: 4.83
Count of perfect (error zero) individuals by case: (85 927 387 128 387 344 926 886 630 128)
Population mean number of perfect (error zero) cases: 4.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction in3})
Best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_noop exec_noop boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (boolean_empty print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_or -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ())
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 34
Size: 42
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 5.172
Median total errors in population: 6
Error averages by case: (0.915 0.073 0.613 0.872 0.613 0.656 0.074 0.114 0.37 0.872)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.175
Average program size in population (points): 33.777
Average percent parens in population: 0.255
Minimum age in population: 29.96529769897461
Maximum age in population: 33.87929153442383
Average age in population: 32.20077354240417
Median age in population: 32.32135534286499
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.422
Total error diversity:				 0.009
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 6795321
--- Timings ---
Current time: 1559584186903 milliseconds
Total Time:          54.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.5 seconds, 75.6%
Fitness Testing:      8.7 seconds, 15.9%
Report:               4.5 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: -35                
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 39                 
Correct output: 7                   | Program output: 97                 
Correct output: 28                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 27                  | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 27                  | Program output: 44                 
Correct output: 26                  | Program output: 87                 
Correct output: 27                  | Program output: 90                 
Correct output: 11                  | Program output: 24                 
Correct output: 28                  | Program output: 63                 
Correct output: 9                   | Program output: 63                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -25                
Correct output: -62                 | Program output: -31                
Correct output: 21                  | Program output: 40                 
Correct output: -86                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: 78                 
Correct output: -24                 | Program output: 32                 
Correct output: -83                 | Program output: 43                 
Correct output: -54                 | Program output: -46                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -26                
Correct output: -72                 | Program output: -71                
Correct output: -16                 | Program output: -16                
Correct output: -95                 | Program output: -26                
Correct output: -43                 | Program output: -2                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -24                 | Program output: 20                 
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: 42                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 79                 
Correct output: -8                  | Program output: 33                 
Correct output: -56                 | Program output: -3                 
Correct output: -57                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -13                
Correct output: -99                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -68                 | Program output: -68                
Correct output: -48                 | Program output: -16                
Correct output: 1                   | Program output: 3                  
Correct output: -92                 | Program output: -69                
Correct output: -89                 | Program output: -31                
Correct output: -34                 | Program output: -13                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -83                
Correct output: -91                 | Program output: -15                
Correct output: -99                 | Program output: -47                
Correct output: -88                 | Program output: -85                
Correct output: -77                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -77                 | Program output: -77                
Correct output: -52                 | Program output: -52                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 2, :instruction in3})
Lexicase best program: (boolean_pop boolean_not boolean_pop boolean_not exec_dup_items exec_stackdepth boolean_dup exec_noop exec_noop exec_pop () in2 exec_y_when_autoconstructing (exec_noop) exec_yankdup in2 exec_s (exec_shove (boolean_empty print_integer integer_eq exec_yank) integer_sub integer_dup) () (integer_flush) boolean_or -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ())
Lexicase best errors: [0 0 0 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 2, :instruction in3})
Zero cases best program: (boolean_pop boolean_not boolean_pop boolean_not exec_dup_items exec_stackdepth boolean_dup exec_noop exec_noop exec_pop () in2 exec_y_when_autoconstructing (exec_noop) exec_yankdup in2 exec_s (exec_shove (boolean_empty print_integer integer_eq exec_yank) integer_sub integer_dup) () (integer_flush) boolean_or -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ())
Zero cases best errors: [0 0 0 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (317 676 143 1000 1000 1000 2 1000 1000 676)
Population mean number of elite cases: 6.81
Count of perfect (error zero) individuals by case: (317 676 143 0 0 0 2 0 0 676)
Population mean number of perfect (error zero) cases: 1.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction in3})
Best program: (boolean_pop boolean_not exec_dup_items exec_stackdepth boolean_dup exec_noop integer_flush exec_pop () in2 boolean_or exec_noop exec_pop () in2 exec_s (exec_shove (boolean_empty print_integer integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_or -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ()) () ())
Errors: [0 0 0 1 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 32
Size: 43
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 8.186
Median total errors in population: 8
Error averages by case: (0.683 0.324 0.857 1.0 1.0 1.0 0.998 1.0 1.0 0.324)
Error minima by case: (0 0 0 1 1 1 0 1 1 0)
Average genome size in population (length): 26.846
Average program size in population (points): 34.248
Average percent parens in population: 0.215
Minimum age in population: 31.03935241699219
Maximum age in population: 35.40321969985962
Average age in population: 33.5023470697403
Median age in population: 33.58572006225586
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.444
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.415
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7096468
--- Timings ---
Current time: 1559584189278 milliseconds
Total Time:          57.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.3 seconds, 75.7%
Fitness Testing:      9.0 seconds, 15.8%
Report:               4.8 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 345
Test mean error for best: 0.34500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 39                 
Correct output: 7                   | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 44                 
Correct output: 26                  | Program output: 31                 
Correct output: 27                  | Program output: 89                 
Correct output: 11                  | Program output: 22                 
Correct output: 28                  | Program output: 63                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -57                
Correct output: -62                 | Program output: -31                
Correct output: 21                  | Program output: 23                 
Correct output: -86                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -17                
Correct output: -72                 | Program output: -72                
Correct output: -16                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -24                 | Program output: -24                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: 42                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 61                 
Correct output: -8                  | Program output: -8                 
Correct output: -56                 | Program output: -3                 
Correct output: -57                 | Program output: -57                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -49                
Correct output: -71                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -68                 | Program output: -68                
Correct output: -48                 | Program output: -48                
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: -73                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -83                
Correct output: -91                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -85                
Correct output: -77                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -77                 | Program output: -77                
Correct output: -52                 | Program output: -52                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Lexicase best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ())
Lexicase best errors: [1 1 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Zero cases best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ())
Zero cases best errors: [1 1 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (303 1000 846 853 11 1000 34 878 1000 1000)
Population mean number of elite cases: 6.93
Count of perfect (error zero) individuals by case: (303 0 846 853 11 0 34 878 0 0)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ())
Errors: [1 1 0 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 33
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 7.075
Median total errors in population: 7
Error averages by case: (0.697 1.0 0.154 0.147 0.989 1.0 0.966 0.122 1.0 1.0)
Error minima by case: (0 1 0 0 0 1 0 0 1 1)
Average genome size in population (length): 28.983
Average program size in population (points): 38.683
Average percent parens in population: 0.252
Minimum age in population: 32.90603971481323
Maximum age in population: 36.88345980644226
Average age in population: 35.49161663532257
Median age in population: 35.61381030082703
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 7412023
--- Timings ---
Current time: 1559584191711 milliseconds
Total Time:          59.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.2 seconds, 75.8%
Fitness Testing:      9.4 seconds, 15.7%
Report:               5.0 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 345
Test mean error for best: 0.34500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 39                 
Correct output: 7                   | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 44                 
Correct output: 26                  | Program output: 31                 
Correct output: 27                  | Program output: 89                 
Correct output: 11                  | Program output: 22                 
Correct output: 28                  | Program output: 63                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -57                
Correct output: -62                 | Program output: -31                
Correct output: 21                  | Program output: 23                 
Correct output: -86                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -17                
Correct output: -72                 | Program output: -72                
Correct output: -16                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -24                 | Program output: -24                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: 42                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 61                 
Correct output: -8                  | Program output: -8                 
Correct output: -56                 | Program output: -3                 
Correct output: -57                 | Program output: -57                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -49                
Correct output: -71                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -68                 | Program output: -68                
Correct output: -48                 | Program output: -48                
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: -73                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -83                
Correct output: -91                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -85                
Correct output: -77                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -77                 | Program output: -77                
Correct output: -52                 | Program output: -52                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Lexicase best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ())
Lexicase best errors: [0 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Zero cases best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ())
Zero cases best errors: [0 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (929 845 1000 756 621 899 157 844 842 717)
Population mean number of elite cases: 7.61
Count of perfect (error zero) individuals by case: (929 845 0 756 621 899 157 844 842 717)
Population mean number of perfect (error zero) cases: 6.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ())
Errors: [0 0 1 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 33
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 3.39
Median total errors in population: 2
Error averages by case: (0.071 0.155 1.0 0.244 0.379 0.101 0.843 0.156 0.158 0.283)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 25.307
Average program size in population (points): 33.02
Average percent parens in population: 0.234
Minimum age in population: 33.90603971481323
Maximum age in population: 38.49934804439545
Average age in population: 36.64984634649754
Median age in population: 36.73131847381592
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 394
Genome diversity (% unique genomes):	 0.385
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 406
Syntactic diversity (% unique Push programs):	 0.358
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 7685834
--- Timings ---
Current time: 1559584193949 milliseconds
Total Time:          61.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.0 seconds, 75.9%
Fitness Testing:      9.6 seconds, 15.6%
Report:               5.2 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 487
Test mean error for best: 0.48700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 99                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 39                 
Correct output: 7                   | Program output: 97                 
Correct output: 28                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 27                  | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 27                  | Program output: 44                 
Correct output: 26                  | Program output: 87                 
Correct output: 27                  | Program output: 90                 
Correct output: 11                  | Program output: 24                 
Correct output: 28                  | Program output: 63                 
Correct output: 9                   | Program output: 63                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -57                
Correct output: -62                 | Program output: -31                
Correct output: 21                  | Program output: 40                 
Correct output: -86                 | Program output: -44                
Correct output: -77                 | Program output: -39                
Correct output: -47                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -17                
Correct output: -72                 | Program output: -72                
Correct output: -16                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: 68                 
Correct output: -76                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -30                
Correct output: -24                 | Program output: -24                
Correct output: -72                 | Program output: 95                 
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -71                
Correct output: -35                 | Program output: -35                
Correct output: 42                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 79                 
Correct output: -8                  | Program output: -8                 
Correct output: -56                 | Program output: 31                 
Correct output: -57                 | Program output: -57                
Correct output: -55                 | Program output: 40                 
Correct output: -55                 | Program output: 86                 
Correct output: -65                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -3                 
Correct output: -80                 | Program output: 64                 
Correct output: -96                 | Program output: -49                
Correct output: -71                 | Program output: -20                
Correct output: -23                 | Program output: 21                 
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -68                 | Program output: -68                
Correct output: -48                 | Program output: -48                
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: -73                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: 23                 
Correct output: -91                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -85                
Correct output: -77                 | Program output: -43                
Correct output: -67                 | Program output: 77                 
Correct output: -77                 | Program output: -77                
Correct output: -52                 | Program output: -52                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction -35} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Lexicase best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_swap (integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ()) ())
Lexicase best errors: [1 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 35
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction -35} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Zero cases best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_swap (integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ()) ())
Zero cases best errors: [1 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 35
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 2 834 370 2 833 601 919 867 836)
Population mean number of elite cases: 5.26
Count of perfect (error zero) individuals by case: (1 2 834 370 2 833 601 919 867 836)
Population mean number of perfect (error zero) cases: 5.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in4 in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq in3) () ())
Errors: [1 1 0 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 25
Size: 32
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 4.735
Median total errors in population: 4
Error averages by case: (0.999 0.998 0.166 0.63 0.998 0.167 0.399 0.081 0.133 0.164)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.291
Average program size in population (points): 33.026
Average percent parens in population: 0.234
Minimum age in population: 36.07900953292847
Maximum age in population: 40.07135170698166
Average age in population: 38.20795719325542
Median age in population: 38.25910699367523
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 310
Genome diversity (% unique genomes):	 0.432
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 331
Syntactic diversity (% unique Push programs):	 0.394
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 7963479
--- Timings ---
Current time: 1559584196244 milliseconds
Total Time:          64.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.8 seconds, 76.0%
Fitness Testing:      9.9 seconds, 15.5%
Report:               5.4 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -81                 | Program output: 50                 
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 49                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 49                 
Correct output: 46                  | Program output: 64                 
Correct output: 36                  | Program output: 73                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 19                 
Correct output: 31                  | Program output: 36                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 58                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 31                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -47                
Correct output: -24                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -46                
Correct output: -39                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -71                
Correct output: -16                 | Program output: -16                
Correct output: -95                 | Program output: -83                
Correct output: -43                 | Program output: 70                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -24                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -7                 
Correct output: -41                 | Program output: 17                 
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 42                  | Program output: 51                 
Correct output: -60                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -8                  | Program output: 42                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -10                 | Program output: 76                 
Correct output: -64                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -68                 | Program output: -68                
Correct output: -48                 | Program output: -16                
Correct output: 1                   | Program output: 52                 
Correct output: -92                 | Program output: -69                
Correct output: -89                 | Program output: -31                
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -91                 | Program output: -15                
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -77                 | Program output: -77                
Correct output: -52                 | Program output: -52                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap})
Lexicase best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 exec_shove (integer_min print_integer exec_if (integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) (boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq integer_swap) () ())))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 35
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap})
Zero cases best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 exec_shove (integer_min print_integer exec_if (integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) (boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_gte integer_eq integer_swap) () ())))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 35
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (477 692 965 761 480 203 203 203 411 202)
Population mean number of elite cases: 4.60
Count of perfect (error zero) individuals by case: (477 692 965 761 480 203 203 203 411 202)
Population mean number of perfect (error zero) cases: 4.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush})
Best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush))
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 17
Size: 21
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 5.403
Median total errors in population: 5
Error averages by case: (0.523 0.308 0.035 0.239 0.52 0.797 0.797 0.797 0.589 0.798)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.934
Average program size in population (points): 33.434
Average percent parens in population: 0.223
Minimum age in population: 37.49771845340729
Maximum age in population: 41.4634901881218
Average age in population: 40.06546509987116
Median age in population: 40.1448784917593
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.344
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.323
Total error diversity:				 0.009
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 8229879
--- Timings ---
Current time: 1559584198499 milliseconds
Total Time:          66.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.6 seconds, 76.1%
Fitness Testing:     10.2 seconds, 15.4%
Report:               5.6 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 273
Test mean error for best: 0.27300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 39                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 31                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -47                
Correct output: -24                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -46                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -72                
Correct output: -16                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: 70                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -24                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 42                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -8                  | Program output: 42                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -68                 | Program output: -68                
Correct output: -48                 | Program output: -16                
Correct output: 1                   | Program output: 52                 
Correct output: -92                 | Program output: -69                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -91                 | Program output: -15                
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -77                 | Program output: -77                
Correct output: -52                 | Program output: -52                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Lexicase best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 37
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Zero cases best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 37
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (693 462 462 731 945 426 306 866 941 424)
Population mean number of elite cases: 6.26
Count of perfect (error zero) individuals by case: (693 462 462 731 945 426 306 866 941 424)
Population mean number of perfect (error zero) cases: 6.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 29
Size: 37
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 3.744
Median total errors in population: 3
Error averages by case: (0.307 0.538 0.538 0.269 0.055 0.574 0.694 0.134 0.059 0.576)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.383
Average program size in population (points): 33.942
Average percent parens in population: 0.220
Minimum age in population: 39.20821389555931
Maximum age in population: 42.76740625500679
Average age in population: 41.0560101300478
Median age in population: 40.89588864892721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 224
Genome diversity (% unique genomes):	 0.358
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 233
Syntactic diversity (% unique Push programs):	 0.331
Total error diversity:				 0.01
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 8511863
--- Timings ---
Current time: 1559584200842 milliseconds
Total Time:          68.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.4 seconds, 76.2%
Fitness Testing:     10.5 seconds, 15.3%
Report:               5.7 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 136
Test mean error for best: 0.13600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 1
Test Case  179 | Error: 0
Test Case  180 | Error: 1
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 39                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 31                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -47                
Correct output: -24                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -72                
Correct output: -16                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -24                 | Program output: -24                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 42                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -8                  | Program output: -8                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: -57                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -49                
Correct output: -71                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -68                 | Program output: -68                
Correct output: -48                 | Program output: -48                
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: -73                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -91                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -77                 | Program output: -77                
Correct output: -52                 | Program output: -52                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -35} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Lexicase best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 exec_shove (integer_min in4 in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_yankdup -35 integer_gte exec_rot (integer_gte integer_eq in3) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 36
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -35} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Zero cases best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 exec_shove (integer_min in4 in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_yankdup -35 integer_gte exec_rot (integer_gte integer_eq in3) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 36
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (473 740 633 584 746 742 893 888 737 944)
Population mean number of elite cases: 7.38
Count of perfect (error zero) individuals by case: (473 740 633 584 746 742 893 888 737 944)
Population mean number of perfect (error zero) cases: 7.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction -35} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3})
Best program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 in4 in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 33
Size: 41
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 2.62
Median total errors in population: 2
Error averages by case: (0.527 0.26 0.367 0.416 0.254 0.258 0.107 0.112 0.263 0.056)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.047
Average program size in population (points): 35.763
Average percent parens in population: 0.214
Minimum age in population: 40.49447299540043
Maximum age in population: 44.76740625500679
Average age in population: 42.99356651411206
Median age in population: 42.8632116317749
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 319
Genome diversity (% unique genomes):	 0.383
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 326
Syntactic diversity (% unique Push programs):	 0.364
Total error diversity:				 0.011
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 8827643
--- Timings ---
Current time: 1559584203269 milliseconds
Total Time:          71.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        54.2 seconds, 76.2%
Fitness Testing:     10.9 seconds, 15.3%
Report:               5.9 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 28
Successful program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 in4 in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 41


Auto-simplifying with starting size: 41
step: 0
program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 in4 in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 500
program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 in4 in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 1000
program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 in4 in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 1500
program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 in4 in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 2000
program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 in4 in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 2500
program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 in4 in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 3000
program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 in4 in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 3500
program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 in4 in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 4000
program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 in4 in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 4500
program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 in4 in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 5000
program: (boolean_or boolean_rot integer_yank exec_pop () in2 in1 in4 in4 in2 in1 in4 exec_shove (integer_min in4 exec_shove (integer_min print_integer boolean_yank integer_eq exec_do*while (boolean_dup_times integer_sub integer_dup) integer_flush) boolean_dup -35 exec_eq integer_lt integer_gte exec_rot (integer_dup integer_eq in3) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 136
Test mean error for best: 0.13600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 1
Test Case  179 | Error: 0
Test Case  180 | Error: 1
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 39                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 31                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -47                
Correct output: -24                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -72                
Correct output: -16                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -24                 | Program output: -24                
Correct output: -72                 | Program output: -72                
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 42                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -8                  | Program output: -8                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: -57                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -49                
Correct output: -71                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -68                 | Program output: -68                
Correct output: -48                 | Program output: -48                
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: -73                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -91                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -77                 | Program output: -77                
Correct output: -52                 | Program output: -52                
;;******************************
