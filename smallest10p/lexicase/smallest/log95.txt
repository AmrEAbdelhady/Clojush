Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[96 77 77 77] 77] [[-90 -93 -93 -93] -93] [[61 61 44 61] 44] [[30 30 30 -18] -18] [[-88 -90 -90 -90] -90] [[-14 -14 37 -14] -14] [[56 83 83 83] 56] [[-79 -19 -79 -79] -79] [[70 -17 70 70] -17] [[62 -41 -41 -41] -41] [(100 100 100 100) 100] [(-8 -8 -8 -8) -8] [(55 55 55 55) 55] [(-4 -4 -4 -4) -4] [(27 27 27 27) 27] [(29 33 0 20) 0] [(95 67 50 10) 10] [(13 77 38 80) 13] [(75 51 44 12) 12] [(94 62 28 24) 24] [(17 53 42 16) 16] [(55 64 20 73) 20] [(45 100 73 39) 39] [(31 60 64 53) 31] [(9 62 65 87) 9] [(74 20 80 75) 20] [(94 44 92 25) 25] [(1 72 46 36) 1] [(95 59 92 50) 50] [(49 80 43 32) 32] [(16 23 92 70) 16] [(82 55 62 13) 13] [(17 91 79 11) 11] [(30 71 69 0) 0] [(54 66 91 83) 54] [(26 44 -66 -75) -75] [(-78 52 -71 -43) -78] [(-73 -35 -72 -17) -73] [(9 -89 48 -49) -89] [(-64 -77 11 6) -77] [(92 -10 -7 22) -10] [(-11 23 29 45) -11] [(-96 82 -50 -89) -96] [(27 -2 42 27) -2] [(-10 60 -53 -11) -53] [(-61 -49 71 -80) -80] [(-27 -23 -62 14) -62] [(62 93 95 -67) -67] [(-57 -22 44 -100) -100] [(34 18 16 80) 16] [(24 -65 -78 59) -78] [(-59 0 -82 -41) -82] [(99 -31 62 28) -31] [(16 80 54 -6) -6] [(-1 98 23 64) -1] [(-71 -28 51 -69) -71] [(49 57 -17 37) -17] [(-68 38 74 -52) -68] [(-49 -36 -13 -11) -49] [(-72 -60 41 31) -72] [(-67 -63 57 27) -67] [(-83 46 -54 -18) -83] [(-2 9 26 -22) -22] [(42 22 -18 -1) -18] [(-69 -32 -32 54) -69] [(39 66 23 18) 18] [(-59 58 95 -99) -99] [(42 -63 -69 79) -69] [(-41 73 20 21) -41] [(19 -31 -30 -38) -38] [(-44 92 -25 84) -44] [(56 65 -41 60) -41] [(17 -88 44 75) -88] [(-44 43 57 11) -44] [(19 -97 -63 -85) -97] [(91 12 94 58) 12] [(26 48 34 13) 13] [(39 75 53 -52) -52] [(-57 -41 68 -5) -57] [(-33 36 4 -46) -46] [(12 -68 44 -96) -96] [(29 52 95 57) 29] [(66 24 -16 98) -16] [(79 98 -92 56) -92] [(-88 -41 -38 -69) -88] [(72 -24 14 77) -24] [(-56 -100 87 -76) -100] [(-14 -86 -79 35) -86] [(-10 -96 92 -39) -96] [(44 5 82 -92) -92] [(-28 29 -16 13) -28] [(-60 -32 1 -78) -78] [(-12 52 2 72) -12] [(-3 85 12 3) -3] [(-14 53 83 38) -14])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[96 77 77 77] 77]
Train Case:   6 | Input/Output: [[-90 -93 -93 -93] -93]
Train Case:   7 | Input/Output: [[61 61 44 61] 44]
Train Case:   8 | Input/Output: [[30 30 30 -18] -18]
Train Case:   9 | Input/Output: [[-88 -90 -90 -90] -90]
Train Case:  10 | Input/Output: [[-14 -14 37 -14] -14]
Train Case:  11 | Input/Output: [[56 83 83 83] 56]
Train Case:  12 | Input/Output: [[-79 -19 -79 -79] -79]
Train Case:  13 | Input/Output: [[70 -17 70 70] -17]
Train Case:  14 | Input/Output: [[62 -41 -41 -41] -41]
Train Case:  15 | Input/Output: [(100 100 100 100) 100]
Train Case:  16 | Input/Output: [(-8 -8 -8 -8) -8]
Train Case:  17 | Input/Output: [(55 55 55 55) 55]
Train Case:  18 | Input/Output: [(-4 -4 -4 -4) -4]
Train Case:  19 | Input/Output: [(27 27 27 27) 27]
Train Case:  20 | Input/Output: [(29 33 0 20) 0]
Train Case:  21 | Input/Output: [(95 67 50 10) 10]
Train Case:  22 | Input/Output: [(13 77 38 80) 13]
Train Case:  23 | Input/Output: [(75 51 44 12) 12]
Train Case:  24 | Input/Output: [(94 62 28 24) 24]
Train Case:  25 | Input/Output: [(17 53 42 16) 16]
Train Case:  26 | Input/Output: [(55 64 20 73) 20]
Train Case:  27 | Input/Output: [(45 100 73 39) 39]
Train Case:  28 | Input/Output: [(31 60 64 53) 31]
Train Case:  29 | Input/Output: [(9 62 65 87) 9]
Train Case:  30 | Input/Output: [(74 20 80 75) 20]
Train Case:  31 | Input/Output: [(94 44 92 25) 25]
Train Case:  32 | Input/Output: [(1 72 46 36) 1]
Train Case:  33 | Input/Output: [(95 59 92 50) 50]
Train Case:  34 | Input/Output: [(49 80 43 32) 32]
Train Case:  35 | Input/Output: [(16 23 92 70) 16]
Train Case:  36 | Input/Output: [(82 55 62 13) 13]
Train Case:  37 | Input/Output: [(17 91 79 11) 11]
Train Case:  38 | Input/Output: [(30 71 69 0) 0]
Train Case:  39 | Input/Output: [(54 66 91 83) 54]
Train Case:  40 | Input/Output: [(26 44 -66 -75) -75]
Train Case:  41 | Input/Output: [(-78 52 -71 -43) -78]
Train Case:  42 | Input/Output: [(-73 -35 -72 -17) -73]
Train Case:  43 | Input/Output: [(9 -89 48 -49) -89]
Train Case:  44 | Input/Output: [(-64 -77 11 6) -77]
Train Case:  45 | Input/Output: [(92 -10 -7 22) -10]
Train Case:  46 | Input/Output: [(-11 23 29 45) -11]
Train Case:  47 | Input/Output: [(-96 82 -50 -89) -96]
Train Case:  48 | Input/Output: [(27 -2 42 27) -2]
Train Case:  49 | Input/Output: [(-10 60 -53 -11) -53]
Train Case:  50 | Input/Output: [(-61 -49 71 -80) -80]
Train Case:  51 | Input/Output: [(-27 -23 -62 14) -62]
Train Case:  52 | Input/Output: [(62 93 95 -67) -67]
Train Case:  53 | Input/Output: [(-57 -22 44 -100) -100]
Train Case:  54 | Input/Output: [(34 18 16 80) 16]
Train Case:  55 | Input/Output: [(24 -65 -78 59) -78]
Train Case:  56 | Input/Output: [(-59 0 -82 -41) -82]
Train Case:  57 | Input/Output: [(99 -31 62 28) -31]
Train Case:  58 | Input/Output: [(16 80 54 -6) -6]
Train Case:  59 | Input/Output: [(-1 98 23 64) -1]
Train Case:  60 | Input/Output: [(-71 -28 51 -69) -71]
Train Case:  61 | Input/Output: [(49 57 -17 37) -17]
Train Case:  62 | Input/Output: [(-68 38 74 -52) -68]
Train Case:  63 | Input/Output: [(-49 -36 -13 -11) -49]
Train Case:  64 | Input/Output: [(-72 -60 41 31) -72]
Train Case:  65 | Input/Output: [(-67 -63 57 27) -67]
Train Case:  66 | Input/Output: [(-83 46 -54 -18) -83]
Train Case:  67 | Input/Output: [(-2 9 26 -22) -22]
Train Case:  68 | Input/Output: [(42 22 -18 -1) -18]
Train Case:  69 | Input/Output: [(-69 -32 -32 54) -69]
Train Case:  70 | Input/Output: [(39 66 23 18) 18]
Train Case:  71 | Input/Output: [(-59 58 95 -99) -99]
Train Case:  72 | Input/Output: [(42 -63 -69 79) -69]
Train Case:  73 | Input/Output: [(-41 73 20 21) -41]
Train Case:  74 | Input/Output: [(19 -31 -30 -38) -38]
Train Case:  75 | Input/Output: [(-44 92 -25 84) -44]
Train Case:  76 | Input/Output: [(56 65 -41 60) -41]
Train Case:  77 | Input/Output: [(17 -88 44 75) -88]
Train Case:  78 | Input/Output: [(-44 43 57 11) -44]
Train Case:  79 | Input/Output: [(19 -97 -63 -85) -97]
Train Case:  80 | Input/Output: [(91 12 94 58) 12]
Train Case:  81 | Input/Output: [(26 48 34 13) 13]
Train Case:  82 | Input/Output: [(39 75 53 -52) -52]
Train Case:  83 | Input/Output: [(-57 -41 68 -5) -57]
Train Case:  84 | Input/Output: [(-33 36 4 -46) -46]
Train Case:  85 | Input/Output: [(12 -68 44 -96) -96]
Train Case:  86 | Input/Output: [(29 52 95 57) 29]
Train Case:  87 | Input/Output: [(66 24 -16 98) -16]
Train Case:  88 | Input/Output: [(79 98 -92 56) -92]
Train Case:  89 | Input/Output: [(-88 -41 -38 -69) -88]
Train Case:  90 | Input/Output: [(72 -24 14 77) -24]
Train Case:  91 | Input/Output: [(-56 -100 87 -76) -100]
Train Case:  92 | Input/Output: [(-14 -86 -79 35) -86]
Train Case:  93 | Input/Output: [(-10 -96 92 -39) -96]
Train Case:  94 | Input/Output: [(44 5 82 -92) -92]
Train Case:  95 | Input/Output: [(-28 29 -16 13) -28]
Train Case:  96 | Input/Output: [(-60 -32 1 -78) -78]
Train Case:  97 | Input/Output: [(-12 52 2 72) -12]
Train Case:  98 | Input/Output: [(-3 85 12 3) -3]
Train Case:  99 | Input/Output: [(-14 53 83 38) -14]
Test Case:   0 | Input/Output: [[65 65 65 66] 65]
Test Case:   1 | Input/Output: [[-26 -26 98 -26] -26]
Test Case:   2 | Input/Output: [[89 -50 89 89] -50]
Test Case:   3 | Input/Output: [[94 94 94 96] 94]
Test Case:   4 | Input/Output: [[57 57 27 57] 27]
Test Case:   5 | Input/Output: [[49 61 61 61] 49]
Test Case:   6 | Input/Output: [[-6 19 19 19] -6]
Test Case:   7 | Input/Output: [[-68 -6 -6 -6] -68]
Test Case:   8 | Input/Output: [[86 86 -35 86] -35]
Test Case:   9 | Input/Output: [[7 7 7 -69] -69]
Test Case:  10 | Input/Output: [[-91 -91 -18 -91] -91]
Test Case:  11 | Input/Output: [[-70 -70 -70 28] -70]
Test Case:  12 | Input/Output: [[43 43 73 43] 43]
Test Case:  13 | Input/Output: [[2 55 2 2] 2]
Test Case:  14 | Input/Output: [[-51 -51 -97 -51] -97]
Test Case:  15 | Input/Output: [[-71 -71 -71 89] -71]
Test Case:  16 | Input/Output: [[91 -77 -77 -77] -77]
Test Case:  17 | Input/Output: [[59 59 -43 59] -43]
Test Case:  18 | Input/Output: [[-24 -24 -24 100] -24]
Test Case:  19 | Input/Output: [[44 44 -23 44] -23]
Test Case:  20 | Input/Output: [[80 80 80 -71] -71]
Test Case:  21 | Input/Output: [[-86 72 72 72] -86]
Test Case:  22 | Input/Output: [[-97 -34 -97 -97] -97]
Test Case:  23 | Input/Output: [[-9 16 -9 -9] -9]
Test Case:  24 | Input/Output: [[-86 -2 -2 -2] -86]
Test Case:  25 | Input/Output: [[46 -31 46 46] -31]
Test Case:  26 | Input/Output: [[28 53 53 53] 28]
Test Case:  27 | Input/Output: [[-13 -13 -13 7] -13]
Test Case:  28 | Input/Output: [[13 13 13 -14] -14]
Test Case:  29 | Input/Output: [[-98 -21 -98 -98] -98]
Test Case:  30 | Input/Output: [[63 63 72 63] 63]
Test Case:  31 | Input/Output: [[-41 26 -41 -41] -41]
Test Case:  32 | Input/Output: [[-14 26 26 26] -14]
Test Case:  33 | Input/Output: [[25 25 -41 25] -41]
Test Case:  34 | Input/Output: [[25 25 25 -46] -46]
Test Case:  35 | Input/Output: [[-19 -19 -19 -27] -27]
Test Case:  36 | Input/Output: [[40 -8 40 40] -8]
Test Case:  37 | Input/Output: [[-56 69 -56 -56] -56]
Test Case:  38 | Input/Output: [[87 28 87 87] 28]
Test Case:  39 | Input/Output: [[-12 -12 -12 -44] -44]
Test Case:  40 | Input/Output: [[27 45 45 45] 27]
Test Case:  41 | Input/Output: [[-37 -37 -37 92] -37]
Test Case:  42 | Input/Output: [[-46 -46 -46 65] -46]
Test Case:  43 | Input/Output: [[-47 -47 -65 -47] -65]
Test Case:  44 | Input/Output: [[46 46 46 -24] -24]
Test Case:  45 | Input/Output: [[78 -75 78 78] -75]
Test Case:  46 | Input/Output: [[14 -4 14 14] -4]
Test Case:  47 | Input/Output: [[-51 -71 -71 -71] -71]
Test Case:  48 | Input/Output: [[-39 -48 -48 -48] -48]
Test Case:  49 | Input/Output: [[85 -17 85 85] -17]
Test Case:  50 | Input/Output: [[-32 -32 85 -32] -32]
Test Case:  51 | Input/Output: [[54 -56 54 54] -56]
Test Case:  52 | Input/Output: [[10 10 -19 10] -19]
Test Case:  53 | Input/Output: [[38 -31 -31 -31] -31]
Test Case:  54 | Input/Output: [[2 2 2 88] 2]
Test Case:  55 | Input/Output: [[82 40 82 82] 40]
Test Case:  56 | Input/Output: [[17 72 72 72] 17]
Test Case:  57 | Input/Output: [[22 8 8 8] 8]
Test Case:  58 | Input/Output: [[69 69 69 27] 27]
Test Case:  59 | Input/Output: [[-7 -7 -7 -15] -15]
Test Case:  60 | Input/Output: [[-64 -64 -64 39] -64]
Test Case:  61 | Input/Output: [[-25 -25 -25 -42] -42]
Test Case:  62 | Input/Output: [[64 70 64 64] 64]
Test Case:  63 | Input/Output: [[-71 -71 -71 -51] -71]
Test Case:  64 | Input/Output: [[66 66 -26 66] -26]
Test Case:  65 | Input/Output: [[70 -66 -66 -66] -66]
Test Case:  66 | Input/Output: [[-50 -50 52 -50] -50]
Test Case:  67 | Input/Output: [[-8 -26 -26 -26] -26]
Test Case:  68 | Input/Output: [[66 -73 -73 -73] -73]
Test Case:  69 | Input/Output: [[-61 -36 -61 -61] -61]
Test Case:  70 | Input/Output: [[27 43 43 43] 27]
Test Case:  71 | Input/Output: [[74 -8 74 74] -8]
Test Case:  72 | Input/Output: [[-91 -91 -91 -1] -91]
Test Case:  73 | Input/Output: [[22 43 22 22] 22]
Test Case:  74 | Input/Output: [[24 24 12 24] 12]
Test Case:  75 | Input/Output: [[-28 -28 66 -28] -28]
Test Case:  76 | Input/Output: [[-65 -65 18 -65] -65]
Test Case:  77 | Input/Output: [[-70 -70 -70 -62] -70]
Test Case:  78 | Input/Output: [[-80 -36 -80 -80] -80]
Test Case:  79 | Input/Output: [[82 16 82 82] 16]
Test Case:  80 | Input/Output: [[-100 -100 -100 64] -100]
Test Case:  81 | Input/Output: [[-24 -24 -34 -24] -34]
Test Case:  82 | Input/Output: [[-66 -66 6 -66] -66]
Test Case:  83 | Input/Output: [[15 -88 -88 -88] -88]
Test Case:  84 | Input/Output: [[80 80 -74 80] -74]
Test Case:  85 | Input/Output: [[76 -18 -18 -18] -18]
Test Case:  86 | Input/Output: [[43 43 43 -86] -86]
Test Case:  87 | Input/Output: [[32 32 -11 32] -11]
Test Case:  88 | Input/Output: [[-8 -8 -8 10] -8]
Test Case:  89 | Input/Output: [[-41 27 27 27] -41]
Test Case:  90 | Input/Output: [[-93 -93 71 -93] -93]
Test Case:  91 | Input/Output: [[-93 49 49 49] -93]
Test Case:  92 | Input/Output: [[-93 -93 -1 -93] -93]
Test Case:  93 | Input/Output: [[-46 -46 -46 56] -46]
Test Case:  94 | Input/Output: [[82 40 40 40] 40]
Test Case:  95 | Input/Output: [[49 49 49 -69] -69]
Test Case:  96 | Input/Output: [[81 28 28 28] 28]
Test Case:  97 | Input/Output: [[15 15 15 -21] -21]
Test Case:  98 | Input/Output: [[-24 -24 54 -24] -24]
Test Case:  99 | Input/Output: [[32 32 32 92] 32]
Test Case: 100 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 101 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 102 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 103 | Input/Output: [(92 92 92 92) 92]
Test Case: 104 | Input/Output: [(26 26 26 26) 26]
Test Case: 105 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 106 | Input/Output: [(37 37 37 37) 37]
Test Case: 107 | Input/Output: [(17 17 17 17) 17]
Test Case: 108 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 109 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 110 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 111 | Input/Output: [(3 3 3 3) 3]
Test Case: 112 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 113 | Input/Output: [(31 31 31 31) 31]
Test Case: 114 | Input/Output: [(66 66 66 66) 66]
Test Case: 115 | Input/Output: [(72 72 72 72) 72]
Test Case: 116 | Input/Output: [(20 20 20 20) 20]
Test Case: 117 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 118 | Input/Output: [(61 61 61 61) 61]
Test Case: 119 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 120 | Input/Output: [(65 65 65 65) 65]
Test Case: 121 | Input/Output: [(58 58 58 58) 58]
Test Case: 122 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 123 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 124 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 125 | Input/Output: [(85 85 85 85) 85]
Test Case: 126 | Input/Output: [(0 0 0 0) 0]
Test Case: 127 | Input/Output: [(92 92 92 92) 92]
Test Case: 128 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 129 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 130 | Input/Output: [(61 61 61 61) 61]
Test Case: 131 | Input/Output: [(44 44 44 44) 44]
Test Case: 132 | Input/Output: [(20 20 20 20) 20]
Test Case: 133 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 134 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 135 | Input/Output: [(42 42 42 42) 42]
Test Case: 136 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 137 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 138 | Input/Output: [(32 32 32 32) 32]
Test Case: 139 | Input/Output: [(71 71 71 71) 71]
Test Case: 140 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 141 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 142 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 143 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 144 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 145 | Input/Output: [(77 77 77 77) 77]
Test Case: 146 | Input/Output: [(48 48 48 48) 48]
Test Case: 147 | Input/Output: [(87 87 87 87) 87]
Test Case: 148 | Input/Output: [(94 94 94 94) 94]
Test Case: 149 | Input/Output: [(94 94 94 94) 94]
Test Case: 150 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 151 | Input/Output: [(55 55 55 55) 55]
Test Case: 152 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 153 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 154 | Input/Output: [(21 21 21 21) 21]
Test Case: 155 | Input/Output: [(31 31 31 31) 31]
Test Case: 156 | Input/Output: [(24 24 24 24) 24]
Test Case: 157 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 158 | Input/Output: [(84 84 84 84) 84]
Test Case: 159 | Input/Output: [(20 20 20 20) 20]
Test Case: 160 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 161 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 162 | Input/Output: [(81 81 81 81) 81]
Test Case: 163 | Input/Output: [(89 89 89 89) 89]
Test Case: 164 | Input/Output: [(75 75 75 75) 75]
Test Case: 165 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 166 | Input/Output: [(0 0 0 0) 0]
Test Case: 167 | Input/Output: [(94 94 94 94) 94]
Test Case: 168 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 169 | Input/Output: [(19 19 19 19) 19]
Test Case: 170 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 171 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 172 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 173 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 174 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 175 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 176 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 177 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 178 | Input/Output: [(23 23 23 23) 23]
Test Case: 179 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 180 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 181 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 182 | Input/Output: [(85 85 85 85) 85]
Test Case: 183 | Input/Output: [(55 55 55 55) 55]
Test Case: 184 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 185 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 186 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 187 | Input/Output: [(21 21 21 21) 21]
Test Case: 188 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 189 | Input/Output: [(60 60 60 60) 60]
Test Case: 190 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 191 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 192 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 193 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 194 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 195 | Input/Output: [(45 45 45 45) 45]
Test Case: 196 | Input/Output: [(85 85 85 85) 85]
Test Case: 197 | Input/Output: [(53 53 53 53) 53]
Test Case: 198 | Input/Output: [(17 17 17 17) 17]
Test Case: 199 | Input/Output: [(100 100 100 100) 100]
Test Case: 200 | Input/Output: [(69 86 14 14) 14]
Test Case: 201 | Input/Output: [(40 97 77 86) 40]
Test Case: 202 | Input/Output: [(20 43 79 25) 20]
Test Case: 203 | Input/Output: [(33 82 61 82) 33]
Test Case: 204 | Input/Output: [(13 35 95 39) 13]
Test Case: 205 | Input/Output: [(65 8 6 60) 6]
Test Case: 206 | Input/Output: [(58 29 12 25) 12]
Test Case: 207 | Input/Output: [(52 6 70 11) 6]
Test Case: 208 | Input/Output: [(7 77 14 30) 7]
Test Case: 209 | Input/Output: [(9 34 98 79) 9]
Test Case: 210 | Input/Output: [(43 55 51 49) 43]
Test Case: 211 | Input/Output: [(37 30 78 31) 30]
Test Case: 212 | Input/Output: [(35 37 52 5) 5]
Test Case: 213 | Input/Output: [(31 42 32 41) 31]
Test Case: 214 | Input/Output: [(94 75 80 94) 75]
Test Case: 215 | Input/Output: [(55 17 95 62) 17]
Test Case: 216 | Input/Output: [(40 67 66 69) 40]
Test Case: 217 | Input/Output: [(15 47 24 91) 15]
Test Case: 218 | Input/Output: [(73 56 4 69) 4]
Test Case: 219 | Input/Output: [(84 70 37 83) 37]
Test Case: 220 | Input/Output: [(29 74 99 88) 29]
Test Case: 221 | Input/Output: [(60 79 32 78) 32]
Test Case: 222 | Input/Output: [(64 81 1 81) 1]
Test Case: 223 | Input/Output: [(92 78 62 1) 1]
Test Case: 224 | Input/Output: [(33 74 83 61) 33]
Test Case: 225 | Input/Output: [(38 72 59 73) 38]
Test Case: 226 | Input/Output: [(47 98 45 51) 45]
Test Case: 227 | Input/Output: [(27 11 51 3) 3]
Test Case: 228 | Input/Output: [(65 56 89 7) 7]
Test Case: 229 | Input/Output: [(96 65 23 79) 23]
Test Case: 230 | Input/Output: [(5 47 20 43) 5]
Test Case: 231 | Input/Output: [(83 21 75 25) 21]
Test Case: 232 | Input/Output: [(37 7 16 36) 7]
Test Case: 233 | Input/Output: [(80 79 25 54) 25]
Test Case: 234 | Input/Output: [(28 74 68 25) 25]
Test Case: 235 | Input/Output: [(26 43 32 94) 26]
Test Case: 236 | Input/Output: [(35 88 56 26) 26]
Test Case: 237 | Input/Output: [(67 69 33 78) 33]
Test Case: 238 | Input/Output: [(14 49 73 38) 14]
Test Case: 239 | Input/Output: [(49 67 49 4) 4]
Test Case: 240 | Input/Output: [(30 72 9 100) 9]
Test Case: 241 | Input/Output: [(16 63 90 84) 16]
Test Case: 242 | Input/Output: [(97 13 29 32) 13]
Test Case: 243 | Input/Output: [(63 44 89 81) 44]
Test Case: 244 | Input/Output: [(28 83 55 27) 27]
Test Case: 245 | Input/Output: [(49 72 71 77) 49]
Test Case: 246 | Input/Output: [(59 86 70 92) 59]
Test Case: 247 | Input/Output: [(9 32 80 8) 8]
Test Case: 248 | Input/Output: [(66 39 83 49) 39]
Test Case: 249 | Input/Output: [(9 92 75 97) 9]
Test Case: 250 | Input/Output: [(72 18 87 84) 18]
Test Case: 251 | Input/Output: [(83 51 24 41) 24]
Test Case: 252 | Input/Output: [(50 57 39 12) 12]
Test Case: 253 | Input/Output: [(5 77 40 81) 5]
Test Case: 254 | Input/Output: [(70 96 77 96) 70]
Test Case: 255 | Input/Output: [(43 5 77 1) 1]
Test Case: 256 | Input/Output: [(84 43 65 25) 25]
Test Case: 257 | Input/Output: [(79 10 78 25) 10]
Test Case: 258 | Input/Output: [(87 19 64 68) 19]
Test Case: 259 | Input/Output: [(18 25 94 71) 18]
Test Case: 260 | Input/Output: [(60 52 58 32) 32]
Test Case: 261 | Input/Output: [(76 2 50 66) 2]
Test Case: 262 | Input/Output: [(76 86 76 98) 76]
Test Case: 263 | Input/Output: [(25 93 91 80) 25]
Test Case: 264 | Input/Output: [(73 14 58 67) 14]
Test Case: 265 | Input/Output: [(41 80 18 2) 2]
Test Case: 266 | Input/Output: [(57 35 99 15) 15]
Test Case: 267 | Input/Output: [(35 13 62 91) 13]
Test Case: 268 | Input/Output: [(77 2 76 93) 2]
Test Case: 269 | Input/Output: [(42 16 39 82) 16]
Test Case: 270 | Input/Output: [(91 38 42 46) 38]
Test Case: 271 | Input/Output: [(11 33 98 53) 11]
Test Case: 272 | Input/Output: [(0 16 40 19) 0]
Test Case: 273 | Input/Output: [(12 51 27 38) 12]
Test Case: 274 | Input/Output: [(91 60 26 17) 17]
Test Case: 275 | Input/Output: [(84 72 93 45) 45]
Test Case: 276 | Input/Output: [(92 84 21 3) 3]
Test Case: 277 | Input/Output: [(78 92 77 68) 68]
Test Case: 278 | Input/Output: [(98 78 76 44) 44]
Test Case: 279 | Input/Output: [(63 92 30 76) 30]
Test Case: 280 | Input/Output: [(3 62 55 4) 3]
Test Case: 281 | Input/Output: [(53 32 93 73) 32]
Test Case: 282 | Input/Output: [(5 79 8 30) 5]
Test Case: 283 | Input/Output: [(48 23 64 79) 23]
Test Case: 284 | Input/Output: [(45 54 23 63) 23]
Test Case: 285 | Input/Output: [(20 38 6 27) 6]
Test Case: 286 | Input/Output: [(49 38 89 73) 38]
Test Case: 287 | Input/Output: [(2 21 40 77) 2]
Test Case: 288 | Input/Output: [(32 91 18 15) 15]
Test Case: 289 | Input/Output: [(25 41 77 13) 13]
Test Case: 290 | Input/Output: [(98 0 12 54) 0]
Test Case: 291 | Input/Output: [(88 78 55 91) 55]
Test Case: 292 | Input/Output: [(88 13 32 72) 13]
Test Case: 293 | Input/Output: [(82 65 48 81) 48]
Test Case: 294 | Input/Output: [(67 97 56 93) 56]
Test Case: 295 | Input/Output: [(94 8 62 78) 8]
Test Case: 296 | Input/Output: [(95 15 29 45) 15]
Test Case: 297 | Input/Output: [(1 72 58 13) 1]
Test Case: 298 | Input/Output: [(13 84 67 26) 13]
Test Case: 299 | Input/Output: [(77 33 2 55) 2]
Test Case: 300 | Input/Output: [(39 79 77 9) 9]
Test Case: 301 | Input/Output: [(55 74 16 99) 16]
Test Case: 302 | Input/Output: [(70 69 58 19) 19]
Test Case: 303 | Input/Output: [(96 38 76 2) 2]
Test Case: 304 | Input/Output: [(100 14 86 59) 14]
Test Case: 305 | Input/Output: [(64 4 16 35) 4]
Test Case: 306 | Input/Output: [(52 38 25 93) 25]
Test Case: 307 | Input/Output: [(18 90 26 1) 1]
Test Case: 308 | Input/Output: [(40 53 17 56) 17]
Test Case: 309 | Input/Output: [(91 77 0 32) 0]
Test Case: 310 | Input/Output: [(79 19 70 99) 19]
Test Case: 311 | Input/Output: [(23 74 85 38) 23]
Test Case: 312 | Input/Output: [(49 19 75 74) 19]
Test Case: 313 | Input/Output: [(14 94 69 80) 14]
Test Case: 314 | Input/Output: [(5 50 13 89) 5]
Test Case: 315 | Input/Output: [(19 53 32 60) 19]
Test Case: 316 | Input/Output: [(65 9 0 38) 0]
Test Case: 317 | Input/Output: [(46 28 89 56) 28]
Test Case: 318 | Input/Output: [(38 78 81 23) 23]
Test Case: 319 | Input/Output: [(85 42 21 58) 21]
Test Case: 320 | Input/Output: [(33 81 13 89) 13]
Test Case: 321 | Input/Output: [(45 92 42 9) 9]
Test Case: 322 | Input/Output: [(86 25 36 0) 0]
Test Case: 323 | Input/Output: [(31 84 34 83) 31]
Test Case: 324 | Input/Output: [(56 0 57 19) 0]
Test Case: 325 | Input/Output: [(49 1 16 88) 1]
Test Case: 326 | Input/Output: [(13 47 5 90) 5]
Test Case: 327 | Input/Output: [(24 22 24 81) 22]
Test Case: 328 | Input/Output: [(55 88 3 24) 3]
Test Case: 329 | Input/Output: [(10 80 65 24) 10]
Test Case: 330 | Input/Output: [(44 30 85 31) 30]
Test Case: 331 | Input/Output: [(92 97 74 76) 74]
Test Case: 332 | Input/Output: [(17 23 55 52) 17]
Test Case: 333 | Input/Output: [(100 11 66 78) 11]
Test Case: 334 | Input/Output: [(55 28 54 41) 28]
Test Case: 335 | Input/Output: [(58 63 24 60) 24]
Test Case: 336 | Input/Output: [(64 88 63 82) 63]
Test Case: 337 | Input/Output: [(94 18 20 89) 18]
Test Case: 338 | Input/Output: [(30 32 21 63) 21]
Test Case: 339 | Input/Output: [(3 24 36 39) 3]
Test Case: 340 | Input/Output: [(66 26 43 20) 20]
Test Case: 341 | Input/Output: [(65 36 85 22) 22]
Test Case: 342 | Input/Output: [(21 25 15 38) 15]
Test Case: 343 | Input/Output: [(12 71 9 46) 9]
Test Case: 344 | Input/Output: [(93 10 36 87) 10]
Test Case: 345 | Input/Output: [(61 2 30 90) 2]
Test Case: 346 | Input/Output: [(69 98 22 70) 22]
Test Case: 347 | Input/Output: [(14 20 28 27) 14]
Test Case: 348 | Input/Output: [(40 99 68 73) 40]
Test Case: 349 | Input/Output: [(56 41 89 76) 41]
Test Case: 350 | Input/Output: [(19 33 93 39) 19]
Test Case: 351 | Input/Output: [(6 58 11 43) 6]
Test Case: 352 | Input/Output: [(92 15 42 81) 15]
Test Case: 353 | Input/Output: [(19 33 68 6) 6]
Test Case: 354 | Input/Output: [(79 100 55 43) 43]
Test Case: 355 | Input/Output: [(45 87 10 38) 10]
Test Case: 356 | Input/Output: [(43 77 26 66) 26]
Test Case: 357 | Input/Output: [(4 59 18 67) 4]
Test Case: 358 | Input/Output: [(42 1 55 89) 1]
Test Case: 359 | Input/Output: [(54 45 86 99) 45]
Test Case: 360 | Input/Output: [(38 4 10 58) 4]
Test Case: 361 | Input/Output: [(20 38 59 74) 20]
Test Case: 362 | Input/Output: [(88 34 62 52) 34]
Test Case: 363 | Input/Output: [(59 43 18 74) 18]
Test Case: 364 | Input/Output: [(96 50 2 89) 2]
Test Case: 365 | Input/Output: [(12 82 44 15) 12]
Test Case: 366 | Input/Output: [(14 95 80 6) 6]
Test Case: 367 | Input/Output: [(66 80 74 95) 66]
Test Case: 368 | Input/Output: [(98 71 26 98) 26]
Test Case: 369 | Input/Output: [(91 23 29 23) 23]
Test Case: 370 | Input/Output: [(18 68 40 22) 18]
Test Case: 371 | Input/Output: [(50 71 39 51) 39]
Test Case: 372 | Input/Output: [(34 66 99 52) 34]
Test Case: 373 | Input/Output: [(29 42 19 67) 19]
Test Case: 374 | Input/Output: [(4 0 30 66) 0]
Test Case: 375 | Input/Output: [(3 63 73 60) 3]
Test Case: 376 | Input/Output: [(98 36 97 64) 36]
Test Case: 377 | Input/Output: [(31 56 1 1) 1]
Test Case: 378 | Input/Output: [(79 22 5 61) 5]
Test Case: 379 | Input/Output: [(59 7 77 45) 7]
Test Case: 380 | Input/Output: [(65 97 44 74) 44]
Test Case: 381 | Input/Output: [(60 99 4 22) 4]
Test Case: 382 | Input/Output: [(42 20 63 53) 20]
Test Case: 383 | Input/Output: [(30 45 16 12) 12]
Test Case: 384 | Input/Output: [(55 16 46 76) 16]
Test Case: 385 | Input/Output: [(72 31 93 36) 31]
Test Case: 386 | Input/Output: [(8 5 24 10) 5]
Test Case: 387 | Input/Output: [(21 47 100 15) 15]
Test Case: 388 | Input/Output: [(23 52 50 7) 7]
Test Case: 389 | Input/Output: [(38 40 50 20) 20]
Test Case: 390 | Input/Output: [(96 31 86 93) 31]
Test Case: 391 | Input/Output: [(46 26 39 99) 26]
Test Case: 392 | Input/Output: [(89 60 31 4) 4]
Test Case: 393 | Input/Output: [(98 16 59 90) 16]
Test Case: 394 | Input/Output: [(78 28 93 15) 15]
Test Case: 395 | Input/Output: [(22 43 56 9) 9]
Test Case: 396 | Input/Output: [(14 94 96 69) 14]
Test Case: 397 | Input/Output: [(72 37 85 54) 37]
Test Case: 398 | Input/Output: [(47 20 10 55) 10]
Test Case: 399 | Input/Output: [(21 86 58 66) 21]
Test Case: 400 | Input/Output: [(13 -43 -92 26) -92]
Test Case: 401 | Input/Output: [(90 -59 -69 -27) -69]
Test Case: 402 | Input/Output: [(26 51 24 43) 24]
Test Case: 403 | Input/Output: [(99 54 82 -92) -92]
Test Case: 404 | Input/Output: [(-4 -44 -14 90) -44]
Test Case: 405 | Input/Output: [(51 -99 53 -25) -99]
Test Case: 406 | Input/Output: [(-63 -30 -53 -24) -63]
Test Case: 407 | Input/Output: [(-74 -47 65 -11) -74]
Test Case: 408 | Input/Output: [(-55 82 -89 88) -89]
Test Case: 409 | Input/Output: [(39 20 17 -51) -51]
Test Case: 410 | Input/Output: [(-45 5 -14 92) -45]
Test Case: 411 | Input/Output: [(-90 -83 -40 28) -90]
Test Case: 412 | Input/Output: [(42 -12 -29 31) -29]
Test Case: 413 | Input/Output: [(-93 -80 -84 59) -93]
Test Case: 414 | Input/Output: [(-27 100 57 14) -27]
Test Case: 415 | Input/Output: [(95 -22 78 64) -22]
Test Case: 416 | Input/Output: [(11 66 -99 -26) -99]
Test Case: 417 | Input/Output: [(41 -38 -2 10) -38]
Test Case: 418 | Input/Output: [(90 -68 73 12) -68]
Test Case: 419 | Input/Output: [(1 -9 -88 5) -88]
Test Case: 420 | Input/Output: [(89 15 -1 -54) -54]
Test Case: 421 | Input/Output: [(30 -34 26 17) -34]
Test Case: 422 | Input/Output: [(-34 -78 68 -28) -78]
Test Case: 423 | Input/Output: [(51 -31 -32 -24) -32]
Test Case: 424 | Input/Output: [(-21 14 -98 -32) -98]
Test Case: 425 | Input/Output: [(-23 36 35 -24) -24]
Test Case: 426 | Input/Output: [(-49 -10 -24 62) -49]
Test Case: 427 | Input/Output: [(16 8 -47 -34) -47]
Test Case: 428 | Input/Output: [(-84 15 -42 39) -84]
Test Case: 429 | Input/Output: [(5 -9 -38 75) -38]
Test Case: 430 | Input/Output: [(75 69 -62 52) -62]
Test Case: 431 | Input/Output: [(-92 50 82 77) -92]
Test Case: 432 | Input/Output: [(-29 83 34 -37) -37]
Test Case: 433 | Input/Output: [(-89 -28 -61 65) -89]
Test Case: 434 | Input/Output: [(-46 -25 -23 -28) -46]
Test Case: 435 | Input/Output: [(77 99 -90 -93) -93]
Test Case: 436 | Input/Output: [(-85 -29 -3 43) -85]
Test Case: 437 | Input/Output: [(-72 70 12 -62) -72]
Test Case: 438 | Input/Output: [(90 -30 -59 51) -59]
Test Case: 439 | Input/Output: [(29 35 64 -5) -5]
Test Case: 440 | Input/Output: [(84 -11 -47 48) -47]
Test Case: 441 | Input/Output: [(61 -61 94 -19) -61]
Test Case: 442 | Input/Output: [(19 1 2 -87) -87]
Test Case: 443 | Input/Output: [(48 5 69 -52) -52]
Test Case: 444 | Input/Output: [(-5 31 46 -9) -9]
Test Case: 445 | Input/Output: [(14 24 -65 -95) -95]
Test Case: 446 | Input/Output: [(97 -72 -40 -68) -72]
Test Case: 447 | Input/Output: [(34 -41 90 53) -41]
Test Case: 448 | Input/Output: [(10 34 43 -86) -86]
Test Case: 449 | Input/Output: [(7 -33 -65 0) -65]
Test Case: 450 | Input/Output: [(73 95 -80 26) -80]
Test Case: 451 | Input/Output: [(16 1 -81 -35) -81]
Test Case: 452 | Input/Output: [(-92 9 29 -11) -92]
Test Case: 453 | Input/Output: [(72 51 31 60) 31]
Test Case: 454 | Input/Output: [(-61 29 86 -74) -74]
Test Case: 455 | Input/Output: [(65 -21 -12 94) -21]
Test Case: 456 | Input/Output: [(-93 8 -48 67) -93]
Test Case: 457 | Input/Output: [(-86 41 78 -93) -93]
Test Case: 458 | Input/Output: [(-57 64 17 31) -57]
Test Case: 459 | Input/Output: [(-55 11 26 0) -55]
Test Case: 460 | Input/Output: [(-73 79 36 -33) -73]
Test Case: 461 | Input/Output: [(-83 57 22 42) -83]
Test Case: 462 | Input/Output: [(87 -8 71 -18) -18]
Test Case: 463 | Input/Output: [(89 -2 37 -46) -46]
Test Case: 464 | Input/Output: [(7 11 -58 88) -58]
Test Case: 465 | Input/Output: [(-20 -70 50 57) -70]
Test Case: 466 | Input/Output: [(-16 -67 -74 -31) -74]
Test Case: 467 | Input/Output: [(44 -75 -9 26) -75]
Test Case: 468 | Input/Output: [(-40 2 -78 -14) -78]
Test Case: 469 | Input/Output: [(-12 -60 11 42) -60]
Test Case: 470 | Input/Output: [(-14 59 -21 6) -21]
Test Case: 471 | Input/Output: [(22 -88 17 -83) -88]
Test Case: 472 | Input/Output: [(59 -54 -56 -68) -68]
Test Case: 473 | Input/Output: [(-52 83 -1 73) -52]
Test Case: 474 | Input/Output: [(36 14 62 29) 14]
Test Case: 475 | Input/Output: [(33 -98 83 -90) -98]
Test Case: 476 | Input/Output: [(-86 97 96 -69) -86]
Test Case: 477 | Input/Output: [(69 -13 -93 16) -93]
Test Case: 478 | Input/Output: [(50 9 -69 44) -69]
Test Case: 479 | Input/Output: [(-82 -52 -9 -94) -94]
Test Case: 480 | Input/Output: [(-92 -92 86 26) -92]
Test Case: 481 | Input/Output: [(-5 43 34 -35) -35]
Test Case: 482 | Input/Output: [(94 97 -46 -19) -46]
Test Case: 483 | Input/Output: [(15 -96 27 7) -96]
Test Case: 484 | Input/Output: [(50 -22 69 -34) -34]
Test Case: 485 | Input/Output: [(-72 -2 -31 62) -72]
Test Case: 486 | Input/Output: [(-98 -43 -20 -46) -98]
Test Case: 487 | Input/Output: [(73 9 24 20) 9]
Test Case: 488 | Input/Output: [(-33 46 -59 -34) -59]
Test Case: 489 | Input/Output: [(23 14 59 21) 14]
Test Case: 490 | Input/Output: [(-37 4 85 92) -37]
Test Case: 491 | Input/Output: [(-14 -84 96 98) -84]
Test Case: 492 | Input/Output: [(95 44 -6 -87) -87]
Test Case: 493 | Input/Output: [(56 -24 10 -28) -28]
Test Case: 494 | Input/Output: [(-55 34 -1 56) -55]
Test Case: 495 | Input/Output: [(18 -11 -44 7) -44]
Test Case: 496 | Input/Output: [(87 -71 86 72) -71]
Test Case: 497 | Input/Output: [(22 -46 -26 -78) -78]
Test Case: 498 | Input/Output: [(-5 47 -79 14) -79]
Test Case: 499 | Input/Output: [(37 6 80 -21) -21]
Test Case: 500 | Input/Output: [(65 5 97 22) 5]
Test Case: 501 | Input/Output: [(34 -48 -34 -60) -60]
Test Case: 502 | Input/Output: [(66 -18 5 85) -18]
Test Case: 503 | Input/Output: [(-67 -40 -40 14) -67]
Test Case: 504 | Input/Output: [(58 -50 8 27) -50]
Test Case: 505 | Input/Output: [(-49 79 -68 -7) -68]
Test Case: 506 | Input/Output: [(64 -98 7 -69) -98]
Test Case: 507 | Input/Output: [(-100 66 -19 -54) -100]
Test Case: 508 | Input/Output: [(21 53 70 -80) -80]
Test Case: 509 | Input/Output: [(-31 28 -25 -94) -94]
Test Case: 510 | Input/Output: [(-96 -14 -33 -17) -96]
Test Case: 511 | Input/Output: [(53 -42 -14 -66) -66]
Test Case: 512 | Input/Output: [(2 -41 -28 79) -41]
Test Case: 513 | Input/Output: [(-54 84 -100 -12) -100]
Test Case: 514 | Input/Output: [(78 51 -18 17) -18]
Test Case: 515 | Input/Output: [(17 59 65 4) 4]
Test Case: 516 | Input/Output: [(-49 31 34 -12) -49]
Test Case: 517 | Input/Output: [(85 19 16 96) 16]
Test Case: 518 | Input/Output: [(-9 66 -71 36) -71]
Test Case: 519 | Input/Output: [(36 9 76 68) 9]
Test Case: 520 | Input/Output: [(-77 92 -53 5) -77]
Test Case: 521 | Input/Output: [(-72 -43 -85 54) -85]
Test Case: 522 | Input/Output: [(-17 60 -22 -69) -69]
Test Case: 523 | Input/Output: [(-73 -95 75 -83) -95]
Test Case: 524 | Input/Output: [(70 73 -96 1) -96]
Test Case: 525 | Input/Output: [(-95 56 87 40) -95]
Test Case: 526 | Input/Output: [(-34 -19 -38 40) -38]
Test Case: 527 | Input/Output: [(-15 -88 -36 -57) -88]
Test Case: 528 | Input/Output: [(71 -3 79 29) -3]
Test Case: 529 | Input/Output: [(87 -95 -6 73) -95]
Test Case: 530 | Input/Output: [(81 -5 73 59) -5]
Test Case: 531 | Input/Output: [(74 -19 -9 12) -19]
Test Case: 532 | Input/Output: [(-65 72 78 54) -65]
Test Case: 533 | Input/Output: [(36 -58 95 54) -58]
Test Case: 534 | Input/Output: [(6 34 -60 -90) -90]
Test Case: 535 | Input/Output: [(-65 8 0 -51) -65]
Test Case: 536 | Input/Output: [(64 76 50 -72) -72]
Test Case: 537 | Input/Output: [(-47 -74 59 72) -74]
Test Case: 538 | Input/Output: [(-92 67 -61 85) -92]
Test Case: 539 | Input/Output: [(56 -95 80 43) -95]
Test Case: 540 | Input/Output: [(8 -65 51 -79) -79]
Test Case: 541 | Input/Output: [(-9 99 -64 -10) -64]
Test Case: 542 | Input/Output: [(-16 23 -78 -69) -78]
Test Case: 543 | Input/Output: [(34 7 -31 -43) -43]
Test Case: 544 | Input/Output: [(24 23 37 18) 18]
Test Case: 545 | Input/Output: [(82 69 100 -43) -43]
Test Case: 546 | Input/Output: [(-61 93 70 -42) -61]
Test Case: 547 | Input/Output: [(-65 88 15 15) -65]
Test Case: 548 | Input/Output: [(9 37 80 46) 9]
Test Case: 549 | Input/Output: [(25 25 -40 73) -40]
Test Case: 550 | Input/Output: [(99 65 -24 46) -24]
Test Case: 551 | Input/Output: [(75 2 19 -71) -71]
Test Case: 552 | Input/Output: [(38 15 28 17) 15]
Test Case: 553 | Input/Output: [(-41 72 73 -49) -49]
Test Case: 554 | Input/Output: [(-91 -81 69 -70) -91]
Test Case: 555 | Input/Output: [(-80 40 26 87) -80]
Test Case: 556 | Input/Output: [(73 0 -77 -11) -77]
Test Case: 557 | Input/Output: [(-44 38 -100 4) -100]
Test Case: 558 | Input/Output: [(19 -62 -68 -91) -91]
Test Case: 559 | Input/Output: [(2 63 -36 -81) -81]
Test Case: 560 | Input/Output: [(76 -29 17 88) -29]
Test Case: 561 | Input/Output: [(-82 -83 72 -75) -83]
Test Case: 562 | Input/Output: [(21 -32 48 66) -32]
Test Case: 563 | Input/Output: [(84 24 -24 -98) -98]
Test Case: 564 | Input/Output: [(60 -89 52 -94) -94]
Test Case: 565 | Input/Output: [(-83 -31 -98 -13) -98]
Test Case: 566 | Input/Output: [(49 -19 -81 -12) -81]
Test Case: 567 | Input/Output: [(5 39 -70 -7) -70]
Test Case: 568 | Input/Output: [(-32 50 -45 -58) -58]
Test Case: 569 | Input/Output: [(82 -68 57 11) -68]
Test Case: 570 | Input/Output: [(-29 73 -4 46) -29]
Test Case: 571 | Input/Output: [(-79 4 7 -56) -79]
Test Case: 572 | Input/Output: [(32 13 -24 62) -24]
Test Case: 573 | Input/Output: [(-60 -35 -44 -33) -60]
Test Case: 574 | Input/Output: [(93 13 58 -76) -76]
Test Case: 575 | Input/Output: [(17 31 23 -82) -82]
Test Case: 576 | Input/Output: [(38 57 -71 -62) -71]
Test Case: 577 | Input/Output: [(-27 -44 -42 -2) -44]
Test Case: 578 | Input/Output: [(54 -15 -5 76) -15]
Test Case: 579 | Input/Output: [(-86 -100 68 55) -100]
Test Case: 580 | Input/Output: [(44 -45 -8 -73) -73]
Test Case: 581 | Input/Output: [(-76 -93 -33 31) -93]
Test Case: 582 | Input/Output: [(50 -41 72 -20) -41]
Test Case: 583 | Input/Output: [(62 -45 -41 -4) -45]
Test Case: 584 | Input/Output: [(96 85 -31 25) -31]
Test Case: 585 | Input/Output: [(-45 -65 -55 5) -65]
Test Case: 586 | Input/Output: [(76 -70 5 -44) -70]
Test Case: 587 | Input/Output: [(72 43 -4 15) -4]
Test Case: 588 | Input/Output: [(55 -51 -3 12) -51]
Test Case: 589 | Input/Output: [(50 -14 47 14) -14]
Test Case: 590 | Input/Output: [(83 29 -29 91) -29]
Test Case: 591 | Input/Output: [(40 -53 60 -43) -53]
Test Case: 592 | Input/Output: [(38 79 96 43) 38]
Test Case: 593 | Input/Output: [(-59 82 35 66) -59]
Test Case: 594 | Input/Output: [(-26 45 -93 -95) -95]
Test Case: 595 | Input/Output: [(-63 -63 47 -42) -63]
Test Case: 596 | Input/Output: [(-57 -86 17 83) -86]
Test Case: 597 | Input/Output: [(-4 85 94 30) -4]
Test Case: 598 | Input/Output: [(-3 -28 60 -27) -28]
Test Case: 599 | Input/Output: [(99 -10 -45 58) -45]
Test Case: 600 | Input/Output: [(-19 -64 28 18) -64]
Test Case: 601 | Input/Output: [(97 -48 -76 30) -76]
Test Case: 602 | Input/Output: [(0 30 -95 -6) -95]
Test Case: 603 | Input/Output: [(-49 -5 90 -57) -57]
Test Case: 604 | Input/Output: [(-44 -92 5 87) -92]
Test Case: 605 | Input/Output: [(94 -75 83 80) -75]
Test Case: 606 | Input/Output: [(44 10 -55 62) -55]
Test Case: 607 | Input/Output: [(-6 -7 -5 90) -7]
Test Case: 608 | Input/Output: [(-8 47 90 -72) -72]
Test Case: 609 | Input/Output: [(87 68 -18 -94) -94]
Test Case: 610 | Input/Output: [(-69 25 -76 -3) -76]
Test Case: 611 | Input/Output: [(93 -18 1 54) -18]
Test Case: 612 | Input/Output: [(-95 10 59 -97) -97]
Test Case: 613 | Input/Output: [(75 41 45 -81) -81]
Test Case: 614 | Input/Output: [(70 -84 -16 69) -84]
Test Case: 615 | Input/Output: [(-57 -66 -36 34) -66]
Test Case: 616 | Input/Output: [(53 27 -76 28) -76]
Test Case: 617 | Input/Output: [(-85 81 86 -37) -85]
Test Case: 618 | Input/Output: [(-5 76 93 -27) -27]
Test Case: 619 | Input/Output: [(-48 39 2 24) -48]
Test Case: 620 | Input/Output: [(-41 39 -40 62) -41]
Test Case: 621 | Input/Output: [(73 -69 -29 18) -69]
Test Case: 622 | Input/Output: [(87 71 -1 82) -1]
Test Case: 623 | Input/Output: [(-73 23 49 87) -73]
Test Case: 624 | Input/Output: [(63 -91 62 13) -91]
Test Case: 625 | Input/Output: [(64 -10 -73 12) -73]
Test Case: 626 | Input/Output: [(-79 77 61 80) -79]
Test Case: 627 | Input/Output: [(-40 80 12 -61) -61]
Test Case: 628 | Input/Output: [(-74 -27 -26 32) -74]
Test Case: 629 | Input/Output: [(-90 4 28 -90) -90]
Test Case: 630 | Input/Output: [(-58 -3 0 89) -58]
Test Case: 631 | Input/Output: [(52 -82 15 -100) -100]
Test Case: 632 | Input/Output: [(44 2 7 55) 2]
Test Case: 633 | Input/Output: [(-11 47 88 -70) -70]
Test Case: 634 | Input/Output: [(-65 8 21 0) -65]
Test Case: 635 | Input/Output: [(26 2 27 -71) -71]
Test Case: 636 | Input/Output: [(-74 84 -84 51) -84]
Test Case: 637 | Input/Output: [(-87 -16 24 14) -87]
Test Case: 638 | Input/Output: [(-47 3 48 61) -47]
Test Case: 639 | Input/Output: [(80 -17 -24 87) -24]
Test Case: 640 | Input/Output: [(-20 -97 31 -41) -97]
Test Case: 641 | Input/Output: [(-18 11 -74 94) -74]
Test Case: 642 | Input/Output: [(66 -33 85 63) -33]
Test Case: 643 | Input/Output: [(-45 86 0 -5) -45]
Test Case: 644 | Input/Output: [(-85 -87 -51 32) -87]
Test Case: 645 | Input/Output: [(26 46 70 -79) -79]
Test Case: 646 | Input/Output: [(47 62 11 -20) -20]
Test Case: 647 | Input/Output: [(46 -87 54 83) -87]
Test Case: 648 | Input/Output: [(41 -28 73 73) -28]
Test Case: 649 | Input/Output: [(29 91 -68 -67) -68]
Test Case: 650 | Input/Output: [(-76 -14 84 6) -76]
Test Case: 651 | Input/Output: [(79 -30 25 56) -30]
Test Case: 652 | Input/Output: [(47 -23 -82 -71) -82]
Test Case: 653 | Input/Output: [(-48 0 46 -8) -48]
Test Case: 654 | Input/Output: [(-30 66 30 87) -30]
Test Case: 655 | Input/Output: [(75 -70 -94 75) -94]
Test Case: 656 | Input/Output: [(-53 -43 68 33) -53]
Test Case: 657 | Input/Output: [(-96 8 19 -74) -96]
Test Case: 658 | Input/Output: [(-40 -29 36 11) -40]
Test Case: 659 | Input/Output: [(-90 58 -48 42) -90]
Test Case: 660 | Input/Output: [(-71 -29 -76 -12) -76]
Test Case: 661 | Input/Output: [(-53 -20 -49 -36) -53]
Test Case: 662 | Input/Output: [(-84 -91 -64 -94) -94]
Test Case: 663 | Input/Output: [(2 -10 -83 100) -83]
Test Case: 664 | Input/Output: [(50 35 73 92) 35]
Test Case: 665 | Input/Output: [(50 -80 -3 -18) -80]
Test Case: 666 | Input/Output: [(-34 61 19 4) -34]
Test Case: 667 | Input/Output: [(94 86 23 87) 23]
Test Case: 668 | Input/Output: [(7 -78 41 -93) -93]
Test Case: 669 | Input/Output: [(-75 45 63 23) -75]
Test Case: 670 | Input/Output: [(58 12 20 73) 12]
Test Case: 671 | Input/Output: [(-52 58 -12 -3) -52]
Test Case: 672 | Input/Output: [(54 -77 45 34) -77]
Test Case: 673 | Input/Output: [(43 -63 43 36) -63]
Test Case: 674 | Input/Output: [(29 -50 39 -93) -93]
Test Case: 675 | Input/Output: [(52 59 64 45) 45]
Test Case: 676 | Input/Output: [(-30 -85 43 54) -85]
Test Case: 677 | Input/Output: [(35 -8 85 -29) -29]
Test Case: 678 | Input/Output: [(-78 -71 36 -18) -78]
Test Case: 679 | Input/Output: [(-32 34 -69 10) -69]
Test Case: 680 | Input/Output: [(-63 62 -70 -20) -70]
Test Case: 681 | Input/Output: [(82 100 29 42) 29]
Test Case: 682 | Input/Output: [(-16 -22 83 20) -22]
Test Case: 683 | Input/Output: [(-95 -46 -85 -10) -95]
Test Case: 684 | Input/Output: [(-35 36 68 65) -35]
Test Case: 685 | Input/Output: [(-11 10 50 -90) -90]
Test Case: 686 | Input/Output: [(19 99 60 48) 19]
Test Case: 687 | Input/Output: [(-64 -89 -24 23) -89]
Test Case: 688 | Input/Output: [(8 -1 -76 55) -76]
Test Case: 689 | Input/Output: [(-35 -40 88 16) -40]
Test Case: 690 | Input/Output: [(-64 -95 17 76) -95]
Test Case: 691 | Input/Output: [(-83 -95 -17 -19) -95]
Test Case: 692 | Input/Output: [(5 -22 -10 -92) -92]
Test Case: 693 | Input/Output: [(-77 66 -85 -33) -85]
Test Case: 694 | Input/Output: [(-21 15 18 16) -21]
Test Case: 695 | Input/Output: [(-72 -55 -28 -43) -72]
Test Case: 696 | Input/Output: [(2 36 60 29) 2]
Test Case: 697 | Input/Output: [(-76 9 35 -80) -80]
Test Case: 698 | Input/Output: [(94 75 -77 56) -77]
Test Case: 699 | Input/Output: [(-53 -95 49 -11) -95]
Test Case: 700 | Input/Output: [(77 -11 40 -88) -88]
Test Case: 701 | Input/Output: [(-84 27 -24 41) -84]
Test Case: 702 | Input/Output: [(38 36 60 0) 0]
Test Case: 703 | Input/Output: [(-8 -27 92 -79) -79]
Test Case: 704 | Input/Output: [(-82 57 -91 -34) -91]
Test Case: 705 | Input/Output: [(43 -85 23 18) -85]
Test Case: 706 | Input/Output: [(-44 -70 -62 9) -70]
Test Case: 707 | Input/Output: [(-23 25 -44 73) -44]
Test Case: 708 | Input/Output: [(23 -77 -40 -32) -77]
Test Case: 709 | Input/Output: [(13 49 7 -36) -36]
Test Case: 710 | Input/Output: [(63 30 31 54) 30]
Test Case: 711 | Input/Output: [(68 -81 -78 -39) -81]
Test Case: 712 | Input/Output: [(-64 99 -59 44) -64]
Test Case: 713 | Input/Output: [(34 33 -40 38) -40]
Test Case: 714 | Input/Output: [(25 -21 25 20) -21]
Test Case: 715 | Input/Output: [(51 17 -10 -80) -80]
Test Case: 716 | Input/Output: [(-54 99 -51 32) -54]
Test Case: 717 | Input/Output: [(82 -65 -89 94) -89]
Test Case: 718 | Input/Output: [(13 75 56 -6) -6]
Test Case: 719 | Input/Output: [(-31 -9 -87 -14) -87]
Test Case: 720 | Input/Output: [(74 -64 -9 30) -64]
Test Case: 721 | Input/Output: [(26 45 25 1) 1]
Test Case: 722 | Input/Output: [(-14 -98 69 -35) -98]
Test Case: 723 | Input/Output: [(-28 56 9 -52) -52]
Test Case: 724 | Input/Output: [(11 19 -50 34) -50]
Test Case: 725 | Input/Output: [(-87 88 -65 0) -87]
Test Case: 726 | Input/Output: [(-30 -2 -71 -70) -71]
Test Case: 727 | Input/Output: [(32 -12 -46 -18) -46]
Test Case: 728 | Input/Output: [(48 -96 -32 -89) -96]
Test Case: 729 | Input/Output: [(80 -26 -41 -3) -41]
Test Case: 730 | Input/Output: [(-63 100 -55 -84) -84]
Test Case: 731 | Input/Output: [(-21 94 -16 -77) -77]
Test Case: 732 | Input/Output: [(-89 75 -21 24) -89]
Test Case: 733 | Input/Output: [(2 -80 -100 -37) -100]
Test Case: 734 | Input/Output: [(14 -88 18 -1) -88]
Test Case: 735 | Input/Output: [(78 -77 74 5) -77]
Test Case: 736 | Input/Output: [(16 -35 21 -38) -38]
Test Case: 737 | Input/Output: [(-31 -13 -78 38) -78]
Test Case: 738 | Input/Output: [(-83 17 -30 73) -83]
Test Case: 739 | Input/Output: [(-96 -70 -84 16) -96]
Test Case: 740 | Input/Output: [(-20 -5 -88 -93) -93]
Test Case: 741 | Input/Output: [(-54 -9 -60 12) -60]
Test Case: 742 | Input/Output: [(50 -5 57 1) -5]
Test Case: 743 | Input/Output: [(38 -79 -60 -81) -81]
Test Case: 744 | Input/Output: [(4 -75 46 73) -75]
Test Case: 745 | Input/Output: [(-83 -82 43 -2) -83]
Test Case: 746 | Input/Output: [(12 21 62 82) 12]
Test Case: 747 | Input/Output: [(-10 -24 78 -38) -38]
Test Case: 748 | Input/Output: [(-39 69 -12 73) -39]
Test Case: 749 | Input/Output: [(42 -79 -56 42) -79]
Test Case: 750 | Input/Output: [(-96 51 56 63) -96]
Test Case: 751 | Input/Output: [(-82 -98 31 -64) -98]
Test Case: 752 | Input/Output: [(57 -83 -37 90) -83]
Test Case: 753 | Input/Output: [(62 -69 -65 -76) -76]
Test Case: 754 | Input/Output: [(-14 35 7 -37) -37]
Test Case: 755 | Input/Output: [(2 -41 -61 -20) -61]
Test Case: 756 | Input/Output: [(30 -73 -11 21) -73]
Test Case: 757 | Input/Output: [(4 36 73 -8) -8]
Test Case: 758 | Input/Output: [(80 -38 2 75) -38]
Test Case: 759 | Input/Output: [(-80 21 -65 3) -80]
Test Case: 760 | Input/Output: [(88 -15 -94 -92) -94]
Test Case: 761 | Input/Output: [(-21 66 88 -63) -63]
Test Case: 762 | Input/Output: [(-76 -17 89 70) -76]
Test Case: 763 | Input/Output: [(21 -55 -35 35) -55]
Test Case: 764 | Input/Output: [(1 92 73 -15) -15]
Test Case: 765 | Input/Output: [(-55 -76 43 -25) -76]
Test Case: 766 | Input/Output: [(-16 70 84 -46) -46]
Test Case: 767 | Input/Output: [(52 -51 -34 93) -51]
Test Case: 768 | Input/Output: [(-100 67 -5 57) -100]
Test Case: 769 | Input/Output: [(-13 -44 -87 9) -87]
Test Case: 770 | Input/Output: [(73 88 -56 -85) -85]
Test Case: 771 | Input/Output: [(68 20 99 -41) -41]
Test Case: 772 | Input/Output: [(49 -9 42 -22) -22]
Test Case: 773 | Input/Output: [(93 -7 11 -10) -10]
Test Case: 774 | Input/Output: [(-2 -18 -71 -60) -71]
Test Case: 775 | Input/Output: [(93 -20 38 30) -20]
Test Case: 776 | Input/Output: [(-28 31 -64 36) -64]
Test Case: 777 | Input/Output: [(-67 17 -64 -42) -67]
Test Case: 778 | Input/Output: [(-18 69 -2 65) -18]
Test Case: 779 | Input/Output: [(-15 -43 -38 32) -43]
Test Case: 780 | Input/Output: [(92 -76 2 -39) -76]
Test Case: 781 | Input/Output: [(77 -51 -83 54) -83]
Test Case: 782 | Input/Output: [(-13 86 63 -74) -74]
Test Case: 783 | Input/Output: [(61 -29 48 -24) -29]
Test Case: 784 | Input/Output: [(65 61 -99 40) -99]
Test Case: 785 | Input/Output: [(-25 -89 -96 87) -96]
Test Case: 786 | Input/Output: [(92 21 16 -98) -98]
Test Case: 787 | Input/Output: [(18 64 -65 -90) -90]
Test Case: 788 | Input/Output: [(17 -37 -29 77) -37]
Test Case: 789 | Input/Output: [(33 51 70 -66) -66]
Test Case: 790 | Input/Output: [(50 74 -89 -67) -89]
Test Case: 791 | Input/Output: [(95 -28 72 -30) -30]
Test Case: 792 | Input/Output: [(-88 -60 -82 -69) -88]
Test Case: 793 | Input/Output: [(-39 17 67 64) -39]
Test Case: 794 | Input/Output: [(-45 94 -29 20) -45]
Test Case: 795 | Input/Output: [(-75 67 -96 -67) -96]
Test Case: 796 | Input/Output: [(-17 -28 45 -22) -28]
Test Case: 797 | Input/Output: [(73 92 -8 -63) -63]
Test Case: 798 | Input/Output: [(42 22 36 -14) -14]
Test Case: 799 | Input/Output: [(90 90 -75 59) -75]
Test Case: 800 | Input/Output: [(-20 -63 83 -89) -89]
Test Case: 801 | Input/Output: [(20 26 70 -8) -8]
Test Case: 802 | Input/Output: [(-78 -27 9 -70) -78]
Test Case: 803 | Input/Output: [(74 67 26 -71) -71]
Test Case: 804 | Input/Output: [(36 -8 71 81) -8]
Test Case: 805 | Input/Output: [(-50 -27 -61 77) -61]
Test Case: 806 | Input/Output: [(-23 -98 -59 -49) -98]
Test Case: 807 | Input/Output: [(-49 6 13 -24) -49]
Test Case: 808 | Input/Output: [(97 9 -2 -20) -20]
Test Case: 809 | Input/Output: [(97 -82 -52 -73) -82]
Test Case: 810 | Input/Output: [(24 40 -19 40) -19]
Test Case: 811 | Input/Output: [(-50 -91 -30 -80) -91]
Test Case: 812 | Input/Output: [(-96 -24 -51 75) -96]
Test Case: 813 | Input/Output: [(-19 -24 -61 50) -61]
Test Case: 814 | Input/Output: [(8 16 98 -37) -37]
Test Case: 815 | Input/Output: [(58 -70 72 87) -70]
Test Case: 816 | Input/Output: [(79 6 94 -84) -84]
Test Case: 817 | Input/Output: [(73 78 75 19) 19]
Test Case: 818 | Input/Output: [(71 32 -49 -82) -82]
Test Case: 819 | Input/Output: [(10 41 40 40) 10]
Test Case: 820 | Input/Output: [(79 -21 -43 19) -43]
Test Case: 821 | Input/Output: [(-77 -78 -45 97) -78]
Test Case: 822 | Input/Output: [(18 29 68 -97) -97]
Test Case: 823 | Input/Output: [(-10 82 82 93) -10]
Test Case: 824 | Input/Output: [(11 11 45 63) 11]
Test Case: 825 | Input/Output: [(-51 -51 81 66) -51]
Test Case: 826 | Input/Output: [(-84 9 -9 -100) -100]
Test Case: 827 | Input/Output: [(-68 57 -99 46) -99]
Test Case: 828 | Input/Output: [(17 -95 -99 12) -99]
Test Case: 829 | Input/Output: [(85 -31 -42 100) -42]
Test Case: 830 | Input/Output: [(-9 7 56 -14) -14]
Test Case: 831 | Input/Output: [(-49 75 -9 14) -49]
Test Case: 832 | Input/Output: [(-7 -45 27 73) -45]
Test Case: 833 | Input/Output: [(-45 -6 -90 -31) -90]
Test Case: 834 | Input/Output: [(-42 -53 -54 50) -54]
Test Case: 835 | Input/Output: [(94 72 -88 -91) -91]
Test Case: 836 | Input/Output: [(6 -10 -82 13) -82]
Test Case: 837 | Input/Output: [(89 67 -37 57) -37]
Test Case: 838 | Input/Output: [(36 17 -16 -26) -26]
Test Case: 839 | Input/Output: [(72 5 -19 77) -19]
Test Case: 840 | Input/Output: [(-34 28 -38 -30) -38]
Test Case: 841 | Input/Output: [(-19 90 86 -31) -31]
Test Case: 842 | Input/Output: [(99 100 -13 -15) -15]
Test Case: 843 | Input/Output: [(51 -52 -32 -51) -52]
Test Case: 844 | Input/Output: [(66 -51 62 -85) -85]
Test Case: 845 | Input/Output: [(-9 25 -67 -59) -67]
Test Case: 846 | Input/Output: [(-23 -29 84 -1) -29]
Test Case: 847 | Input/Output: [(-27 12 -1 -82) -82]
Test Case: 848 | Input/Output: [(-95 -69 78 92) -95]
Test Case: 849 | Input/Output: [(63 25 43 54) 25]
Test Case: 850 | Input/Output: [(18 -33 57 55) -33]
Test Case: 851 | Input/Output: [(-98 -66 28 -44) -98]
Test Case: 852 | Input/Output: [(40 0 42 9) 0]
Test Case: 853 | Input/Output: [(-47 -97 19 50) -97]
Test Case: 854 | Input/Output: [(-7 36 -56 25) -56]
Test Case: 855 | Input/Output: [(80 64 -69 -50) -69]
Test Case: 856 | Input/Output: [(-58 72 -81 -30) -81]
Test Case: 857 | Input/Output: [(-24 -79 62 -68) -79]
Test Case: 858 | Input/Output: [(-100 -25 33 -5) -100]
Test Case: 859 | Input/Output: [(94 -77 12 -19) -77]
Test Case: 860 | Input/Output: [(-66 -32 50 -53) -66]
Test Case: 861 | Input/Output: [(100 11 13 -13) -13]
Test Case: 862 | Input/Output: [(13 39 -11 -50) -50]
Test Case: 863 | Input/Output: [(-86 15 99 32) -86]
Test Case: 864 | Input/Output: [(-48 24 93 -43) -48]
Test Case: 865 | Input/Output: [(-73 18 -58 63) -73]
Test Case: 866 | Input/Output: [(-88 -97 -42 -36) -97]
Test Case: 867 | Input/Output: [(-75 58 13 -5) -75]
Test Case: 868 | Input/Output: [(22 81 15 -51) -51]
Test Case: 869 | Input/Output: [(-91 -33 61 -10) -91]
Test Case: 870 | Input/Output: [(-73 -28 55 41) -73]
Test Case: 871 | Input/Output: [(77 -62 -71 36) -71]
Test Case: 872 | Input/Output: [(7 45 -62 49) -62]
Test Case: 873 | Input/Output: [(-16 -5 72 5) -16]
Test Case: 874 | Input/Output: [(-75 60 63 83) -75]
Test Case: 875 | Input/Output: [(-71 -60 -42 97) -71]
Test Case: 876 | Input/Output: [(-35 -86 75 -51) -86]
Test Case: 877 | Input/Output: [(20 -68 -2 -53) -68]
Test Case: 878 | Input/Output: [(-99 -24 80 -99) -99]
Test Case: 879 | Input/Output: [(-64 -43 -42 14) -64]
Test Case: 880 | Input/Output: [(93 -62 -95 -12) -95]
Test Case: 881 | Input/Output: [(-7 -56 32 9) -56]
Test Case: 882 | Input/Output: [(3 54 93 -51) -51]
Test Case: 883 | Input/Output: [(-31 82 -87 61) -87]
Test Case: 884 | Input/Output: [(51 25 -30 -58) -58]
Test Case: 885 | Input/Output: [(-29 -3 13 -26) -29]
Test Case: 886 | Input/Output: [(-15 -26 52 -6) -26]
Test Case: 887 | Input/Output: [(-29 -36 25 16) -36]
Test Case: 888 | Input/Output: [(36 -18 24 69) -18]
Test Case: 889 | Input/Output: [(62 -23 72 74) -23]
Test Case: 890 | Input/Output: [(-43 43 7 -34) -43]
Test Case: 891 | Input/Output: [(5 8 30 -7) -7]
Test Case: 892 | Input/Output: [(20 -42 78 -61) -61]
Test Case: 893 | Input/Output: [(-37 0 39 -77) -77]
Test Case: 894 | Input/Output: [(-83 -14 -87 23) -87]
Test Case: 895 | Input/Output: [(71 33 16 69) 16]
Test Case: 896 | Input/Output: [(51 -62 -36 -61) -62]
Test Case: 897 | Input/Output: [(31 48 15 -43) -43]
Test Case: 898 | Input/Output: [(34 -49 -65 38) -65]
Test Case: 899 | Input/Output: [(-53 65 65 -19) -53]
Test Case: 900 | Input/Output: [(-79 24 -70 19) -79]
Test Case: 901 | Input/Output: [(30 91 -57 -83) -83]
Test Case: 902 | Input/Output: [(-89 18 -83 -65) -89]
Test Case: 903 | Input/Output: [(81 54 92 -93) -93]
Test Case: 904 | Input/Output: [(65 -45 -45 -84) -84]
Test Case: 905 | Input/Output: [(29 32 30 -39) -39]
Test Case: 906 | Input/Output: [(-61 -81 -7 44) -81]
Test Case: 907 | Input/Output: [(22 -40 -23 -43) -43]
Test Case: 908 | Input/Output: [(-47 55 -31 24) -47]
Test Case: 909 | Input/Output: [(11 -14 -44 34) -44]
Test Case: 910 | Input/Output: [(-28 48 35 -77) -77]
Test Case: 911 | Input/Output: [(40 42 -64 71) -64]
Test Case: 912 | Input/Output: [(-64 17 32 -71) -71]
Test Case: 913 | Input/Output: [(70 -49 79 -70) -70]
Test Case: 914 | Input/Output: [(-84 -20 35 10) -84]
Test Case: 915 | Input/Output: [(-95 72 38 58) -95]
Test Case: 916 | Input/Output: [(-74 -86 -66 -1) -86]
Test Case: 917 | Input/Output: [(55 69 -57 46) -57]
Test Case: 918 | Input/Output: [(-34 79 -16 -34) -34]
Test Case: 919 | Input/Output: [(-6 49 -1 80) -6]
Test Case: 920 | Input/Output: [(67 -11 56 -38) -38]
Test Case: 921 | Input/Output: [(-75 68 34 -71) -75]
Test Case: 922 | Input/Output: [(-66 -46 10 75) -66]
Test Case: 923 | Input/Output: [(27 42 -48 -9) -48]
Test Case: 924 | Input/Output: [(-45 53 87 -51) -51]
Test Case: 925 | Input/Output: [(-22 34 -27 98) -27]
Test Case: 926 | Input/Output: [(97 24 29 27) 24]
Test Case: 927 | Input/Output: [(98 49 52 25) 25]
Test Case: 928 | Input/Output: [(50 -3 -99 37) -99]
Test Case: 929 | Input/Output: [(70 90 8 84) 8]
Test Case: 930 | Input/Output: [(32 -46 -97 -34) -97]
Test Case: 931 | Input/Output: [(-43 0 18 33) -43]
Test Case: 932 | Input/Output: [(98 -1 -48 31) -48]
Test Case: 933 | Input/Output: [(77 94 32 -58) -58]
Test Case: 934 | Input/Output: [(-63 49 -52 9) -63]
Test Case: 935 | Input/Output: [(-30 -91 8 92) -91]
Test Case: 936 | Input/Output: [(49 -80 94 82) -80]
Test Case: 937 | Input/Output: [(-85 61 -95 62) -95]
Test Case: 938 | Input/Output: [(-64 -30 13 3) -64]
Test Case: 939 | Input/Output: [(98 99 -91 75) -91]
Test Case: 940 | Input/Output: [(-10 -40 -15 -36) -40]
Test Case: 941 | Input/Output: [(61 -24 42 -92) -92]
Test Case: 942 | Input/Output: [(-72 -28 85 60) -72]
Test Case: 943 | Input/Output: [(54 -63 -50 9) -63]
Test Case: 944 | Input/Output: [(62 23 -33 30) -33]
Test Case: 945 | Input/Output: [(-32 67 -72 -39) -72]
Test Case: 946 | Input/Output: [(41 36 -40 100) -40]
Test Case: 947 | Input/Output: [(75 41 -39 -6) -39]
Test Case: 948 | Input/Output: [(83 68 20 -28) -28]
Test Case: 949 | Input/Output: [(38 25 55 24) 24]
Test Case: 950 | Input/Output: [(-50 -53 -1 23) -53]
Test Case: 951 | Input/Output: [(-14 89 -63 -93) -93]
Test Case: 952 | Input/Output: [(-4 59 26 -15) -15]
Test Case: 953 | Input/Output: [(46 -20 -19 0) -20]
Test Case: 954 | Input/Output: [(-76 -76 -45 -36) -76]
Test Case: 955 | Input/Output: [(41 76 -35 -7) -35]
Test Case: 956 | Input/Output: [(4 -42 60 16) -42]
Test Case: 957 | Input/Output: [(83 -40 -77 -69) -77]
Test Case: 958 | Input/Output: [(76 -47 75 97) -47]
Test Case: 959 | Input/Output: [(-22 13 -84 -99) -99]
Test Case: 960 | Input/Output: [(10 -42 78 -85) -85]
Test Case: 961 | Input/Output: [(-44 73 5 29) -44]
Test Case: 962 | Input/Output: [(83 -93 4 53) -93]
Test Case: 963 | Input/Output: [(-49 -42 31 -66) -66]
Test Case: 964 | Input/Output: [(22 72 2 43) 2]
Test Case: 965 | Input/Output: [(-13 -18 4 27) -18]
Test Case: 966 | Input/Output: [(-86 -40 -87 26) -87]
Test Case: 967 | Input/Output: [(56 -94 63 96) -94]
Test Case: 968 | Input/Output: [(33 45 48 -62) -62]
Test Case: 969 | Input/Output: [(69 -23 90 -63) -63]
Test Case: 970 | Input/Output: [(-31 41 56 -37) -37]
Test Case: 971 | Input/Output: [(5 -15 -89 92) -89]
Test Case: 972 | Input/Output: [(-99 -17 -60 38) -99]
Test Case: 973 | Input/Output: [(4 4 -34 -7) -34]
Test Case: 974 | Input/Output: [(44 30 -28 -75) -75]
Test Case: 975 | Input/Output: [(91 -77 -48 27) -77]
Test Case: 976 | Input/Output: [(-5 99 21 28) -5]
Test Case: 977 | Input/Output: [(-22 0 79 21) -22]
Test Case: 978 | Input/Output: [(-67 56 -33 75) -67]
Test Case: 979 | Input/Output: [(27 80 -42 51) -42]
Test Case: 980 | Input/Output: [(70 -68 65 71) -68]
Test Case: 981 | Input/Output: [(-59 -20 94 70) -59]
Test Case: 982 | Input/Output: [(-32 36 41 49) -32]
Test Case: 983 | Input/Output: [(10 -84 -19 44) -84]
Test Case: 984 | Input/Output: [(63 46 82 -96) -96]
Test Case: 985 | Input/Output: [(37 -71 9 62) -71]
Test Case: 986 | Input/Output: [(24 -82 37 72) -82]
Test Case: 987 | Input/Output: [(9 93 -28 -32) -32]
Test Case: 988 | Input/Output: [(14 -63 -65 -10) -65]
Test Case: 989 | Input/Output: [(-65 13 37 84) -65]
Test Case: 990 | Input/Output: [(59 -65 -83 96) -83]
Test Case: 991 | Input/Output: [(50 -56 -59 -18) -59]
Test Case: 992 | Input/Output: [(-89 -4 -25 56) -89]
Test Case: 993 | Input/Output: [(42 76 -56 -79) -79]
Test Case: 994 | Input/Output: [(-47 91 -48 -8) -48]
Test Case: 995 | Input/Output: [(68 59 -57 69) -57]
Test Case: 996 | Input/Output: [(45 -87 91 3) -87]
Test Case: 997 | Input/Output: [(6 -2 39 71) -2]
Test Case: 998 | Input/Output: [(-45 -16 12 -11) -45]
Test Case: 999 | Input/Output: [(-83 67 -15 11) -83]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -41 -26 -128 -61 85 63 93 34 -83 -33 -16 83 -26 85 -82 50
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[96 77 77 77] 77] [[-90 -93 -93 -93] -93] [[61 61 44 61] 44] [[30 30 30 -18] -18] [[-88 -90 -90 -90] -90] [[-14 -14 37 -14] -14] [[56 83 83 83] 56] [[-79 -19 -79 -79] -79] [[70 -17 70 70] -17] [[62 -41 -41 -41] -41] [(100 100 100 100) 100] [(-8 -8 -8 -8) -8] [(55 55 55 55) 55] [(-4 -4 -4 -4) -4] [(27 27 27 27) 27] [(29 33 0 20) 0] [(95 67 50 10) 10] [(13 77 38 80) 13] [(75 51 44 12) 12] [(94 62 28 24) 24] [(17 53 42 16) 16] [(55 64 20 73) 20] [(45 100 73 39) 39] [(31 60 64 53) 31] [(9 62 65 87) 9] [(74 20 80 75) 20] [(94 44 92 25) 25] [(1 72 46 36) 1] [(95 59 92 50) 50] [(49 80 43 32) 32] [(16 23 92 70) 16] [(82 55 62 13) 13] [(17 91 79 11) 11] [(30 71 69 0) 0] [(54 66 91 83) 54] [(26 44 -66 -75) -75] [(-78 52 -71 -43) -78] [(-73 -35 -72 -17) -73] [(9 -89 48 -49) -89] [(-64 -77 11 6) -77] [(92 -10 -7 22) -10] [(-11 23 29 45) -11] [(-96 82 -50 -89) -96] [(27 -2 42 27) -2] [(-10 60 -53 -11) -53] [(-61 -49 71 -80) -80] [(-27 -23 -62 14) -62] [(62 93 95 -67) -67] [(-57 -22 44 -100) -100] [(34 18 16 80) 16] [(24 -65 -78 59) -78] [(-59 0 -82 -41) -82] [(99 -31 62 28) -31] [(16 80 54 -6) -6] [(-1 98 23 64) -1] [(-71 -28 51 -69) -71] [(49 57 -17 37) -17] [(-68 38 74 -52) -68] [(-49 -36 -13 -11) -49] [(-72 -60 41 31) -72] [(-67 -63 57 27) -67] [(-83 46 -54 -18) -83] [(-2 9 26 -22) -22] [(42 22 -18 -1) -18] [(-69 -32 -32 54) -69] [(39 66 23 18) 18] [(-59 58 95 -99) -99] [(42 -63 -69 79) -69] [(-41 73 20 21) -41] [(19 -31 -30 -38) -38] [(-44 92 -25 84) -44] [(56 65 -41 60) -41] [(17 -88 44 75) -88] [(-44 43 57 11) -44] [(19 -97 -63 -85) -97] [(91 12 94 58) 12] [(26 48 34 13) 13] [(39 75 53 -52) -52] [(-57 -41 68 -5) -57] [(-33 36 4 -46) -46] [(12 -68 44 -96) -96] [(29 52 95 57) 29] [(66 24 -16 98) -16] [(79 98 -92 56) -92] [(-88 -41 -38 -69) -88] [(72 -24 14 77) -24] [(-56 -100 87 -76) -100] [(-14 -86 -79 35) -86] [(-10 -96 92 -39) -96] [(44 5 82 -92) -92] [(-28 29 -16 13) -28] [(-60 -32 1 -78) -78] [(-12 52 2 72) -12] [(-3 85 12 3) -3] [(-14 53 83 38) -14])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: 44                  | Program output: 44                 
Correct output: -18                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -14                 | Program output: 37                 
Correct output: 56                  | Program output: 83                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 50                 
Correct output: 13                  | Program output: 38                 
Correct output: 12                  | Program output: 44                 
Correct output: 24                  | Program output: 28                 
Correct output: 16                  | Program output: 42                 
Correct output: 20                  | Program output: 20                 
Correct output: 39                  | Program output: 73                 
Correct output: 31                  | Program output: 64                 
Correct output: 9                   | Program output: 65                 
Correct output: 20                  | Program output: 80                 
Correct output: 25                  | Program output: 92                 
Correct output: 1                   | Program output: 46                 
Correct output: 50                  | Program output: 92                 
Correct output: 32                  | Program output: 43                 
Correct output: 16                  | Program output: 92                 
Correct output: 13                  | Program output: 62                 
Correct output: 11                  | Program output: 79                 
Correct output: 0                   | Program output: 69                 
Correct output: 54                  | Program output: 91                 
Correct output: -75                 | Program output: -66                
Correct output: -78                 | Program output: -71                
Correct output: -73                 | Program output: -72                
Correct output: -89                 | Program output: 48                 
Correct output: -77                 | Program output: 11                 
Correct output: -10                 | Program output: -7                 
Correct output: -11                 | Program output: 29                 
Correct output: -96                 | Program output: -50                
Correct output: -2                  | Program output: 42                 
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: 71                 
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: 95                 
Correct output: -100                | Program output: 44                 
Correct output: 16                  | Program output: 16                 
Correct output: -78                 | Program output: -78                
Correct output: -82                 | Program output: -82                
Correct output: -31                 | Program output: 62                 
Correct output: -6                  | Program output: 54                 
Correct output: -1                  | Program output: 23                 
Correct output: -71                 | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -68                 | Program output: 74                 
Correct output: -49                 | Program output: -13                
Correct output: -72                 | Program output: 41                 
Correct output: -67                 | Program output: 57                 
Correct output: -83                 | Program output: -54                
Correct output: -22                 | Program output: 26                 
Correct output: -18                 | Program output: -18                
Correct output: -69                 | Program output: -32                
Correct output: 18                  | Program output: 23                 
Correct output: -99                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -41                 | Program output: 20                 
Correct output: -38                 | Program output: -30                
Correct output: -44                 | Program output: -25                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: 44                 
Correct output: -44                 | Program output: 57                 
Correct output: -97                 | Program output: -63                
Correct output: 12                  | Program output: 94                 
Correct output: 13                  | Program output: 34                 
Correct output: -52                 | Program output: 53                 
Correct output: -57                 | Program output: 68                 
Correct output: -46                 | Program output: 4                  
Correct output: -96                 | Program output: 44                 
Correct output: 29                  | Program output: 95                 
Correct output: -16                 | Program output: -16                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -38                
Correct output: -24                 | Program output: 14                 
Correct output: -100                | Program output: 87                 
Correct output: -86                 | Program output: -79                
Correct output: -96                 | Program output: 92                 
Correct output: -92                 | Program output: 82                 
Correct output: -28                 | Program output: -16                
Correct output: -78                 | Program output: 1                  
Correct output: -12                 | Program output: 2                  
Correct output: -3                  | Program output: 12                 
Correct output: -14                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_376} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_sub exec_if (boolean_eq exec_dup_items) (in3) print_integer boolean_dup_times boolean_dup_items integer_mod integer_pop exec_rot (boolean_swap) (integer_yankdup boolean_dup_times integer_max tagged_376 exec_y (integer_dup integer_dup_times integer_lt) integer_empty print_integer) (boolean_frominteger integer_lt) integer_add exec_rot (integer_lte) (integer_empty integer_dup) () exec_dup (integer_dup_times exec_eq integer_empty integer_yankdup boolean_dup))
Lexicase best errors: [1 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_376} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_sub exec_if (boolean_eq exec_dup_items) (in3) print_integer boolean_dup_times boolean_dup_items integer_mod integer_pop exec_rot (boolean_swap) (integer_yankdup boolean_dup_times integer_max tagged_376 exec_y (integer_dup integer_dup_times integer_lt) integer_empty print_integer) (boolean_frominteger integer_lt) integer_add exec_rot (integer_lte) (integer_empty integer_dup) () exec_dup (integer_dup_times exec_eq integer_empty integer_yankdup boolean_dup))
Zero cases best errors: [1 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 3 1 4 1000 1 1000 3 2 7)
Population mean number of elite cases: 2.03
Count of perfect (error zero) individuals by case: (4 3 1 4 0 1 0 3 2 7)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_376} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup})
Best program: (integer_sub exec_if (boolean_eq exec_dup_items) (in3) print_integer boolean_dup_times boolean_dup_items integer_mod integer_pop exec_rot (boolean_swap) (integer_yankdup boolean_dup_times integer_max tagged_376 exec_y (integer_dup integer_dup_times integer_lt) integer_empty print_integer) (boolean_frominteger integer_lt) integer_add exec_rot (integer_lte) (integer_empty integer_dup) () exec_dup (integer_dup_times exec_eq integer_empty integer_yankdup boolean_dup))
Errors: [1 0 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 35
Size: 46
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 9.975
Median total errors in population: 10
Error averages by case: (0.996 0.997 0.999 0.996 1.0 0.999 1.0 0.997 0.998 0.993)
Error minima by case: (0 0 0 0 1 0 1 0 0 0)
Average genome size in population (length): 51.155
Average program size in population (points): 70.496
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 450796
--- Timings ---
Current time: 1559584679654 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.7 seconds, 29.2%
Fitness Testing:      1.7 seconds, 66.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 96                 
Correct output: -93                 | Program output: -90                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: 30                 
Correct output: -90                 | Program output: -88                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: 62                 
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 29                 
Correct output: 10                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 75                 
Correct output: 24                  | Program output: 94                 
Correct output: 16                  | Program output: 17                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 95                 
Correct output: 32                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 82                 
Correct output: 11                  | Program output: 17                 
Correct output: 0                   | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: 9                  
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 92                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -10                
Correct output: -80                 | Program output: -61                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: 62                 
Correct output: -100                | Program output: -57                
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 99                 
Correct output: -6                  | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 49                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -2                 
Correct output: -18                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 39                 
Correct output: -99                 | Program output: -59                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: 19                 
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 19                 
Correct output: 12                  | Program output: 91                 
Correct output: 13                  | Program output: 26                 
Correct output: -52                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -33                
Correct output: -96                 | Program output: 12                 
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -56                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -10                
Correct output: -92                 | Program output: 44                 
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -60                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_empty})
Lexicase best program: (integer_dup_items exec_rot (integer_dec integer_yank integer_rot integer_pop) (boolean_yank exec_y_when_autoconstructing (exec_k_when_autoconstructing (integer_lt exec_dup_items exec_dup_items) () integer_lte in1 print_integer exec_do*count (integer_eq exec_s_when_autoconstructing (integer_yankdup integer_flush exec_y (integer_max) integer_div boolean_and exec_y (boolean_flush integer_shove exec_dup () boolean_pop) print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove) () boolean_eq integer_gte) exec_noop integer_empty)) (exec_do*count (exec_s_when_autoconstructing (boolean_frominteger boolean_stackdepth) (boolean_rot boolean_stackdepth) (integer_div) boolean_empty)))
Lexicase best errors: [1 0 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 66
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_empty})
Zero cases best program: (integer_dup_items exec_rot (integer_dec integer_yank integer_rot integer_pop) (boolean_yank exec_y_when_autoconstructing (exec_k_when_autoconstructing (integer_lt exec_dup_items exec_dup_items) () integer_lte in1 print_integer exec_do*count (integer_eq exec_s_when_autoconstructing (integer_yankdup integer_flush exec_y (integer_max) integer_div boolean_and exec_y (boolean_flush integer_shove exec_dup () boolean_pop) print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove) () boolean_eq integer_gte) exec_noop integer_empty)) (exec_do*count (exec_s_when_autoconstructing (boolean_frominteger boolean_stackdepth) (boolean_rot boolean_stackdepth) (integer_div) boolean_empty)))
Zero cases best errors: [1 0 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 66
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 256 1000 1000 899 1000 1000 1000 479 255)
Population mean number of elite cases: 7.11
Count of perfect (error zero) individuals by case: (223 256 0 0 899 0 0 0 479 255)
Population mean number of perfect (error zero) cases: 2.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_264} {:close 0, :instruction boolean_empty} {:close 1, :instruction -13} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction 24} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gt})
Best program: (in1 exec_s (boolean_dup_times exec_when (boolean_xor)) (exec_do*range () boolean_stackdepth) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline) print_exec (exec_yankdup integer_lte exec_dup_times () integer_sub print_boolean) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq boolean_rot in1 tag_boolean_264 boolean_empty -13) (integer_add print_boolean exec_swap (exec_empty integer_yank exec_do*range (exec_do*count (integer_min integer_eq 24) print_integer exec_empty integer_dup_items) exec_s_when_autoconstructing (exec_rot () (boolean_stackdepth integer_stackdepth) (integer_div boolean_flush in2 exec_do*count (boolean_invert_second_then_and) boolean_dup) exec_dup_times (integer_gt)) () ()) ()) ()))
Errors: [1 0 1 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 67
Size: 97
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 7.888
Median total errors in population: 9
Error averages by case: (0.777 0.744 1.0 1.0 0.101 1.0 1.0 1.0 0.521 0.745)
Error minima by case: (0 0 1 1 0 1 1 1 0 0)
Average genome size in population (length): 42.107
Average program size in population (points): 55.256
Average percent parens in population: 0.234
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.531
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 259
Genome diversity (% unique genomes):	 0.491
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 264
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1426294
--- Timings ---
Current time: 1559584682690 milliseconds
Total Time:           6.1 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.3 seconds, 38.0%
Fitness Testing:      2.9 seconds, 46.4%
Report:               0.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 77                  | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 83                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 73                 
Correct output: 39                  | Program output: 39                 
Correct output: 31                  | Program output: 53                 
Correct output: 9                   | Program output: 87                 
Correct output: 20                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 32                  | Program output: 32                 
Correct output: 16                  | Program output: 70                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 54                  | Program output: 83                 
Correct output: -75                 | Program output: -75                
Correct output: -78                 | Program output: -43                
Correct output: -73                 | Program output: -17                
Correct output: -89                 | Program output: -49                
Correct output: -77                 | Program output: 6                  
Correct output: -10                 | Program output: 22                 
Correct output: -11                 | Program output: 45                 
Correct output: -96                 | Program output: -89                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 80                 
Correct output: -78                 | Program output: 59                 
Correct output: -82                 | Program output: -41                
Correct output: -31                 | Program output: 28                 
Correct output: -6                  | Program output: -6                 
Correct output: -1                  | Program output: 64                 
Correct output: -71                 | Program output: -69                
Correct output: -17                 | Program output: 37                 
Correct output: -68                 | Program output: -52                
Correct output: -49                 | Program output: -11                
Correct output: -72                 | Program output: 31                 
Correct output: -67                 | Program output: 27                 
Correct output: -83                 | Program output: -18                
Correct output: -22                 | Program output: -22                
Correct output: -18                 | Program output: -1                 
Correct output: -69                 | Program output: 54                 
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: 79                 
Correct output: -41                 | Program output: 21                 
Correct output: -38                 | Program output: -38                
Correct output: -44                 | Program output: 84                 
Correct output: -41                 | Program output: 60                 
Correct output: -88                 | Program output: 75                 
Correct output: -44                 | Program output: 11                 
Correct output: -97                 | Program output: -85                
Correct output: 12                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -96                 | Program output: -96                
Correct output: 29                  | Program output: 57                 
Correct output: -16                 | Program output: 98                 
Correct output: -92                 | Program output: 56                 
Correct output: -88                 | Program output: -69                
Correct output: -24                 | Program output: 77                 
Correct output: -100                | Program output: -76                
Correct output: -86                 | Program output: 35                 
Correct output: -96                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -28                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -12                 | Program output: 72                 
Correct output: -3                  | Program output: 3                  
Correct output: -14                 | Program output: 38                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_flush boolean_empty integer_empty exec_do*range (exec_when (boolean_rot) boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and) exec_swap (in4 integer_gt exec_y (integer_lte integer_lte print_integer) integer_flush boolean_yankdup) () integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush in4 exec_flush tag_exec_819 (boolean_and exec_empty integer_fromboolean integer_dup_items))
Lexicase best errors: [0 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_flush boolean_empty integer_empty exec_do*range (exec_when (boolean_rot) boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and) exec_swap (in4 integer_gt exec_y (integer_lte integer_lte print_integer) integer_flush boolean_yankdup) () integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush in4 exec_flush tag_exec_819 (boolean_and exec_empty integer_fromboolean integer_dup_items))
Zero cases best errors: [0 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 320 320 886 564 1 1 564 1 1)
Population mean number of elite cases: 2.66
Count of perfect (error zero) individuals by case: (1 320 320 886 564 1 1 564 1 1)
Population mean number of perfect (error zero) cases: 2.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Best program: (integer_flush boolean_empty integer_empty exec_do*range (exec_when (boolean_rot) boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and) exec_swap (in4 integer_gt exec_y (integer_lte integer_lte print_integer) integer_flush boolean_yankdup) () integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush in4 exec_flush tag_exec_819 (boolean_and exec_empty integer_fromboolean integer_dup_items))
Errors: [0 1 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 47
Size: 57
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 7.341
Median total errors in population: 7
Error averages by case: (0.999 0.68 0.68 0.114 0.436 0.999 0.999 0.436 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.546
Average program size in population (points): 62.542
Average percent parens in population: 0.235
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.009
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2230935
--- Timings ---
Current time: 1559584686351 milliseconds
Total Time:           9.4 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.4 seconds, 46.9%
Fitness Testing:      3.8 seconds, 40.2%
Report:               1.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 77                  | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 83                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 73                 
Correct output: 39                  | Program output: 39                 
Correct output: 31                  | Program output: 53                 
Correct output: 9                   | Program output: 87                 
Correct output: 20                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 32                  | Program output: 32                 
Correct output: 16                  | Program output: 70                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 54                  | Program output: 83                 
Correct output: -75                 | Program output: -75                
Correct output: -78                 | Program output: -43                
Correct output: -73                 | Program output: -17                
Correct output: -89                 | Program output: -49                
Correct output: -77                 | Program output: 6                  
Correct output: -10                 | Program output: 22                 
Correct output: -11                 | Program output: 45                 
Correct output: -96                 | Program output: -89                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 80                 
Correct output: -78                 | Program output: 59                 
Correct output: -82                 | Program output: -41                
Correct output: -31                 | Program output: 28                 
Correct output: -6                  | Program output: -6                 
Correct output: -1                  | Program output: 64                 
Correct output: -71                 | Program output: -69                
Correct output: -17                 | Program output: 37                 
Correct output: -68                 | Program output: -52                
Correct output: -49                 | Program output: -11                
Correct output: -72                 | Program output: 31                 
Correct output: -67                 | Program output: 27                 
Correct output: -83                 | Program output: -18                
Correct output: -22                 | Program output: -22                
Correct output: -18                 | Program output: -1                 
Correct output: -69                 | Program output: 54                 
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: 79                 
Correct output: -41                 | Program output: 21                 
Correct output: -38                 | Program output: -38                
Correct output: -44                 | Program output: 84                 
Correct output: -41                 | Program output: 60                 
Correct output: -88                 | Program output: 75                 
Correct output: -44                 | Program output: 11                 
Correct output: -97                 | Program output: -85                
Correct output: 12                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -96                 | Program output: -96                
Correct output: 29                  | Program output: 57                 
Correct output: -16                 | Program output: 98                 
Correct output: -92                 | Program output: 56                 
Correct output: -88                 | Program output: -69                
Correct output: -24                 | Program output: 77                 
Correct output: -100                | Program output: -76                
Correct output: -86                 | Program output: 35                 
Correct output: -96                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -28                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -12                 | Program output: 72                 
Correct output: -3                  | Program output: 3                  
Correct output: -14                 | Program output: 38                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_flush boolean_empty integer_empty exec_do*range (exec_when (boolean_rot) boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and) exec_swap (in4 integer_gt exec_y (integer_lte integer_lte print_integer) integer_flush boolean_yankdup) () integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush in4 exec_flush tag_exec_819 (boolean_and exec_empty integer_fromboolean integer_dup_items))
Lexicase best errors: [1 0 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_flush boolean_empty integer_empty exec_do*range (exec_when (boolean_rot) boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and) exec_swap (in4 integer_gt exec_y (integer_lte integer_lte print_integer) integer_flush boolean_yankdup) () integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush in4 exec_flush tag_exec_819 (boolean_and exec_empty integer_fromboolean integer_dup_items))
Zero cases best errors: [1 0 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (195 499 499 499 214 194 214 715 195 499)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (195 499 499 499 214 194 214 715 195 499)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Best program: (integer_flush boolean_empty integer_empty exec_do*range (exec_when (boolean_rot) boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and) exec_swap (in4 integer_gt exec_y (integer_lte integer_lte print_integer) integer_flush boolean_yankdup) () integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth integer_min exec_flush in4 exec_flush tag_exec_819 (boolean_and exec_empty integer_fromboolean integer_dup_items))
Errors: [1 0 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 44
Size: 54
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 6.277
Median total errors in population: 7
Error averages by case: (0.805 0.501 0.501 0.501 0.786 0.806 0.786 0.285 0.805 0.501)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.937
Average program size in population (points): 57.412
Average percent parens in population: 0.197
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 5.05075
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 264
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 275
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3272149
--- Timings ---
Current time: 1559584689967 milliseconds
Total Time:          13.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.3 seconds, 48.5%
Fitness Testing:      4.8 seconds, 36.7%
Report:               1.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 77                  | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 83                 
Correct output: -79                 | Program output: -19                
Correct output: -17                 | Program output: -17                
Correct output: -41                 | Program output: -41                
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 33                 
Correct output: 10                  | Program output: 67                 
Correct output: 13                  | Program output: 77                 
Correct output: 12                  | Program output: 51                 
Correct output: 24                  | Program output: 62                 
Correct output: 16                  | Program output: 53                 
Correct output: 20                  | Program output: 64                 
Correct output: 39                  | Program output: 100                
Correct output: 31                  | Program output: 60                 
Correct output: 9                   | Program output: 62                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 44                 
Correct output: 1                   | Program output: 72                 
Correct output: 50                  | Program output: 59                 
Correct output: 32                  | Program output: 80                 
Correct output: 16                  | Program output: 23                 
Correct output: 13                  | Program output: 55                 
Correct output: 11                  | Program output: 91                 
Correct output: 0                   | Program output: 71                 
Correct output: 54                  | Program output: 66                 
Correct output: -75                 | Program output: 44                 
Correct output: -78                 | Program output: 52                 
Correct output: -73                 | Program output: -35                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -77                
Correct output: -10                 | Program output: -10                
Correct output: -11                 | Program output: 23                 
Correct output: -96                 | Program output: 82                 
Correct output: -2                  | Program output: -2                 
Correct output: -53                 | Program output: 60                 
Correct output: -80                 | Program output: -49                
Correct output: -62                 | Program output: -23                
Correct output: -67                 | Program output: 93                 
Correct output: -100                | Program output: -22                
Correct output: 16                  | Program output: 18                 
Correct output: -78                 | Program output: -65                
Correct output: -82                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -6                  | Program output: 80                 
Correct output: -1                  | Program output: 98                 
Correct output: -71                 | Program output: -28                
Correct output: -17                 | Program output: 57                 
Correct output: -68                 | Program output: 38                 
Correct output: -49                 | Program output: -36                
Correct output: -72                 | Program output: -60                
Correct output: -67                 | Program output: -63                
Correct output: -83                 | Program output: 46                 
Correct output: -22                 | Program output: 9                  
Correct output: -18                 | Program output: 22                 
Correct output: -69                 | Program output: -32                
Correct output: 18                  | Program output: 66                 
Correct output: -99                 | Program output: 58                 
Correct output: -69                 | Program output: -63                
Correct output: -41                 | Program output: 73                 
Correct output: -38                 | Program output: -31                
Correct output: -44                 | Program output: 92                 
Correct output: -41                 | Program output: 65                 
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: 43                 
Correct output: -97                 | Program output: -97                
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 48                 
Correct output: -52                 | Program output: 75                 
Correct output: -57                 | Program output: -41                
Correct output: -46                 | Program output: 36                 
Correct output: -96                 | Program output: -68                
Correct output: 29                  | Program output: 52                 
Correct output: -16                 | Program output: 24                 
Correct output: -92                 | Program output: 98                 
Correct output: -88                 | Program output: -41                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: 5                  
Correct output: -28                 | Program output: 29                 
Correct output: -78                 | Program output: -32                
Correct output: -12                 | Program output: 52                 
Correct output: -3                  | Program output: 85                 
Correct output: -14                 | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_flush boolean_empty integer_empty exec_do*range (exec_when (boolean_rot) boolean_rot) boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and exec_swap (in4 integer_gt exec_y (integer_lte integer_lte print_integer) integer_flush boolean_yankdup) () integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush in4 exec_flush tag_exec_819 (boolean_and exec_empty integer_fromboolean integer_dup_items))
Lexicase best errors: [0 0 0 0 1 1 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 59
Percent parens: 0.169
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_flush boolean_empty integer_empty exec_do*range (exec_when (boolean_rot) boolean_rot) boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and exec_swap (in4 integer_gt exec_y (integer_lte integer_lte print_integer) integer_flush boolean_yankdup) () integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush in4 exec_flush tag_exec_819 (boolean_and exec_empty integer_fromboolean integer_dup_items))
Zero cases best errors: [0 0 0 0 1 1 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 59
Percent parens: 0.169
--- Lexicase Population Statistics ---
Count of elite individuals by case: (432 900 899 432 262 1000 206 1000 206 262)
Population mean number of elite cases: 5.60
Count of perfect (error zero) individuals by case: (432 900 899 432 262 0 206 0 206 262)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Best program: (boolean_yankdup integer_flush boolean_not print_integer exec_if (boolean_stackdepth boolean_pop exec_eq boolean_shove integer_yankdup boolean_dup) (exec_y_when_autoconstructing (boolean_and integer_lt exec_swap () (boolean_not integer_dup_items in2 integer_lte print_integer) integer_flush boolean_yankdup)) integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times) boolean_shove boolean_flush boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and exec_empty integer_fromboolean integer_dup_items)
Errors: [1 0 0 1 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 44
Size: 51
Percent parens: 0.137
--- Population Statistics ---
Average total errors in population: 6.401
Median total errors in population: 6
Error averages by case: (0.568 0.1 0.101 0.568 0.738 1.0 0.794 1.0 0.794 0.738)
Error minima by case: (0 0 0 0 0 1 0 1 0 0)
Average genome size in population (length): 46.055
Average program size in population (points): 57.978
Average percent parens in population: 0.203
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 6.494375
Median age in population: 6.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4290843
--- Timings ---
Current time: 1559584693442 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.5 seconds, 50.3%
Fitness Testing:      5.8 seconds, 34.1%
Report:               2.5 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 77                  | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 83                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 73                 
Correct output: 39                  | Program output: 39                 
Correct output: 31                  | Program output: 53                 
Correct output: 9                   | Program output: 87                 
Correct output: 20                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 32                  | Program output: 32                 
Correct output: 16                  | Program output: 70                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 54                  | Program output: 83                 
Correct output: -75                 | Program output: -75                
Correct output: -78                 | Program output: -43                
Correct output: -73                 | Program output: -17                
Correct output: -89                 | Program output: -49                
Correct output: -77                 | Program output: 6                  
Correct output: -10                 | Program output: 22                 
Correct output: -11                 | Program output: 45                 
Correct output: -96                 | Program output: -89                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 80                 
Correct output: -78                 | Program output: 59                 
Correct output: -82                 | Program output: -41                
Correct output: -31                 | Program output: 28                 
Correct output: -6                  | Program output: -6                 
Correct output: -1                  | Program output: 64                 
Correct output: -71                 | Program output: -69                
Correct output: -17                 | Program output: 37                 
Correct output: -68                 | Program output: -52                
Correct output: -49                 | Program output: -11                
Correct output: -72                 | Program output: 31                 
Correct output: -67                 | Program output: 27                 
Correct output: -83                 | Program output: -18                
Correct output: -22                 | Program output: -22                
Correct output: -18                 | Program output: -1                 
Correct output: -69                 | Program output: 54                 
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: 79                 
Correct output: -41                 | Program output: 21                 
Correct output: -38                 | Program output: -38                
Correct output: -44                 | Program output: 84                 
Correct output: -41                 | Program output: 60                 
Correct output: -88                 | Program output: 75                 
Correct output: -44                 | Program output: 11                 
Correct output: -97                 | Program output: -85                
Correct output: 12                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -96                 | Program output: -96                
Correct output: 29                  | Program output: 57                 
Correct output: -16                 | Program output: 98                 
Correct output: -92                 | Program output: 56                 
Correct output: -88                 | Program output: -69                
Correct output: -24                 | Program output: 77                 
Correct output: -100                | Program output: -76                
Correct output: -86                 | Program output: 35                 
Correct output: -96                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -28                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -12                 | Program output: 72                 
Correct output: -3                  | Program output: 3                  
Correct output: -14                 | Program output: 38                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in1 boolean_rot boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and exec_swap (in4 integer_gt exec_y (integer_lte integer_min exec_stackdepth integer_empty integer_mult) integer_gte exec_pop () print_boolean integer_lt) (integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_swap) boolean_frominteger integer_div integer_mod boolean_xor integer_mod print_integer boolean_swap exec_s_when_autoconstructing () (integer_empty) (boolean_dup) boolean_dup_times)
Lexicase best errors: [1 0 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in1 boolean_rot boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and exec_swap (in4 integer_gt exec_y (integer_lte integer_min exec_stackdepth integer_empty integer_mult) integer_gte exec_pop () print_boolean integer_lt) (integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_swap) boolean_frominteger integer_div integer_mod boolean_xor integer_mod print_integer boolean_swap exec_s_when_autoconstructing () (integer_empty) (boolean_dup) boolean_dup_times)
Zero cases best errors: [1 0 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 312 255 892 1000 892 326 892 312 255)
Population mean number of elite cases: 6.14
Count of perfect (error zero) individuals by case: (0 312 255 892 0 892 326 892 312 255)
Population mean number of perfect (error zero) cases: 4.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Best program: (exec_when (boolean_rot) boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and exec_swap (in4 integer_gt exec_y (integer_lte integer_lte print_integer) integer_flush boolean_yankdup) () integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush in4 exec_flush tag_exec_819 (boolean_and exec_empty integer_fromboolean integer_dup_items))
Errors: [1 1 0 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 43
Size: 52
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 5.864
Median total errors in population: 5
Error averages by case: (1.0 0.688 0.745 0.108 1.0 0.108 0.674 0.108 0.688 0.745)
Error minima by case: (1 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 43.187
Average program size in population (points): 54.744
Average percent parens in population: 0.209
Minimum age in population: 5.0
Maximum age in population: 9.875
Average age in population: 7.913375
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5164891
--- Timings ---
Current time: 1559584697270 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.7 seconds, 53.0%
Fitness Testing:      6.6 seconds, 32.7%
Report:               2.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: 44                  | Program output: 44                 
Correct output: -18                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -14                 | Program output: 37                 
Correct output: 56                  | Program output: 83                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 50                 
Correct output: 13                  | Program output: 38                 
Correct output: 12                  | Program output: 44                 
Correct output: 24                  | Program output: 28                 
Correct output: 16                  | Program output: 42                 
Correct output: 20                  | Program output: 20                 
Correct output: 39                  | Program output: 73                 
Correct output: 31                  | Program output: 64                 
Correct output: 9                   | Program output: 65                 
Correct output: 20                  | Program output: 80                 
Correct output: 25                  | Program output: 92                 
Correct output: 1                   | Program output: 46                 
Correct output: 50                  | Program output: 92                 
Correct output: 32                  | Program output: 43                 
Correct output: 16                  | Program output: 92                 
Correct output: 13                  | Program output: 62                 
Correct output: 11                  | Program output: 79                 
Correct output: 0                   | Program output: 69                 
Correct output: 54                  | Program output: 91                 
Correct output: -75                 | Program output: -66                
Correct output: -78                 | Program output: -71                
Correct output: -73                 | Program output: -72                
Correct output: -89                 | Program output: 48                 
Correct output: -77                 | Program output: 11                 
Correct output: -10                 | Program output: -7                 
Correct output: -11                 | Program output: 29                 
Correct output: -96                 | Program output: -50                
Correct output: -2                  | Program output: 42                 
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: 71                 
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: 95                 
Correct output: -100                | Program output: 44                 
Correct output: 16                  | Program output: 16                 
Correct output: -78                 | Program output: -78                
Correct output: -82                 | Program output: -82                
Correct output: -31                 | Program output: 62                 
Correct output: -6                  | Program output: 54                 
Correct output: -1                  | Program output: 23                 
Correct output: -71                 | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -68                 | Program output: 74                 
Correct output: -49                 | Program output: -13                
Correct output: -72                 | Program output: 41                 
Correct output: -67                 | Program output: 57                 
Correct output: -83                 | Program output: -54                
Correct output: -22                 | Program output: 26                 
Correct output: -18                 | Program output: -18                
Correct output: -69                 | Program output: -32                
Correct output: 18                  | Program output: 23                 
Correct output: -99                 | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -41                 | Program output: 20                 
Correct output: -38                 | Program output: -30                
Correct output: -44                 | Program output: -25                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: 44                 
Correct output: -44                 | Program output: 57                 
Correct output: -97                 | Program output: -63                
Correct output: 12                  | Program output: 94                 
Correct output: 13                  | Program output: 34                 
Correct output: -52                 | Program output: 53                 
Correct output: -57                 | Program output: 68                 
Correct output: -46                 | Program output: 4                  
Correct output: -96                 | Program output: 44                 
Correct output: 29                  | Program output: 95                 
Correct output: -16                 | Program output: -16                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -38                
Correct output: -24                 | Program output: 14                 
Correct output: -100                | Program output: 87                 
Correct output: -86                 | Program output: -79                
Correct output: -96                 | Program output: 92                 
Correct output: -92                 | Program output: 82                 
Correct output: -28                 | Program output: -16                
Correct output: -78                 | Program output: 1                  
Correct output: -12                 | Program output: 2                  
Correct output: -3                  | Program output: 12                 
Correct output: -14                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Lexicase best program: (boolean_yankdup integer_flush boolean_not exec_when (boolean_rot) boolean_flush print_integer integer_shove integer_max exec_when (boolean_and) integer_max exec_dup_times () integer_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_do*times () in3 exec_y (integer_lte integer_lte print_integer) integer_flush boolean_yankdup integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and exec_empty integer_fromboolean integer_dup_items))
Lexicase best errors: [0 0 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.148
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Zero cases best program: (boolean_yankdup integer_flush boolean_not exec_when (boolean_rot) boolean_flush print_integer integer_shove integer_max exec_when (boolean_and) integer_max exec_dup_times () integer_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_do*times () in3 exec_y (integer_lte integer_lte print_integer) integer_flush boolean_yankdup integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and exec_empty integer_fromboolean integer_dup_items))
Zero cases best errors: [0 0 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.148
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 356 353 177 356 2 1 356)
Population mean number of elite cases: 1.60
Count of perfect (error zero) individuals by case: (1 1 1 356 353 177 356 2 1 356)
Population mean number of perfect (error zero) cases: 1.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Best program: (boolean_yankdup integer_flush boolean_not exec_when (boolean_rot) boolean_flush print_integer integer_shove integer_max exec_when (boolean_and) integer_max exec_dup_times () integer_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_do*times () in3 exec_y (integer_lte integer_lte print_integer) integer_flush boolean_yankdup integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and exec_empty integer_fromboolean integer_dup_items))
Errors: [0 0 0 1 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 46
Size: 54
Percent parens: 0.148
--- Population Statistics ---
Average total errors in population: 8.396
Median total errors in population: 9
Error averages by case: (0.999 0.999 0.999 0.644 0.647 0.823 0.644 0.998 0.999 0.644)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.979
Average program size in population (points): 55.703
Average percent parens in population: 0.209
Minimum age in population: 6.25
Maximum age in population: 11.25
Average age in population: 9.40290625
Median age in population: 9.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6157941
--- Timings ---
Current time: 1559584701054 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.9 seconds, 53.4%
Fitness Testing:      7.6 seconds, 31.4%
Report:               3.5 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 96                 
Correct output: -93                 | Program output: -90                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: 30                 
Correct output: -90                 | Program output: -88                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: 62                 
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 29                 
Correct output: 10                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 75                 
Correct output: 24                  | Program output: 94                 
Correct output: 16                  | Program output: 17                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 95                 
Correct output: 32                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 82                 
Correct output: 11                  | Program output: 17                 
Correct output: 0                   | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: 9                  
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 92                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -10                
Correct output: -80                 | Program output: -61                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: 62                 
Correct output: -100                | Program output: -57                
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 99                 
Correct output: -6                  | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 49                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -2                 
Correct output: -18                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 39                 
Correct output: -99                 | Program output: -59                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: 19                 
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 19                 
Correct output: 12                  | Program output: 91                 
Correct output: 13                  | Program output: 26                 
Correct output: -52                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -33                
Correct output: -96                 | Program output: 12                 
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -56                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -10                
Correct output: -92                 | Program output: 44                 
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -60                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_780} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_497} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction tag_boolean_293} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_89} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div integer_sub integer_dup_items in2 in1 integer_rot print_integer integer_fromboolean boolean_and print_boolean integer_gt boolean_invert_second_then_and print_boolean exec_do*range (exec_s (tag_integer_780) (boolean_stackdepth) (integer_min tag_boolean_497 boolean_yankdup boolean_frominteger integer_lt boolean_swap tag_boolean_293 integer_mult integer_dup_items boolean_stackdepth exec_y (integer_dup) exec_s_when_autoconstructing (print_integer exec_do*times (integer_pop tag_integer_89 integer_div exec_s (integer_inc) () ())) () ())))
Lexicase best errors: [0 0 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 50
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_780} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_497} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction tag_boolean_293} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_89} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div integer_sub integer_dup_items in2 in1 integer_rot print_integer integer_fromboolean boolean_and print_boolean integer_gt boolean_invert_second_then_and print_boolean exec_do*range (exec_s (tag_integer_780) (boolean_stackdepth) (integer_min tag_boolean_497 boolean_yankdup boolean_frominteger integer_lt boolean_swap tag_boolean_293 integer_mult integer_dup_items boolean_stackdepth exec_y (integer_dup) exec_s_when_autoconstructing (print_integer exec_do*times (integer_pop tag_integer_89 integer_div exec_s (integer_inc) () ())) () ())))
Zero cases best errors: [0 0 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 50
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (258 259 453 99 258 258 905 709 451 259)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (258 259 453 99 258 258 905 709 451 259)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_780} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_497} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction tag_boolean_293} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_89} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc})
Best program: (integer_div integer_sub integer_dup_items in2 in1 boolean_dup print_integer integer_fromboolean boolean_and print_boolean integer_gt boolean_invert_second_then_and print_boolean exec_do*range (exec_s (tag_integer_780) (boolean_stackdepth) (integer_min tag_boolean_497 boolean_yankdup boolean_frominteger integer_lt boolean_swap tag_boolean_293 integer_mult integer_dup_items boolean_stackdepth exec_y (print_boolean) exec_s_when_autoconstructing (print_integer exec_do*times (integer_fromboolean tag_integer_89 integer_div exec_s (integer_inc) () ())) () ())))
Errors: [0 0 1 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 37
Size: 50
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 6.091
Median total errors in population: 6
Error averages by case: (0.742 0.741 0.547 0.901 0.742 0.742 0.095 0.291 0.549 0.741)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.923
Average program size in population (points): 55.244
Average percent parens in population: 0.185
Minimum age in population: 7.625
Maximum age in population: 12.65625
Average age in population: 11.24021875
Median age in population: 11.09375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 220
Genome diversity (% unique genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 241
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7292262
--- Timings ---
Current time: 1559584705100 milliseconds
Total Time:          28.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.2 seconds, 54.0%
Fitness Testing:      8.6 seconds, 30.6%
Report:               4.3 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 96                 
Correct output: -93                 | Program output: -90                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: 30                 
Correct output: -90                 | Program output: -88                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: 62                 
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 29                 
Correct output: 10                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 75                 
Correct output: 24                  | Program output: 94                 
Correct output: 16                  | Program output: 17                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 95                 
Correct output: 32                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 82                 
Correct output: 11                  | Program output: 17                 
Correct output: 0                   | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: 9                  
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 92                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -10                
Correct output: -80                 | Program output: -61                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: 62                 
Correct output: -100                | Program output: -57                
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 99                 
Correct output: -6                  | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 49                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -2                 
Correct output: -18                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 39                 
Correct output: -99                 | Program output: -59                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: 19                 
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 19                 
Correct output: 12                  | Program output: 91                 
Correct output: 13                  | Program output: 26                 
Correct output: -52                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -33                
Correct output: -96                 | Program output: 12                 
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -56                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -10                
Correct output: -92                 | Program output: 44                 
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -60                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup})
Lexicase best program: (integer_flush boolean_empty integer_empty exec_do*range (in1 boolean_rot) boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and exec_swap (in4 integer_gt exec_y (integer_lte integer_min exec_stackdepth integer_empty integer_mult) integer_gte exec_pop () exec_pop (exec_y () integer_max integer_div exec_stackdepth integer_empty integer_mult) integer_gte exec_pop (print_boolean integer_lt) integer_dup_items integer_yankdup integer_inc integer_yank) (integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup)
Lexicase best errors: [1 1 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 60
Percent parens: 0.183
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup})
Zero cases best program: (integer_flush boolean_empty integer_empty exec_do*range (in1 boolean_rot) boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and exec_swap (in4 integer_gt exec_y (integer_lte integer_min exec_stackdepth integer_empty integer_mult) integer_gte exec_pop () exec_pop (exec_y () integer_max integer_div exec_stackdepth integer_empty integer_mult) integer_gte exec_pop (print_boolean integer_lt) integer_dup_items integer_yankdup integer_inc integer_yank) (integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup)
Zero cases best errors: [1 1 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 60
Percent parens: 0.183
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 106 1000 915 598 598 913 1000 598 598)
Population mean number of elite cases: 7.33
Count of perfect (error zero) individuals by case: (0 106 0 915 598 598 913 0 598 598)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 2, :instruction integer_sub} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add})
Best program: (integer_flush boolean_empty integer_empty exec_do*range (in1 boolean_rot) boolean_flush print_integer integer_dec integer_pop exec_when (boolean_and) integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and exec_swap (in4 integer_gt exec_y (integer_lte integer_min exec_stackdepth integer_empty integer_mult) integer_gte exec_pop () print_boolean integer_lt) (integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_swap) boolean_frominteger integer_div integer_mod integer_max integer_mod print_integer boolean_swap exec_s_when_autoconstructing () (integer_empty) (boolean_dup) boolean_dup_times exec_noop boolean_pop exec_k_when_autoconstructing (integer_inc exec_do*count (integer_dec)) (integer_fromboolean exec_dup (boolean_stackdepth exec_stackdepth exec_y_when_autoconstructing () integer_pop) boolean_eq boolean_or in2) integer_mult integer_sub in2 integer_sub tag_boolean_249 print_exec (exec_dup_items integer_dup integer_add))
Errors: [1 1 1 0 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 70
Size: 87
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 5.674
Median total errors in population: 4
Error averages by case: (1.0 0.894 1.0 0.085 0.402 0.402 0.087 1.0 0.402 0.402)
Error minima by case: (1 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 43.99
Average program size in population (points): 56.202
Average percent parens in population: 0.215
Minimum age in population: 8.625
Maximum age in population: 14.3203125
Average age in population: 12.5894765625
Median age in population: 12.6953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8283725
--- Timings ---
Current time: 1559584709566 milliseconds
Total Time:          32.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.9 seconds, 55.1%
Fitness Testing:      9.6 seconds, 29.5%
Report:               4.9 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 96                 
Correct output: -93                 | Program output: -90                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: 30                 
Correct output: -90                 | Program output: -88                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: 62                 
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 29                 
Correct output: 10                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 75                 
Correct output: 24                  | Program output: 94                 
Correct output: 16                  | Program output: 17                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 95                 
Correct output: 32                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 82                 
Correct output: 11                  | Program output: 17                 
Correct output: 0                   | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: 9                  
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 92                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -10                
Correct output: -80                 | Program output: -61                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: 62                 
Correct output: -100                | Program output: -57                
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 99                 
Correct output: -6                  | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 49                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -2                 
Correct output: -18                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 39                 
Correct output: -99                 | Program output: -59                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: 19                 
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 19                 
Correct output: 12                  | Program output: 91                 
Correct output: 13                  | Program output: 26                 
Correct output: -52                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -33                
Correct output: -96                 | Program output: 12                 
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -56                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -10                
Correct output: -92                 | Program output: 44                 
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -60                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_780} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_497} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction tag_boolean_293} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Lexicase best program: (boolean_yankdup integer_flush boolean_not print_integer exec_if (boolean_stackdepth boolean_pop integer_div) (integer_sub integer_dup_items in2 in1) boolean_dup print_integer integer_fromboolean boolean_and print_boolean integer_gt boolean_invert_second_then_and print_boolean exec_do*range (exec_s (tag_integer_780) (exec_do*times () integer_min tag_boolean_497 exec_yank boolean_frominteger integer_lt boolean_swap tag_boolean_293 integer_mult integer_lte integer_lte print_integer) (integer_flush boolean_yankdup)) integer_swap integer_eq tagged_331 exec_do*range (integer_yank exec_do*count (integer_dup_times boolean_shove boolean_flush boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and exec_empty integer_fromboolean integer_dup_items)))
Lexicase best errors: [1 0 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 69
Percent parens: 0.145
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_780} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_497} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction tag_boolean_293} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Zero cases best program: (boolean_yankdup integer_flush boolean_not print_integer exec_if (boolean_stackdepth boolean_pop integer_div) (integer_sub integer_dup_items in2 in1) boolean_dup print_integer integer_fromboolean boolean_and print_boolean integer_gt boolean_invert_second_then_and print_boolean exec_do*range (exec_s (tag_integer_780) (exec_do*times () integer_min tag_boolean_497 exec_yank boolean_frominteger integer_lt boolean_swap tag_boolean_293 integer_mult integer_lte integer_lte print_integer) (integer_flush boolean_yankdup)) integer_swap integer_eq tagged_331 exec_do*range (integer_yank exec_do*count (integer_dup_times boolean_shove boolean_flush boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and exec_empty integer_fromboolean integer_dup_items)))
Zero cases best errors: [1 0 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 69
Percent parens: 0.145
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 720 1000 1000 721 1000 1000 1000 168 891)
Population mean number of elite cases: 8.50
Count of perfect (error zero) individuals by case: (0 720 0 0 721 0 0 0 168 891)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_swap} {:close 1, :instruction print_integer})
Best program: (boolean_yankdup integer_flush boolean_not exec_when (boolean_yankdup) integer_flush boolean_not exec_when (integer_sub boolean_empty integer_empty) exec_do*range (in1 boolean_rot) boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and exec_swap () (exec_k_when_autoconstructing () (print_integer) boolean_pop) integer_pop exec_when (boolean_swap) print_integer)
Errors: [1 0 1 1 0 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 32
Size: 43
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.5
Median total errors in population: 7
Error averages by case: (1.0 0.28 1.0 1.0 0.279 1.0 1.0 1.0 0.832 0.109)
Error minima by case: (1 0 1 1 0 1 1 1 0 0)
Average genome size in population (length): 42.481
Average program size in population (points): 55.43
Average percent parens in population: 0.232
Minimum age in population: 10.875
Maximum age in population: 16.140625
Average age in population: 14.0195390625
Median age in population: 14.109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 9163218
--- Timings ---
Current time: 1559584712536 milliseconds
Total Time:          36.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.7 seconds, 54.8%
Fitness Testing:     10.5 seconds, 29.1%
Report:               5.7 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 96                 
Correct output: -93                 | Program output: -90                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: 30                 
Correct output: -90                 | Program output: -88                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: 62                 
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 29                 
Correct output: 10                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 75                 
Correct output: 24                  | Program output: 94                 
Correct output: 16                  | Program output: 17                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 95                 
Correct output: 32                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 82                 
Correct output: 11                  | Program output: 17                 
Correct output: 0                   | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: 9                  
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 92                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -10                
Correct output: -80                 | Program output: -61                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: 62                 
Correct output: -100                | Program output: -57                
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 99                 
Correct output: -6                  | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 49                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -2                 
Correct output: -18                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 39                 
Correct output: -99                 | Program output: -59                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: 19                 
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 19                 
Correct output: 12                  | Program output: 91                 
Correct output: 13                  | Program output: 26                 
Correct output: -52                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -33                
Correct output: -96                 | Program output: 12                 
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -56                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -10                
Correct output: -92                 | Program output: 44                 
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -60                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 1, :instruction tag_boolean_293} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_flush integer_flush boolean_empty integer_empty exec_do*range (in1 exec_pop () boolean_flush print_integer integer_min integer_pop integer_stackdepth boolean_and) integer_max exec_dup_times () boolean_dup integer_flush boolean_yankdup integer_swap integer_eq tagged_331 integer_yank integer_yank integer_sub boolean_swap tag_boolean_293 integer_mult integer_dup_items integer_yank integer_sub integer_dup_times boolean_shove boolean_flush boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush in4 exec_flush tag_exec_819 (boolean_and))
Lexicase best errors: [0 1 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 48
Percent parens: 0.104
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 1, :instruction tag_boolean_293} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_flush integer_flush boolean_empty integer_empty exec_do*range (in1 exec_pop () boolean_flush print_integer integer_min integer_pop integer_stackdepth boolean_and) integer_max exec_dup_times () boolean_dup integer_flush boolean_yankdup integer_swap integer_eq tagged_331 integer_yank integer_yank integer_sub boolean_swap tag_boolean_293 integer_mult integer_dup_items integer_yank integer_sub integer_dup_times boolean_shove boolean_flush boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush in4 exec_flush tag_exec_819 (boolean_and))
Zero cases best errors: [0 1 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 48
Percent parens: 0.104
--- Lexicase Population Statistics ---
Count of elite individuals by case: (608 1000 1000 1000 609 301 609 1000 1000 608)
Population mean number of elite cases: 7.74
Count of perfect (error zero) individuals by case: (608 0 0 0 609 301 609 0 0 608)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty})
Best program: (integer_flush boolean_empty integer_empty exec_do*range (in1 boolean_rot) boolean_flush in1 print_integer exec_do*count (integer_eq exec_s_when_autoconstructing (integer_yankdup integer_flush exec_y (exec_do*count (integer_eq print_integer integer_eq exec_s_when_autoconstructing (integer_yankdup integer_flush exec_y (integer_max) integer_div) (boolean_and integer_shove exec_dup () boolean_pop) (print_integer integer_gte boolean_or) boolean_dup_times boolean_eq exec_yankdup) exec_noop boolean_empty)) () ()))
Errors: [0 1 1 1 0 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 37
Size: 50
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 7.265
Median total errors in population: 6
Error averages by case: (0.392 1.0 1.0 1.0 0.391 0.699 0.391 1.0 1.0 0.392)
Error minima by case: (0 1 1 1 0 0 0 1 1 0)
Average genome size in population (length): 42.402
Average program size in population (points): 54.937
Average percent parens in population: 0.227
Minimum age in population: 11.875
Maximum age in population: 17.513671875
Average age in population: 15.45812890625
Median age in population: 15.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 9995426
--- Timings ---
Current time: 1559584715604 milliseconds
Total Time:          38.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.4 seconds, 55.2%
Fitness Testing:     11.3 seconds, 29.2%
Report:               5.9 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 96                 
Correct output: -93                 | Program output: -90                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: 30                 
Correct output: -90                 | Program output: -88                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: 62                 
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 29                 
Correct output: 10                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 75                 
Correct output: 24                  | Program output: 94                 
Correct output: 16                  | Program output: 17                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 95                 
Correct output: 32                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 82                 
Correct output: 11                  | Program output: 17                 
Correct output: 0                   | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: 9                  
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 92                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -10                
Correct output: -80                 | Program output: -61                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: 62                 
Correct output: -100                | Program output: -57                
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 99                 
Correct output: -6                  | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 49                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -2                 
Correct output: -18                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 39                 
Correct output: -99                 | Program output: -59                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: 19                 
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 19                 
Correct output: 12                  | Program output: 91                 
Correct output: 13                  | Program output: 26                 
Correct output: -52                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -33                
Correct output: -96                 | Program output: 12                 
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -56                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -10                
Correct output: -92                 | Program output: 44                 
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -60                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_div integer_sub integer_dup_items in2 in1 boolean_dup print_integer integer_fromboolean boolean_and print_boolean integer_gt exec_do*count (integer_eq exec_noop integer_yankdup integer_flush exec_y (integer_max) integer_div boolean_and exec_y (integer_flush boolean_yankdup)) integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush)
Lexicase best errors: [0 0 0 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.116
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_div integer_sub integer_dup_items in2 in1 boolean_dup print_integer integer_fromboolean boolean_and print_boolean integer_gt exec_do*count (integer_eq exec_noop integer_yankdup integer_flush exec_y (integer_max) integer_div boolean_and exec_y (integer_flush boolean_yankdup)) integer_swap integer_eq tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush)
Zero cases best errors: [0 0 0 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.116
--- Lexicase Population Statistics ---
Count of elite individuals by case: (741 741 741 1000 1000 742 163 1000 162 741)
Population mean number of elite cases: 7.03
Count of perfect (error zero) individuals by case: (741 741 741 0 0 742 163 0 162 741)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Best program: (exec_do*times (boolean_empty integer_empty) exec_do*range (in1 boolean_rot) boolean_flush in1 print_integer exec_y_when_autoconstructing (integer_eq exec_s_when_autoconstructing (integer_yankdup integer_flush exec_y (exec_do*count (integer_eq exec_s_when_autoconstructing (integer_yankdup integer_flush exec_y (integer_max) integer_div boolean_and boolean_stackdepth boolean_flush integer_shove exec_dup () boolean_pop) (print_integer integer_gte boolean_or) (boolean_dup_times exec_empty integer_fromboolean integer_dup_items)))) () ()))
Errors: [0 0 0 1 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 50
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 5.969
Median total errors in population: 5
Error averages by case: (0.259 0.259 0.259 1.0 1.0 0.258 0.837 1.0 0.838 0.259)
Error minima by case: (0 0 0 1 1 0 0 1 0 0)
Average genome size in population (length): 43.029
Average program size in population (points): 56.161
Average percent parens in population: 0.232
Minimum age in population: 14.0625
Maximum age in population: 18.990234375
Average age in population: 16.975251953125
Median age in population: 17.04833984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 10859938
--- Timings ---
Current time: 1559584718834 milliseconds
Total Time:          41.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.1 seconds, 55.1%
Fitness Testing:     12.2 seconds, 29.0%
Report:               6.6 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 96                 
Correct output: -93                 | Program output: -90                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: 30                 
Correct output: -90                 | Program output: -88                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: 62                 
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 29                 
Correct output: 10                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 75                 
Correct output: 24                  | Program output: 94                 
Correct output: 16                  | Program output: 17                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 95                 
Correct output: 32                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 82                 
Correct output: 11                  | Program output: 17                 
Correct output: 0                   | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: 9                  
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 92                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -10                
Correct output: -80                 | Program output: -61                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: 62                 
Correct output: -100                | Program output: -57                
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 99                 
Correct output: -6                  | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 49                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -2                 
Correct output: -18                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 39                 
Correct output: -99                 | Program output: -59                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: 19                 
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 19                 
Correct output: 12                  | Program output: 91                 
Correct output: 13                  | Program output: 26                 
Correct output: -52                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -33                
Correct output: -96                 | Program output: 12                 
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -56                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -10                
Correct output: -92                 | Program output: 44                 
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -60                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_780} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_293} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_89} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div boolean_eq integer_dup_items in2 in1 boolean_dup print_integer integer_fromboolean boolean_and print_boolean integer_gt integer_flush boolean_yankdup boolean_invert_second_then_and print_boolean exec_do*while (exec_s (tag_integer_780) (boolean_stackdepth) (integer_min integer_lte integer_min exec_stackdepth tag_boolean_293 integer_mult integer_dup_items boolean_stackdepth exec_y (print_boolean) exec_s_when_autoconstructing (print_integer exec_do*times (integer_fromboolean tag_integer_89 integer_div exec_s (integer_inc) () ())) () ())))
Lexicase best errors: [0 1 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_780} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_293} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_89} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div boolean_eq integer_dup_items in2 in1 boolean_dup print_integer integer_fromboolean boolean_and print_boolean integer_gt integer_flush boolean_yankdup boolean_invert_second_then_and print_boolean exec_do*while (exec_s (tag_integer_780) (boolean_stackdepth) (integer_min integer_lte integer_min exec_stackdepth tag_boolean_293 integer_mult integer_dup_items boolean_stackdepth exec_y (print_boolean) exec_s_when_autoconstructing (print_integer exec_do*times (integer_fromboolean tag_integer_89 integer_div exec_s (integer_inc) () ())) () ())))
Zero cases best errors: [0 1 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (675 1000 676 1000 676 675 676 1000 675 228)
Population mean number of elite cases: 7.28
Count of perfect (error zero) individuals by case: (675 0 676 0 676 675 676 0 675 228)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_780} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_497} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Best program: (integer_div integer_sub integer_dup_items in2 in1 boolean_dup print_integer integer_fromboolean boolean_and print_boolean integer_gt boolean_invert_second_then_and print_boolean exec_shove (exec_s (tag_integer_780) (exec_do*times () integer_min tag_boolean_497 boolean_yankdup boolean_frominteger exec_k (integer_empty integer_mult) (integer_gte exec_pop () print_boolean integer_lt integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_swap) boolean_frominteger) () integer_div) integer_mod integer_fromboolean integer_dup_items)
Errors: [0 1 0 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 39
Size: 48
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 5.719
Median total errors in population: 4
Error averages by case: (0.325 1.0 0.324 1.0 0.324 0.325 0.324 1.0 0.325 0.772)
Error minima by case: (0 1 0 1 0 0 0 1 0 0)
Average genome size in population (length): 42.462
Average program size in population (points): 55.383
Average percent parens in population: 0.230
Minimum age in population: 15.0625
Maximum age in population: 20.6123046875
Average age in population: 18.42200244140625
Median age in population: 18.476318359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 11694734
--- Timings ---
Current time: 1559584721532 milliseconds
Total Time:          45.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.7 seconds, 54.9%
Fitness Testing:     13.0 seconds, 28.8%
Report:               7.2 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 96                 
Correct output: -93                 | Program output: -90                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: 30                 
Correct output: -90                 | Program output: -88                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: 62                 
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 29                 
Correct output: 10                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 75                 
Correct output: 24                  | Program output: 94                 
Correct output: 16                  | Program output: 17                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 95                 
Correct output: 32                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 82                 
Correct output: 11                  | Program output: 17                 
Correct output: 0                   | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: 9                  
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 92                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -10                
Correct output: -80                 | Program output: -61                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: 62                 
Correct output: -100                | Program output: -57                
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 99                 
Correct output: -6                  | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 49                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -2                 
Correct output: -18                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 39                 
Correct output: -99                 | Program output: -59                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: 19                 
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 19                 
Correct output: 12                  | Program output: 91                 
Correct output: 13                  | Program output: 26                 
Correct output: -52                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -33                
Correct output: -96                 | Program output: 12                 
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -56                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -10                
Correct output: -92                 | Program output: 44                 
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -60                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_flush boolean_empty integer_empty exec_do*range (in1 boolean_rot) boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_rot () () (boolean_dup boolean_invert_second_then_and exec_swap (integer_lte integer_min exec_stackdepth integer_empty integer_flush exec_y (integer_max) integer_div boolean_and exec_y (integer_flush boolean_yankdup)) (integer_swap) integer_eq) tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth exec_flush in4 exec_flush)
Lexicase best errors: [0 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_331} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_flush boolean_empty integer_empty exec_do*range (in1 boolean_rot) boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_rot () () (boolean_dup boolean_invert_second_then_and exec_swap (integer_lte integer_min exec_stackdepth integer_empty integer_flush exec_y (integer_max) integer_div boolean_and exec_y (integer_flush boolean_yankdup)) (integer_swap) integer_eq) tagged_331 exec_do*range (integer_yank integer_sub integer_dup_times boolean_shove boolean_flush) boolean_stackdepth exec_flush in4 exec_flush)
Zero cases best errors: [0 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (777 778 1 778 778 130 778 1 1000 1)
Population mean number of elite cases: 5.02
Count of perfect (error zero) individuals by case: (777 778 1 778 778 130 778 1 0 1)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_stackdepth})
Best program: (integer_dup_items exec_rot (integer_dec integer_yank integer_rot integer_pop) (boolean_yank exec_y_when_autoconstructing (exec_k_when_autoconstructing (integer_lt exec_dup_items exec_dup_items) () integer_lte in1 print_integer exec_do*count (integer_eq exec_s_when_autoconstructing (integer_yankdup integer_flush exec_y (integer_max) integer_div boolean_and exec_y (boolean_flush integer_shove exec_dup (boolean_pop) print_integer integer_gte boolean_or) boolean_dup_times integer_min boolean_dup integer_shove) () (boolean_eq integer_gte) exec_noop integer_empty)) exec_do*count (exec_s_when_autoconstructing (boolean_frominteger boolean_stackdepth) () ())) ())
Errors: [0 0 1 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 44
Size: 62
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 5.978
Median total errors in population: 5
Error averages by case: (0.223 0.222 0.999 0.222 0.222 0.87 0.222 0.999 1.0 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 42.237
Average program size in population (points): 55.203
Average percent parens in population: 0.232
Minimum age in population: 16.0625
Maximum age in population: 21.928955078125
Average age in population: 19.90056518554688
Median age in population: 19.9945068359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 12525049
--- Timings ---
Current time: 1559584724595 milliseconds
Total Time:          47.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.3 seconds, 55.2%
Fitness Testing:     13.8 seconds, 28.9%
Report:               7.5 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 77                  | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 83                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 73                 
Correct output: 39                  | Program output: 39                 
Correct output: 31                  | Program output: 53                 
Correct output: 9                   | Program output: 87                 
Correct output: 20                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 32                  | Program output: 32                 
Correct output: 16                  | Program output: 70                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 54                  | Program output: 83                 
Correct output: -75                 | Program output: -75                
Correct output: -78                 | Program output: -43                
Correct output: -73                 | Program output: -17                
Correct output: -89                 | Program output: -49                
Correct output: -77                 | Program output: 6                  
Correct output: -10                 | Program output: 22                 
Correct output: -11                 | Program output: 45                 
Correct output: -96                 | Program output: -89                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 80                 
Correct output: -78                 | Program output: 59                 
Correct output: -82                 | Program output: -41                
Correct output: -31                 | Program output: 28                 
Correct output: -6                  | Program output: -6                 
Correct output: -1                  | Program output: 64                 
Correct output: -71                 | Program output: -69                
Correct output: -17                 | Program output: 37                 
Correct output: -68                 | Program output: -52                
Correct output: -49                 | Program output: -11                
Correct output: -72                 | Program output: 31                 
Correct output: -67                 | Program output: 27                 
Correct output: -83                 | Program output: -18                
Correct output: -22                 | Program output: -22                
Correct output: -18                 | Program output: -1                 
Correct output: -69                 | Program output: 54                 
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: 79                 
Correct output: -41                 | Program output: 21                 
Correct output: -38                 | Program output: -38                
Correct output: -44                 | Program output: 84                 
Correct output: -41                 | Program output: 60                 
Correct output: -88                 | Program output: 75                 
Correct output: -44                 | Program output: 11                 
Correct output: -97                 | Program output: -85                
Correct output: 12                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -96                 | Program output: -96                
Correct output: 29                  | Program output: 57                 
Correct output: -16                 | Program output: 98                 
Correct output: -92                 | Program output: 56                 
Correct output: -88                 | Program output: -69                
Correct output: -24                 | Program output: 77                 
Correct output: -100                | Program output: -76                
Correct output: -86                 | Program output: 35                 
Correct output: -96                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -28                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -12                 | Program output: 72                 
Correct output: -3                  | Program output: 3                  
Correct output: -14                 | Program output: 38                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Lexicase best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () boolean_stackdepth) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline) print_exec (exec_yankdup integer_lte exec_dup_times () integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_dup_times integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and integer_lt) (integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) (boolean_and) print_integer integer_gte boolean_or) boolean_dup_times integer_min boolean_dup integer_shove boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Lexicase best errors: [1 0 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 94
Percent parens: 0.202
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Zero cases best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () boolean_stackdepth) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline) print_exec (exec_yankdup integer_lte exec_dup_times () integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_dup_times integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and integer_lt) (integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) (boolean_and) print_integer integer_gte boolean_or) boolean_dup_times integer_min boolean_dup integer_shove boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Zero cases best errors: [1 0 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 94
Percent parens: 0.202
--- Lexicase Population Statistics ---
Count of elite individuals by case: (20 298 299 1 298 1 1 1 526 299)
Population mean number of elite cases: 1.74
Count of perfect (error zero) individuals by case: (20 298 299 1 298 1 1 1 526 299)
Population mean number of perfect (error zero) cases: 1.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () boolean_stackdepth) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline) print_exec (exec_yankdup integer_lte exec_dup_times () integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_dup_times integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and integer_lt) (integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) (boolean_and) print_integer integer_gte boolean_or) boolean_dup_times integer_min boolean_dup integer_shove boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Errors: [1 0 0 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 75
Size: 94
Percent parens: 0.202
--- Population Statistics ---
Average total errors in population: 8.256
Median total errors in population: 9
Error averages by case: (0.98 0.702 0.701 0.999 0.702 0.999 0.999 0.999 0.474 0.701)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.803
Average program size in population (points): 70.329
Average percent parens in population: 0.224
Minimum age in population: 19.02734375
Maximum age in population: 23.588623046875
Average age in population: 21.49361547851562
Median age in population: 21.48260498046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 13134564
--- Timings ---
Current time: 1559584727094 milliseconds
Total Time:          50.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.9 seconds, 55.1%
Fitness Testing:     14.5 seconds, 28.6%
Report:               8.1 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 96                 
Correct output: -93                 | Program output: -90                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: 30                 
Correct output: -90                 | Program output: -88                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: 62                 
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 29                 
Correct output: 10                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 75                 
Correct output: 24                  | Program output: 94                 
Correct output: 16                  | Program output: 17                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 95                 
Correct output: 32                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 82                 
Correct output: 11                  | Program output: 17                 
Correct output: 0                   | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: 9                  
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 92                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -10                
Correct output: -80                 | Program output: -61                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: 62                 
Correct output: -100                | Program output: -57                
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 99                 
Correct output: -6                  | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 49                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -2                 
Correct output: -18                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 39                 
Correct output: -99                 | Program output: -59                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: 19                 
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 19                 
Correct output: 12                  | Program output: 91                 
Correct output: 13                  | Program output: 26                 
Correct output: -52                 | Program output: 39                 
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -33                
Correct output: -96                 | Program output: 12                 
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -56                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -10                
Correct output: -92                 | Program output: 44                 
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -60                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte})
Lexicase best program: (in1 exec_s (integer_rot exec_when (boolean_xor)) (exec_do*range () boolean_stackdepth) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline) print_exec (exec_yankdup integer_lte exec_dup_times () integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_dup_times integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and integer_lt) (integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) (boolean_and) print_integer integer_gte boolean_or) boolean_dup_times integer_min boolean_dup integer_shove boolean_eq integer_gte)
Lexicase best errors: [0 1 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 87
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte})
Zero cases best program: (in1 exec_s (integer_rot exec_when (boolean_xor)) (exec_do*range () boolean_stackdepth) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline) print_exec (exec_yankdup integer_lte exec_dup_times () integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_dup_times integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and integer_lt) (integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) (boolean_and) print_integer integer_gte boolean_or) boolean_dup_times integer_min boolean_dup integer_shove boolean_eq integer_gte)
Zero cases best errors: [0 1 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 87
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (817 285 279 279 130 251 120 279 119 129)
Population mean number of elite cases: 2.69
Count of perfect (error zero) individuals by case: (817 285 279 279 130 251 120 279 119 129)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Best program: (integer_flush boolean_empty integer_empty boolean_swap in1 boolean_rot boolean_flush print_integer integer_min integer_pop exec_when (boolean_and) integer_max exec_dup_times () boolean_dup boolean_invert_second_then_and exec_swap (in4 integer_gt in2 integer_lte print_integer) (integer_flush exec_eq) boolean_empty integer_yankdup boolean_shove integer_min exec_flush integer_sub integer_dup_times boolean_shove boolean_flush boolean_stackdepth boolean_dup_times integer_yankdup boolean_shove integer_min exec_flush exec_dup_items integer_add tag_exec_819 (boolean_and exec_empty integer_fromboolean integer_dup_items))
Errors: [0 1 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 46
Size: 52
Percent parens: 0.115
--- Population Statistics ---
Average total errors in population: 7.312
Median total errors in population: 6
Error averages by case: (0.183 0.715 0.721 0.721 0.87 0.749 0.88 0.721 0.881 0.871)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.554
Average program size in population (points): 75.029
Average percent parens in population: 0.243
Minimum age in population: 20.48046875
Maximum age in population: 24.51434326171875
Average age in population: 23.12854663085938
Median age in population: 23.09326171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 186
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 13708558
--- Timings ---
Current time: 1559584729971 milliseconds
Total Time:          53.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.9 seconds, 55.9%
Fitness Testing:     15.1 seconds, 28.2%
Report:               8.4 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 39                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 50                 
Correct output: 32                  | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: -75                
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -49                
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 22                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 28                 
Correct output: -6                  | Program output: -6                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 37                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -18                 | Program output: -1                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -85                
Correct output: 12                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -96                 | Program output: -96                
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -76                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -78                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Lexicase best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 95
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Zero cases best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 95
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (832 837 79 209 78 257 78 529 77 283)
Population mean number of elite cases: 3.26
Count of perfect (error zero) individuals by case: (832 837 79 209 78 257 78 529 77 283)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 75
Size: 95
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 6.741
Median total errors in population: 6
Error averages by case: (0.168 0.163 0.921 0.791 0.922 0.743 0.922 0.471 0.923 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.613
Average program size in population (points): 71.138
Average percent parens in population: 0.241
Minimum age in population: 22.33056640625
Maximum age in population: 26.10369873046875
Average age in population: 24.6435412902832
Median age in population: 24.72216796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 14346053
--- Timings ---
Current time: 1559584733449 milliseconds
Total Time:          56.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.3 seconds, 56.9%
Fitness Testing:     15.7 seconds, 27.7%
Report:               8.7 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 39                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 50                 
Correct output: 32                  | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: -75                
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -49                
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 22                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 28                 
Correct output: -6                  | Program output: -6                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 37                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -18                 | Program output: -1                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -85                
Correct output: 12                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -96                 | Program output: -96                
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -76                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -78                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Lexicase best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 95
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Zero cases best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 95
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (424 103 677 641 425 424 423 425 423 641)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (424 103 677 641 425 424 423 425 423 641)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 76
Size: 96
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 5.394
Median total errors in population: 6
Error averages by case: (0.576 0.897 0.323 0.359 0.575 0.576 0.577 0.575 0.577 0.359)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.452
Average program size in population (points): 88.721
Average percent parens in population: 0.222
Minimum age in population: 24.5045166015625
Maximum age in population: 27.53050231933594
Average age in population: 26.09097680664062
Median age in population: 26.22662353515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 226
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 228
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 14841073
--- Timings ---
Current time: 1559584736244 milliseconds
Total Time:          59.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.1 seconds, 57.3%
Fitness Testing:     16.3 seconds, 27.4%
Report:               9.0 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 39                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 50                 
Correct output: 32                  | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: -75                
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -49                
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 22                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 28                 
Correct output: -6                  | Program output: -6                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 37                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -18                 | Program output: -1                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -85                
Correct output: 12                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -96                 | Program output: -96                
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -76                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -78                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Lexicase best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Lexicase best errors: [0 1 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 107
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Zero cases best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Zero cases best errors: [0 1 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 107
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (516 1000 563 1000 88 563 563 547 546 546)
Population mean number of elite cases: 5.93
Count of perfect (error zero) individuals by case: (516 0 563 0 88 563 563 547 546 546)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction integer_flush})
Best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and integer_lt) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (integer_flush))
Errors: [0 1 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 71
Size: 91
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.068
Median total errors in population: 6
Error averages by case: (0.484 1.0 0.437 1.0 0.912 0.437 0.437 0.453 0.454 0.454)
Error minima by case: (0 1 0 1 0 0 0 0 0 0)
Average genome size in population (length): 74.028
Average program size in population (points): 93.949
Average percent parens in population: 0.213
Minimum age in population: 25.72216796875
Maximum age in population: 29.26443481445312
Average age in population: 27.55000820159912
Median age in population: 27.5155029296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 156
Genome diversity (% unique genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 15264552
--- Timings ---
Current time: 1559584739438 milliseconds
Total Time:          62.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.4 seconds, 58.1%
Fitness Testing:     16.8 seconds, 26.7%
Report:               9.4 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 39                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 50                 
Correct output: 32                  | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: -75                
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -49                
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 22                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 28                 
Correct output: -6                  | Program output: -6                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 37                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -18                 | Program output: -1                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -85                
Correct output: 12                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -96                 | Program output: -96                
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -76                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -78                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Lexicase best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup boolean_and)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 95
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Zero cases best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup boolean_and)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 95
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (562 522 707 522 521 518 562 1 521 515)
Population mean number of elite cases: 4.95
Count of perfect (error zero) individuals by case: (562 522 707 522 521 518 562 1 521 515)
Population mean number of perfect (error zero) cases: 4.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and})
Best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min integer_min exec_flush integer_flush exec_flush integer_max boolean_and)
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 76
Size: 95
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.049
Median total errors in population: 5
Error averages by case: (0.438 0.478 0.293 0.478 0.479 0.482 0.438 0.999 0.479 0.485)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.193
Average program size in population (points): 94.276
Average percent parens in population: 0.213
Minimum age in population: 27.14405822753906
Maximum age in population: 30.67653274536133
Average age in population: 29.05759060668945
Median age in population: 29.07315826416016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 15674660
--- Timings ---
Current time: 1559584742390 milliseconds
Total Time:          65.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.5 seconds, 58.6%
Fitness Testing:     17.2 seconds, 26.2%
Report:               9.9 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 428
Test mean error for best: 0.42800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 39                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 50                 
Correct output: 32                  | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: -75                
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -49                
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 22                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 28                 
Correct output: -6                  | Program output: -6                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 37                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -18                 | Program output: -1                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -85                
Correct output: 12                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -96                 | Program output: -96                
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -76                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -78                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Lexicase best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () boolean_shove) (exec_s (integer_lt) (exec_s (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_and) print_integer integer_gte boolean_or) boolean_dup_times integer_min boolean_dup integer_shove) () (boolean_eq integer_gte) integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and)) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 122
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Zero cases best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () boolean_shove) (exec_s (integer_lt) (exec_s (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush boolean_stackdepth boolean_dup_times exec_eq boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_and) print_integer integer_gte boolean_or) boolean_dup_times integer_min boolean_dup integer_shove) () (boolean_eq integer_gte) integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and)) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 122
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (520 601 599 577 568 577 520 608 583 520)
Population mean number of elite cases: 5.67
Count of perfect (error zero) individuals by case: (520 601 599 577 568 577 520 608 583 520)
Population mean number of perfect (error zero) cases: 5.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_819} {:close 0, :instruction boolean_and})
Best program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush exec_eq boolean_shove integer_min exec_flush boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 77
Size: 97
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 4.327
Median total errors in population: 4
Error averages by case: (0.48 0.399 0.401 0.423 0.432 0.423 0.48 0.392 0.417 0.48)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.838
Average program size in population (points): 93.939
Average percent parens in population: 0.214
Minimum age in population: 28.37106323242188
Maximum age in population: 32.3252010345459
Average age in population: 30.55643106460571
Median age in population: 30.6405029296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 16107606
--- Timings ---
Current time: 1559584745341 milliseconds
Total Time:          68.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.5 seconds, 59.0%
Fitness Testing:     17.7 seconds, 25.8%
Report:              10.3 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 20
Successful program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush exec_eq boolean_shove integer_min exec_flush boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 97


Auto-simplifying with starting size: 97
step: 0
program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush exec_eq boolean_shove integer_min exec_flush boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 500
program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush exec_eq boolean_shove integer_min exec_flush boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 1000
program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush exec_eq boolean_shove integer_min exec_flush boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 1500
program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush exec_eq boolean_shove integer_min exec_flush boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 2000
program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush exec_eq boolean_shove integer_min exec_flush boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 2500
program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush exec_eq boolean_shove integer_min exec_flush boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 3000
program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush exec_eq boolean_shove integer_min exec_flush boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 3500
program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush exec_eq boolean_shove integer_min exec_flush boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 4000
program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush exec_eq boolean_shove integer_min exec_flush boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 4500
program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush exec_eq boolean_shove integer_min exec_flush boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 5000
program: (in1 exec_s (in4 exec_when (boolean_xor)) (exec_do*range () integer_lt) (exec_s (exec_k (boolean_invert_first_then_and boolean_or) (exec_if () (boolean_yankdup exec_do*times (print_newline print_exec (print_exec (integer_lte exec_dup_times (integer_sub integer_max) integer_sub) boolean_empty exec_y () integer_eq boolean_yankdup exec_yank integer_stackdepth) integer_flush) print_integer exec_flush exec_eq integer_empty integer_add integer_add integer_mod exec_pop () integer_eq integer_yank integer_sub integer_stackdepth integer_yank boolean_flush exec_eq boolean_shove integer_min exec_flush boolean_shove integer_min exec_flush in4 exec_flush exec_yankdup boolean_and boolean_dup_items) integer_dup_items integer_yankdup integer_inc exec_dup_items integer_lte integer_lte) boolean_and) (print_integer integer_gte boolean_or) (boolean_dup_times integer_min boolean_dup integer_shove)) boolean_eq integer_gte integer_min exec_flush integer_flush exec_flush tag_exec_819 (boolean_and))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 428
Test mean error for best: 0.42800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: 44                  | Program output: 61                 
Correct output: -18                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -14                 | Program output: -14                
Correct output: 56                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -17                 | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: 100                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 55                  | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 55                 
Correct output: 39                  | Program output: 39                 
Correct output: 31                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 20                  | Program output: 74                 
Correct output: 25                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 50                  | Program output: 50                 
Correct output: 32                  | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 54                  | Program output: 54                 
Correct output: -75                 | Program output: -75                
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -49                
Correct output: -77                 | Program output: -64                
Correct output: -10                 | Program output: 22                 
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 27                 
Correct output: -53                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -27                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 34                 
Correct output: -78                 | Program output: 24                 
Correct output: -82                 | Program output: -59                
Correct output: -31                 | Program output: 28                 
Correct output: -6                  | Program output: -6                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: 37                 
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -18                 | Program output: -1                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: -44                 | Program output: -44                
Correct output: -41                 | Program output: 56                 
Correct output: -88                 | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -85                
Correct output: 12                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -96                 | Program output: -96                
Correct output: 29                  | Program output: 29                 
Correct output: -16                 | Program output: 66                 
Correct output: -92                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 72                 
Correct output: -100                | Program output: -76                
Correct output: -86                 | Program output: -14                
Correct output: -96                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -78                
Correct output: -12                 | Program output: -12                
Correct output: -3                  | Program output: -3                 
Correct output: -14                 | Program output: -14                
;;******************************
