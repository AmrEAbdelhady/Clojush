Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[43 25 43 43] 25] [[-10 -10 -10 -10] -10] [[-72 -68 -72 -72] -72] [[-69 -69 -69 -13] -69] [[60 71 71 71] 60] [[1 1 44 1] 1] [[99 99 12 99] 12] [[55 55 55 27] 27] [[-49 69 69 69] -49] [[-27 -10 -10 -10] -27] [(32 32 32 32) 32] [(-15 -15 -15 -15) -15] [(66 66 66 66) 66] [(85 85 85 85) 85] [(51 51 51 51) 51] [(68 77 66 91) 66] [(97 36 15 44) 15] [(91 13 60 37) 13] [(71 19 13 56) 13] [(17 4 95 28) 4] [(79 5 88 85) 5] [(18 9 71 10) 9] [(18 63 68 95) 18] [(6 97 20 28) 6] [(44 21 42 40) 21] [(7 74 91 85) 7] [(52 61 79 52) 52] [(41 71 59 98) 41] [(4 76 20 90) 4] [(75 0 80 69) 0] [(36 51 34 41) 34] [(74 90 80 85) 74] [(20 62 62 15) 15] [(65 44 58 59) 44] [(43 76 89 0) 0] [(92 44 -34 -21) -34] [(-70 78 73 86) -70] [(-12 -61 91 81) -61] [(29 36 32 73) 29] [(-12 70 25 -69) -69] [(-54 -62 -55 -35) -62] [(-24 -74 20 -73) -74] [(-86 -13 -64 59) -86] [(-87 8 -56 -21) -87] [(8 -43 -26 13) -43] [(59 -50 13 -10) -50] [(66 -53 -46 5) -53] [(20 44 -47 -40) -47] [(-83 -79 85 -57) -83] [(-83 93 1 -53) -83] [(-39 -40 34 35) -40] [(-94 -71 -58 -69) -94] [(47 13 -27 68) -27] [(23 -92 58 42) -92] [(-24 90 -39 98) -39] [(-8 -28 81 93) -28] [(47 -26 -58 5) -58] [(58 -68 -19 45) -68] [(-76 -87 -85 -99) -99] [(-28 -78 -92 19) -92] [(78 34 -39 72) -39] [(11 -66 -12 -84) -84] [(-30 -28 -22 16) -30] [(-100 71 -1 -80) -100] [(-57 -66 22 87) -66] [(-75 -57 -14 96) -75] [(-8 -10 7 -28) -28] [(86 -66 95 44) -66] [(-12 -8 76 -17) -17] [(-92 67 -78 -72) -92] [(-42 44 87 -30) -42] [(24 69 35 -16) -16] [(10 -45 46 41) -45] [(-36 -43 -6 -45) -45] [(47 8 -14 -55) -55] [(-70 3 -92 79) -92] [(35 -36 -12 -21) -36] [(0 77 48 -50) -50] [(-32 85 10 78) -32] [(68 -77 27 -33) -77] [(19 -94 97 38) -94] [(-41 82 -16 45) -41] [(-32 -90 9 -78) -90] [(-95 -85 72 36) -95] [(-55 -54 -89 90) -89] [(41 -88 7 -93) -93] [(40 35 -55 18) -55] [(-10 -86 -69 97) -86] [(-70 90 -30 78) -70] [(-41 81 18 89) -41] [(31 -7 11 -69) -69] [(-23 -42 -24 -12) -42] [(-46 49 -45 -25) -46] [(86 58 76 -76) -76] [(32 -30 78 -41) -41])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[43 25 43 43] 25]
Train Case:   6 | Input/Output: [[-10 -10 -10 -10] -10]
Train Case:   7 | Input/Output: [[-72 -68 -72 -72] -72]
Train Case:   8 | Input/Output: [[-69 -69 -69 -13] -69]
Train Case:   9 | Input/Output: [[60 71 71 71] 60]
Train Case:  10 | Input/Output: [[1 1 44 1] 1]
Train Case:  11 | Input/Output: [[99 99 12 99] 12]
Train Case:  12 | Input/Output: [[55 55 55 27] 27]
Train Case:  13 | Input/Output: [[-49 69 69 69] -49]
Train Case:  14 | Input/Output: [[-27 -10 -10 -10] -27]
Train Case:  15 | Input/Output: [(32 32 32 32) 32]
Train Case:  16 | Input/Output: [(-15 -15 -15 -15) -15]
Train Case:  17 | Input/Output: [(66 66 66 66) 66]
Train Case:  18 | Input/Output: [(85 85 85 85) 85]
Train Case:  19 | Input/Output: [(51 51 51 51) 51]
Train Case:  20 | Input/Output: [(68 77 66 91) 66]
Train Case:  21 | Input/Output: [(97 36 15 44) 15]
Train Case:  22 | Input/Output: [(91 13 60 37) 13]
Train Case:  23 | Input/Output: [(71 19 13 56) 13]
Train Case:  24 | Input/Output: [(17 4 95 28) 4]
Train Case:  25 | Input/Output: [(79 5 88 85) 5]
Train Case:  26 | Input/Output: [(18 9 71 10) 9]
Train Case:  27 | Input/Output: [(18 63 68 95) 18]
Train Case:  28 | Input/Output: [(6 97 20 28) 6]
Train Case:  29 | Input/Output: [(44 21 42 40) 21]
Train Case:  30 | Input/Output: [(7 74 91 85) 7]
Train Case:  31 | Input/Output: [(52 61 79 52) 52]
Train Case:  32 | Input/Output: [(41 71 59 98) 41]
Train Case:  33 | Input/Output: [(4 76 20 90) 4]
Train Case:  34 | Input/Output: [(75 0 80 69) 0]
Train Case:  35 | Input/Output: [(36 51 34 41) 34]
Train Case:  36 | Input/Output: [(74 90 80 85) 74]
Train Case:  37 | Input/Output: [(20 62 62 15) 15]
Train Case:  38 | Input/Output: [(65 44 58 59) 44]
Train Case:  39 | Input/Output: [(43 76 89 0) 0]
Train Case:  40 | Input/Output: [(92 44 -34 -21) -34]
Train Case:  41 | Input/Output: [(-70 78 73 86) -70]
Train Case:  42 | Input/Output: [(-12 -61 91 81) -61]
Train Case:  43 | Input/Output: [(29 36 32 73) 29]
Train Case:  44 | Input/Output: [(-12 70 25 -69) -69]
Train Case:  45 | Input/Output: [(-54 -62 -55 -35) -62]
Train Case:  46 | Input/Output: [(-24 -74 20 -73) -74]
Train Case:  47 | Input/Output: [(-86 -13 -64 59) -86]
Train Case:  48 | Input/Output: [(-87 8 -56 -21) -87]
Train Case:  49 | Input/Output: [(8 -43 -26 13) -43]
Train Case:  50 | Input/Output: [(59 -50 13 -10) -50]
Train Case:  51 | Input/Output: [(66 -53 -46 5) -53]
Train Case:  52 | Input/Output: [(20 44 -47 -40) -47]
Train Case:  53 | Input/Output: [(-83 -79 85 -57) -83]
Train Case:  54 | Input/Output: [(-83 93 1 -53) -83]
Train Case:  55 | Input/Output: [(-39 -40 34 35) -40]
Train Case:  56 | Input/Output: [(-94 -71 -58 -69) -94]
Train Case:  57 | Input/Output: [(47 13 -27 68) -27]
Train Case:  58 | Input/Output: [(23 -92 58 42) -92]
Train Case:  59 | Input/Output: [(-24 90 -39 98) -39]
Train Case:  60 | Input/Output: [(-8 -28 81 93) -28]
Train Case:  61 | Input/Output: [(47 -26 -58 5) -58]
Train Case:  62 | Input/Output: [(58 -68 -19 45) -68]
Train Case:  63 | Input/Output: [(-76 -87 -85 -99) -99]
Train Case:  64 | Input/Output: [(-28 -78 -92 19) -92]
Train Case:  65 | Input/Output: [(78 34 -39 72) -39]
Train Case:  66 | Input/Output: [(11 -66 -12 -84) -84]
Train Case:  67 | Input/Output: [(-30 -28 -22 16) -30]
Train Case:  68 | Input/Output: [(-100 71 -1 -80) -100]
Train Case:  69 | Input/Output: [(-57 -66 22 87) -66]
Train Case:  70 | Input/Output: [(-75 -57 -14 96) -75]
Train Case:  71 | Input/Output: [(-8 -10 7 -28) -28]
Train Case:  72 | Input/Output: [(86 -66 95 44) -66]
Train Case:  73 | Input/Output: [(-12 -8 76 -17) -17]
Train Case:  74 | Input/Output: [(-92 67 -78 -72) -92]
Train Case:  75 | Input/Output: [(-42 44 87 -30) -42]
Train Case:  76 | Input/Output: [(24 69 35 -16) -16]
Train Case:  77 | Input/Output: [(10 -45 46 41) -45]
Train Case:  78 | Input/Output: [(-36 -43 -6 -45) -45]
Train Case:  79 | Input/Output: [(47 8 -14 -55) -55]
Train Case:  80 | Input/Output: [(-70 3 -92 79) -92]
Train Case:  81 | Input/Output: [(35 -36 -12 -21) -36]
Train Case:  82 | Input/Output: [(0 77 48 -50) -50]
Train Case:  83 | Input/Output: [(-32 85 10 78) -32]
Train Case:  84 | Input/Output: [(68 -77 27 -33) -77]
Train Case:  85 | Input/Output: [(19 -94 97 38) -94]
Train Case:  86 | Input/Output: [(-41 82 -16 45) -41]
Train Case:  87 | Input/Output: [(-32 -90 9 -78) -90]
Train Case:  88 | Input/Output: [(-95 -85 72 36) -95]
Train Case:  89 | Input/Output: [(-55 -54 -89 90) -89]
Train Case:  90 | Input/Output: [(41 -88 7 -93) -93]
Train Case:  91 | Input/Output: [(40 35 -55 18) -55]
Train Case:  92 | Input/Output: [(-10 -86 -69 97) -86]
Train Case:  93 | Input/Output: [(-70 90 -30 78) -70]
Train Case:  94 | Input/Output: [(-41 81 18 89) -41]
Train Case:  95 | Input/Output: [(31 -7 11 -69) -69]
Train Case:  96 | Input/Output: [(-23 -42 -24 -12) -42]
Train Case:  97 | Input/Output: [(-46 49 -45 -25) -46]
Train Case:  98 | Input/Output: [(86 58 76 -76) -76]
Train Case:  99 | Input/Output: [(32 -30 78 -41) -41]
Test Case:   0 | Input/Output: [[96 32 32 32] 32]
Test Case:   1 | Input/Output: [[41 41 -48 41] -48]
Test Case:   2 | Input/Output: [[-6 -93 -6 -6] -93]
Test Case:   3 | Input/Output: [[5 66 66 66] 5]
Test Case:   4 | Input/Output: [[95 37 95 95] 37]
Test Case:   5 | Input/Output: [[39 46 39 39] 39]
Test Case:   6 | Input/Output: [[-100 -100 -36 -100] -100]
Test Case:   7 | Input/Output: [[-1 -1 -1 -39] -39]
Test Case:   8 | Input/Output: [[-58 -58 -37 -58] -58]
Test Case:   9 | Input/Output: [[72 72 14 72] 14]
Test Case:  10 | Input/Output: [[-11 29 29 29] -11]
Test Case:  11 | Input/Output: [[-78 -78 -78 63] -78]
Test Case:  12 | Input/Output: [[-96 -77 -77 -77] -96]
Test Case:  13 | Input/Output: [[82 82 82 -66] -66]
Test Case:  14 | Input/Output: [[-42 -57 -42 -42] -57]
Test Case:  15 | Input/Output: [[-16 -16 40 -16] -16]
Test Case:  16 | Input/Output: [[-50 -50 -50 13] -50]
Test Case:  17 | Input/Output: [[90 90 90 -4] -4]
Test Case:  18 | Input/Output: [[30 -96 30 30] -96]
Test Case:  19 | Input/Output: [[62 62 62 87] 62]
Test Case:  20 | Input/Output: [[-43 -43 73 -43] -43]
Test Case:  21 | Input/Output: [[-98 -98 74 -98] -98]
Test Case:  22 | Input/Output: [[-17 -42 -17 -17] -42]
Test Case:  23 | Input/Output: [[-48 38 38 38] -48]
Test Case:  24 | Input/Output: [[-67 -67 -97 -67] -97]
Test Case:  25 | Input/Output: [[75 42 75 75] 42]
Test Case:  26 | Input/Output: [[-47 22 -47 -47] -47]
Test Case:  27 | Input/Output: [[-39 -91 -91 -91] -91]
Test Case:  28 | Input/Output: [[-83 -83 -83 36] -83]
Test Case:  29 | Input/Output: [[-34 -34 -34 -38] -38]
Test Case:  30 | Input/Output: [[35 35 81 35] 35]
Test Case:  31 | Input/Output: [[-97 -97 -59 -97] -97]
Test Case:  32 | Input/Output: [[71 71 -17 71] -17]
Test Case:  33 | Input/Output: [[16 16 -92 16] -92]
Test Case:  34 | Input/Output: [[-67 -93 -67 -67] -93]
Test Case:  35 | Input/Output: [[-25 -25 -84 -25] -84]
Test Case:  36 | Input/Output: [[-32 -32 -32 -10] -32]
Test Case:  37 | Input/Output: [[33 -10 -10 -10] -10]
Test Case:  38 | Input/Output: [[50 42 50 50] 42]
Test Case:  39 | Input/Output: [[-52 -52 84 -52] -52]
Test Case:  40 | Input/Output: [[87 24 87 87] 24]
Test Case:  41 | Input/Output: [[-12 -84 -84 -84] -84]
Test Case:  42 | Input/Output: [[-25 41 -25 -25] -25]
Test Case:  43 | Input/Output: [[-19 12 12 12] -19]
Test Case:  44 | Input/Output: [[29 29 29 55] 29]
Test Case:  45 | Input/Output: [[79 79 38 79] 38]
Test Case:  46 | Input/Output: [[24 24 -42 24] -42]
Test Case:  47 | Input/Output: [[19 29 29 29] 19]
Test Case:  48 | Input/Output: [[27 27 -33 27] -33]
Test Case:  49 | Input/Output: [[-11 -11 -27 -11] -27]
Test Case:  50 | Input/Output: [[-8 -8 -53 -8] -53]
Test Case:  51 | Input/Output: [[-50 -65 -50 -50] -65]
Test Case:  52 | Input/Output: [[-6 37 -6 -6] -6]
Test Case:  53 | Input/Output: [[22 22 10 22] 10]
Test Case:  54 | Input/Output: [[-77 -50 -50 -50] -77]
Test Case:  55 | Input/Output: [[-70 -65 -65 -65] -70]
Test Case:  56 | Input/Output: [[62 44 62 62] 44]
Test Case:  57 | Input/Output: [[94 -53 94 94] -53]
Test Case:  58 | Input/Output: [[-21 32 -21 -21] -21]
Test Case:  59 | Input/Output: [[81 81 81 -49] -49]
Test Case:  60 | Input/Output: [[-65 -65 -65 89] -65]
Test Case:  61 | Input/Output: [[-45 -79 -79 -79] -79]
Test Case:  62 | Input/Output: [[66 66 66 -10] -10]
Test Case:  63 | Input/Output: [[26 -23 26 26] -23]
Test Case:  64 | Input/Output: [[16 16 16 11] 11]
Test Case:  65 | Input/Output: [[-6 -6 -6 62] -6]
Test Case:  66 | Input/Output: [[-75 -75 68 -75] -75]
Test Case:  67 | Input/Output: [[30 -31 30 30] -31]
Test Case:  68 | Input/Output: [[-68 -28 -68 -68] -68]
Test Case:  69 | Input/Output: [[-91 66 -91 -91] -91]
Test Case:  70 | Input/Output: [[67 -12 -12 -12] -12]
Test Case:  71 | Input/Output: [[-19 -19 -19 39] -19]
Test Case:  72 | Input/Output: [[-47 -10 -47 -47] -47]
Test Case:  73 | Input/Output: [[-49 -48 -48 -48] -49]
Test Case:  74 | Input/Output: [[41 41 41 53] 41]
Test Case:  75 | Input/Output: [[-2 -2 -2 32] -2]
Test Case:  76 | Input/Output: [[-35 63 -35 -35] -35]
Test Case:  77 | Input/Output: [[28 28 28 -39] -39]
Test Case:  78 | Input/Output: [[71 71 0 71] 0]
Test Case:  79 | Input/Output: [[3 3 44 3] 3]
Test Case:  80 | Input/Output: [[-54 -82 -82 -82] -82]
Test Case:  81 | Input/Output: [[-1 -18 -18 -18] -18]
Test Case:  82 | Input/Output: [[-41 -41 29 -41] -41]
Test Case:  83 | Input/Output: [[-98 39 39 39] -98]
Test Case:  84 | Input/Output: [[-73 -53 -53 -53] -73]
Test Case:  85 | Input/Output: [[71 100 71 71] 71]
Test Case:  86 | Input/Output: [[-75 -20 -20 -20] -75]
Test Case:  87 | Input/Output: [[-18 -59 -18 -18] -59]
Test Case:  88 | Input/Output: [[53 -38 53 53] -38]
Test Case:  89 | Input/Output: [[36 -84 36 36] -84]
Test Case:  90 | Input/Output: [[-4 82 -4 -4] -4]
Test Case:  91 | Input/Output: [[-48 -48 21 -48] -48]
Test Case:  92 | Input/Output: [[-16 -16 -30 -16] -30]
Test Case:  93 | Input/Output: [[-60 -60 -60 74] -60]
Test Case:  94 | Input/Output: [[94 88 94 94] 88]
Test Case:  95 | Input/Output: [[-86 -86 -3 -86] -86]
Test Case:  96 | Input/Output: [[92 92 92 30] 30]
Test Case:  97 | Input/Output: [[53 53 80 53] 53]
Test Case:  98 | Input/Output: [[9 9 22 9] 9]
Test Case:  99 | Input/Output: [[44 21 21 21] 21]
Test Case: 100 | Input/Output: [(100 100 100 100) 100]
Test Case: 101 | Input/Output: [(87 87 87 87) 87]
Test Case: 102 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 103 | Input/Output: [(7 7 7 7) 7]
Test Case: 104 | Input/Output: [(89 89 89 89) 89]
Test Case: 105 | Input/Output: [(28 28 28 28) 28]
Test Case: 106 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 107 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 108 | Input/Output: [(6 6 6 6) 6]
Test Case: 109 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 110 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 111 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 112 | Input/Output: [(28 28 28 28) 28]
Test Case: 113 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 114 | Input/Output: [(27 27 27 27) 27]
Test Case: 115 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 116 | Input/Output: [(70 70 70 70) 70]
Test Case: 117 | Input/Output: [(86 86 86 86) 86]
Test Case: 118 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 119 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 120 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 121 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 122 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 123 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 124 | Input/Output: [(75 75 75 75) 75]
Test Case: 125 | Input/Output: [(12 12 12 12) 12]
Test Case: 126 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 127 | Input/Output: [(86 86 86 86) 86]
Test Case: 128 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 129 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 130 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 131 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 132 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 133 | Input/Output: [(81 81 81 81) 81]
Test Case: 134 | Input/Output: [(56 56 56 56) 56]
Test Case: 135 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 136 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 137 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 138 | Input/Output: [(25 25 25 25) 25]
Test Case: 139 | Input/Output: [(5 5 5 5) 5]
Test Case: 140 | Input/Output: [(31 31 31 31) 31]
Test Case: 141 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 142 | Input/Output: [(81 81 81 81) 81]
Test Case: 143 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 144 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 145 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 146 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 147 | Input/Output: [(58 58 58 58) 58]
Test Case: 148 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 149 | Input/Output: [(79 79 79 79) 79]
Test Case: 150 | Input/Output: [(0 0 0 0) 0]
Test Case: 151 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 152 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 153 | Input/Output: [(88 88 88 88) 88]
Test Case: 154 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 155 | Input/Output: [(52 52 52 52) 52]
Test Case: 156 | Input/Output: [(57 57 57 57) 57]
Test Case: 157 | Input/Output: [(6 6 6 6) 6]
Test Case: 158 | Input/Output: [(50 50 50 50) 50]
Test Case: 159 | Input/Output: [(67 67 67 67) 67]
Test Case: 160 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 161 | Input/Output: [(64 64 64 64) 64]
Test Case: 162 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 163 | Input/Output: [(9 9 9 9) 9]
Test Case: 164 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 165 | Input/Output: [(5 5 5 5) 5]
Test Case: 166 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 167 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 168 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 169 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 170 | Input/Output: [(80 80 80 80) 80]
Test Case: 171 | Input/Output: [(16 16 16 16) 16]
Test Case: 172 | Input/Output: [(5 5 5 5) 5]
Test Case: 173 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 174 | Input/Output: [(37 37 37 37) 37]
Test Case: 175 | Input/Output: [(50 50 50 50) 50]
Test Case: 176 | Input/Output: [(47 47 47 47) 47]
Test Case: 177 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 178 | Input/Output: [(9 9 9 9) 9]
Test Case: 179 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 180 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 181 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 182 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 183 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 184 | Input/Output: [(59 59 59 59) 59]
Test Case: 185 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 186 | Input/Output: [(40 40 40 40) 40]
Test Case: 187 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 188 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 189 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 190 | Input/Output: [(96 96 96 96) 96]
Test Case: 191 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 192 | Input/Output: [(34 34 34 34) 34]
Test Case: 193 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 194 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 195 | Input/Output: [(97 97 97 97) 97]
Test Case: 196 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 197 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 198 | Input/Output: [(58 58 58 58) 58]
Test Case: 199 | Input/Output: [(15 15 15 15) 15]
Test Case: 200 | Input/Output: [(93 52 5 30) 5]
Test Case: 201 | Input/Output: [(26 74 7 36) 7]
Test Case: 202 | Input/Output: [(70 35 14 91) 14]
Test Case: 203 | Input/Output: [(74 94 43 59) 43]
Test Case: 204 | Input/Output: [(98 0 49 95) 0]
Test Case: 205 | Input/Output: [(91 15 23 98) 15]
Test Case: 206 | Input/Output: [(82 66 56 39) 39]
Test Case: 207 | Input/Output: [(42 26 74 56) 26]
Test Case: 208 | Input/Output: [(40 15 44 25) 15]
Test Case: 209 | Input/Output: [(38 55 69 83) 38]
Test Case: 210 | Input/Output: [(88 43 63 93) 43]
Test Case: 211 | Input/Output: [(82 78 67 60) 60]
Test Case: 212 | Input/Output: [(96 44 28 0) 0]
Test Case: 213 | Input/Output: [(76 29 18 75) 18]
Test Case: 214 | Input/Output: [(39 62 22 52) 22]
Test Case: 215 | Input/Output: [(21 85 13 4) 4]
Test Case: 216 | Input/Output: [(77 71 90 34) 34]
Test Case: 217 | Input/Output: [(92 61 70 47) 47]
Test Case: 218 | Input/Output: [(79 73 17 80) 17]
Test Case: 219 | Input/Output: [(88 25 68 33) 25]
Test Case: 220 | Input/Output: [(10 69 69 33) 10]
Test Case: 221 | Input/Output: [(66 71 43 99) 43]
Test Case: 222 | Input/Output: [(30 43 64 22) 22]
Test Case: 223 | Input/Output: [(52 95 15 62) 15]
Test Case: 224 | Input/Output: [(91 55 44 90) 44]
Test Case: 225 | Input/Output: [(12 45 13 58) 12]
Test Case: 226 | Input/Output: [(59 27 67 66) 27]
Test Case: 227 | Input/Output: [(73 41 77 93) 41]
Test Case: 228 | Input/Output: [(5 68 73 75) 5]
Test Case: 229 | Input/Output: [(87 1 68 53) 1]
Test Case: 230 | Input/Output: [(89 36 19 33) 19]
Test Case: 231 | Input/Output: [(14 1 84 72) 1]
Test Case: 232 | Input/Output: [(23 47 14 70) 14]
Test Case: 233 | Input/Output: [(73 96 23 26) 23]
Test Case: 234 | Input/Output: [(95 3 90 13) 3]
Test Case: 235 | Input/Output: [(92 55 0 37) 0]
Test Case: 236 | Input/Output: [(36 8 77 34) 8]
Test Case: 237 | Input/Output: [(25 18 86 86) 18]
Test Case: 238 | Input/Output: [(65 35 47 36) 35]
Test Case: 239 | Input/Output: [(5 4 9 70) 4]
Test Case: 240 | Input/Output: [(74 16 12 70) 12]
Test Case: 241 | Input/Output: [(67 75 3 75) 3]
Test Case: 242 | Input/Output: [(45 47 79 88) 45]
Test Case: 243 | Input/Output: [(23 40 59 2) 2]
Test Case: 244 | Input/Output: [(21 98 19 99) 19]
Test Case: 245 | Input/Output: [(62 58 4 22) 4]
Test Case: 246 | Input/Output: [(39 91 27 7) 7]
Test Case: 247 | Input/Output: [(19 48 11 72) 11]
Test Case: 248 | Input/Output: [(71 23 92 55) 23]
Test Case: 249 | Input/Output: [(72 35 59 20) 20]
Test Case: 250 | Input/Output: [(86 40 50 60) 40]
Test Case: 251 | Input/Output: [(9 99 36 100) 9]
Test Case: 252 | Input/Output: [(70 5 10 60) 5]
Test Case: 253 | Input/Output: [(69 10 25 73) 10]
Test Case: 254 | Input/Output: [(51 31 90 55) 31]
Test Case: 255 | Input/Output: [(100 60 43 12) 12]
Test Case: 256 | Input/Output: [(6 48 16 20) 6]
Test Case: 257 | Input/Output: [(64 86 39 57) 39]
Test Case: 258 | Input/Output: [(24 68 87 42) 24]
Test Case: 259 | Input/Output: [(57 53 0 16) 0]
Test Case: 260 | Input/Output: [(57 31 36 80) 31]
Test Case: 261 | Input/Output: [(30 39 65 26) 26]
Test Case: 262 | Input/Output: [(65 38 82 34) 34]
Test Case: 263 | Input/Output: [(75 27 45 91) 27]
Test Case: 264 | Input/Output: [(49 19 33 51) 19]
Test Case: 265 | Input/Output: [(46 60 42 88) 42]
Test Case: 266 | Input/Output: [(85 75 61 54) 54]
Test Case: 267 | Input/Output: [(63 63 86 11) 11]
Test Case: 268 | Input/Output: [(57 32 74 58) 32]
Test Case: 269 | Input/Output: [(38 50 43 33) 33]
Test Case: 270 | Input/Output: [(12 35 45 58) 12]
Test Case: 271 | Input/Output: [(78 44 54 98) 44]
Test Case: 272 | Input/Output: [(68 61 36 63) 36]
Test Case: 273 | Input/Output: [(74 53 95 4) 4]
Test Case: 274 | Input/Output: [(89 48 26 41) 26]
Test Case: 275 | Input/Output: [(45 53 83 8) 8]
Test Case: 276 | Input/Output: [(22 49 57 45) 22]
Test Case: 277 | Input/Output: [(8 25 56 53) 8]
Test Case: 278 | Input/Output: [(19 52 38 89) 19]
Test Case: 279 | Input/Output: [(22 71 23 63) 22]
Test Case: 280 | Input/Output: [(42 22 94 88) 22]
Test Case: 281 | Input/Output: [(15 52 44 47) 15]
Test Case: 282 | Input/Output: [(30 82 99 88) 30]
Test Case: 283 | Input/Output: [(87 89 40 67) 40]
Test Case: 284 | Input/Output: [(6 47 17 72) 6]
Test Case: 285 | Input/Output: [(12 70 82 52) 12]
Test Case: 286 | Input/Output: [(65 85 63 71) 63]
Test Case: 287 | Input/Output: [(31 7 82 96) 7]
Test Case: 288 | Input/Output: [(65 45 16 100) 16]
Test Case: 289 | Input/Output: [(21 73 55 12) 12]
Test Case: 290 | Input/Output: [(56 9 55 10) 9]
Test Case: 291 | Input/Output: [(45 61 66 53) 45]
Test Case: 292 | Input/Output: [(74 63 96 52) 52]
Test Case: 293 | Input/Output: [(28 3 27 0) 0]
Test Case: 294 | Input/Output: [(13 15 93 66) 13]
Test Case: 295 | Input/Output: [(31 81 8 3) 3]
Test Case: 296 | Input/Output: [(25 48 75 95) 25]
Test Case: 297 | Input/Output: [(22 35 52 79) 22]
Test Case: 298 | Input/Output: [(48 52 66 73) 48]
Test Case: 299 | Input/Output: [(21 98 52 47) 21]
Test Case: 300 | Input/Output: [(3 30 11 40) 3]
Test Case: 301 | Input/Output: [(45 97 96 24) 24]
Test Case: 302 | Input/Output: [(83 93 6 0) 0]
Test Case: 303 | Input/Output: [(29 7 75 90) 7]
Test Case: 304 | Input/Output: [(4 37 2 47) 2]
Test Case: 305 | Input/Output: [(87 7 53 80) 7]
Test Case: 306 | Input/Output: [(13 10 90 5) 5]
Test Case: 307 | Input/Output: [(19 40 12 30) 12]
Test Case: 308 | Input/Output: [(92 90 3 54) 3]
Test Case: 309 | Input/Output: [(59 2 10 2) 2]
Test Case: 310 | Input/Output: [(62 69 72 45) 45]
Test Case: 311 | Input/Output: [(57 15 0 37) 0]
Test Case: 312 | Input/Output: [(82 35 78 8) 8]
Test Case: 313 | Input/Output: [(65 31 96 87) 31]
Test Case: 314 | Input/Output: [(35 3 87 66) 3]
Test Case: 315 | Input/Output: [(92 9 44 22) 9]
Test Case: 316 | Input/Output: [(1 71 54 10) 1]
Test Case: 317 | Input/Output: [(73 16 52 66) 16]
Test Case: 318 | Input/Output: [(8 61 98 74) 8]
Test Case: 319 | Input/Output: [(71 78 2 100) 2]
Test Case: 320 | Input/Output: [(71 43 51 17) 17]
Test Case: 321 | Input/Output: [(35 45 19 92) 19]
Test Case: 322 | Input/Output: [(89 95 38 39) 38]
Test Case: 323 | Input/Output: [(2 56 64 90) 2]
Test Case: 324 | Input/Output: [(32 41 25 48) 25]
Test Case: 325 | Input/Output: [(32 38 73 69) 32]
Test Case: 326 | Input/Output: [(70 47 32 53) 32]
Test Case: 327 | Input/Output: [(72 37 13 35) 13]
Test Case: 328 | Input/Output: [(9 44 78 73) 9]
Test Case: 329 | Input/Output: [(6 74 65 60) 6]
Test Case: 330 | Input/Output: [(4 9 48 61) 4]
Test Case: 331 | Input/Output: [(71 98 3 89) 3]
Test Case: 332 | Input/Output: [(92 89 41 3) 3]
Test Case: 333 | Input/Output: [(44 31 68 45) 31]
Test Case: 334 | Input/Output: [(38 45 21 95) 21]
Test Case: 335 | Input/Output: [(8 14 71 94) 8]
Test Case: 336 | Input/Output: [(51 71 83 26) 26]
Test Case: 337 | Input/Output: [(12 42 22 93) 12]
Test Case: 338 | Input/Output: [(39 49 91 69) 39]
Test Case: 339 | Input/Output: [(66 30 22 82) 22]
Test Case: 340 | Input/Output: [(58 31 38 11) 11]
Test Case: 341 | Input/Output: [(5 55 51 55) 5]
Test Case: 342 | Input/Output: [(71 41 18 62) 18]
Test Case: 343 | Input/Output: [(34 94 44 34) 34]
Test Case: 344 | Input/Output: [(53 86 61 2) 2]
Test Case: 345 | Input/Output: [(36 28 19 16) 16]
Test Case: 346 | Input/Output: [(85 19 39 21) 19]
Test Case: 347 | Input/Output: [(38 40 33 5) 5]
Test Case: 348 | Input/Output: [(52 32 60 15) 15]
Test Case: 349 | Input/Output: [(52 66 68 98) 52]
Test Case: 350 | Input/Output: [(80 78 35 34) 34]
Test Case: 351 | Input/Output: [(89 30 17 30) 17]
Test Case: 352 | Input/Output: [(12 21 26 16) 12]
Test Case: 353 | Input/Output: [(17 29 33 17) 17]
Test Case: 354 | Input/Output: [(16 79 75 23) 16]
Test Case: 355 | Input/Output: [(64 63 40 35) 35]
Test Case: 356 | Input/Output: [(78 3 5 8) 3]
Test Case: 357 | Input/Output: [(16 17 39 36) 16]
Test Case: 358 | Input/Output: [(53 40 85 72) 40]
Test Case: 359 | Input/Output: [(62 50 11 70) 11]
Test Case: 360 | Input/Output: [(71 71 81 27) 27]
Test Case: 361 | Input/Output: [(34 44 52 62) 34]
Test Case: 362 | Input/Output: [(6 34 76 95) 6]
Test Case: 363 | Input/Output: [(25 73 33 75) 25]
Test Case: 364 | Input/Output: [(41 3 37 28) 3]
Test Case: 365 | Input/Output: [(73 29 87 33) 29]
Test Case: 366 | Input/Output: [(4 56 78 46) 4]
Test Case: 367 | Input/Output: [(65 71 72 85) 65]
Test Case: 368 | Input/Output: [(30 47 76 13) 13]
Test Case: 369 | Input/Output: [(60 89 59 76) 59]
Test Case: 370 | Input/Output: [(7 86 89 54) 7]
Test Case: 371 | Input/Output: [(63 3 68 55) 3]
Test Case: 372 | Input/Output: [(79 90 47 11) 11]
Test Case: 373 | Input/Output: [(28 69 12 45) 12]
Test Case: 374 | Input/Output: [(33 18 52 66) 18]
Test Case: 375 | Input/Output: [(48 81 94 24) 24]
Test Case: 376 | Input/Output: [(2 27 18 82) 2]
Test Case: 377 | Input/Output: [(83 6 95 91) 6]
Test Case: 378 | Input/Output: [(66 10 91 69) 10]
Test Case: 379 | Input/Output: [(28 25 87 13) 13]
Test Case: 380 | Input/Output: [(59 75 18 53) 18]
Test Case: 381 | Input/Output: [(50 26 91 59) 26]
Test Case: 382 | Input/Output: [(4 2 65 57) 2]
Test Case: 383 | Input/Output: [(74 49 21 46) 21]
Test Case: 384 | Input/Output: [(42 73 13 57) 13]
Test Case: 385 | Input/Output: [(81 80 33 88) 33]
Test Case: 386 | Input/Output: [(65 20 93 50) 20]
Test Case: 387 | Input/Output: [(48 74 33 57) 33]
Test Case: 388 | Input/Output: [(54 31 42 76) 31]
Test Case: 389 | Input/Output: [(35 28 77 85) 28]
Test Case: 390 | Input/Output: [(64 67 78 68) 64]
Test Case: 391 | Input/Output: [(54 85 95 25) 25]
Test Case: 392 | Input/Output: [(87 34 85 82) 34]
Test Case: 393 | Input/Output: [(25 55 0 30) 0]
Test Case: 394 | Input/Output: [(57 26 33 6) 6]
Test Case: 395 | Input/Output: [(70 6 88 25) 6]
Test Case: 396 | Input/Output: [(58 1 68 12) 1]
Test Case: 397 | Input/Output: [(16 54 67 69) 16]
Test Case: 398 | Input/Output: [(12 30 10 57) 10]
Test Case: 399 | Input/Output: [(39 24 7 43) 7]
Test Case: 400 | Input/Output: [(37 -84 -42 -86) -86]
Test Case: 401 | Input/Output: [(74 -38 83 37) -38]
Test Case: 402 | Input/Output: [(59 -79 -46 -20) -79]
Test Case: 403 | Input/Output: [(-57 33 -22 -9) -57]
Test Case: 404 | Input/Output: [(-99 59 55 68) -99]
Test Case: 405 | Input/Output: [(-74 -66 -75 -5) -75]
Test Case: 406 | Input/Output: [(33 10 16 88) 10]
Test Case: 407 | Input/Output: [(57 -5 -61 56) -61]
Test Case: 408 | Input/Output: [(-67 -47 40 97) -67]
Test Case: 409 | Input/Output: [(76 48 -58 -18) -58]
Test Case: 410 | Input/Output: [(-90 -48 -81 6) -90]
Test Case: 411 | Input/Output: [(40 -36 -70 -72) -72]
Test Case: 412 | Input/Output: [(94 -52 -18 -81) -81]
Test Case: 413 | Input/Output: [(81 90 22 100) 22]
Test Case: 414 | Input/Output: [(-93 -76 -96 5) -96]
Test Case: 415 | Input/Output: [(68 10 -86 -7) -86]
Test Case: 416 | Input/Output: [(78 58 27 -76) -76]
Test Case: 417 | Input/Output: [(88 25 88 -46) -46]
Test Case: 418 | Input/Output: [(7 -21 -37 57) -37]
Test Case: 419 | Input/Output: [(7 64 80 79) 7]
Test Case: 420 | Input/Output: [(18 79 51 17) 17]
Test Case: 421 | Input/Output: [(95 23 -29 84) -29]
Test Case: 422 | Input/Output: [(-62 47 62 -81) -81]
Test Case: 423 | Input/Output: [(23 -9 -97 39) -97]
Test Case: 424 | Input/Output: [(-70 -5 -25 6) -70]
Test Case: 425 | Input/Output: [(98 62 -42 -53) -53]
Test Case: 426 | Input/Output: [(82 91 44 19) 19]
Test Case: 427 | Input/Output: [(67 -65 69 7) -65]
Test Case: 428 | Input/Output: [(-61 -85 32 -81) -85]
Test Case: 429 | Input/Output: [(-27 -67 -62 68) -67]
Test Case: 430 | Input/Output: [(-59 33 -45 -40) -59]
Test Case: 431 | Input/Output: [(-27 98 94 23) -27]
Test Case: 432 | Input/Output: [(0 2 -86 -23) -86]
Test Case: 433 | Input/Output: [(-50 51 -59 43) -59]
Test Case: 434 | Input/Output: [(-89 -100 19 47) -100]
Test Case: 435 | Input/Output: [(-21 -14 29 -27) -27]
Test Case: 436 | Input/Output: [(-64 -62 -100 7) -100]
Test Case: 437 | Input/Output: [(-42 -80 78 93) -80]
Test Case: 438 | Input/Output: [(-93 67 85 49) -93]
Test Case: 439 | Input/Output: [(-14 -70 -67 20) -70]
Test Case: 440 | Input/Output: [(84 -93 14 36) -93]
Test Case: 441 | Input/Output: [(-13 16 11 -2) -13]
Test Case: 442 | Input/Output: [(78 21 92 -28) -28]
Test Case: 443 | Input/Output: [(73 -5 -52 -22) -52]
Test Case: 444 | Input/Output: [(97 55 -26 -82) -82]
Test Case: 445 | Input/Output: [(16 10 -96 -6) -96]
Test Case: 446 | Input/Output: [(84 34 32 -63) -63]
Test Case: 447 | Input/Output: [(11 -60 74 76) -60]
Test Case: 448 | Input/Output: [(76 -29 -6 89) -29]
Test Case: 449 | Input/Output: [(-2 -38 -43 9) -43]
Test Case: 450 | Input/Output: [(-99 15 4 -99) -99]
Test Case: 451 | Input/Output: [(89 -11 -31 -34) -34]
Test Case: 452 | Input/Output: [(-19 34 67 -66) -66]
Test Case: 453 | Input/Output: [(-2 7 -55 23) -55]
Test Case: 454 | Input/Output: [(-63 40 5 78) -63]
Test Case: 455 | Input/Output: [(71 70 -51 85) -51]
Test Case: 456 | Input/Output: [(9 -66 40 59) -66]
Test Case: 457 | Input/Output: [(-90 -46 -92 -44) -92]
Test Case: 458 | Input/Output: [(-65 -32 1 99) -65]
Test Case: 459 | Input/Output: [(34 75 -100 6) -100]
Test Case: 460 | Input/Output: [(72 85 -90 67) -90]
Test Case: 461 | Input/Output: [(-80 -8 -87 -16) -87]
Test Case: 462 | Input/Output: [(-57 -68 58 51) -68]
Test Case: 463 | Input/Output: [(45 -99 -38 -26) -99]
Test Case: 464 | Input/Output: [(-31 -73 40 27) -73]
Test Case: 465 | Input/Output: [(51 8 5 75) 5]
Test Case: 466 | Input/Output: [(26 68 95 -41) -41]
Test Case: 467 | Input/Output: [(90 -36 90 -84) -84]
Test Case: 468 | Input/Output: [(39 -65 -71 2) -71]
Test Case: 469 | Input/Output: [(-95 -13 23 70) -95]
Test Case: 470 | Input/Output: [(7 94 -13 23) -13]
Test Case: 471 | Input/Output: [(-49 -47 32 -32) -49]
Test Case: 472 | Input/Output: [(-91 97 -77 36) -91]
Test Case: 473 | Input/Output: [(13 -26 -8 57) -26]
Test Case: 474 | Input/Output: [(-23 -86 98 -90) -90]
Test Case: 475 | Input/Output: [(17 87 41 18) 17]
Test Case: 476 | Input/Output: [(-26 -37 -90 11) -90]
Test Case: 477 | Input/Output: [(-15 5 -70 -85) -85]
Test Case: 478 | Input/Output: [(-74 65 -100 48) -100]
Test Case: 479 | Input/Output: [(-80 16 15 -2) -80]
Test Case: 480 | Input/Output: [(92 24 56 -3) -3]
Test Case: 481 | Input/Output: [(-31 56 82 -92) -92]
Test Case: 482 | Input/Output: [(-99 56 65 -38) -99]
Test Case: 483 | Input/Output: [(-13 72 86 70) -13]
Test Case: 484 | Input/Output: [(-90 52 -42 9) -90]
Test Case: 485 | Input/Output: [(70 16 -71 -11) -71]
Test Case: 486 | Input/Output: [(-92 82 -69 -74) -92]
Test Case: 487 | Input/Output: [(-22 38 92 85) -22]
Test Case: 488 | Input/Output: [(-64 7 -81 68) -81]
Test Case: 489 | Input/Output: [(42 -64 73 -36) -64]
Test Case: 490 | Input/Output: [(-47 -49 -93 21) -93]
Test Case: 491 | Input/Output: [(-88 73 -91 69) -91]
Test Case: 492 | Input/Output: [(90 57 31 79) 31]
Test Case: 493 | Input/Output: [(-50 -71 -32 48) -71]
Test Case: 494 | Input/Output: [(12 -87 -13 38) -87]
Test Case: 495 | Input/Output: [(-87 17 -32 -37) -87]
Test Case: 496 | Input/Output: [(-79 -12 -5 55) -79]
Test Case: 497 | Input/Output: [(68 -7 -2 72) -7]
Test Case: 498 | Input/Output: [(62 22 -22 -48) -48]
Test Case: 499 | Input/Output: [(-83 -37 -97 -44) -97]
Test Case: 500 | Input/Output: [(5 -18 41 14) -18]
Test Case: 501 | Input/Output: [(51 74 -87 -70) -87]
Test Case: 502 | Input/Output: [(51 40 -34 -10) -34]
Test Case: 503 | Input/Output: [(-22 84 48 -58) -58]
Test Case: 504 | Input/Output: [(-78 31 -25 -26) -78]
Test Case: 505 | Input/Output: [(82 -52 -37 -28) -52]
Test Case: 506 | Input/Output: [(49 -40 -29 64) -40]
Test Case: 507 | Input/Output: [(68 -93 0 58) -93]
Test Case: 508 | Input/Output: [(56 90 4 -50) -50]
Test Case: 509 | Input/Output: [(-100 68 -45 31) -100]
Test Case: 510 | Input/Output: [(-65 -52 -91 -18) -91]
Test Case: 511 | Input/Output: [(48 74 85 -50) -50]
Test Case: 512 | Input/Output: [(-90 -62 -46 56) -90]
Test Case: 513 | Input/Output: [(-79 54 -44 86) -79]
Test Case: 514 | Input/Output: [(-26 59 -61 -100) -100]
Test Case: 515 | Input/Output: [(-92 -79 91 57) -92]
Test Case: 516 | Input/Output: [(-21 4 35 -15) -21]
Test Case: 517 | Input/Output: [(69 47 72 -57) -57]
Test Case: 518 | Input/Output: [(-40 61 -69 94) -69]
Test Case: 519 | Input/Output: [(-49 -22 -52 85) -52]
Test Case: 520 | Input/Output: [(-77 68 50 50) -77]
Test Case: 521 | Input/Output: [(-64 90 96 -55) -64]
Test Case: 522 | Input/Output: [(-75 75 -67 -66) -75]
Test Case: 523 | Input/Output: [(55 82 62 23) 23]
Test Case: 524 | Input/Output: [(-69 87 60 64) -69]
Test Case: 525 | Input/Output: [(22 9 -62 -86) -86]
Test Case: 526 | Input/Output: [(11 -53 -11 -55) -55]
Test Case: 527 | Input/Output: [(-33 -52 25 24) -52]
Test Case: 528 | Input/Output: [(-34 23 86 34) -34]
Test Case: 529 | Input/Output: [(2 27 32 -72) -72]
Test Case: 530 | Input/Output: [(0 -17 51 -40) -40]
Test Case: 531 | Input/Output: [(-45 8 -22 93) -45]
Test Case: 532 | Input/Output: [(71 22 77 -93) -93]
Test Case: 533 | Input/Output: [(-18 85 34 68) -18]
Test Case: 534 | Input/Output: [(19 5 41 -76) -76]
Test Case: 535 | Input/Output: [(88 40 -85 -73) -85]
Test Case: 536 | Input/Output: [(-66 34 -100 41) -100]
Test Case: 537 | Input/Output: [(-1 -62 -9 -83) -83]
Test Case: 538 | Input/Output: [(-16 -40 -70 -33) -70]
Test Case: 539 | Input/Output: [(-90 -18 -84 -73) -90]
Test Case: 540 | Input/Output: [(1 79 -80 32) -80]
Test Case: 541 | Input/Output: [(20 -83 53 -24) -83]
Test Case: 542 | Input/Output: [(10 -13 -25 86) -25]
Test Case: 543 | Input/Output: [(77 -71 20 -29) -71]
Test Case: 544 | Input/Output: [(-21 -89 -91 -63) -91]
Test Case: 545 | Input/Output: [(-85 -49 33 -24) -85]
Test Case: 546 | Input/Output: [(9 -74 -30 89) -74]
Test Case: 547 | Input/Output: [(74 72 35 -71) -71]
Test Case: 548 | Input/Output: [(28 61 -33 -80) -80]
Test Case: 549 | Input/Output: [(87 -6 98 55) -6]
Test Case: 550 | Input/Output: [(-40 75 100 52) -40]
Test Case: 551 | Input/Output: [(-97 24 -54 -36) -97]
Test Case: 552 | Input/Output: [(-37 -98 84 -86) -98]
Test Case: 553 | Input/Output: [(-58 -100 -21 -11) -100]
Test Case: 554 | Input/Output: [(10 44 89 50) 10]
Test Case: 555 | Input/Output: [(-67 -56 -98 100) -98]
Test Case: 556 | Input/Output: [(-76 -28 -18 45) -76]
Test Case: 557 | Input/Output: [(-72 19 5 -88) -88]
Test Case: 558 | Input/Output: [(47 -33 83 99) -33]
Test Case: 559 | Input/Output: [(-91 96 -39 46) -91]
Test Case: 560 | Input/Output: [(-50 -39 0 91) -50]
Test Case: 561 | Input/Output: [(-5 50 99 -63) -63]
Test Case: 562 | Input/Output: [(-28 6 -61 -8) -61]
Test Case: 563 | Input/Output: [(29 59 32 70) 29]
Test Case: 564 | Input/Output: [(-60 -77 -27 79) -77]
Test Case: 565 | Input/Output: [(63 -7 33 -57) -57]
Test Case: 566 | Input/Output: [(8 36 -22 86) -22]
Test Case: 567 | Input/Output: [(91 25 44 43) 25]
Test Case: 568 | Input/Output: [(-54 -86 -28 49) -86]
Test Case: 569 | Input/Output: [(-68 -28 -52 -40) -68]
Test Case: 570 | Input/Output: [(77 5 -5 64) -5]
Test Case: 571 | Input/Output: [(84 -55 -20 24) -55]
Test Case: 572 | Input/Output: [(55 90 8 38) 8]
Test Case: 573 | Input/Output: [(-63 27 26 -84) -84]
Test Case: 574 | Input/Output: [(-65 25 -48 -9) -65]
Test Case: 575 | Input/Output: [(91 69 90 -7) -7]
Test Case: 576 | Input/Output: [(76 -81 -31 62) -81]
Test Case: 577 | Input/Output: [(-68 -27 -81 77) -81]
Test Case: 578 | Input/Output: [(89 -61 55 -82) -82]
Test Case: 579 | Input/Output: [(39 -16 15 21) -16]
Test Case: 580 | Input/Output: [(-100 -8 -59 -45) -100]
Test Case: 581 | Input/Output: [(-84 -90 -65 -15) -90]
Test Case: 582 | Input/Output: [(92 12 -79 -61) -79]
Test Case: 583 | Input/Output: [(-15 -25 -92 67) -92]
Test Case: 584 | Input/Output: [(60 79 -59 29) -59]
Test Case: 585 | Input/Output: [(-43 -3 -87 40) -87]
Test Case: 586 | Input/Output: [(-30 14 -62 40) -62]
Test Case: 587 | Input/Output: [(65 -87 -11 -26) -87]
Test Case: 588 | Input/Output: [(-58 -42 9 -96) -96]
Test Case: 589 | Input/Output: [(14 3 95 24) 3]
Test Case: 590 | Input/Output: [(66 -8 -75 -8) -75]
Test Case: 591 | Input/Output: [(-7 5 -60 -57) -60]
Test Case: 592 | Input/Output: [(-20 -73 -91 15) -91]
Test Case: 593 | Input/Output: [(-87 -100 -45 -61) -100]
Test Case: 594 | Input/Output: [(-60 -40 49 -5) -60]
Test Case: 595 | Input/Output: [(-43 91 -97 -13) -97]
Test Case: 596 | Input/Output: [(22 -81 35 76) -81]
Test Case: 597 | Input/Output: [(7 92 -17 80) -17]
Test Case: 598 | Input/Output: [(81 -18 -51 -21) -51]
Test Case: 599 | Input/Output: [(-35 -65 -97 16) -97]
Test Case: 600 | Input/Output: [(-71 -1 5 -3) -71]
Test Case: 601 | Input/Output: [(-81 -70 -86 -2) -86]
Test Case: 602 | Input/Output: [(89 36 96 91) 36]
Test Case: 603 | Input/Output: [(-93 63 -98 21) -98]
Test Case: 604 | Input/Output: [(-18 -25 -8 -3) -25]
Test Case: 605 | Input/Output: [(-62 8 89 8) -62]
Test Case: 606 | Input/Output: [(46 -61 58 76) -61]
Test Case: 607 | Input/Output: [(99 -39 48 35) -39]
Test Case: 608 | Input/Output: [(-69 58 -76 31) -76]
Test Case: 609 | Input/Output: [(35 -37 54 8) -37]
Test Case: 610 | Input/Output: [(-85 -38 -5 22) -85]
Test Case: 611 | Input/Output: [(35 37 -80 -74) -80]
Test Case: 612 | Input/Output: [(31 63 -99 6) -99]
Test Case: 613 | Input/Output: [(4 -22 -63 70) -63]
Test Case: 614 | Input/Output: [(62 -9 9 84) -9]
Test Case: 615 | Input/Output: [(-3 -63 17 35) -63]
Test Case: 616 | Input/Output: [(-81 -26 91 9) -81]
Test Case: 617 | Input/Output: [(-18 34 65 -34) -34]
Test Case: 618 | Input/Output: [(57 53 66 79) 53]
Test Case: 619 | Input/Output: [(86 64 -49 -13) -49]
Test Case: 620 | Input/Output: [(38 -61 -97 9) -97]
Test Case: 621 | Input/Output: [(63 77 -51 32) -51]
Test Case: 622 | Input/Output: [(73 -52 41 -82) -82]
Test Case: 623 | Input/Output: [(-37 5 -65 -36) -65]
Test Case: 624 | Input/Output: [(100 -42 27 -94) -94]
Test Case: 625 | Input/Output: [(91 -17 -6 -75) -75]
Test Case: 626 | Input/Output: [(78 -26 21 78) -26]
Test Case: 627 | Input/Output: [(31 28 -57 61) -57]
Test Case: 628 | Input/Output: [(85 80 77 -84) -84]
Test Case: 629 | Input/Output: [(82 1 -1 91) -1]
Test Case: 630 | Input/Output: [(26 -54 -75 47) -75]
Test Case: 631 | Input/Output: [(54 2 -31 -2) -31]
Test Case: 632 | Input/Output: [(34 -50 57 22) -50]
Test Case: 633 | Input/Output: [(83 -8 -67 -8) -67]
Test Case: 634 | Input/Output: [(-55 -97 91 -23) -97]
Test Case: 635 | Input/Output: [(73 -67 69 83) -67]
Test Case: 636 | Input/Output: [(-85 16 74 47) -85]
Test Case: 637 | Input/Output: [(-85 1 -2 91) -85]
Test Case: 638 | Input/Output: [(50 -93 -5 -16) -93]
Test Case: 639 | Input/Output: [(56 87 44 38) 38]
Test Case: 640 | Input/Output: [(-58 -37 -67 -83) -83]
Test Case: 641 | Input/Output: [(-25 -72 -94 20) -94]
Test Case: 642 | Input/Output: [(59 91 -60 25) -60]
Test Case: 643 | Input/Output: [(14 -51 -10 -54) -54]
Test Case: 644 | Input/Output: [(-82 -25 73 -54) -82]
Test Case: 645 | Input/Output: [(-95 73 -19 -15) -95]
Test Case: 646 | Input/Output: [(-38 49 -42 -35) -42]
Test Case: 647 | Input/Output: [(-14 38 10 58) -14]
Test Case: 648 | Input/Output: [(78 -5 -37 -80) -80]
Test Case: 649 | Input/Output: [(21 52 -91 65) -91]
Test Case: 650 | Input/Output: [(35 -43 19 -87) -87]
Test Case: 651 | Input/Output: [(-19 41 -16 -50) -50]
Test Case: 652 | Input/Output: [(-94 -91 59 -32) -94]
Test Case: 653 | Input/Output: [(46 -18 -29 22) -29]
Test Case: 654 | Input/Output: [(30 40 -93 48) -93]
Test Case: 655 | Input/Output: [(15 -55 -12 66) -55]
Test Case: 656 | Input/Output: [(-30 -42 57 -50) -50]
Test Case: 657 | Input/Output: [(7 -75 10 24) -75]
Test Case: 658 | Input/Output: [(-77 35 86 61) -77]
Test Case: 659 | Input/Output: [(-63 -48 17 -24) -63]
Test Case: 660 | Input/Output: [(-33 59 -82 39) -82]
Test Case: 661 | Input/Output: [(55 -54 46 -21) -54]
Test Case: 662 | Input/Output: [(50 -75 -66 93) -75]
Test Case: 663 | Input/Output: [(-53 -95 -87 74) -95]
Test Case: 664 | Input/Output: [(-75 21 -43 23) -75]
Test Case: 665 | Input/Output: [(59 70 -96 66) -96]
Test Case: 666 | Input/Output: [(-27 21 72 -2) -27]
Test Case: 667 | Input/Output: [(7 26 21 -76) -76]
Test Case: 668 | Input/Output: [(-40 -54 6 -15) -54]
Test Case: 669 | Input/Output: [(8 -10 -6 3) -10]
Test Case: 670 | Input/Output: [(-90 -89 34 72) -90]
Test Case: 671 | Input/Output: [(-37 -21 -17 -10) -37]
Test Case: 672 | Input/Output: [(-59 7 18 40) -59]
Test Case: 673 | Input/Output: [(-91 -67 24 -91) -91]
Test Case: 674 | Input/Output: [(91 56 22 -60) -60]
Test Case: 675 | Input/Output: [(98 -58 -71 100) -71]
Test Case: 676 | Input/Output: [(-9 -91 51 9) -91]
Test Case: 677 | Input/Output: [(50 -69 -46 -32) -69]
Test Case: 678 | Input/Output: [(-2 54 75 61) -2]
Test Case: 679 | Input/Output: [(58 47 100 42) 42]
Test Case: 680 | Input/Output: [(-95 -68 85 -62) -95]
Test Case: 681 | Input/Output: [(83 57 71 47) 47]
Test Case: 682 | Input/Output: [(-45 -30 31 35) -45]
Test Case: 683 | Input/Output: [(92 40 74 23) 23]
Test Case: 684 | Input/Output: [(-12 38 -85 -52) -85]
Test Case: 685 | Input/Output: [(-86 -16 30 -92) -92]
Test Case: 686 | Input/Output: [(36 -26 28 95) -26]
Test Case: 687 | Input/Output: [(-64 22 21 11) -64]
Test Case: 688 | Input/Output: [(86 -12 -87 68) -87]
Test Case: 689 | Input/Output: [(76 41 -57 46) -57]
Test Case: 690 | Input/Output: [(61 -57 74 -62) -62]
Test Case: 691 | Input/Output: [(50 -36 37 77) -36]
Test Case: 692 | Input/Output: [(-36 25 -46 85) -46]
Test Case: 693 | Input/Output: [(-99 -84 54 -68) -99]
Test Case: 694 | Input/Output: [(-65 7 -12 -33) -65]
Test Case: 695 | Input/Output: [(-95 97 -31 21) -95]
Test Case: 696 | Input/Output: [(-38 56 65 -85) -85]
Test Case: 697 | Input/Output: [(47 65 42 -20) -20]
Test Case: 698 | Input/Output: [(-48 94 38 -92) -92]
Test Case: 699 | Input/Output: [(-30 17 -17 96) -30]
Test Case: 700 | Input/Output: [(28 -73 78 -94) -94]
Test Case: 701 | Input/Output: [(39 -35 96 -31) -35]
Test Case: 702 | Input/Output: [(57 -94 97 -48) -94]
Test Case: 703 | Input/Output: [(62 72 -23 -5) -23]
Test Case: 704 | Input/Output: [(42 63 -92 -56) -92]
Test Case: 705 | Input/Output: [(26 -95 27 -48) -95]
Test Case: 706 | Input/Output: [(47 72 20 47) 20]
Test Case: 707 | Input/Output: [(-44 7 22 35) -44]
Test Case: 708 | Input/Output: [(55 44 -28 -11) -28]
Test Case: 709 | Input/Output: [(-18 -38 79 -24) -38]
Test Case: 710 | Input/Output: [(-29 81 -11 47) -29]
Test Case: 711 | Input/Output: [(-97 -93 16 -90) -97]
Test Case: 712 | Input/Output: [(-2 -84 -46 -78) -84]
Test Case: 713 | Input/Output: [(-74 94 -64 -23) -74]
Test Case: 714 | Input/Output: [(-30 -1 60 -68) -68]
Test Case: 715 | Input/Output: [(3 -85 6 83) -85]
Test Case: 716 | Input/Output: [(82 37 -13 -65) -65]
Test Case: 717 | Input/Output: [(-20 -10 75 -22) -22]
Test Case: 718 | Input/Output: [(55 -91 -38 -14) -91]
Test Case: 719 | Input/Output: [(34 22 -18 48) -18]
Test Case: 720 | Input/Output: [(19 -60 52 40) -60]
Test Case: 721 | Input/Output: [(49 -77 5 -31) -77]
Test Case: 722 | Input/Output: [(-75 42 -26 -35) -75]
Test Case: 723 | Input/Output: [(-7 8 46 -1) -7]
Test Case: 724 | Input/Output: [(-16 -97 23 83) -97]
Test Case: 725 | Input/Output: [(24 92 29 93) 24]
Test Case: 726 | Input/Output: [(14 5 89 -58) -58]
Test Case: 727 | Input/Output: [(86 -97 92 -33) -97]
Test Case: 728 | Input/Output: [(86 -28 -50 61) -50]
Test Case: 729 | Input/Output: [(95 91 6 67) 6]
Test Case: 730 | Input/Output: [(48 64 65 58) 48]
Test Case: 731 | Input/Output: [(83 30 -47 59) -47]
Test Case: 732 | Input/Output: [(54 -31 36 0) -31]
Test Case: 733 | Input/Output: [(-15 22 99 69) -15]
Test Case: 734 | Input/Output: [(98 70 -74 -83) -83]
Test Case: 735 | Input/Output: [(54 -61 -26 -80) -80]
Test Case: 736 | Input/Output: [(73 18 81 -68) -68]
Test Case: 737 | Input/Output: [(62 -20 54 -10) -20]
Test Case: 738 | Input/Output: [(80 -81 -4 -1) -81]
Test Case: 739 | Input/Output: [(-99 36 84 42) -99]
Test Case: 740 | Input/Output: [(-68 66 -3 -39) -68]
Test Case: 741 | Input/Output: [(-79 24 91 40) -79]
Test Case: 742 | Input/Output: [(95 20 92 -47) -47]
Test Case: 743 | Input/Output: [(-41 19 71 99) -41]
Test Case: 744 | Input/Output: [(-75 -82 -20 -84) -84]
Test Case: 745 | Input/Output: [(-54 -2 -9 -30) -54]
Test Case: 746 | Input/Output: [(-57 81 6 33) -57]
Test Case: 747 | Input/Output: [(68 -23 39 -57) -57]
Test Case: 748 | Input/Output: [(0 88 21 -14) -14]
Test Case: 749 | Input/Output: [(69 -89 79 1) -89]
Test Case: 750 | Input/Output: [(-53 -75 -92 -60) -92]
Test Case: 751 | Input/Output: [(23 71 8 -78) -78]
Test Case: 752 | Input/Output: [(-10 7 -44 -23) -44]
Test Case: 753 | Input/Output: [(65 -49 30 -17) -49]
Test Case: 754 | Input/Output: [(55 -53 56 -25) -53]
Test Case: 755 | Input/Output: [(67 -100 81 -7) -100]
Test Case: 756 | Input/Output: [(60 -96 95 22) -96]
Test Case: 757 | Input/Output: [(-99 -49 -30 -26) -99]
Test Case: 758 | Input/Output: [(37 41 26 53) 26]
Test Case: 759 | Input/Output: [(88 54 56 23) 23]
Test Case: 760 | Input/Output: [(33 -46 -42 18) -46]
Test Case: 761 | Input/Output: [(34 50 -34 -78) -78]
Test Case: 762 | Input/Output: [(33 -85 78 -94) -94]
Test Case: 763 | Input/Output: [(60 -12 -53 26) -53]
Test Case: 764 | Input/Output: [(-40 82 -75 -61) -75]
Test Case: 765 | Input/Output: [(61 -35 -93 -29) -93]
Test Case: 766 | Input/Output: [(-46 -34 49 57) -46]
Test Case: 767 | Input/Output: [(-92 53 16 16) -92]
Test Case: 768 | Input/Output: [(61 -38 70 -40) -40]
Test Case: 769 | Input/Output: [(54 -47 85 -80) -80]
Test Case: 770 | Input/Output: [(-69 99 -76 -8) -76]
Test Case: 771 | Input/Output: [(44 -83 -25 -93) -93]
Test Case: 772 | Input/Output: [(-65 -77 82 39) -77]
Test Case: 773 | Input/Output: [(-66 -6 60 63) -66]
Test Case: 774 | Input/Output: [(8 85 12 -68) -68]
Test Case: 775 | Input/Output: [(57 -35 -44 45) -44]
Test Case: 776 | Input/Output: [(-45 -19 88 52) -45]
Test Case: 777 | Input/Output: [(-69 -95 63 57) -95]
Test Case: 778 | Input/Output: [(23 -71 34 82) -71]
Test Case: 779 | Input/Output: [(-63 24 66 98) -63]
Test Case: 780 | Input/Output: [(22 -2 -53 66) -53]
Test Case: 781 | Input/Output: [(-31 -18 -43 76) -43]
Test Case: 782 | Input/Output: [(-20 78 -30 60) -30]
Test Case: 783 | Input/Output: [(-83 -66 32 54) -83]
Test Case: 784 | Input/Output: [(-98 23 70 -94) -98]
Test Case: 785 | Input/Output: [(50 -9 -88 -5) -88]
Test Case: 786 | Input/Output: [(78 -92 44 74) -92]
Test Case: 787 | Input/Output: [(25 24 94 74) 24]
Test Case: 788 | Input/Output: [(-52 -5 97 83) -52]
Test Case: 789 | Input/Output: [(-82 53 88 -1) -82]
Test Case: 790 | Input/Output: [(-38 -7 16 31) -38]
Test Case: 791 | Input/Output: [(-67 -98 -73 96) -98]
Test Case: 792 | Input/Output: [(-83 -20 25 96) -83]
Test Case: 793 | Input/Output: [(-61 29 21 33) -61]
Test Case: 794 | Input/Output: [(83 30 -58 -50) -58]
Test Case: 795 | Input/Output: [(-73 43 18 -74) -74]
Test Case: 796 | Input/Output: [(69 -27 69 18) -27]
Test Case: 797 | Input/Output: [(71 10 -82 -34) -82]
Test Case: 798 | Input/Output: [(2 -13 55 -24) -24]
Test Case: 799 | Input/Output: [(67 58 -58 7) -58]
Test Case: 800 | Input/Output: [(-66 54 97 95) -66]
Test Case: 801 | Input/Output: [(-98 -52 60 13) -98]
Test Case: 802 | Input/Output: [(76 -46 -57 96) -57]
Test Case: 803 | Input/Output: [(53 -80 100 40) -80]
Test Case: 804 | Input/Output: [(44 78 -58 3) -58]
Test Case: 805 | Input/Output: [(-87 79 3 65) -87]
Test Case: 806 | Input/Output: [(-28 7 -72 91) -72]
Test Case: 807 | Input/Output: [(25 30 73 5) 5]
Test Case: 808 | Input/Output: [(46 43 -29 56) -29]
Test Case: 809 | Input/Output: [(-78 -45 82 -5) -78]
Test Case: 810 | Input/Output: [(-18 65 98 -53) -53]
Test Case: 811 | Input/Output: [(-94 58 37 -57) -94]
Test Case: 812 | Input/Output: [(-51 18 57 31) -51]
Test Case: 813 | Input/Output: [(57 -31 74 -29) -31]
Test Case: 814 | Input/Output: [(-71 -7 -97 40) -97]
Test Case: 815 | Input/Output: [(-30 -18 -8 54) -30]
Test Case: 816 | Input/Output: [(92 42 -76 -7) -76]
Test Case: 817 | Input/Output: [(-6 57 41 -31) -31]
Test Case: 818 | Input/Output: [(-96 -5 -72 -1) -96]
Test Case: 819 | Input/Output: [(-80 22 -32 3) -80]
Test Case: 820 | Input/Output: [(-85 -52 4 62) -85]
Test Case: 821 | Input/Output: [(27 -54 -68 45) -68]
Test Case: 822 | Input/Output: [(51 -95 57 -29) -95]
Test Case: 823 | Input/Output: [(45 -61 -90 -89) -90]
Test Case: 824 | Input/Output: [(13 -38 56 -89) -89]
Test Case: 825 | Input/Output: [(77 74 -47 48) -47]
Test Case: 826 | Input/Output: [(94 -44 79 17) -44]
Test Case: 827 | Input/Output: [(-49 16 66 38) -49]
Test Case: 828 | Input/Output: [(91 -13 75 -57) -57]
Test Case: 829 | Input/Output: [(-51 -59 93 -8) -59]
Test Case: 830 | Input/Output: [(-22 43 48 -83) -83]
Test Case: 831 | Input/Output: [(-4 5 15 81) -4]
Test Case: 832 | Input/Output: [(17 59 -41 59) -41]
Test Case: 833 | Input/Output: [(24 7 -12 -40) -40]
Test Case: 834 | Input/Output: [(71 -42 71 99) -42]
Test Case: 835 | Input/Output: [(-30 13 -33 8) -33]
Test Case: 836 | Input/Output: [(15 82 -65 -29) -65]
Test Case: 837 | Input/Output: [(43 44 -30 -86) -86]
Test Case: 838 | Input/Output: [(-25 -17 -20 -4) -25]
Test Case: 839 | Input/Output: [(-28 24 -28 -53) -53]
Test Case: 840 | Input/Output: [(15 -12 -92 -43) -92]
Test Case: 841 | Input/Output: [(75 42 -19 7) -19]
Test Case: 842 | Input/Output: [(52 -70 -47 29) -70]
Test Case: 843 | Input/Output: [(-59 94 -79 22) -79]
Test Case: 844 | Input/Output: [(-65 -74 59 -67) -74]
Test Case: 845 | Input/Output: [(-47 -93 74 -36) -93]
Test Case: 846 | Input/Output: [(-51 99 -11 34) -51]
Test Case: 847 | Input/Output: [(66 29 65 77) 29]
Test Case: 848 | Input/Output: [(-30 13 97 84) -30]
Test Case: 849 | Input/Output: [(-87 11 -31 13) -87]
Test Case: 850 | Input/Output: [(36 67 75 -99) -99]
Test Case: 851 | Input/Output: [(92 -64 96 57) -64]
Test Case: 852 | Input/Output: [(78 36 58 97) 36]
Test Case: 853 | Input/Output: [(28 -63 -46 33) -63]
Test Case: 854 | Input/Output: [(43 -88 -17 71) -88]
Test Case: 855 | Input/Output: [(77 67 -44 45) -44]
Test Case: 856 | Input/Output: [(75 45 100 70) 45]
Test Case: 857 | Input/Output: [(-70 38 -73 -90) -90]
Test Case: 858 | Input/Output: [(36 71 89 -51) -51]
Test Case: 859 | Input/Output: [(-59 -44 49 8) -59]
Test Case: 860 | Input/Output: [(16 33 23 -2) -2]
Test Case: 861 | Input/Output: [(-70 14 -34 -67) -70]
Test Case: 862 | Input/Output: [(51 65 -17 -80) -80]
Test Case: 863 | Input/Output: [(69 54 38 -100) -100]
Test Case: 864 | Input/Output: [(-81 7 15 -9) -81]
Test Case: 865 | Input/Output: [(-37 97 75 34) -37]
Test Case: 866 | Input/Output: [(4 87 -85 -92) -92]
Test Case: 867 | Input/Output: [(-74 96 2 -68) -74]
Test Case: 868 | Input/Output: [(-16 28 44 80) -16]
Test Case: 869 | Input/Output: [(84 -95 -62 -92) -95]
Test Case: 870 | Input/Output: [(-10 43 -62 -52) -62]
Test Case: 871 | Input/Output: [(67 -49 -33 28) -49]
Test Case: 872 | Input/Output: [(-60 -94 97 -22) -94]
Test Case: 873 | Input/Output: [(3 97 -17 -54) -54]
Test Case: 874 | Input/Output: [(45 -87 -34 78) -87]
Test Case: 875 | Input/Output: [(-55 72 -16 67) -55]
Test Case: 876 | Input/Output: [(-35 -29 73 98) -35]
Test Case: 877 | Input/Output: [(64 -3 -5 -31) -31]
Test Case: 878 | Input/Output: [(24 -74 11 65) -74]
Test Case: 879 | Input/Output: [(-11 29 -31 29) -31]
Test Case: 880 | Input/Output: [(-58 -65 -10 -40) -65]
Test Case: 881 | Input/Output: [(39 9 -39 46) -39]
Test Case: 882 | Input/Output: [(76 14 -49 -19) -49]
Test Case: 883 | Input/Output: [(-60 51 92 -81) -81]
Test Case: 884 | Input/Output: [(-51 -5 -74 58) -74]
Test Case: 885 | Input/Output: [(80 -81 34 -2) -81]
Test Case: 886 | Input/Output: [(60 -75 91 85) -75]
Test Case: 887 | Input/Output: [(-90 -66 22 41) -90]
Test Case: 888 | Input/Output: [(-57 11 69 -78) -78]
Test Case: 889 | Input/Output: [(-21 40 38 -92) -92]
Test Case: 890 | Input/Output: [(-94 -5 23 53) -94]
Test Case: 891 | Input/Output: [(-25 81 22 64) -25]
Test Case: 892 | Input/Output: [(-14 -66 13 61) -66]
Test Case: 893 | Input/Output: [(-71 53 55 12) -71]
Test Case: 894 | Input/Output: [(-18 59 -8 42) -18]
Test Case: 895 | Input/Output: [(-2 -46 -67 86) -67]
Test Case: 896 | Input/Output: [(-23 55 -100 34) -100]
Test Case: 897 | Input/Output: [(-12 44 -19 31) -19]
Test Case: 898 | Input/Output: [(67 -19 -90 -3) -90]
Test Case: 899 | Input/Output: [(-32 -74 68 -92) -92]
Test Case: 900 | Input/Output: [(15 -37 54 6) -37]
Test Case: 901 | Input/Output: [(36 83 38 -80) -80]
Test Case: 902 | Input/Output: [(-69 -99 68 -41) -99]
Test Case: 903 | Input/Output: [(-84 78 47 -93) -93]
Test Case: 904 | Input/Output: [(71 -92 -37 62) -92]
Test Case: 905 | Input/Output: [(61 -81 -21 10) -81]
Test Case: 906 | Input/Output: [(82 61 23 -97) -97]
Test Case: 907 | Input/Output: [(7 8 -29 78) -29]
Test Case: 908 | Input/Output: [(53 89 80 65) 53]
Test Case: 909 | Input/Output: [(44 86 -66 81) -66]
Test Case: 910 | Input/Output: [(32 68 -28 72) -28]
Test Case: 911 | Input/Output: [(73 -18 53 -93) -93]
Test Case: 912 | Input/Output: [(51 50 26 -42) -42]
Test Case: 913 | Input/Output: [(-44 -99 -74 79) -99]
Test Case: 914 | Input/Output: [(-14 1 65 -54) -54]
Test Case: 915 | Input/Output: [(-20 -51 92 2) -51]
Test Case: 916 | Input/Output: [(45 80 34 61) 34]
Test Case: 917 | Input/Output: [(48 46 78 -7) -7]
Test Case: 918 | Input/Output: [(-70 2 -60 14) -70]
Test Case: 919 | Input/Output: [(-60 15 21 -80) -80]
Test Case: 920 | Input/Output: [(51 90 -78 -44) -78]
Test Case: 921 | Input/Output: [(72 -87 4 79) -87]
Test Case: 922 | Input/Output: [(67 -61 -65 94) -65]
Test Case: 923 | Input/Output: [(-73 -84 -86 36) -86]
Test Case: 924 | Input/Output: [(-45 42 -88 -39) -88]
Test Case: 925 | Input/Output: [(8 -19 55 63) -19]
Test Case: 926 | Input/Output: [(-69 -27 96 -23) -69]
Test Case: 927 | Input/Output: [(98 48 -81 35) -81]
Test Case: 928 | Input/Output: [(-86 12 -84 69) -86]
Test Case: 929 | Input/Output: [(-44 -10 5 -27) -44]
Test Case: 930 | Input/Output: [(37 -63 -89 -58) -89]
Test Case: 931 | Input/Output: [(16 -30 -45 -3) -45]
Test Case: 932 | Input/Output: [(-55 58 96 32) -55]
Test Case: 933 | Input/Output: [(-56 63 -79 -78) -79]
Test Case: 934 | Input/Output: [(73 -52 69 -38) -52]
Test Case: 935 | Input/Output: [(-37 -50 2 -69) -69]
Test Case: 936 | Input/Output: [(5 -65 -92 27) -92]
Test Case: 937 | Input/Output: [(79 7 97 50) 7]
Test Case: 938 | Input/Output: [(-48 46 -75 -63) -75]
Test Case: 939 | Input/Output: [(89 -58 -51 -77) -77]
Test Case: 940 | Input/Output: [(-8 -26 -95 19) -95]
Test Case: 941 | Input/Output: [(-16 -54 -63 32) -63]
Test Case: 942 | Input/Output: [(16 -66 -82 -96) -96]
Test Case: 943 | Input/Output: [(46 -6 -83 72) -83]
Test Case: 944 | Input/Output: [(-66 91 -5 -77) -77]
Test Case: 945 | Input/Output: [(55 -70 -30 -59) -70]
Test Case: 946 | Input/Output: [(-74 77 75 -80) -80]
Test Case: 947 | Input/Output: [(-53 -28 30 94) -53]
Test Case: 948 | Input/Output: [(77 33 -39 -37) -39]
Test Case: 949 | Input/Output: [(-57 35 64 -4) -57]
Test Case: 950 | Input/Output: [(-71 -17 -39 -42) -71]
Test Case: 951 | Input/Output: [(30 -70 -14 48) -70]
Test Case: 952 | Input/Output: [(31 45 68 -41) -41]
Test Case: 953 | Input/Output: [(-34 -90 -61 -51) -90]
Test Case: 954 | Input/Output: [(32 -58 66 1) -58]
Test Case: 955 | Input/Output: [(-40 -43 61 50) -43]
Test Case: 956 | Input/Output: [(88 -39 23 25) -39]
Test Case: 957 | Input/Output: [(-69 -44 67 -36) -69]
Test Case: 958 | Input/Output: [(-31 18 1 -23) -31]
Test Case: 959 | Input/Output: [(64 -78 -72 8) -78]
Test Case: 960 | Input/Output: [(-94 -10 -64 -87) -94]
Test Case: 961 | Input/Output: [(81 47 -80 94) -80]
Test Case: 962 | Input/Output: [(99 -93 -12 68) -93]
Test Case: 963 | Input/Output: [(49 71 98 1) 1]
Test Case: 964 | Input/Output: [(35 -43 46 -90) -90]
Test Case: 965 | Input/Output: [(66 74 -62 -79) -79]
Test Case: 966 | Input/Output: [(-36 92 11 35) -36]
Test Case: 967 | Input/Output: [(84 -22 11 62) -22]
Test Case: 968 | Input/Output: [(-54 -14 -38 -77) -77]
Test Case: 969 | Input/Output: [(-69 -87 11 -35) -87]
Test Case: 970 | Input/Output: [(66 65 -91 69) -91]
Test Case: 971 | Input/Output: [(75 68 49 -72) -72]
Test Case: 972 | Input/Output: [(-9 62 -47 -59) -59]
Test Case: 973 | Input/Output: [(-47 48 -15 5) -47]
Test Case: 974 | Input/Output: [(36 -19 28 -29) -29]
Test Case: 975 | Input/Output: [(-51 -82 -62 96) -82]
Test Case: 976 | Input/Output: [(-92 -60 28 69) -92]
Test Case: 977 | Input/Output: [(-60 88 91 -64) -64]
Test Case: 978 | Input/Output: [(-92 71 -50 -61) -92]
Test Case: 979 | Input/Output: [(-38 35 29 -17) -38]
Test Case: 980 | Input/Output: [(-48 -42 -55 -54) -55]
Test Case: 981 | Input/Output: [(25 58 39 -71) -71]
Test Case: 982 | Input/Output: [(-67 -71 58 9) -71]
Test Case: 983 | Input/Output: [(51 -23 89 62) -23]
Test Case: 984 | Input/Output: [(-65 -19 43 -21) -65]
Test Case: 985 | Input/Output: [(95 82 15 62) 15]
Test Case: 986 | Input/Output: [(54 83 43 -92) -92]
Test Case: 987 | Input/Output: [(-56 27 32 -73) -73]
Test Case: 988 | Input/Output: [(37 -58 25 60) -58]
Test Case: 989 | Input/Output: [(52 24 -20 -22) -22]
Test Case: 990 | Input/Output: [(26 7 95 -5) -5]
Test Case: 991 | Input/Output: [(-72 73 -72 -27) -72]
Test Case: 992 | Input/Output: [(32 -8 62 11) -8]
Test Case: 993 | Input/Output: [(-30 49 16 -29) -30]
Test Case: 994 | Input/Output: [(88 28 68 76) 28]
Test Case: 995 | Input/Output: [(17 -97 91 33) -97]
Test Case: 996 | Input/Output: [(-8 2 -76 35) -76]
Test Case: 997 | Input/Output: [(-34 -76 -91 -79) -91]
Test Case: 998 | Input/Output: [(37 -84 -100 -6) -100]
Test Case: 999 | Input/Output: [(-52 -41 -11 38) -52]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -103 -90 94 -98 -20 -10 -108 -96 -119 -113 92 66 115 127 16 -78
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[43 25 43 43] 25] [[-10 -10 -10 -10] -10] [[-72 -68 -72 -72] -72] [[-69 -69 -69 -13] -69] [[60 71 71 71] 60] [[1 1 44 1] 1] [[99 99 12 99] 12] [[55 55 55 27] 27] [[-49 69 69 69] -49] [[-27 -10 -10 -10] -27] [(32 32 32 32) 32] [(-15 -15 -15 -15) -15] [(66 66 66 66) 66] [(85 85 85 85) 85] [(51 51 51 51) 51] [(68 77 66 91) 66] [(97 36 15 44) 15] [(91 13 60 37) 13] [(71 19 13 56) 13] [(17 4 95 28) 4] [(79 5 88 85) 5] [(18 9 71 10) 9] [(18 63 68 95) 18] [(6 97 20 28) 6] [(44 21 42 40) 21] [(7 74 91 85) 7] [(52 61 79 52) 52] [(41 71 59 98) 41] [(4 76 20 90) 4] [(75 0 80 69) 0] [(36 51 34 41) 34] [(74 90 80 85) 74] [(20 62 62 15) 15] [(65 44 58 59) 44] [(43 76 89 0) 0] [(92 44 -34 -21) -34] [(-70 78 73 86) -70] [(-12 -61 91 81) -61] [(29 36 32 73) 29] [(-12 70 25 -69) -69] [(-54 -62 -55 -35) -62] [(-24 -74 20 -73) -74] [(-86 -13 -64 59) -86] [(-87 8 -56 -21) -87] [(8 -43 -26 13) -43] [(59 -50 13 -10) -50] [(66 -53 -46 5) -53] [(20 44 -47 -40) -47] [(-83 -79 85 -57) -83] [(-83 93 1 -53) -83] [(-39 -40 34 35) -40] [(-94 -71 -58 -69) -94] [(47 13 -27 68) -27] [(23 -92 58 42) -92] [(-24 90 -39 98) -39] [(-8 -28 81 93) -28] [(47 -26 -58 5) -58] [(58 -68 -19 45) -68] [(-76 -87 -85 -99) -99] [(-28 -78 -92 19) -92] [(78 34 -39 72) -39] [(11 -66 -12 -84) -84] [(-30 -28 -22 16) -30] [(-100 71 -1 -80) -100] [(-57 -66 22 87) -66] [(-75 -57 -14 96) -75] [(-8 -10 7 -28) -28] [(86 -66 95 44) -66] [(-12 -8 76 -17) -17] [(-92 67 -78 -72) -92] [(-42 44 87 -30) -42] [(24 69 35 -16) -16] [(10 -45 46 41) -45] [(-36 -43 -6 -45) -45] [(47 8 -14 -55) -55] [(-70 3 -92 79) -92] [(35 -36 -12 -21) -36] [(0 77 48 -50) -50] [(-32 85 10 78) -32] [(68 -77 27 -33) -77] [(19 -94 97 38) -94] [(-41 82 -16 45) -41] [(-32 -90 9 -78) -90] [(-95 -85 72 36) -95] [(-55 -54 -89 90) -89] [(41 -88 7 -93) -93] [(40 35 -55 18) -55] [(-10 -86 -69 97) -86] [(-70 90 -30 78) -70] [(-41 81 18 89) -41] [(31 -7 11 -69) -69] [(-23 -42 -24 -12) -42] [(-46 49 -45 -25) -46] [(86 58 76 -76) -76] [(32 -30 78 -41) -41])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 757
Test mean error for best: 0.75700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 25                  | Program output:                    
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output:                    
Correct output: 1                   | Program output:                    
Correct output: 12                  | Program output:                    
Correct output: 27                  | Program output:                    
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output:                    
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output:                    
Correct output: 85                  | Program output:                    
Correct output: 51                  | Program output:                    
Correct output: 66                  | Program output:                    
Correct output: 15                  | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: 5                   | Program output:                    
Correct output: 9                   | Program output:                    
Correct output: 18                  | Program output:                    
Correct output: 6                   | Program output:                    
Correct output: 21                  | Program output:                    
Correct output: 7                   | Program output:                    
Correct output: 52                  | Program output:                    
Correct output: 41                  | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: 0                   | Program output:                    
Correct output: 34                  | Program output:                    
Correct output: 74                  | Program output:                    
Correct output: 15                  | Program output:                    
Correct output: 44                  | Program output:                    
Correct output: 0                   | Program output:                    
Correct output: -34                 | Program output:                    
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -12                
Correct output: 29                  | Program output:                    
Correct output: -69                 | Program output: -12                
Correct output: -62                 | Program output: -54                
Correct output: -74                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output:                    
Correct output: -50                 | Program output:                    
Correct output: -53                 | Program output:                    
Correct output: -47                 | Program output:                    
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output:                    
Correct output: -92                 | Program output:                    
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -8                 
Correct output: -58                 | Program output:                    
Correct output: -68                 | Program output:                    
Correct output: -99                 | Program output: -76                
Correct output: -92                 | Program output: -28                
Correct output: -39                 | Program output:                    
Correct output: -84                 | Program output:                    
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -8                 
Correct output: -66                 | Program output:                    
Correct output: -17                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output:                    
Correct output: -45                 | Program output:                    
Correct output: -45                 | Program output: -36                
Correct output: -55                 | Program output:                    
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output:                    
Correct output: -50                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output:                    
Correct output: -94                 | Program output:                    
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output:                    
Correct output: -55                 | Program output:                    
Correct output: -86                 | Program output: -10                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output:                    
Correct output: -42                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output:                    
Correct output: -41                 | Program output:                    
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction 18} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_290} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_404} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction -84} {:close 0, :instruction -20} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq})
Lexicase best program: (integer_add integer_max boolean_yankdup integer_inc exec_noop exec_noop integer_add exec_noop boolean_or in1 integer_gte integer_rot boolean_invert_first_then_and exec_y (exec_y (boolean_yankdup boolean_pop print_integer boolean_stackdepth integer_stackdepth boolean_or integer_add exec_yank 18 boolean_not boolean_not boolean_flush exec_k_when_autoconstructing (integer_yankdup integer_rot exec_eq) (exec_k_when_autoconstructing (boolean_frominteger print_newline integer_add integer_gt boolean_frominteger exec_do*range () boolean_invert_second_then_and) (boolean_flush exec_y_when_autoconstructing (integer_yank integer_dec integer_eq integer_min integer_dup exec_y (exec_flush integer_mod integer_swap exec_pop () integer_lt integer_swap tag_exec_290 (exec_dup_items exec_dup_times () exec_swap (boolean_not tagged_404) (integer_div) integer_lte integer_inc -84 -20 exec_rot (boolean_yank in1 exec_yank exec_k (integer_yank exec_do*while () integer_min exec_k () (integer_dup_items) exec_rot (boolean_invert_first_then_and boolean_flush boolean_dup) (boolean_dup_items integer_gt integer_lt exec_pop (integer_gt exec_eq)) ()) ()) () ()))))))))
Lexicase best errors: [1 1 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 111
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction 18} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_290} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_404} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction -84} {:close 0, :instruction -20} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq})
Zero cases best program: (integer_add integer_max boolean_yankdup integer_inc exec_noop exec_noop integer_add exec_noop boolean_or in1 integer_gte integer_rot boolean_invert_first_then_and exec_y (exec_y (boolean_yankdup boolean_pop print_integer boolean_stackdepth integer_stackdepth boolean_or integer_add exec_yank 18 boolean_not boolean_not boolean_flush exec_k_when_autoconstructing (integer_yankdup integer_rot exec_eq) (exec_k_when_autoconstructing (boolean_frominteger print_newline integer_add integer_gt boolean_frominteger exec_do*range () boolean_invert_second_then_and) (boolean_flush exec_y_when_autoconstructing (integer_yank integer_dec integer_eq integer_min integer_dup exec_y (exec_flush integer_mod integer_swap exec_pop () integer_lt integer_swap tag_exec_290 (exec_dup_items exec_dup_times () exec_swap (boolean_not tagged_404) (integer_div) integer_lte integer_inc -84 -20 exec_rot (boolean_yank in1 exec_yank exec_k (integer_yank exec_do*while () integer_min exec_k () (integer_dup_items) exec_rot (boolean_invert_first_then_and boolean_flush boolean_dup) (boolean_dup_items integer_gt integer_lt exec_pop (integer_gt exec_eq)) ()) ()) () ()))))))))
Zero cases best errors: [1 1 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 111
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 2 2 2 11 3 4 3 3 11)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 2 2 2 11 3 4 3 3 11)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_664} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 1, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction tagged_320} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_shove exec_do*while (boolean_rot integer_yankdup integer_add boolean_dup_times tagged_664 integer_sub exec_dup_times (integer_lte integer_min integer_mult exec_yank) boolean_and boolean_frominteger integer_rot) integer_dup boolean_yank boolean_dup_times exec_empty integer_lte integer_gt integer_add integer_yank exec_when () integer_max exec_when (integer_yank) exec_do*times (boolean_frominteger) integer_lte exec_s_when_autoconstructing () (exec_do*while (print_boolean exec_swap () (in1) integer_lte) exec_when (exec_do*times (boolean_shove print_integer integer_lt) boolean_xor integer_pop integer_lt boolean_yank) integer_dup exec_while (boolean_shove exec_dup_times (integer_lte print_exec () in1 exec_s_when_autoconstructing (in1 tagged_320) (integer_rot integer_swap) (exec_s () (boolean_invert_first_then_and) ())))) ())
Errors: [1 1 1 1 0 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 60
Size: 83
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.997 0.998 0.998 0.998 0.989 0.997 0.996 0.997 0.997 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.73
Average program size in population (points): 71.02
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 462072
--- Timings ---
Current time: 1559583599828 milliseconds
Total Time:           2.3 seconds
Initialization:       0.1 seconds,  4.4%
Reproduction:         0.8 seconds, 35.9%
Fitness Testing:      1.4 seconds, 59.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 71                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: 69                 
Correct output: -27                 | Program output: -10                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 77                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 63                 
Correct output: 6                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 74                 
Correct output: 52                  | Program output: 61                 
Correct output: 41                  | Program output: 71                 
Correct output: 4                   | Program output: 76                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 51                 
Correct output: 74                  | Program output: 90                 
Correct output: 15                  | Program output: 62                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 76                 
Correct output: -34                 | Program output: 44                 
Correct output: -70                 | Program output: 78                 
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 36                 
Correct output: -69                 | Program output: 70                 
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -13                
Correct output: -87                 | Program output: 8                  
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 44                 
Correct output: -83                 | Program output: -79                
Correct output: -83                 | Program output: 93                 
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -71                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: 90                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -66                
Correct output: -30                 | Program output: -28                
Correct output: -100                | Program output: 71                 
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -57                
Correct output: -28                 | Program output: -10                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -8                 
Correct output: -92                 | Program output: 67                 
Correct output: -42                 | Program output: 44                 
Correct output: -16                 | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -43                
Correct output: -55                 | Program output: 8                  
Correct output: -92                 | Program output: 3                  
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: 77                 
Correct output: -32                 | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -85                
Correct output: -89                 | Program output: -54                
Correct output: -93                 | Program output: -88                
Correct output: -55                 | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 90                 
Correct output: -41                 | Program output: 81                 
Correct output: -69                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: 49                 
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_109} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_693} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -61} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction -14} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_136} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 1, :instruction -26} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction 31})
Lexicase best program: (boolean_eq exec_do*range (integer_lte tag_integer_109 integer_lt exec_if (integer_dup_items integer_eq tagged_693) (integer_sub exec_do*range (exec_stackdepth in2 boolean_dup_items boolean_frominteger integer_swap boolean_empty integer_fromboolean exec_yank boolean_dup integer_dup_times) exec_dup_items boolean_frominteger boolean_swap exec_s (integer_dup_items -61 exec_y_when_autoconstructing (in2 -14) exec_when (exec_empty exec_do*while () boolean_yankdup print_integer exec_y () integer_empty exec_swap (tag_boolean_136 exec_rot () (integer_min boolean_dup_times exec_dup_times (exec_yank exec_y (print_newline in4) exec_rot (exec_when (exec_do*count () integer_sub exec_yankdup integer_shove print_boolean)) (integer_dec print_exec (exec_do*while (print_boolean) in4 integer_lte integer_dup exec_swap (boolean_or integer_dup integer_gte in1 integer_mult integer_dup_times) (-26) boolean_eq) exec_y_when_autoconstructing (boolean_dup in4 integer_min exec_eq integer_dup_times exec_swap (print_exec (boolean_stackdepth integer_dec exec_k () (in3 integer_dup_items boolean_eq boolean_and exec_noop exec_while (integer_lt boolean_dup_items) boolean_shove exec_empty 31))) ())) ())) ()) ())) () ())))
Lexicase best errors: [0 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 127
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_109} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_693} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -61} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction -14} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_136} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 1, :instruction -26} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction 31})
Zero cases best program: (boolean_eq exec_do*range (integer_lte tag_integer_109 integer_lt exec_if (integer_dup_items integer_eq tagged_693) (integer_sub exec_do*range (exec_stackdepth in2 boolean_dup_items boolean_frominteger integer_swap boolean_empty integer_fromboolean exec_yank boolean_dup integer_dup_times) exec_dup_items boolean_frominteger boolean_swap exec_s (integer_dup_items -61 exec_y_when_autoconstructing (in2 -14) exec_when (exec_empty exec_do*while () boolean_yankdup print_integer exec_y () integer_empty exec_swap (tag_boolean_136 exec_rot () (integer_min boolean_dup_times exec_dup_times (exec_yank exec_y (print_newline in4) exec_rot (exec_when (exec_do*count () integer_sub exec_yankdup integer_shove print_boolean)) (integer_dec print_exec (exec_do*while (print_boolean) in4 integer_lte integer_dup exec_swap (boolean_or integer_dup integer_gte in1 integer_mult integer_dup_times) (-26) boolean_eq) exec_y_when_autoconstructing (boolean_dup in4 integer_min exec_eq integer_dup_times exec_swap (print_exec (boolean_stackdepth integer_dec exec_k () (in3 integer_dup_items boolean_eq boolean_and exec_noop exec_while (integer_lt boolean_dup_items) boolean_shove exec_empty 31))) ())) ())) ()) ())) () ())))
Zero cases best errors: [0 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 127
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (199 202 198 306 202 118 627 198 119 506)
Population mean number of elite cases: 2.67
Count of perfect (error zero) individuals by case: (199 202 198 306 202 118 627 198 119 506)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in1})
Best program: (integer_swap boolean_shove boolean_dup_times boolean_or integer_yank boolean_xor boolean_swap integer_empty exec_while (exec_yankdup integer_rot integer_max) exec_noop integer_empty exec_while (exec_yankdup integer_rot integer_max) exec_noop exec_rot () (integer_sub boolean_dup_times exec_noop) () integer_min integer_lte integer_eq integer_mult integer_dup_items boolean_pop in1 boolean_dup_items exec_s_when_autoconstructing (in3 boolean_invert_first_then_and exec_empty exec_eq boolean_invert_first_then_and integer_div in2 print_integer exec_empty exec_if (exec_yankdup print_boolean exec_y_when_autoconstructing (print_newline exec_dup (integer_lte)) boolean_invert_first_then_and integer_mod in1) ()) () ())
Errors: [0 1 0 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 51
Size: 64
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 7.325
Median total errors in population: 7
Error averages by case: (0.801 0.798 0.802 0.694 0.798 0.882 0.373 0.802 0.881 0.494)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.542
Average program size in population (points): 76.807
Average percent parens in population: 0.256
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.489
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1069921
--- Timings ---
Current time: 1559583602634 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.5 seconds, 45.7%
Fitness Testing:      2.1 seconds, 38.6%
Report:               0.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 71                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: 69                 
Correct output: -27                 | Program output: -10                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 77                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 63                 
Correct output: 6                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 74                 
Correct output: 52                  | Program output: 61                 
Correct output: 41                  | Program output: 71                 
Correct output: 4                   | Program output: 76                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 51                 
Correct output: 74                  | Program output: 90                 
Correct output: 15                  | Program output: 62                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 76                 
Correct output: -34                 | Program output: 44                 
Correct output: -70                 | Program output: 78                 
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 36                 
Correct output: -69                 | Program output: 70                 
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -13                
Correct output: -87                 | Program output: 8                  
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 44                 
Correct output: -83                 | Program output: -79                
Correct output: -83                 | Program output: 93                 
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -71                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: 90                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -66                
Correct output: -30                 | Program output: -28                
Correct output: -100                | Program output: 71                 
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -57                
Correct output: -28                 | Program output: -10                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -8                 
Correct output: -92                 | Program output: 67                 
Correct output: -42                 | Program output: 44                 
Correct output: -16                 | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -43                
Correct output: -55                 | Program output: 8                  
Correct output: -92                 | Program output: 3                  
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: 77                 
Correct output: -32                 | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -85                
Correct output: -89                 | Program output: -54                
Correct output: -93                 | Program output: -88                
Correct output: -55                 | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 90                 
Correct output: -41                 | Program output: 81                 
Correct output: -69                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: 49                 
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_109} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_693} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -61} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction -14} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_swap} {:close 0, :instruction tag_boolean_136} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 1, :instruction -26} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and})
Lexicase best program: (boolean_eq exec_do*range (integer_lte tag_integer_109 integer_lt exec_if (integer_dup_items integer_eq tagged_693) (integer_sub) exec_do*range () exec_stackdepth in2 boolean_dup_items boolean_frominteger integer_swap boolean_empty integer_fromboolean exec_yank boolean_dup integer_dup_times) exec_dup_items boolean_frominteger boolean_swap exec_s (integer_dup_items -61 exec_y_when_autoconstructing (in2 -14 exec_when (exec_empty exec_do*while () boolean_yankdup print_integer exec_y () integer_empty exec_swap () (tag_boolean_136 exec_rot () (integer_min boolean_dup_times exec_dup_times (exec_yank exec_y (print_newline in4) exec_rot (exec_when (exec_do*count ()) integer_sub exec_yankdup integer_shove print_boolean) () (integer_dec print_exec (exec_do*while (print_boolean) in4 integer_lte integer_dup exec_swap (boolean_or integer_dup integer_gte in1 integer_mult integer_dup_times) (-26) boolean_eq) exec_y_when_autoconstructing (boolean_dup in4 integer_min exec_eq integer_dup_times exec_swap (print_exec (boolean_stackdepth) integer_dec exec_k () (in3 integer_dup_items boolean_eq boolean_and)) ())))) ())))) () ())
Lexicase best errors: [0 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 119
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_109} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_693} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -61} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction -14} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_swap} {:close 0, :instruction tag_boolean_136} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 1, :instruction -26} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and})
Zero cases best program: (boolean_eq exec_do*range (integer_lte tag_integer_109 integer_lt exec_if (integer_dup_items integer_eq tagged_693) (integer_sub) exec_do*range () exec_stackdepth in2 boolean_dup_items boolean_frominteger integer_swap boolean_empty integer_fromboolean exec_yank boolean_dup integer_dup_times) exec_dup_items boolean_frominteger boolean_swap exec_s (integer_dup_items -61 exec_y_when_autoconstructing (in2 -14 exec_when (exec_empty exec_do*while () boolean_yankdup print_integer exec_y () integer_empty exec_swap () (tag_boolean_136 exec_rot () (integer_min boolean_dup_times exec_dup_times (exec_yank exec_y (print_newline in4) exec_rot (exec_when (exec_do*count ()) integer_sub exec_yankdup integer_shove print_boolean) () (integer_dec print_exec (exec_do*while (print_boolean) in4 integer_lte integer_dup exec_swap (boolean_or integer_dup integer_gte in1 integer_mult integer_dup_times) (-26) boolean_eq) exec_y_when_autoconstructing (boolean_dup in4 integer_min exec_eq integer_dup_times exec_swap (print_exec (boolean_stackdepth) integer_dec exec_k () (in3 integer_dup_items boolean_eq boolean_and)) ())))) ())))) () ())
Zero cases best errors: [0 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 119
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (272 272 273 182 182 273 273 555 272 100)
Population mean number of elite cases: 2.65
Count of perfect (error zero) individuals by case: (272 272 273 182 182 273 273 555 272 100)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_109} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_693} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -61} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction -14} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_136} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_290} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_404} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction -84} {:close 0, :instruction -20} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq})
Best program: (boolean_eq exec_do*range (integer_lte tag_integer_109 integer_lt exec_if (integer_dup_items integer_eq tagged_693) (integer_sub exec_do*range (exec_stackdepth in2 boolean_dup_items boolean_frominteger integer_swap boolean_empty integer_fromboolean exec_yank boolean_dup integer_dup_times) exec_dup_items boolean_frominteger boolean_swap exec_s (integer_dup_items -61 exec_y_when_autoconstructing (in2 -14) exec_when (exec_empty exec_do*while () boolean_yankdup print_integer exec_y () integer_empty exec_swap (tag_boolean_136 exec_rot () (integer_min boolean_dup_times exec_dup_times (exec_yank exec_y (print_newline in4) exec_rot (exec_when (exec_do*count () integer_sub exec_yankdup integer_shove print_boolean)) (integer_dec exec_pop () integer_lt integer_swap tag_exec_290 (exec_dup_items exec_dup_times () exec_swap (boolean_not tagged_404) (integer_div) integer_lte integer_inc -84 -20 exec_rot (boolean_yank in1 exec_yank exec_k (integer_yank exec_do*while () integer_min exec_k () (exec_if () (exec_rot (boolean_invert_first_then_and boolean_flush boolean_dup) (boolean_dup_items integer_gt integer_lt boolean_eq integer_gt exec_eq) ()))) ()) () ())) ())) ()) ())) () ())))
Errors: [0 0 0 1 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 89
Size: 131
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 7.346
Median total errors in population: 8
Error averages by case: (0.728 0.728 0.727 0.818 0.818 0.727 0.727 0.445 0.728 0.9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.389
Average program size in population (points): 75.312
Average percent parens in population: 0.256
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9365
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1609769
--- Timings ---
Current time: 1559583605790 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 53.0%
Fitness Testing:      2.7 seconds, 32.1%
Report:               1.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 71                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: 69                 
Correct output: -27                 | Program output: -10                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 77                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 63                 
Correct output: 6                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 74                 
Correct output: 52                  | Program output: 61                 
Correct output: 41                  | Program output: 71                 
Correct output: 4                   | Program output: 76                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 51                 
Correct output: 74                  | Program output: 90                 
Correct output: 15                  | Program output: 62                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 76                 
Correct output: -34                 | Program output: 44                 
Correct output: -70                 | Program output: 78                 
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 36                 
Correct output: -69                 | Program output: 70                 
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -13                
Correct output: -87                 | Program output: 8                  
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 44                 
Correct output: -83                 | Program output: -79                
Correct output: -83                 | Program output: 93                 
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -71                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: 90                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -66                
Correct output: -30                 | Program output: -28                
Correct output: -100                | Program output: 71                 
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -57                
Correct output: -28                 | Program output: -10                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -8                 
Correct output: -92                 | Program output: 67                 
Correct output: -42                 | Program output: 44                 
Correct output: -16                 | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -43                
Correct output: -55                 | Program output: 8                  
Correct output: -92                 | Program output: 3                  
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: 77                 
Correct output: -32                 | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -85                
Correct output: -89                 | Program output: -54                
Correct output: -93                 | Program output: -88                
Correct output: -55                 | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 90                 
Correct output: -41                 | Program output: 81                 
Correct output: -69                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: 49                 
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_swap boolean_shove boolean_dup_times boolean_or integer_yank exec_rot (boolean_swap integer_empty) (exec_while (exec_yankdup integer_rot integer_max) exec_noop exec_rot () (integer_sub boolean_dup_times exec_noop) () integer_min integer_lte) () integer_eq integer_mult integer_dup_items boolean_pop in1 boolean_dup_items exec_s_when_autoconstructing (in3 boolean_invert_first_then_and exec_empty exec_eq boolean_invert_first_then_and integer_div in2 print_integer exec_empty exec_if (exec_yankdup print_boolean exec_y_when_autoconstructing (print_newline exec_dup (integer_lte)) boolean_invert_first_then_and integer_mod in1 integer_mult integer_pop exec_stackdepth) ()) () ())
Lexicase best errors: [0 0 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_swap boolean_shove boolean_dup_times boolean_or integer_yank exec_rot (boolean_swap integer_empty) (exec_while (exec_yankdup integer_rot integer_max) exec_noop exec_rot () (integer_sub boolean_dup_times exec_noop) () integer_min integer_lte) () integer_eq integer_mult integer_dup_items boolean_pop in1 boolean_dup_items exec_s_when_autoconstructing (in3 boolean_invert_first_then_and exec_empty exec_eq boolean_invert_first_then_and integer_div in2 print_integer exec_empty exec_if (exec_yankdup print_boolean exec_y_when_autoconstructing (print_newline exec_dup (integer_lte)) boolean_invert_first_then_and integer_mod in1 integer_mult integer_pop exec_stackdepth) ()) () ())
Zero cases best errors: [0 0 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (655 549 550 197 549 197 104 197 549 197)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (655 549 550 197 549 197 104 197 549 197)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_109} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_693} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -61} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction -14} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_136} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_dec})
Best program: (boolean_eq exec_do*range (integer_lte tag_integer_109 integer_lt exec_if (integer_dup_items integer_eq tagged_693) (integer_sub exec_do*range (exec_stackdepth in2 boolean_dup_items boolean_frominteger integer_swap boolean_empty integer_fromboolean exec_yank boolean_dup integer_dup_times) exec_dup_items boolean_frominteger boolean_swap exec_s (integer_dup_items -61 exec_y_when_autoconstructing (in2 -14) exec_when (exec_empty exec_do*while () boolean_yankdup print_integer exec_y () integer_empty exec_swap (tag_boolean_136 exec_rot () (integer_min boolean_dup_times exec_dup_times (exec_yank exec_y (print_newline) in4) exec_rot (exec_when (exec_do*count () integer_sub exec_yankdup integer_shove print_boolean)) (integer_dec) ()) ()) ())) () ())))
Errors: [0 0 0 1 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 55
Size: 79
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.256
Median total errors in population: 5
Error averages by case: (0.345 0.451 0.45 0.803 0.451 0.803 0.896 0.803 0.451 0.803)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.423
Average program size in population (points): 80.603
Average percent parens in population: 0.256
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.38025
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.78
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2179853
--- Timings ---
Current time: 1559583609162 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.5 seconds, 55.6%
Fitness Testing:      3.3 seconds, 28.1%
Report:               1.8 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 97                 
Correct output: 13                  | Program output: 91                 
Correct output: 13                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 5                   | Program output: 79                 
Correct output: 9                   | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 44                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 75                 
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 20                 
Correct output: 44                  | Program output: 65                 
Correct output: 0                   | Program output: 43                 
Correct output: -34                 | Program output: 92                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -12                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -12                
Correct output: -62                 | Program output: -54                
Correct output: -74                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: 8                  
Correct output: -50                 | Program output: 59                 
Correct output: -53                 | Program output: 66                 
Correct output: -47                 | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 47                 
Correct output: -92                 | Program output: 23                 
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -8                 
Correct output: -58                 | Program output: 47                 
Correct output: -68                 | Program output: 58                 
Correct output: -99                 | Program output: -76                
Correct output: -92                 | Program output: -28                
Correct output: -39                 | Program output: 78                 
Correct output: -84                 | Program output: 11                 
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -8                 
Correct output: -66                 | Program output: 86                 
Correct output: -17                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 24                 
Correct output: -45                 | Program output: 10                 
Correct output: -45                 | Program output: -36                
Correct output: -55                 | Program output: 47                 
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: 35                 
Correct output: -50                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: 68                 
Correct output: -94                 | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: 41                 
Correct output: -55                 | Program output: 40                 
Correct output: -86                 | Program output: -10                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: 31                 
Correct output: -42                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: 86                 
Correct output: -41                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_540} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction -23} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_542} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (tagged_540 in1 boolean_pop exec_k (print_integer boolean_invert_first_then_and boolean_or -23 integer_gt exec_noop) (integer_stackdepth) exec_s_when_autoconstructing (boolean_not boolean_eq integer_swap boolean_flush) () (in3 integer_swap) exec_y_when_autoconstructing () boolean_stackdepth integer_min integer_eq in2 exec_eq tagged_542 integer_sub boolean_dup_times)
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 34
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_540} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction -23} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_542} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (tagged_540 in1 boolean_pop exec_k (print_integer boolean_invert_first_then_and boolean_or -23 integer_gt exec_noop) (integer_stackdepth) exec_s_when_autoconstructing (boolean_not boolean_eq integer_swap boolean_flush) () (in3 integer_swap) exec_y_when_autoconstructing () boolean_stackdepth integer_min integer_eq in2 exec_eq tagged_542 integer_sub boolean_dup_times)
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 34
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (855 358 99 99 847 99 99 99 391 99)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (855 358 99 99 847 99 99 99 391 99)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_540} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times})
Best program: (tagged_540 in1 boolean_pop exec_k (print_integer boolean_invert_first_then_and boolean_or boolean_yankdup exec_k (exec_pop () integer_min integer_stackdepth boolean_dup_items integer_yankdup boolean_pop exec_dup () integer_rot integer_min) (integer_lte exec_yankdup exec_k (integer_flush) (exec_dup (boolean_eq integer_dec integer_yankdup) integer_dup_times boolean_invert_first_then_and integer_sub) boolean_dup_times)) ())
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 30
Size: 40
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.955
Median total errors in population: 7
Error averages by case: (0.145 0.642 0.901 0.901 0.153 0.901 0.901 0.901 0.609 0.901)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.749
Average program size in population (points): 78.851
Average percent parens in population: 0.263
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.883625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2733324
--- Timings ---
Current time: 1559583611865 milliseconds
Total Time:          14.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.4 seconds, 56.7%
Fitness Testing:      3.9 seconds, 25.9%
Report:               2.5 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 97                 
Correct output: 13                  | Program output: 91                 
Correct output: 13                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 5                   | Program output: 79                 
Correct output: 9                   | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 44                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 75                 
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 20                 
Correct output: 44                  | Program output: 65                 
Correct output: 0                   | Program output: 43                 
Correct output: -34                 | Program output: 92                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -12                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -12                
Correct output: -62                 | Program output: -54                
Correct output: -74                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: 8                  
Correct output: -50                 | Program output: 59                 
Correct output: -53                 | Program output: 66                 
Correct output: -47                 | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 47                 
Correct output: -92                 | Program output: 23                 
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -8                 
Correct output: -58                 | Program output: 47                 
Correct output: -68                 | Program output: 58                 
Correct output: -99                 | Program output: -76                
Correct output: -92                 | Program output: -28                
Correct output: -39                 | Program output: 78                 
Correct output: -84                 | Program output: 11                 
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -8                 
Correct output: -66                 | Program output: 86                 
Correct output: -17                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 24                 
Correct output: -45                 | Program output: 10                 
Correct output: -45                 | Program output: -36                
Correct output: -55                 | Program output: 47                 
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: 35                 
Correct output: -50                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: 68                 
Correct output: -94                 | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: 41                 
Correct output: -55                 | Program output: 40                 
Correct output: -86                 | Program output: -10                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: 31                 
Correct output: -42                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: 86                 
Correct output: -41                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_540} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction -23} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_542} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (tagged_540 in1 boolean_pop exec_k (print_integer integer_add boolean_or -23 integer_gt exec_noop) (integer_stackdepth) exec_s_when_autoconstructing (boolean_not boolean_eq integer_swap boolean_flush) () (in3 integer_swap) exec_y_when_autoconstructing () boolean_stackdepth integer_min boolean_and in2 exec_eq tagged_542 integer_sub boolean_dup_times)
Lexicase best errors: [1 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_540} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction -23} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_542} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (tagged_540 in1 boolean_pop exec_k (print_integer integer_add boolean_or -23 integer_gt exec_noop) (integer_stackdepth) exec_s_when_autoconstructing (boolean_not boolean_eq integer_swap boolean_flush) () (in3 integer_swap) exec_y_when_autoconstructing () boolean_stackdepth integer_min boolean_and in2 exec_eq tagged_542 integer_sub boolean_dup_times)
Zero cases best errors: [1 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (104 838 102 632 633 631 103 104 634 840)
Population mean number of elite cases: 4.62
Count of perfect (error zero) individuals by case: (104 838 102 632 633 631 103 104 634 840)
Population mean number of perfect (error zero) cases: 4.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction 18} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_290} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_404} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction -84} {:close 0, :instruction -20} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq})
Best program: (integer_add integer_max exec_do*while () integer_inc exec_noop exec_noop integer_add exec_noop boolean_or in1 integer_gte integer_rot boolean_invert_first_then_and exec_y (exec_y (boolean_yankdup boolean_pop print_integer boolean_stackdepth integer_stackdepth boolean_or integer_add exec_yank 18 boolean_not boolean_not boolean_flush exec_k_when_autoconstructing (integer_yankdup integer_rot exec_eq) (exec_k_when_autoconstructing (boolean_frominteger print_newline integer_add integer_gt boolean_frominteger exec_do*range () boolean_invert_second_then_and boolean_flush exec_y_when_autoconstructing (integer_yank integer_dec integer_eq integer_min integer_dup integer_dup exec_flush integer_mod integer_swap exec_pop () integer_lt integer_swap tag_exec_290 (exec_dup_items exec_dup_times (exec_swap (boolean_not tagged_404) (integer_div) integer_lte integer_inc -84 -20 exec_s (boolean_yank in1 exec_yank exec_k (integer_yank exec_do*while (integer_min exec_k () (integer_dup_items exec_rot (boolean_invert_first_then_and boolean_flush boolean_dup) (boolean_dup_items integer_gt integer_lt exec_pop (integer_gt exec_eq)) ()))) ()) () ())))) ()))))
Errors: [1 0 1 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 84
Size: 111
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 5.379
Median total errors in population: 4
Error averages by case: (0.896 0.162 0.898 0.368 0.367 0.369 0.897 0.896 0.366 0.16)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.221
Average program size in population (points): 72.498
Average percent parens in population: 0.243
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.3995625
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3562145
--- Timings ---
Current time: 1559583616258 milliseconds
Total Time:          17.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.3 seconds, 57.6%
Fitness Testing:      4.7 seconds, 26.3%
Report:               2.8 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 97                 
Correct output: 13                  | Program output: 91                 
Correct output: 13                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 5                   | Program output: 79                 
Correct output: 9                   | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 44                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 75                 
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 20                 
Correct output: 44                  | Program output: 65                 
Correct output: 0                   | Program output: 43                 
Correct output: -34                 | Program output: 92                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -12                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -12                
Correct output: -62                 | Program output: -54                
Correct output: -74                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: 8                  
Correct output: -50                 | Program output: 59                 
Correct output: -53                 | Program output: 66                 
Correct output: -47                 | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 47                 
Correct output: -92                 | Program output: 23                 
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -8                 
Correct output: -58                 | Program output: 47                 
Correct output: -68                 | Program output: 58                 
Correct output: -99                 | Program output: -76                
Correct output: -92                 | Program output: -28                
Correct output: -39                 | Program output: 78                 
Correct output: -84                 | Program output: 11                 
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -8                 
Correct output: -66                 | Program output: 86                 
Correct output: -17                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 24                 
Correct output: -45                 | Program output: 10                 
Correct output: -45                 | Program output: -36                
Correct output: -55                 | Program output: 47                 
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: 35                 
Correct output: -50                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: 68                 
Correct output: -94                 | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: 41                 
Correct output: -55                 | Program output: 40                 
Correct output: -86                 | Program output: -10                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: 31                 
Correct output: -42                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: 86                 
Correct output: -41                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction 18} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_exec_290} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_404} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_290} {:close 0, :instruction exec_dup_items})
Lexicase best program: (integer_add integer_max boolean_yankdup integer_inc exec_noop exec_noop integer_add exec_noop boolean_or in1 integer_gte integer_rot exec_rot (exec_y (exec_y (boolean_yankdup boolean_pop print_integer boolean_stackdepth integer_stackdepth boolean_or integer_add exec_yank 18 boolean_not boolean_not boolean_flush exec_k_when_autoconstructing (integer_yankdup integer_rot exec_eq) (exec_k_when_autoconstructing (boolean_frominteger print_newline boolean_xor integer_gt boolean_frominteger exec_do*range () boolean_invert_second_then_and) (boolean_flush exec_y_when_autoconstructing (exec_rot (integer_dec integer_eq integer_min exec_rot (exec_y (exec_flush integer_mod integer_swap exec_pop () integer_lt exec_do*count (tag_exec_290 (exec_dup_items exec_dup_times () exec_swap (boolean_not tagged_404) (exec_pop () integer_lt integer_swap tag_exec_290 (exec_dup_items)))))) () ()) () ())))))) () ())
Lexicase best errors: [1 1 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 91
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction 18} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_exec_290} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_404} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_290} {:close 0, :instruction exec_dup_items})
Zero cases best program: (integer_add integer_max boolean_yankdup integer_inc exec_noop exec_noop integer_add exec_noop boolean_or in1 integer_gte integer_rot exec_rot (exec_y (exec_y (boolean_yankdup boolean_pop print_integer boolean_stackdepth integer_stackdepth boolean_or integer_add exec_yank 18 boolean_not boolean_not boolean_flush exec_k_when_autoconstructing (integer_yankdup integer_rot exec_eq) (exec_k_when_autoconstructing (boolean_frominteger print_newline boolean_xor integer_gt boolean_frominteger exec_do*range () boolean_invert_second_then_and) (boolean_flush exec_y_when_autoconstructing (exec_rot (integer_dec integer_eq integer_min exec_rot (exec_y (exec_flush integer_mod integer_swap exec_pop () integer_lt exec_do*count (tag_exec_290 (exec_dup_items exec_dup_times () exec_swap (boolean_not tagged_404) (exec_pop () integer_lt integer_swap tag_exec_290 (exec_dup_items)))))) () ()) () ())))))) () ())
Zero cases best errors: [1 1 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 91
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 91 91 819 428 822 822 1000 824 429)
Population mean number of elite cases: 6.33
Count of perfect (error zero) individuals by case: (0 91 91 819 428 822 822 0 824 429)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_540} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction -23} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_542} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Best program: (tagged_540 in1 boolean_pop exec_k (print_integer boolean_invert_first_then_and boolean_or -23 integer_gt exec_noop) (integer_stackdepth) exec_s_when_autoconstructing (boolean_not boolean_eq boolean_yank boolean_flush) () (in3 integer_swap) exec_y_when_autoconstructing () boolean_stackdepth integer_min integer_eq in2 exec_eq tagged_542 exec_s_when_autoconstructing () (boolean_dup_times) ())
Errors: [1 1 1 0 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 27
Size: 37
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 5.674
Median total errors in population: 4
Error averages by case: (1.0 0.909 0.909 0.181 0.572 0.178 0.178 1.0 0.176 0.571)
Error minima by case: (1 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 52.972
Average program size in population (points): 71.512
Average percent parens in population: 0.253
Minimum age in population: 6.0
Maximum age in population: 10.65625
Average age in population: 8.84853125
Median age in population: 8.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4247069
--- Timings ---
Current time: 1559583619018 milliseconds
Total Time:          22.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.1 seconds, 54.9%
Fitness Testing:      5.4 seconds, 24.3%
Report:               4.5 seconds, 20.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 71                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: 69                 
Correct output: -27                 | Program output: -10                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 77                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 63                 
Correct output: 6                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 74                 
Correct output: 52                  | Program output: 61                 
Correct output: 41                  | Program output: 71                 
Correct output: 4                   | Program output: 76                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 51                 
Correct output: 74                  | Program output: 90                 
Correct output: 15                  | Program output: 62                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 76                 
Correct output: -34                 | Program output: 44                 
Correct output: -70                 | Program output: 78                 
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 36                 
Correct output: -69                 | Program output: 70                 
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -13                
Correct output: -87                 | Program output: 8                  
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 44                 
Correct output: -83                 | Program output: -79                
Correct output: -83                 | Program output: 93                 
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -71                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: 90                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -66                
Correct output: -30                 | Program output: -28                
Correct output: -100                | Program output: 71                 
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -57                
Correct output: -28                 | Program output: -10                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -8                 
Correct output: -92                 | Program output: 67                 
Correct output: -42                 | Program output: 44                 
Correct output: -16                 | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -43                
Correct output: -55                 | Program output: 8                  
Correct output: -92                 | Program output: 3                  
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: 77                 
Correct output: -32                 | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -85                
Correct output: -89                 | Program output: -54                
Correct output: -93                 | Program output: -88                
Correct output: -55                 | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 90                 
Correct output: -41                 | Program output: 81                 
Correct output: -69                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: 49                 
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (exec_when () exec_empty exec_when (print_boolean exec_k_when_autoconstructing (boolean_swap integer_fromboolean integer_dup_items) (integer_eq boolean_yank boolean_flush boolean_not boolean_shove) boolean_or) boolean_yank exec_do*count (boolean_empty integer_yankdup in4) boolean_flush exec_stackdepth exec_noop integer_min integer_lte integer_eq integer_mult integer_dup_items boolean_pop in1 boolean_dup_items exec_s_when_autoconstructing (in3 boolean_invert_first_then_and exec_empty exec_eq boolean_invert_first_then_and integer_div in2 print_integer exec_empty exec_if (exec_yankdup print_boolean exec_y_when_autoconstructing (integer_add exec_dup (integer_lte)) boolean_invert_first_then_and integer_mod in1 integer_mult integer_pop exec_stackdepth) ()) () ())
Lexicase best errors: [1 1 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 66
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (exec_when () exec_empty exec_when (print_boolean exec_k_when_autoconstructing (boolean_swap integer_fromboolean integer_dup_items) (integer_eq boolean_yank boolean_flush boolean_not boolean_shove) boolean_or) boolean_yank exec_do*count (boolean_empty integer_yankdup in4) boolean_flush exec_stackdepth exec_noop integer_min integer_lte integer_eq integer_mult integer_dup_items boolean_pop in1 boolean_dup_items exec_s_when_autoconstructing (in3 boolean_invert_first_then_and exec_empty exec_eq boolean_invert_first_then_and integer_div in2 print_integer exec_empty exec_if (exec_yankdup print_boolean exec_y_when_autoconstructing (integer_add exec_dup (integer_lte)) boolean_invert_first_then_and integer_mod in1 integer_mult integer_pop exec_stackdepth) ()) () ())
Zero cases best errors: [1 1 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 66
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 2 824 439 383 2 384 1000 439 384)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (0 2 824 439 383 2 384 0 439 384)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth})
Best program: (integer_swap boolean_shove boolean_dup_times boolean_or integer_yank boolean_xor boolean_swap integer_empty exec_while (exec_yankdup integer_rot integer_max) exec_noop exec_rot (exec_swap (boolean_dup_times integer_min integer_lte) () integer_eq) (integer_mult integer_dup_items) (boolean_pop in1) boolean_dup_items exec_s_when_autoconstructing (in3 boolean_invert_first_then_and exec_empty exec_eq boolean_invert_first_then_and integer_div in2 print_integer exec_empty exec_if (exec_yankdup print_boolean exec_y_when_autoconstructing (print_newline exec_dup (integer_lte)) boolean_invert_first_then_and integer_mod exec_empty integer_mult integer_pop exec_stackdepth) ()) () ())
Errors: [1 1 0 1 0 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 47
Size: 61
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 7.143
Median total errors in population: 7
Error averages by case: (1.0 0.998 0.176 0.561 0.617 0.998 0.616 1.0 0.561 0.616)
Error minima by case: (1 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 52.546
Average program size in population (points): 69.911
Average percent parens in population: 0.238
Minimum age in population: 7.0
Maximum age in population: 12.171875
Average age in population: 10.309015625
Median age in population: 10.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.779
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4973685
--- Timings ---
Current time: 1559583622172 milliseconds
Total Time:          25.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.2 seconds, 56.5%
Fitness Testing:      6.1 seconds, 24.2%
Report:               4.8 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 97                 
Correct output: 13                  | Program output: 91                 
Correct output: 13                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 5                   | Program output: 79                 
Correct output: 9                   | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 44                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 75                 
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 20                 
Correct output: 44                  | Program output: 65                 
Correct output: 0                   | Program output: 43                 
Correct output: -34                 | Program output: 92                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -12                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -12                
Correct output: -62                 | Program output: -54                
Correct output: -74                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: 8                  
Correct output: -50                 | Program output: 59                 
Correct output: -53                 | Program output: 66                 
Correct output: -47                 | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 47                 
Correct output: -92                 | Program output: 23                 
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -8                 
Correct output: -58                 | Program output: 47                 
Correct output: -68                 | Program output: 58                 
Correct output: -99                 | Program output: -76                
Correct output: -92                 | Program output: -28                
Correct output: -39                 | Program output: 78                 
Correct output: -84                 | Program output: 11                 
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -8                 
Correct output: -66                 | Program output: 86                 
Correct output: -17                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 24                 
Correct output: -45                 | Program output: 10                 
Correct output: -45                 | Program output: -36                
Correct output: -55                 | Program output: 47                 
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: 35                 
Correct output: -50                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: 68                 
Correct output: -94                 | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: 41                 
Correct output: -55                 | Program output: 40                 
Correct output: -86                 | Program output: -10                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: 31                 
Correct output: -42                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: 86                 
Correct output: -41                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction 18} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_exec_290} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_404} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction -84} {:close 0, :instruction -20} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod})
Lexicase best program: (integer_add integer_max boolean_yankdup integer_inc exec_noop exec_noop integer_add exec_noop boolean_or in1 integer_gte integer_rot exec_rot (exec_y (exec_y (boolean_yankdup boolean_pop print_integer boolean_stackdepth integer_stackdepth boolean_or integer_add exec_yank 18 boolean_not boolean_not boolean_flush exec_k_when_autoconstructing (integer_yankdup integer_rot exec_eq) (exec_k_when_autoconstructing (boolean_frominteger print_newline boolean_xor integer_gt boolean_frominteger exec_do*range () boolean_invert_second_then_and) (boolean_flush exec_y_when_autoconstructing (exec_rot (integer_dec integer_eq integer_min exec_rot (exec_y (exec_flush integer_mod integer_swap exec_pop () integer_lt exec_do*count (tag_exec_290 (exec_dup_items exec_dup_times () exec_swap (boolean_not tagged_404) (integer_div) integer_lte integer_inc -84 -20 exec_rot (boolean_yank in1 exec_yank exec_k (integer_yank exec_do*while () integer_min exec_k () (integer_dup_items) boolean_shove boolean_invert_first_then_and boolean_flush boolean_dup) (boolean_dup_items integer_gt integer_lt exec_pop (integer_gt integer_mod))) () ())))) () ()) () ())))))) () ())
Lexicase best errors: [1 1 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 118
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction 18} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_exec_290} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_404} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction -84} {:close 0, :instruction -20} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod})
Zero cases best program: (integer_add integer_max boolean_yankdup integer_inc exec_noop exec_noop integer_add exec_noop boolean_or in1 integer_gte integer_rot exec_rot (exec_y (exec_y (boolean_yankdup boolean_pop print_integer boolean_stackdepth integer_stackdepth boolean_or integer_add exec_yank 18 boolean_not boolean_not boolean_flush exec_k_when_autoconstructing (integer_yankdup integer_rot exec_eq) (exec_k_when_autoconstructing (boolean_frominteger print_newline boolean_xor integer_gt boolean_frominteger exec_do*range () boolean_invert_second_then_and) (boolean_flush exec_y_when_autoconstructing (exec_rot (integer_dec integer_eq integer_min exec_rot (exec_y (exec_flush integer_mod integer_swap exec_pop () integer_lt exec_do*count (tag_exec_290 (exec_dup_items exec_dup_times () exec_swap (boolean_not tagged_404) (integer_div) integer_lte integer_inc -84 -20 exec_rot (boolean_yank in1 exec_yank exec_k (integer_yank exec_do*while () integer_min exec_k () (integer_dup_items) boolean_shove boolean_invert_first_then_and boolean_flush boolean_dup) (boolean_dup_items integer_gt integer_lt exec_pop (integer_gt integer_mod))) () ())))) () ()) () ())))))) () ())
Zero cases best errors: [1 1 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 118
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (353 232 225 811 1000 225 354 225 355 225)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (353 232 225 811 0 225 354 225 355 225)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 2, :instruction integer_max} {:close 0, :instruction tagged_540} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction -23} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_542} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Best program: (integer_add integer_max tagged_540 in1 boolean_pop exec_k (print_integer boolean_invert_first_then_and boolean_or -23 integer_gt exec_noop) (integer_stackdepth) exec_s_when_autoconstructing (boolean_not boolean_eq boolean_yank integer_eq) () (in3 integer_swap) exec_y_when_autoconstructing () boolean_stackdepth integer_min integer_eq in2 exec_eq tagged_542 exec_s_when_autoconstructing () (boolean_dup_times) ())
Errors: [1 1 0 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 29
Size: 39
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 6.995
Median total errors in population: 6
Error averages by case: (0.647 0.768 0.775 0.189 1.0 0.775 0.646 0.775 0.645 0.775)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 49.165
Average program size in population (points): 64.946
Average percent parens in population: 0.235
Minimum age in population: 8.0
Maximum age in population: 13.4765625
Average age in population: 11.7805703125
Median age in population: 11.90234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5737102
--- Timings ---
Current time: 1559583624922 milliseconds
Total Time:          27.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.0 seconds, 57.1%
Fitness Testing:      6.8 seconds, 24.4%
Report:               5.1 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 97                 
Correct output: 13                  | Program output: 91                 
Correct output: 13                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 5                   | Program output: 79                 
Correct output: 9                   | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 44                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 75                 
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 20                 
Correct output: 44                  | Program output: 65                 
Correct output: 0                   | Program output: 43                 
Correct output: -34                 | Program output: 92                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -12                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -12                
Correct output: -62                 | Program output: -54                
Correct output: -74                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: 8                  
Correct output: -50                 | Program output: 59                 
Correct output: -53                 | Program output: 66                 
Correct output: -47                 | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 47                 
Correct output: -92                 | Program output: 23                 
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -8                 
Correct output: -58                 | Program output: 47                 
Correct output: -68                 | Program output: 58                 
Correct output: -99                 | Program output: -76                
Correct output: -92                 | Program output: -28                
Correct output: -39                 | Program output: 78                 
Correct output: -84                 | Program output: 11                 
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -8                 
Correct output: -66                 | Program output: 86                 
Correct output: -17                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 24                 
Correct output: -45                 | Program output: 10                 
Correct output: -45                 | Program output: -36                
Correct output: -55                 | Program output: 47                 
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: 35                 
Correct output: -50                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: 68                 
Correct output: -94                 | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: 41                 
Correct output: -55                 | Program output: 40                 
Correct output: -86                 | Program output: -10                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: 31                 
Correct output: -42                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: 86                 
Correct output: -41                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction 18} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 1, :instruction -20} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_add integer_max boolean_yankdup integer_inc exec_noop exec_noop integer_add exec_noop boolean_xor in1 integer_gte integer_rot boolean_invert_first_then_and exec_y (exec_y (boolean_yankdup boolean_pop print_integer boolean_stackdepth integer_stackdepth boolean_or integer_add exec_yank 18 boolean_not boolean_not boolean_flush exec_k_when_autoconstructing (integer_yankdup integer_rot exec_eq) (exec_k_when_autoconstructing (boolean_frominteger integer_shove integer_add integer_add boolean_frominteger exec_do*range () boolean_invert_second_then_and boolean_flush exec_y_when_autoconstructing (integer_yank integer_dec integer_eq integer_min integer_dup exec_y (exec_flush integer_mod integer_swap exec_pop () integer_lt -20) integer_fromboolean boolean_yank exec_do*range (exec_yank exec_k (boolean_empty exec_do*while (integer_min exec_k () (integer_dup_items) exec_k (boolean_invert_first_then_and boolean_flush exec_do*while (integer_min exec_k () (integer_dup_items) tagged_292 boolean_invert_first_then_and boolean_flush boolean_dup) exec_while (integer_gt integer_lt exec_pop (integer_gt))) ())) ()))) ()))))
Lexicase best errors: [1 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 103
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction 18} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 1, :instruction -20} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_add integer_max boolean_yankdup integer_inc exec_noop exec_noop integer_add exec_noop boolean_xor in1 integer_gte integer_rot boolean_invert_first_then_and exec_y (exec_y (boolean_yankdup boolean_pop print_integer boolean_stackdepth integer_stackdepth boolean_or integer_add exec_yank 18 boolean_not boolean_not boolean_flush exec_k_when_autoconstructing (integer_yankdup integer_rot exec_eq) (exec_k_when_autoconstructing (boolean_frominteger integer_shove integer_add integer_add boolean_frominteger exec_do*range () boolean_invert_second_then_and boolean_flush exec_y_when_autoconstructing (integer_yank integer_dec integer_eq integer_min integer_dup exec_y (exec_flush integer_mod integer_swap exec_pop () integer_lt -20) integer_fromboolean boolean_yank exec_do*range (exec_yank exec_k (boolean_empty exec_do*while (integer_min exec_k () (integer_dup_items) exec_k (boolean_invert_first_then_and boolean_flush exec_do*while (integer_min exec_k () (integer_dup_items) tagged_292 boolean_invert_first_then_and boolean_flush boolean_dup) exec_while (integer_gt integer_lt exec_pop (integer_gt))) ())) ()))) ()))))
Zero cases best errors: [1 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 103
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (312 429 846 430 534 1 845 1 312 846)
Population mean number of elite cases: 4.56
Count of perfect (error zero) individuals by case: (312 429 846 430 534 1 845 1 312 846)
Population mean number of perfect (error zero) cases: 4.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_540} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction -23} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_542} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times})
Best program: (tagged_540 in1 boolean_pop exec_k (print_integer boolean_invert_first_then_and boolean_or -23 integer_gt exec_noop) (integer_stackdepth) exec_s_when_autoconstructing (boolean_not) (boolean_eq integer_swap boolean_flush) () in3 integer_swap exec_y_when_autoconstructing () boolean_stackdepth integer_min integer_eq integer_dup exec_eq tagged_542 integer_sub boolean_dup_times)
Errors: [1 0 0 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 27
Size: 34
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 5.444
Median total errors in population: 5
Error averages by case: (0.688 0.571 0.154 0.57 0.466 0.999 0.155 0.999 0.688 0.154)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.078
Average program size in population (points): 63.741
Average percent parens in population: 0.237
Minimum age in population: 9.0
Maximum age in population: 14.984375
Average age in population: 13.25912109375
Median age in population: 13.294921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.78
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6458512
--- Timings ---
Current time: 1559583628145 milliseconds
Total Time:          31.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.2 seconds, 58.5%
Fitness Testing:      7.5 seconds, 24.0%
Report:               5.3 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 71                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: 69                 
Correct output: -27                 | Program output: -10                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 77                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 63                 
Correct output: 6                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 74                 
Correct output: 52                  | Program output: 61                 
Correct output: 41                  | Program output: 71                 
Correct output: 4                   | Program output: 76                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 51                 
Correct output: 74                  | Program output: 90                 
Correct output: 15                  | Program output: 62                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 76                 
Correct output: -34                 | Program output: 44                 
Correct output: -70                 | Program output: 78                 
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 36                 
Correct output: -69                 | Program output: 70                 
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -13                
Correct output: -87                 | Program output: 8                  
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 44                 
Correct output: -83                 | Program output: -79                
Correct output: -83                 | Program output: 93                 
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -71                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: 90                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -66                
Correct output: -30                 | Program output: -28                
Correct output: -100                | Program output: 71                 
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -57                
Correct output: -28                 | Program output: -10                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -8                 
Correct output: -92                 | Program output: 67                 
Correct output: -42                 | Program output: 44                 
Correct output: -16                 | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -43                
Correct output: -55                 | Program output: 8                  
Correct output: -92                 | Program output: 3                  
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: 77                 
Correct output: -32                 | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -85                
Correct output: -89                 | Program output: -54                
Correct output: -93                 | Program output: -88                
Correct output: -55                 | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 90                 
Correct output: -41                 | Program output: 81                 
Correct output: -69                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: 49                 
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_swap boolean_shove boolean_dup_times boolean_or integer_yank boolean_xor integer_lte exec_when () exec_while (exec_yankdup integer_rot integer_max) exec_noop boolean_yankdup integer_sub boolean_dup_times integer_min integer_lte integer_eq exec_eq integer_dup_items boolean_pop in3 boolean_invert_first_then_and exec_empty exec_eq boolean_invert_first_then_and integer_div in2 print_integer exec_empty exec_if (exec_yankdup print_boolean integer_flush print_newline exec_dup (integer_lte)) (boolean_invert_first_then_and integer_mod in1 exec_noop integer_mod exec_stackdepth))
Lexicase best errors: [1 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.120
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_swap boolean_shove boolean_dup_times boolean_or integer_yank boolean_xor integer_lte exec_when () exec_while (exec_yankdup integer_rot integer_max) exec_noop boolean_yankdup integer_sub boolean_dup_times integer_min integer_lte integer_eq exec_eq integer_dup_items boolean_pop in3 boolean_invert_first_then_and exec_empty exec_eq boolean_invert_first_then_and integer_div in2 print_integer exec_empty exec_if (exec_yankdup print_boolean integer_flush print_newline exec_dup (integer_lte)) (boolean_invert_first_then_and integer_mod in1 exec_noop integer_mod exec_stackdepth))
Zero cases best errors: [1 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 241 337 863 283 243 239 3 282 239)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (3 241 337 863 283 243 239 3 282 239)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_109} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_693} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -61} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction -14} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction tag_boolean_136} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction print_exec} {:close 0, :instruction integer_sub})
Best program: (boolean_eq exec_do*range (integer_lte tag_integer_109 integer_lt exec_if (exec_k_when_autoconstructing (integer_eq tagged_693) (integer_sub exec_do*range (exec_stackdepth in2 boolean_dup_items boolean_frominteger integer_swap boolean_empty integer_fromboolean exec_yank boolean_dup integer_dup_times) exec_dup_items boolean_frominteger boolean_swap exec_s (integer_dup_items -61 exec_y_when_autoconstructing (in2 -14) exec_when (exec_empty exec_do*while (boolean_yankdup print_integer exec_y () integer_empty exec_swap (tag_boolean_136) (exec_rot (integer_min boolean_dup_times exec_dup_times (exec_yank exec_y (exec_if (in4 exec_rot (exec_when (print_exec () integer_sub)) () ()) ()))) () ())))) () ())) ()))
Errors: [1 0 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 51
Size: 79
Percent parens: 0.354
--- Population Statistics ---
Average total errors in population: 7.267
Median total errors in population: 7
Error averages by case: (0.997 0.759 0.663 0.137 0.717 0.757 0.761 0.997 0.718 0.761)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.633
Average program size in population (points): 63.292
Average percent parens in population: 0.258
Minimum age in population: 11.96875
Maximum age in population: 16.314453125
Average age in population: 14.8937421875
Median age in population: 14.9111328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 164
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7176354
--- Timings ---
Current time: 1559583631443 milliseconds
Total Time:          34.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.2 seconds, 59.2%
Fitness Testing:      8.2 seconds, 24.1%
Report:               5.6 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 71                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: 69                 
Correct output: -27                 | Program output: -10                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 77                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 63                 
Correct output: 6                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 74                 
Correct output: 52                  | Program output: 61                 
Correct output: 41                  | Program output: 71                 
Correct output: 4                   | Program output: 76                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 51                 
Correct output: 74                  | Program output: 90                 
Correct output: 15                  | Program output: 62                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 76                 
Correct output: -34                 | Program output: 44                 
Correct output: -70                 | Program output: 78                 
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 36                 
Correct output: -69                 | Program output: 70                 
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -13                
Correct output: -87                 | Program output: 8                  
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 44                 
Correct output: -83                 | Program output: -79                
Correct output: -83                 | Program output: 93                 
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -71                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: 90                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -66                
Correct output: -30                 | Program output: -28                
Correct output: -100                | Program output: 71                 
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -57                
Correct output: -28                 | Program output: -10                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -8                 
Correct output: -92                 | Program output: 67                 
Correct output: -42                 | Program output: 44                 
Correct output: -16                 | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -43                
Correct output: -55                 | Program output: 8                  
Correct output: -92                 | Program output: 3                  
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: 77                 
Correct output: -32                 | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -85                
Correct output: -89                 | Program output: -54                
Correct output: -93                 | Program output: -88                
Correct output: -55                 | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 90                 
Correct output: -41                 | Program output: 81                 
Correct output: -69                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: 49                 
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_109} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_693} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction -61} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction -14} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty})
Lexicase best program: (boolean_eq exec_do*range (integer_lte tag_integer_109 integer_lt exec_if (integer_dup_items) (exec_pop (tagged_693) integer_sub exec_do*range (exec_stackdepth in2 boolean_dup_items boolean_frominteger integer_swap boolean_empty integer_fromboolean exec_yank boolean_dup integer_dup_times) exec_dup_items boolean_frominteger) boolean_swap -61 integer_sub in2 -14) exec_when (exec_empty exec_do*while () boolean_yankdup print_integer exec_y () integer_empty))
Lexicase best errors: [1 0 1 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_109} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_693} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction -61} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction -14} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty})
Zero cases best program: (boolean_eq exec_do*range (integer_lte tag_integer_109 integer_lt exec_if (integer_dup_items) (exec_pop (tagged_693) integer_sub exec_do*range (exec_stackdepth in2 boolean_dup_items boolean_frominteger integer_swap boolean_empty integer_fromboolean exec_yank boolean_dup integer_dup_times) exec_dup_items boolean_frominteger) boolean_swap -61 integer_sub in2 -14) exec_when (exec_empty exec_do*while () boolean_yankdup print_integer exec_y () integer_empty))
Zero cases best errors: [1 0 1 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (96 360 96 180 229 358 230 173 180 358)
Population mean number of elite cases: 2.26
Count of perfect (error zero) individuals by case: (96 360 96 180 229 358 230 173 180 358)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 3, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger})
Best program: (integer_swap boolean_shove boolean_dup_times boolean_or integer_yank boolean_xor boolean_swap integer_empty exec_while (exec_yankdup integer_rot integer_max) exec_noop exec_rot () (integer_sub boolean_dup_times exec_noop) () integer_min integer_lte integer_eq integer_mult integer_dup_items boolean_pop in1 boolean_dup_items exec_s_when_autoconstructing (integer_yank boolean_invert_first_then_and exec_empty exec_eq boolean_invert_first_then_and integer_div in2 print_integer exec_k_when_autoconstructing (integer_yankdup integer_rot exec_eq) (exec_k_when_autoconstructing () (boolean_frominteger))) () ())
Errors: [1 0 1 1 1 0 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 40
Size: 52
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.74
Median total errors in population: 7
Error averages by case: (0.904 0.64 0.904 0.82 0.771 0.642 0.77 0.827 0.82 0.642)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.477
Average program size in population (points): 66.869
Average percent parens in population: 0.270
Minimum age in population: 12.96875
Maximum age in population: 17.87109375
Average age in population: 16.34905078125
Median age in population: 16.48388671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.729
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7819340
--- Timings ---
Current time: 1559583634476 milliseconds
Total Time:          37.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.2 seconds, 59.3%
Fitness Testing:      8.9 seconds, 23.8%
Report:               6.2 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 97                 
Correct output: 13                  | Program output: 91                 
Correct output: 13                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 5                   | Program output: 79                 
Correct output: 9                   | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 44                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 75                 
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 20                 
Correct output: 44                  | Program output: 65                 
Correct output: 0                   | Program output: 43                 
Correct output: -34                 | Program output: 92                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -12                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -12                
Correct output: -62                 | Program output: -54                
Correct output: -74                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: 8                  
Correct output: -50                 | Program output: 59                 
Correct output: -53                 | Program output: 66                 
Correct output: -47                 | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 47                 
Correct output: -92                 | Program output: 23                 
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -8                 
Correct output: -58                 | Program output: 47                 
Correct output: -68                 | Program output: 58                 
Correct output: -99                 | Program output: -76                
Correct output: -92                 | Program output: -28                
Correct output: -39                 | Program output: 78                 
Correct output: -84                 | Program output: 11                 
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -8                 
Correct output: -66                 | Program output: 86                 
Correct output: -17                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 24                 
Correct output: -45                 | Program output: 10                 
Correct output: -45                 | Program output: -36                
Correct output: -55                 | Program output: 47                 
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: 35                 
Correct output: -50                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: 68                 
Correct output: -94                 | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: 41                 
Correct output: -55                 | Program output: 40                 
Correct output: -86                 | Program output: -10                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: 31                 
Correct output: -42                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: 86                 
Correct output: -41                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction tag_integer_899} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (exec_rot () (boolean_yankdup) (integer_inc) exec_do*while (exec_k_when_autoconstructing () () integer_sub exec_if () (boolean_dup_items integer_eq)) integer_swap boolean_swap exec_dup_items tag_integer_899 integer_yankdup integer_lte in4 exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1) boolean_dup_items) () exec_s_when_autoconstructing (in3 boolean_invert_first_then_and exec_empty exec_eq exec_do*while () boolean_yankdup print_integer exec_y () boolean_invert_first_then_and integer_div in2 exec_rot (exec_dup (integer_add integer_mod in1 integer_mult integer_pop exec_stackdepth)) () ()) () ())
Lexicase best errors: [1 1 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 64
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction tag_integer_899} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (exec_rot () (boolean_yankdup) (integer_inc) exec_do*while (exec_k_when_autoconstructing () () integer_sub exec_if () (boolean_dup_items integer_eq)) integer_swap boolean_swap exec_dup_items tag_integer_899 integer_yankdup integer_lte in4 exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1) boolean_dup_items) () exec_s_when_autoconstructing (in3 boolean_invert_first_then_and exec_empty exec_eq exec_do*while () boolean_yankdup print_integer exec_y () boolean_invert_first_then_and integer_div in2 exec_rot (exec_dup (integer_add integer_mod in1 integer_mult integer_pop exec_stackdepth)) () ()) () ())
Zero cases best errors: [1 1 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 64
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (192 271 184 189 896 647 273 184 247 248)
Population mean number of elite cases: 3.33
Count of perfect (error zero) individuals by case: (192 271 184 189 896 647 273 184 247 248)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction tagged_540} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction -23} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_542} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Best program: (integer_swap tagged_540 in1 boolean_pop exec_k (print_integer boolean_invert_first_then_and boolean_or -23 integer_gt exec_noop) (integer_stackdepth) exec_s_when_autoconstructing (boolean_not boolean_eq boolean_yank boolean_flush) () (in3 integer_swap) exec_dup_items integer_min integer_yankdup integer_lte in4 exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1) boolean_dup_items) () in3 integer_swap exec_y_when_autoconstructing () boolean_stackdepth integer_min integer_eq boolean_dup exec_eq tagged_542 exec_s_when_autoconstructing () (boolean_dup_times) ())
Errors: [0 1 1 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 42
Size: 55
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 6.669
Median total errors in population: 6
Error averages by case: (0.808 0.729 0.816 0.811 0.104 0.353 0.727 0.816 0.753 0.752)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.896
Average program size in population (points): 64.196
Average percent parens in population: 0.278
Minimum age in population: 14.28125
Maximum age in population: 19.68505859375
Average age in population: 17.90499658203125
Median age in population: 17.9814453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8507661
--- Timings ---
Current time: 1559583638007 milliseconds
Total Time:          40.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.6 seconds, 60.2%
Fitness Testing:      9.6 seconds, 23.5%
Report:               6.6 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 71                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: 69                 
Correct output: -27                 | Program output: -10                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 77                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 63                 
Correct output: 6                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 74                 
Correct output: 52                  | Program output: 61                 
Correct output: 41                  | Program output: 71                 
Correct output: 4                   | Program output: 76                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 51                 
Correct output: 74                  | Program output: 90                 
Correct output: 15                  | Program output: 62                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 76                 
Correct output: -34                 | Program output: 44                 
Correct output: -70                 | Program output: 78                 
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 36                 
Correct output: -69                 | Program output: 70                 
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -13                
Correct output: -87                 | Program output: 8                  
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 44                 
Correct output: -83                 | Program output: -79                
Correct output: -83                 | Program output: 93                 
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -71                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: 90                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -66                
Correct output: -30                 | Program output: -28                
Correct output: -100                | Program output: 71                 
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -57                
Correct output: -28                 | Program output: -10                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -8                 
Correct output: -92                 | Program output: 67                 
Correct output: -42                 | Program output: 44                 
Correct output: -16                 | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -43                
Correct output: -55                 | Program output: 8                  
Correct output: -92                 | Program output: 3                  
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: 77                 
Correct output: -32                 | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -85                
Correct output: -89                 | Program output: -54                
Correct output: -93                 | Program output: -88                
Correct output: -55                 | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 90                 
Correct output: -41                 | Program output: 81                 
Correct output: -69                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: 49                 
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -61} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction -14} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_136} {:close 1, :instruction boolean_frominteger})
Lexicase best program: (exec_rot () (boolean_yankdup) (integer_inc) exec_do*while (exec_k_when_autoconstructing () () integer_sub exec_if () (boolean_dup_items integer_gte)) integer_swap boolean_swap exec_dup_items integer_min integer_yankdup integer_lte in4 exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1) boolean_dup_items) () exec_s_when_autoconstructing (in3 boolean_swap exec_s (integer_dup_items -61 exec_y_when_autoconstructing (in2 -14) exec_when (exec_empty exec_k_when_autoconstructing (boolean_yankdup print_integer exec_y ()) (integer_empty exec_swap (tag_boolean_136 boolean_frominteger) ()))) () ()) () ())
Lexicase best errors: [1 0 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 67
Percent parens: 0.373
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -61} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction -14} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_136} {:close 1, :instruction boolean_frominteger})
Zero cases best program: (exec_rot () (boolean_yankdup) (integer_inc) exec_do*while (exec_k_when_autoconstructing () () integer_sub exec_if () (boolean_dup_items integer_gte)) integer_swap boolean_swap exec_dup_items integer_min integer_yankdup integer_lte in4 exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1) boolean_dup_items) () exec_s_when_autoconstructing (in3 boolean_swap exec_s (integer_dup_items -61 exec_y_when_autoconstructing (in2 -14) exec_when (exec_empty exec_k_when_autoconstructing (boolean_yankdup print_integer exec_y ()) (integer_empty exec_swap (tag_boolean_136 boolean_frominteger) ()))) () ()) () ())
Zero cases best errors: [1 0 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 67
Percent parens: 0.373
--- Lexicase Population Statistics ---
Count of elite individuals by case: (248 188 218 248 214 187 190 240 187 249)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (248 188 218 248 214 187 190 240 187 249)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_109} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_540} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_109} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_124} {:close 1, :instruction -14} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup})
Best program: (integer_swap boolean_shove boolean_dup_times boolean_or integer_yank boolean_xor boolean_swap integer_empty exec_while (integer_lte tag_integer_109 integer_lt exec_if (tagged_540 in1 boolean_eq) (exec_do*range (integer_lte tag_integer_109 integer_lt exec_if (integer_dup_items exec_dup_items boolean_frominteger exec_eq boolean_invert_first_then_and integer_div in2 print_integer exec_empty exec_if (integer_add print_boolean exec_y_when_autoconstructing (exec_y_when_autoconstructing (tagged_124 -14) exec_when (integer_sub exec_yank print_integer print_newline in4) integer_sub exec_yankdup)) ()) ()))))
Errors: [1 0 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 45
Size: 57
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 7.831
Median total errors in population: 8
Error averages by case: (0.752 0.812 0.782 0.752 0.786 0.813 0.81 0.76 0.813 0.751)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.712
Average program size in population (points): 62.781
Average percent parens in population: 0.281
Minimum age in population: 16.59375
Maximum age in population: 21.324462890625
Average age in population: 19.41837524414062
Median age in population: 19.4791259765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 9204652
--- Timings ---
Current time: 1559583641514 milliseconds
Total Time:          44.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.1 seconds, 60.9%
Fitness Testing:     10.4 seconds, 23.3%
Report:               6.9 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 25                  | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -13                
Correct output: 60                  | Program output: 71                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 27                 
Correct output: -49                 | Program output: 69                 
Correct output: -27                 | Program output: -10                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 91                 
Correct output: 15                  | Program output: 44                 
Correct output: 13                  | Program output: 37                 
Correct output: 13                  | Program output: 56                 
Correct output: 4                   | Program output: 28                 
Correct output: 5                   | Program output: 85                 
Correct output: 9                   | Program output: 10                 
Correct output: 18                  | Program output: 95                 
Correct output: 6                   | Program output: 28                 
Correct output: 21                  | Program output: 40                 
Correct output: 7                   | Program output: 85                 
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 98                 
Correct output: 4                   | Program output: 90                 
Correct output: 0                   | Program output: 69                 
Correct output: 34                  | Program output: 41                 
Correct output: 74                  | Program output: 85                 
Correct output: 15                  | Program output: 15                 
Correct output: 44                  | Program output: 59                 
Correct output: 0                   | Program output: 0                  
Correct output: -34                 | Program output: -21                
Correct output: -70                 | Program output: 86                 
Correct output: -61                 | Program output: 81                 
Correct output: 29                  | Program output: 73                 
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: -35                
Correct output: -74                 | Program output: -73                
Correct output: -86                 | Program output: 59                 
Correct output: -87                 | Program output: -21                
Correct output: -43                 | Program output: 13                 
Correct output: -50                 | Program output: -10                
Correct output: -53                 | Program output: 5                  
Correct output: -47                 | Program output: -40                
Correct output: -83                 | Program output: -57                
Correct output: -83                 | Program output: -53                
Correct output: -40                 | Program output: 35                 
Correct output: -94                 | Program output: -69                
Correct output: -27                 | Program output: 68                 
Correct output: -92                 | Program output: 42                 
Correct output: -39                 | Program output: 98                 
Correct output: -28                 | Program output: 93                 
Correct output: -58                 | Program output: 5                  
Correct output: -68                 | Program output: 45                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 19                 
Correct output: -39                 | Program output: 72                 
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: 16                 
Correct output: -100                | Program output: -80                
Correct output: -66                 | Program output: 87                 
Correct output: -75                 | Program output: 96                 
Correct output: -28                 | Program output: -28                
Correct output: -66                 | Program output: 44                 
Correct output: -17                 | Program output: -17                
Correct output: -92                 | Program output: -72                
Correct output: -42                 | Program output: -30                
Correct output: -16                 | Program output: -16                
Correct output: -45                 | Program output: 41                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: 79                 
Correct output: -36                 | Program output: -21                
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: 78                 
Correct output: -77                 | Program output: -33                
Correct output: -94                 | Program output: 38                 
Correct output: -41                 | Program output: 45                 
Correct output: -90                 | Program output: -78                
Correct output: -95                 | Program output: 36                 
Correct output: -89                 | Program output: 90                 
Correct output: -93                 | Program output: -93                
Correct output: -55                 | Program output: 18                 
Correct output: -86                 | Program output: 97                 
Correct output: -70                 | Program output: 78                 
Correct output: -41                 | Program output: 89                 
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -12                
Correct output: -46                 | Program output: -25                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_rot () (boolean_yankdup) (integer_inc) exec_do*while (exec_k_when_autoconstructing () () integer_sub exec_if () (boolean_dup_items integer_eq)) integer_swap boolean_swap exec_dup_items integer_min integer_yankdup integer_lte in4 exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1) boolean_dup_items) () exec_s_when_autoconstructing (in3 boolean_invert_first_then_and exec_empty exec_eq exec_do*while () boolean_yankdup print_integer exec_y () print_exec (integer_div in2 print_integer integer_add integer_mod in1 boolean_dup_times exec_dup_times (exec_yank exec_y (print_newline) in4) exec_rot (integer_dup_times exec_do*count () integer_sub boolean_and) () ())) () ())
Lexicase best errors: [1 0 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 74
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_rot () (boolean_yankdup) (integer_inc) exec_do*while (exec_k_when_autoconstructing () () integer_sub exec_if () (boolean_dup_items integer_eq)) integer_swap boolean_swap exec_dup_items integer_min integer_yankdup integer_lte in4 exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1) boolean_dup_items) () exec_s_when_autoconstructing (in3 boolean_invert_first_then_and exec_empty exec_eq exec_do*while () boolean_yankdup print_integer exec_y () print_exec (integer_div in2 print_integer integer_add integer_mod in1 boolean_dup_times exec_dup_times (exec_yank exec_y (print_newline) in4) exec_rot (integer_dup_times exec_do*count () integer_sub boolean_and) () ())) () ())
Zero cases best errors: [1 0 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 74
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (298 119 88 389 345 88 119 119 119 252)
Population mean number of elite cases: 1.94
Count of perfect (error zero) individuals by case: (298 119 88 389 345 88 119 119 119 252)
Population mean number of perfect (error zero) cases: 1.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth})
Best program: (exec_rot () (exec_s () (integer_inc) (exec_do*while (exec_k_when_autoconstructing () () integer_sub exec_if () (boolean_dup_items integer_eq)) integer_swap boolean_swap exec_dup_items) integer_min exec_dup_times () exec_dup_items) (integer_min integer_yankdup integer_lte) in4 exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1) boolean_dup_items) () exec_s_when_autoconstructing (in3 boolean_invert_first_then_and exec_empty exec_eq exec_do*while () boolean_yankdup print_integer exec_y () boolean_invert_first_then_and integer_div in2 print_integer exec_dup (integer_add integer_mod in1 integer_mult integer_pop exec_stackdepth)) () ())
Errors: [1 0 1 1 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 46
Size: 68
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 8.064
Median total errors in population: 8
Error averages by case: (0.702 0.881 0.912 0.611 0.655 0.912 0.881 0.881 0.881 0.748)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.591
Average program size in population (points): 63.533
Average percent parens in population: 0.276
Minimum age in population: 18.47265625
Maximum age in population: 22.869384765625
Average age in population: 20.98815356445312
Median age in population: 21.03839111328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 9876044
--- Timings ---
Current time: 1559583645077 milliseconds
Total Time:          47.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.3 seconds, 61.3%
Fitness Testing:     11.1 seconds, 23.3%
Report:               7.2 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 71                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: 69                 
Correct output: -27                 | Program output: -10                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 77                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 63                 
Correct output: 6                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 74                 
Correct output: 52                  | Program output: 61                 
Correct output: 41                  | Program output: 71                 
Correct output: 4                   | Program output: 76                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 51                 
Correct output: 74                  | Program output: 90                 
Correct output: 15                  | Program output: 62                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 76                 
Correct output: -34                 | Program output: 44                 
Correct output: -70                 | Program output: 78                 
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 36                 
Correct output: -69                 | Program output: 70                 
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -13                
Correct output: -87                 | Program output: 8                  
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 44                 
Correct output: -83                 | Program output: -79                
Correct output: -83                 | Program output: 93                 
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -71                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: 90                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -66                
Correct output: -30                 | Program output: -28                
Correct output: -100                | Program output: 71                 
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -57                
Correct output: -28                 | Program output: -10                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -8                 
Correct output: -92                 | Program output: 67                 
Correct output: -42                 | Program output: 44                 
Correct output: -16                 | Program output: 69                 
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -43                
Correct output: -55                 | Program output: 8                  
Correct output: -92                 | Program output: 3                  
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: 77                 
Correct output: -32                 | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -85                
Correct output: -89                 | Program output: -54                
Correct output: -93                 | Program output: -88                
Correct output: -55                 | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 90                 
Correct output: -41                 | Program output: 81                 
Correct output: -69                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: 49                 
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction 18} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_290} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_404} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction -84})
Lexicase best program: (integer_swap boolean_shove boolean_dup_times boolean_or integer_yank boolean_xor boolean_swap integer_empty exec_while (exec_yankdup in1 integer_gte) integer_rot boolean_invert_first_then_and exec_y (exec_y (boolean_yankdup boolean_pop print_integer boolean_stackdepth integer_stackdepth boolean_or integer_add exec_yank 18 boolean_not boolean_not boolean_flush exec_k_when_autoconstructing (exec_noop integer_rot exec_eq) (exec_k_when_autoconstructing (boolean_frominteger print_newline integer_add integer_gt exec_s (exec_do*range () boolean_invert_second_then_and) (boolean_flush exec_y_when_autoconstructing (integer_yank integer_dec integer_eq integer_min integer_dup exec_y (exec_flush integer_mod integer_fromboolean exec_pop () integer_lt integer_swap tag_exec_290 (exec_dup_items exec_dup_times () exec_swap (boolean_not tagged_404 integer_div) (integer_lte integer_inc -84))))) ()) ()))))
Lexicase best errors: [1 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 83
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction 18} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_290} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_404} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction -84})
Zero cases best program: (integer_swap boolean_shove boolean_dup_times boolean_or integer_yank boolean_xor boolean_swap integer_empty exec_while (exec_yankdup in1 integer_gte) integer_rot boolean_invert_first_then_and exec_y (exec_y (boolean_yankdup boolean_pop print_integer boolean_stackdepth integer_stackdepth boolean_or integer_add exec_yank 18 boolean_not boolean_not boolean_flush exec_k_when_autoconstructing (exec_noop integer_rot exec_eq) (exec_k_when_autoconstructing (boolean_frominteger print_newline integer_add integer_gt exec_s (exec_do*range () boolean_invert_second_then_and) (boolean_flush exec_y_when_autoconstructing (integer_yank integer_dec integer_eq integer_min integer_dup exec_y (exec_flush integer_mod integer_fromboolean exec_pop () integer_lt integer_swap tag_exec_290 (exec_dup_items exec_dup_times () exec_swap (boolean_not tagged_404 integer_div) (integer_lte integer_inc -84))))) ()) ()))))
Zero cases best errors: [1 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 83
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (192 190 185 186 198 190 190 196 185 185)
Population mean number of elite cases: 1.90
Count of perfect (error zero) individuals by case: (192 190 185 186 198 190 190 196 185 185)
Population mean number of perfect (error zero) cases: 1.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction tagged_540} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean})
Best program: (tagged_540 integer_swap boolean_swap exec_dup_items integer_min integer_yankdup integer_lte in4 exec_swap (exec_y_when_autoconstructing (integer_mod boolean_yank boolean_flush)) (boolean_dup_times exec_noop) integer_min integer_lte integer_eq integer_mult integer_dup_items boolean_pop in1 boolean_dup_items exec_s_when_autoconstructing (in3 boolean_invert_first_then_and exec_empty exec_eq boolean_invert_first_then_and integer_div in2 print_integer exec_empty) (exec_if (exec_yankdup print_boolean) ()) ())
Errors: [0 0 1 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 8.103
Median total errors in population: 8
Error averages by case: (0.808 0.81 0.815 0.814 0.802 0.81 0.81 0.804 0.815 0.815)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.097
Average program size in population (points): 62.027
Average percent parens in population: 0.283
Minimum age in population: 19.8642578125
Maximum age in population: 24.51873779296875
Average age in population: 22.52658209228516
Median age in population: 22.59365844726562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 10581265
--- Timings ---
Current time: 1559583648436 milliseconds
Total Time:          51.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.6 seconds, 61.4%
Fitness Testing:     11.9 seconds, 23.1%
Report:               7.9 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 97                 
Correct output: 13                  | Program output: 91                 
Correct output: 13                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 5                   | Program output: 79                 
Correct output: 9                   | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 44                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 75                 
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 20                 
Correct output: 44                  | Program output: 65                 
Correct output: 0                   | Program output: 43                 
Correct output: -34                 | Program output: 92                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -12                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -12                
Correct output: -62                 | Program output: -54                
Correct output: -74                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: 8                  
Correct output: -50                 | Program output: 59                 
Correct output: -53                 | Program output: 66                 
Correct output: -47                 | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 47                 
Correct output: -92                 | Program output: 23                 
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -8                 
Correct output: -58                 | Program output: 47                 
Correct output: -68                 | Program output: 58                 
Correct output: -99                 | Program output: -76                
Correct output: -92                 | Program output: -28                
Correct output: -39                 | Program output: 78                 
Correct output: -84                 | Program output: 11                 
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -8                 
Correct output: -66                 | Program output: 86                 
Correct output: -17                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 24                 
Correct output: -45                 | Program output: 10                 
Correct output: -45                 | Program output: -36                
Correct output: -55                 | Program output: 47                 
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: 35                 
Correct output: -50                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: 68                 
Correct output: -94                 | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: 41                 
Correct output: -55                 | Program output: 40                 
Correct output: -86                 | Program output: -10                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: 31                 
Correct output: -42                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: 86                 
Correct output: -41                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction tag_integer_288} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (integer_swap boolean_shove boolean_or integer_yank boolean_xor boolean_swap integer_empty exec_while (exec_yankdup integer_rot integer_max) exec_noop exec_rot () (integer_sub) (boolean_dup_times exec_noop) integer_min integer_lte integer_eq integer_mult tag_integer_288 boolean_pop in1 boolean_dup_items integer_div in2 print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ())
Lexicase best errors: [1 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 44
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction tag_integer_288} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (integer_swap boolean_shove boolean_or integer_yank boolean_xor boolean_swap integer_empty exec_while (exec_yankdup integer_rot integer_max) exec_noop exec_rot () (integer_sub) (boolean_dup_times exec_noop) integer_min integer_lte integer_eq integer_mult tag_integer_288 boolean_pop in1 boolean_dup_items integer_div in2 print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ())
Zero cases best errors: [1 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 44
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (316 381 317 381 180 6 381 885 317 6)
Population mean number of elite cases: 3.17
Count of perfect (error zero) individuals by case: (316 381 317 381 180 6 381 885 317 6)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction 18} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot})
Best program: (integer_add integer_max boolean_yankdup integer_inc exec_noop exec_noop integer_add boolean_yankdup boolean_or in1 integer_gt integer_rot boolean_invert_first_then_and exec_y (exec_y (boolean_yankdup boolean_pop print_integer boolean_stackdepth integer_stackdepth boolean_or integer_add exec_yank 18 boolean_not boolean_invert_first_then_and integer_pop)) exec_s_when_autoconstructing (in3 integer_empty exec_do*count (integer_min) integer_lt exec_empty boolean_dup integer_mod boolean_eq integer_eq integer_div exec_k_when_autoconstructing () (integer_div exec_rot () () ())) () ())
Errors: [0 1 0 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 42
Size: 54
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.83
Median total errors in population: 6
Error averages by case: (0.684 0.619 0.683 0.619 0.82 0.994 0.619 0.115 0.683 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.86
Average program size in population (points): 60.245
Average percent parens in population: 0.264
Minimum age in population: 21.01171875
Maximum age in population: 26.06167602539062
Average age in population: 23.94391693115234
Median age in population: 24.025634765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 11220854
--- Timings ---
Current time: 1559583652074 milliseconds
Total Time:          54.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.6 seconds, 61.8%
Fitness Testing:     12.5 seconds, 23.0%
Report:               8.2 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 27                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 44                 
Correct output: 13                  | Program output: 37                 
Correct output: 13                  | Program output: 56                 
Correct output: 4                   | Program output: 17                 
Correct output: 5                   | Program output: 79                 
Correct output: 9                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 40                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 44                  | Program output: 59                 
Correct output: 0                   | Program output: 0                  
Correct output: -34                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -12                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: -54                
Correct output: -74                 | Program output: -73                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: 8                  
Correct output: -50                 | Program output: -10                
Correct output: -53                 | Program output: 5                  
Correct output: -47                 | Program output: -40                
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 47                 
Correct output: -92                 | Program output: 23                 
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -8                 
Correct output: -58                 | Program output: 5                  
Correct output: -68                 | Program output: 45                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -28                
Correct output: -39                 | Program output: 72                 
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -28                
Correct output: -66                 | Program output: 44                 
Correct output: -17                 | Program output: -17                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -45                 | Program output: 10                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: -21                
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: -33                
Correct output: -94                 | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -55                 | Program output: 18                 
Correct output: -86                 | Program output: -10                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (exec_rot (boolean_yankdup) (integer_inc) () exec_do*while (exec_k_when_autoconstructing () () integer_sub exec_if () (boolean_dup_items integer_eq) print_boolean boolean_swap exec_dup_items) integer_min integer_yankdup integer_lte in4 exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1)) () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Lexicase best errors: [1 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (exec_rot (boolean_yankdup) (integer_inc) () exec_do*while (exec_k_when_autoconstructing () () integer_sub exec_if () (boolean_dup_items integer_eq) print_boolean boolean_swap exec_dup_items) integer_min integer_yankdup integer_lte in4 exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1)) () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Zero cases best errors: [1 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (113 473 178 299 296 113 296 296 885 296)
Population mean number of elite cases: 3.24
Count of perfect (error zero) individuals by case: (113 473 178 299 296 113 296 296 885 296)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (exec_rot (boolean_yankdup) (integer_inc) () exec_do*while (exec_k_when_autoconstructing () () integer_sub exec_if () (boolean_dup_items integer_eq) print_boolean boolean_swap exec_dup_items) integer_min integer_yankdup integer_lte in4 exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1)) () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Errors: [1 0 0 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 54
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.755
Median total errors in population: 7
Error averages by case: (0.887 0.527 0.822 0.701 0.704 0.887 0.704 0.704 0.115 0.704)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.12
Average program size in population (points): 57.657
Average percent parens in population: 0.262
Minimum age in population: 22.37548828125
Maximum age in population: 27.47447204589844
Average age in population: 25.42417428588867
Median age in population: 25.53073120117188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 11880909
--- Timings ---
Current time: 1559583654994 milliseconds
Total Time:          58.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.6 seconds, 61.4%
Fitness Testing:     13.1 seconds, 22.7%
Report:               9.1 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 27                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 44                 
Correct output: 13                  | Program output: 37                 
Correct output: 13                  | Program output: 56                 
Correct output: 4                   | Program output: 17                 
Correct output: 5                   | Program output: 79                 
Correct output: 9                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 40                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 44                  | Program output: 59                 
Correct output: 0                   | Program output: 0                  
Correct output: -34                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -12                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: -54                
Correct output: -74                 | Program output: -73                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: 8                  
Correct output: -50                 | Program output: -10                
Correct output: -53                 | Program output: 5                  
Correct output: -47                 | Program output: -40                
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 47                 
Correct output: -92                 | Program output: 23                 
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -8                 
Correct output: -58                 | Program output: 5                  
Correct output: -68                 | Program output: 45                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -28                
Correct output: -39                 | Program output: 72                 
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -28                
Correct output: -66                 | Program output: 44                 
Correct output: -17                 | Program output: -17                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -45                 | Program output: 10                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: -21                
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: -33                
Correct output: -94                 | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -55                 | Program output: 18                 
Correct output: -86                 | Program output: -10                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (exec_rot (boolean_yankdup) (integer_inc) () exec_do*while (exec_k_when_autoconstructing () () integer_sub exec_if () (boolean_dup_items integer_eq) print_boolean boolean_swap exec_dup_items) integer_min integer_yankdup integer_lte in4 exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1)) () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Lexicase best errors: [1 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (exec_rot (boolean_yankdup) (integer_inc) () exec_do*while (exec_k_when_autoconstructing () () integer_sub exec_if () (boolean_dup_items integer_eq) print_boolean boolean_swap exec_dup_items) integer_min integer_yankdup integer_lte in4 exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1)) () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Zero cases best errors: [1 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (106 616 607 606 100 798 731 614 100 616)
Population mean number of elite cases: 4.89
Count of perfect (error zero) individuals by case: (106 616 607 606 100 798 731 614 100 616)
Population mean number of perfect (error zero) cases: 4.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (exec_rot (boolean_yankdup) (integer_inc) () exec_do*while (exec_k_when_autoconstructing () () integer_sub exec_if () (boolean_dup_items integer_eq) print_boolean boolean_swap exec_dup_items) integer_min integer_yankdup integer_lte in4 exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1)) () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Errors: [1 0 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 54
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.106
Median total errors in population: 3
Error averages by case: (0.894 0.384 0.393 0.394 0.9 0.202 0.269 0.386 0.9 0.384)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.395
Average program size in population (points): 58.083
Average percent parens in population: 0.321
Minimum age in population: 23.925048828125
Maximum age in population: 29.04508972167969
Average age in population: 28.04524377441406
Median age in population: 28.04508972167969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 388
Genome diversity (% unique genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 392
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 12313169
--- Timings ---
Current time: 1559583658164 milliseconds
Total Time:          61.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.0 seconds, 62.2%
Fitness Testing:     13.6 seconds, 22.2%
Report:               9.4 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 15                 
Correct output: 13                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 17                 
Correct output: 5                   | Program output: 79                 
Correct output: 9                   | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 42                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 75                 
Correct output: 34                  | Program output: 34                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 20                 
Correct output: 44                  | Program output: 58                 
Correct output: 0                   | Program output: 43                 
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -12                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -12                
Correct output: -62                 | Program output: -55                
Correct output: -74                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -26                
Correct output: -50                 | Program output: 13                 
Correct output: -53                 | Program output: -46                
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: 23                 
Correct output: -39                 | Program output: -39                
Correct output: -28                 | Program output: -8                 
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -19                
Correct output: -99                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: -39                
Correct output: -84                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -8                 
Correct output: -66                 | Program output: 86                 
Correct output: -17                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 24                 
Correct output: -45                 | Program output: 10                 
Correct output: -45                 | Program output: -36                
Correct output: -55                 | Program output: -14                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -12                
Correct output: -50                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: 27                 
Correct output: -94                 | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: 11                 
Correct output: -42                 | Program output: -24                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: 76                 
Correct output: -41                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (integer_swap boolean_shove boolean_dup_times boolean_or in2 boolean_xor exec_y_when_autoconstructing (integer_mod boolean_yank boolean_flush) boolean_dup_times exec_noop integer_min integer_lte integer_eq integer_mult integer_dup_items boolean_pop integer_dup boolean_dup_items exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Lexicase best errors: [1 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (integer_swap boolean_shove boolean_dup_times boolean_or in2 boolean_xor exec_y_when_autoconstructing (integer_mod boolean_yank boolean_flush) boolean_dup_times exec_noop integer_min integer_lte integer_eq integer_mult integer_dup_items boolean_pop integer_dup boolean_dup_items exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Zero cases best errors: [1 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (511 894 750 1 1 894 221 1 511 221)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (511 894 750 1 1 894 221 1 511 221)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (integer_swap boolean_shove boolean_dup_times boolean_or in2 boolean_xor exec_y_when_autoconstructing (integer_mod boolean_yank boolean_flush) boolean_dup_times exec_noop integer_min integer_lte integer_eq integer_mult integer_dup_items boolean_pop integer_dup boolean_dup_items exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Errors: [1 0 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 43
Size: 54
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 5.995
Median total errors in population: 5
Error averages by case: (0.489 0.106 0.25 0.999 0.999 0.106 0.779 0.999 0.489 0.779)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.046
Average program size in population (points): 58.304
Average percent parens in population: 0.313
Minimum age in population: 26.46954345703125
Maximum age in population: 31.04508972167969
Average age in population: 29.70192119979858
Median age in population: 29.88438606262207
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 227
Genome diversity (% unique genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 229
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 12673686
--- Timings ---
Current time: 1559583660701 milliseconds
Total Time:          63.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.9 seconds, 62.7%
Fitness Testing:     13.9 seconds, 21.9%
Report:               9.7 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 15                 
Correct output: 13                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 17                 
Correct output: 5                   | Program output: 79                 
Correct output: 9                   | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 42                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 75                 
Correct output: 34                  | Program output: 34                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 20                 
Correct output: 44                  | Program output: 58                 
Correct output: 0                   | Program output: 43                 
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -12                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -12                
Correct output: -62                 | Program output: -55                
Correct output: -74                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -26                
Correct output: -50                 | Program output: 13                 
Correct output: -53                 | Program output: -46                
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: 23                 
Correct output: -39                 | Program output: -39                
Correct output: -28                 | Program output: -8                 
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -19                
Correct output: -99                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: -39                
Correct output: -84                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -8                 
Correct output: -66                 | Program output: 86                 
Correct output: -17                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 24                 
Correct output: -45                 | Program output: 10                 
Correct output: -45                 | Program output: -36                
Correct output: -55                 | Program output: -14                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -12                
Correct output: -50                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: 27                 
Correct output: -94                 | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: 11                 
Correct output: -42                 | Program output: -24                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: 76                 
Correct output: -41                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (integer_swap boolean_shove boolean_dup_times integer_fromboolean in2 boolean_xor exec_y_when_autoconstructing (integer_mod boolean_yank boolean_flush) boolean_dup_times exec_noop integer_min integer_lte integer_eq integer_mult integer_dup_items boolean_pop integer_dup boolean_dup_items exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Lexicase best errors: [0 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (integer_swap boolean_shove boolean_dup_times integer_fromboolean in2 boolean_xor exec_y_when_autoconstructing (integer_mod boolean_yank boolean_flush) boolean_dup_times exec_noop integer_min integer_lte integer_eq integer_mult integer_dup_items boolean_pop integer_dup boolean_dup_items exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Zero cases best errors: [0 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (620 256 277 609 617 340 276 609 343 343)
Population mean number of elite cases: 4.29
Count of perfect (error zero) individuals by case: (620 256 277 609 617 340 276 609 343 343)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (integer_swap boolean_shove boolean_dup_times boolean_or in2 boolean_xor exec_y_when_autoconstructing (integer_mod boolean_yank boolean_flush) boolean_dup_times exec_noop integer_min integer_lte integer_eq integer_mult integer_dup_items boolean_pop integer_dup boolean_dup_items exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div integer_div boolean_pop in1) () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Errors: [0 1 1 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 44
Size: 55
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.71
Median total errors in population: 5
Error averages by case: (0.38 0.744 0.723 0.391 0.383 0.66 0.724 0.391 0.657 0.657)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.422
Average program size in population (points): 56.091
Average percent parens in population: 0.260
Minimum age in population: 27.98506927490234
Maximum age in population: 32.93281745910645
Average age in population: 30.89197954368591
Median age in population: 31.03501796722412
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 196
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 13032013
--- Timings ---
Current time: 1559583663619 milliseconds
Total Time:          66.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.2 seconds, 63.4%
Fitness Testing:     14.3 seconds, 21.4%
Report:              10.0 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 20                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 43                 
Correct output: -34                 | Program output: 44                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -12                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -66                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -10                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 24                 
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -43                
Correct output: -55                 | Program output: 8                  
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: -88                
Correct output: -55                 | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 3, :instruction in1} {:close 3, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (exec_rot (integer_swap boolean_shove boolean_dup_times boolean_or in2) (boolean_xor exec_do*range (integer_mod boolean_yank boolean_flush)) (boolean_dup_times exec_noop) in1 integer_min exec_s_when_autoconstructing (integer_div) (integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) ())
Lexicase best errors: [1 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 3, :instruction in1} {:close 3, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (exec_rot (integer_swap boolean_shove boolean_dup_times boolean_or in2) (boolean_xor exec_do*range (integer_mod boolean_yank boolean_flush)) (boolean_dup_times exec_noop) in1 integer_min exec_s_when_autoconstructing (integer_div) (integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) ())
Zero cases best errors: [1 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (484 144 798 127 483 658 128 779 127 917)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (484 144 798 127 483 658 128 779 127 917)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (exec_rot (exec_k_when_autoconstructing () (integer_swap boolean_shove boolean_dup_times boolean_or in2) integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) () () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Errors: [1 1 0 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 40
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 5.355
Median total errors in population: 5
Error averages by case: (0.516 0.856 0.202 0.873 0.517 0.342 0.872 0.221 0.873 0.083)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.528
Average program size in population (points): 55.213
Average percent parens in population: 0.246
Minimum age in population: 29.5545654296875
Maximum age in population: 33.97831726074219
Average age in population: 32.43716079521179
Median age in population: 32.45630359649658
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 181
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 13380210
--- Timings ---
Current time: 1559583665935 milliseconds
Total Time:          69.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.0 seconds, 63.8%
Fitness Testing:     14.6 seconds, 21.1%
Report:              10.3 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 20                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 43                 
Correct output: -34                 | Program output: 44                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -12                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -66                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -10                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 24                 
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -43                
Correct output: -55                 | Program output: 8                  
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: -88                
Correct output: -55                 | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 3, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (integer_swap boolean_shove boolean_dup_times boolean_or in2 boolean_xor exec_y_when_autoconstructing (integer_mod integer_mod tag_boolean_527 boolean_pop in1) integer_min exec_s_when_autoconstructing (integer_div) (integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 3, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (integer_swap boolean_shove boolean_dup_times boolean_or in2 boolean_xor exec_y_when_autoconstructing (integer_mod integer_mod tag_boolean_527 boolean_pop in1) integer_min exec_s_when_autoconstructing (integer_div) (integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (148 922 428 441 424 900 899 424 294 422)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (148 922 428 441 424 900 899 424 294 422)
Population mean number of perfect (error zero) cases: 5.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 3, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times boolean_or in2) (boolean_xor exec_y_when_autoconstructing (integer_mod boolean_yank boolean_flush)) boolean_dup_times exec_noop integer_min integer_lte boolean_and exec_swap (exec_y_when_autoconstructing (integer_mod tag_boolean_527 boolean_pop in1)) () integer_min exec_s_when_autoconstructing (integer_div) (integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) ())
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 37
Size: 51
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 4.698
Median total errors in population: 6
Error averages by case: (0.852 0.078 0.572 0.559 0.576 0.1 0.101 0.576 0.706 0.578)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.36
Average program size in population (points): 51.046
Average percent parens in population: 0.249
Minimum age in population: 31.42790412902832
Maximum age in population: 35.59531831741333
Average age in population: 34.11895591592789
Median age in population: 34.18580627441406
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 13697161
--- Timings ---
Current time: 1559583668274 milliseconds
Total Time:          71.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.8 seconds, 64.2%
Fitness Testing:     14.9 seconds, 20.8%
Report:              10.5 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 55                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 20                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 43                 
Correct output: -34                 | Program output: 44                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -12                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -66                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -10                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 24                 
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -43                
Correct output: -55                 | Program output: 8                  
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: -88                
Correct output: -55                 | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_60} {:close 0, :instruction integer_min})
Lexicase best program: (integer_swap boolean_shove boolean_dup_times boolean_or in2 boolean_xor exec_y_when_autoconstructing (integer_mod boolean_yank boolean_flush) boolean_dup_times exec_noop integer_min integer_lte integer_eq integer_mult in4 boolean_pop integer_dup boolean_dup_items exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup exec_dup (exec_eq boolean_eq in1 integer_mult tag_exec_60 (integer_min))) () ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 53
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_60} {:close 0, :instruction integer_min})
Zero cases best program: (integer_swap boolean_shove boolean_dup_times boolean_or in2 boolean_xor exec_y_when_autoconstructing (integer_mod boolean_yank boolean_flush) boolean_dup_times exec_noop integer_min integer_lte integer_eq integer_mult in4 boolean_pop integer_dup boolean_dup_items exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup exec_dup (exec_eq boolean_eq in1 integer_mult tag_exec_60 (integer_min))) () ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 53
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (892 910 892 129 930 599 599 599 882 898)
Population mean number of elite cases: 7.33
Count of perfect (error zero) individuals by case: (892 910 892 129 930 599 599 599 882 898)
Population mean number of perfect (error zero) cases: 7.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 3, :instruction in1} {:close 3, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (exec_rot (integer_swap boolean_shove boolean_dup_times boolean_or in2) (boolean_xor exec_do*range (integer_mod boolean_yank boolean_flush)) (boolean_dup_times exec_noop) in1 integer_min exec_s_when_autoconstructing (integer_div) (integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) ())
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 28
Size: 39
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 2.67
Median total errors in population: 1
Error averages by case: (0.108 0.09 0.108 0.871 0.07 0.401 0.401 0.401 0.118 0.102)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.823
Average program size in population (points): 49.491
Average percent parens in population: 0.256
Minimum age in population: 33.09728622436523
Maximum age in population: 37.36683392524719
Average age in population: 35.64720031619072
Median age in population: 35.6882381439209
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.01
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 14000986
--- Timings ---
Current time: 1559583670546 milliseconds
Total Time:          73.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.5 seconds, 64.6%
Fitness Testing:     15.1 seconds, 20.6%
Report:              10.8 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 235
Test mean error for best: 0.23500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 27                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -34                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: -40                
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -28                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -17                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -55                 | Program output: 18                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 3, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (exec_rot (exec_k_when_autoconstructing () (integer_swap boolean_shove boolean_dup_times boolean_or in2) integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div integer_mult in4 boolean_pop integer_dup) (boolean_dup_items) (exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) ()) integer_min exec_s_when_autoconstructing (integer_div integer_add in1) () () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 63
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 3, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (exec_rot (exec_k_when_autoconstructing () (integer_swap boolean_shove boolean_dup_times boolean_or in2) integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div integer_mult in4 boolean_pop integer_dup) (boolean_dup_items) (exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) ()) integer_min exec_s_when_autoconstructing (integer_div integer_add in1) () () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 63
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (664 664 664 279 2 892 899 278 890 779)
Population mean number of elite cases: 6.01
Count of perfect (error zero) individuals by case: (664 664 664 279 2 892 899 278 890 779)
Population mean number of perfect (error zero) cases: 6.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in1)) () integer_min boolean_empty integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ())
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 32
Size: 42
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 3.989
Median total errors in population: 3
Error averages by case: (0.336 0.336 0.336 0.721 0.998 0.108 0.101 0.722 0.11 0.221)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.622
Average program size in population (points): 49.762
Average percent parens in population: 0.263
Minimum age in population: 34.71997880935669
Maximum age in population: 38.82714676856995
Average age in population: 37.15669487690926
Median age in population: 37.21291542053223
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.01
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 14314838
--- Timings ---
Current time: 1559583672977 milliseconds
Total Time:          76.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.4 seconds, 65.0%
Fitness Testing:     15.4 seconds, 20.3%
Report:              11.1 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 229
Test mean error for best: 0.22900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 27                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -34                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: -40                
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -28                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -17                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -55                 | Program output: 18                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (exec_rot (exec_k_when_autoconstructing () (integer_swap boolean_shove boolean_dup_times boolean_or in2) integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div integer_mult in4 boolean_pop integer_dup) (boolean_dup_items) (exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) ()) integer_min exec_s_when_autoconstructing (integer_div boolean_pop in1) () () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup exec_dup (exec_eq boolean_eq in1 integer_mult in2 integer_min)) () ())
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 61
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (exec_rot (exec_k_when_autoconstructing () (integer_swap boolean_shove boolean_dup_times boolean_or in2) integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div integer_mult in4 boolean_pop integer_dup) (boolean_dup_items) (exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) ()) integer_min exec_s_when_autoconstructing (integer_div boolean_pop in1) () () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup exec_dup (exec_eq boolean_eq in1 integer_mult in2 integer_min)) () ())
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 61
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (911 889 655 642 139 881 893 139 654 890)
Population mean number of elite cases: 6.69
Count of perfect (error zero) individuals by case: (911 889 655 642 139 881 893 139 654 890)
Population mean number of perfect (error zero) cases: 6.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (exec_rot (exec_k_when_autoconstructing () (integer_swap boolean_shove boolean_dup_times boolean_or in2) integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div integer_mult in4 boolean_pop integer_dup) (boolean_dup_items) (exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) ()) integer_min exec_s_when_autoconstructing (integer_div boolean_pop in1) () () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup exec_dup (exec_eq boolean_eq in1 integer_mult in2 integer_min)) () ())
Errors: [0 0 0 0 1 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 45
Size: 61
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 3.307
Median total errors in population: 2
Error averages by case: (0.089 0.111 0.345 0.358 0.861 0.119 0.107 0.861 0.346 0.11)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.683
Average program size in population (points): 55.009
Average percent parens in population: 0.258
Minimum age in population: 37.71472835540771
Maximum age in population: 39.87998032569885
Average age in population: 38.74982857501507
Median age in population: 38.87998032569885
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 14679805
--- Timings ---
Current time: 1559583675533 milliseconds
Total Time:          78.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.2 seconds, 65.2%
Fitness Testing:     15.8 seconds, 20.1%
Report:              11.4 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 229
Test mean error for best: 0.22900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 27                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -34                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: -40                
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -28                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -17                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -55                 | Program output: 18                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction tagged_481} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (exec_rot (tagged_481) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in1)) () integer_min boolean_empty integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ())
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction tagged_481} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (exec_rot (tagged_481) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in1)) () integer_min boolean_empty integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ())
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 462 464 875 326 881 459 459 461 880)
Population mean number of elite cases: 5.59
Count of perfect (error zero) individuals by case: (325 462 464 875 326 881 459 459 461 880)
Population mean number of perfect (error zero) cases: 5.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 3, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (exec_rot (exec_k_when_autoconstructing () (integer_swap boolean_shove boolean_dup_times boolean_or in2) integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div integer_mult in4 boolean_pop integer_dup) (boolean_dup_items) (exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) ()) integer_min exec_s_when_autoconstructing (integer_div integer_add in1) () () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 45
Size: 63
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 4.408
Median total errors in population: 5
Error averages by case: (0.675 0.538 0.536 0.125 0.674 0.119 0.541 0.541 0.539 0.12)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.468
Average program size in population (points): 54.225
Average percent parens in population: 0.251
Minimum age in population: 38.71472835540771
Maximum age in population: 41.87998032569885
Average age in population: 40.21337204402685
Median age in population: 40.29735434055328
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.009
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 15046384
--- Timings ---
Current time: 1559583678005 milliseconds
Total Time:          80.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.0 seconds, 65.4%
Fitness Testing:     16.2 seconds, 20.0%
Report:              11.7 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 229
Test mean error for best: 0.22900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 99                 
Correct output: 27                  | Program output: 27                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 68                 
Correct output: 15                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 36                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -34                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: -40                
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: -24                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -78                
Correct output: -39                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -28                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -17                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -55                 | Program output: 18                 
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 3, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (exec_rot (exec_k_when_autoconstructing () (integer_swap boolean_shove boolean_dup_times boolean_or in2) integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div integer_mult in4 boolean_pop integer_dup) (boolean_dup_items) (exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and boolean_xor boolean_pop in1) ()) integer_min exec_s_when_autoconstructing (integer_div integer_add in1) () () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Lexicase best errors: [1 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 63
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 3, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (exec_rot (exec_k_when_autoconstructing () (integer_swap boolean_shove boolean_dup_times boolean_or in2) integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div integer_mult in4 boolean_pop integer_dup) (boolean_dup_items) (exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and boolean_xor boolean_pop in1) ()) integer_min exec_s_when_autoconstructing (integer_div integer_add in1) () () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty exec_if (exec_dup (integer_add boolean_eq in1 integer_mult in2 integer_min)) ()) () ())
Zero cases best errors: [1 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 63
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 543 889 239 541 889 534 540 538 544)
Population mean number of elite cases: 5.50
Count of perfect (error zero) individuals by case: (239 543 889 239 541 889 534 540 538 544)
Population mean number of perfect (error zero) cases: 5.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (exec_rot (exec_k_when_autoconstructing () (integer_swap boolean_shove boolean_dup_times boolean_or in2) integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div integer_mult in4 boolean_pop integer_dup) (boolean_dup_items) (exec_s_when_autoconstructing () (in3 integer_eq exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1) ()) integer_min exec_s_when_autoconstructing (integer_div boolean_pop in1) () () integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup exec_dup (exec_eq boolean_eq in1 integer_mult in2 integer_min)) () ())
Errors: [1 0 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 45
Size: 61
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 4.504
Median total errors in population: 7/2
Error averages by case: (0.761 0.457 0.111 0.761 0.459 0.111 0.466 0.46 0.462 0.456)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.562
Average program size in population (points): 54.493
Average percent parens in population: 0.253
Minimum age in population: 39.71472835540771
Maximum age in population: 43.4042826294899
Average age in population: 41.69542029136419
Median age in population: 41.7687618881464
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 15410320
--- Timings ---
Current time: 1559583680503 milliseconds
Total Time:          83.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.7 seconds, 65.6%
Fitness Testing:     16.5 seconds, 19.8%
Report:              12.1 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 15
Test mean error for best: 0.01500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 27                  | Program output: 27                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 15                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: -39                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -28                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -17                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in3} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in3} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (907 908 699 491 497 699 479 484 496 690)
Population mean number of elite cases: 6.35
Count of perfect (error zero) individuals by case: (907 908 699 491 497 699 479 484 496 690)
Population mean number of perfect (error zero) cases: 6.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_527} {:close 0, :instruction boolean_pop} {:close 3, :instruction in3} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 3, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 40
Size: 50
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3.65
Median total errors in population: 4
Error averages by case: (0.093 0.092 0.301 0.509 0.503 0.301 0.521 0.516 0.504 0.31)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.306
Average program size in population (points): 57.207
Average percent parens in population: 0.259
Minimum age in population: 40.80777597427368
Maximum age in population: 44.8619637042284
Average age in population: 43.3386011980325
Median age in population: 43.27715331315994
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 215
Genome diversity (% unique genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 228
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.011
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 15775755
--- Timings ---
Current time: 1559583682938 milliseconds
Total Time:          85.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.5 seconds, 65.8%
Fitness Testing:     16.8 seconds, 19.6%
Report:              12.5 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 28
Successful program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 50


Auto-simplifying with starting size: 50
step: 0
program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 500
program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 1000
program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 1500
program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 2000
program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 2500
program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 3000
program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 3500
program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 4000
program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 4500
program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 5000
program: (exec_rot (boolean_yankdup) (integer_swap boolean_shove boolean_dup_times in4 in2) (integer_flush exec_noop) integer_min integer_lte in4 exec_swap (exec_y_when_autoconstructing (exec_yank tag_boolean_527 boolean_pop in3)) () integer_min boolean_empty exec_empty exec_eq boolean_invert_first_then_and integer_div boolean_pop in1 integer_min exec_s_when_autoconstructing (integer_div integer_add print_integer exec_empty integer_yankdup boolean_frominteger exec_eq boolean_eq in1 integer_mult in2 integer_min) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 15
Test mean error for best: 0.01500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 27                  | Program output: 27                 
Correct output: -49                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: 32                  | Program output: 32                 
Correct output: -15                 | Program output: -15                
Correct output: 66                  | Program output: 66                 
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 15                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 29                 
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -83                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: -39                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -39                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -75                
Correct output: -28                 | Program output: -28                
Correct output: -66                 | Program output: -66                
Correct output: -17                 | Program output: -17                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -42                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
;;******************************
